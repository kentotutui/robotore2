
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012490  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000980  08012620  08012620  00022620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012fa0  08012fa0  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  08012fa0  08012fa0  00022fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012fa8  08012fa8  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012fa8  08012fa8  00022fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012fac  08012fac  00022fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08012fb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001cef0  20000218  080131c8  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001d108  080131c8  0003d108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   000232db  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000498b  00000000  00000000  00053523  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a30  00000000  00000000  00057eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001840  00000000  00000000  000598e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024a8a  00000000  00000000  0005b120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00017566  00000000  00000000  0007fbaa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb7af  00000000  00000000  00097110  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001628bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008358  00000000  00000000  0016293c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012608 	.word	0x08012608

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08012608 	.word	0x08012608

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static uint16_t i_clear_flag;
static float Angle_diff;

static float Angle_control_term;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 8000, ki = 80000, kd = 0.0;
 8000f8e:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b48      	ldr	r3, [pc, #288]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc73 	bl	800188c <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]
	float variable_Angle = getOutput_angularvelocity();
 8000faa:	f003 fa61 	bl	8004470 <getOutput_angularvelocity>
 8000fae:	ed87 0a02 	vstr	s0, [r7, #8]
	//float variable_Angle = 0;

	if(Angle_control_enable_flag == 1){
 8000fb2:	4b41      	ldr	r3, [pc, #260]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d16f      	bne.n	800109a <calculateAngleControlFlip+0x112>
		if(i_clear_flag == 1){
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d106      	bne.n	8000fd0 <calculateAngleControlFlip+0x48>
			i = 0;
 8000fc2:	4b3f      	ldr	r3, [pc, #252]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fca:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	801a      	strh	r2, [r3, #0]
		}

		diff = variable_Angle - current_Angle;
 8000fd0:	ed97 7a02 	vldr	s14, [r7, #8]
 8000fd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fdc:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fe0:	4a38      	ldr	r2, [pc, #224]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fea:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ff2:	edc7 7a01 	vstr	s15, [r7, #4]
		i += ki * diff * DELTA_T; //I制御
 8000ff6:	4b32      	ldr	r3, [pc, #200]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff faa4 	bl	8000548 <__aeabi_f2d>
 8001000:	4604      	mov	r4, r0
 8001002:	460d      	mov	r5, r1
 8001004:	ed97 7a06 	vldr	s14, [r7, #24]
 8001008:	edd7 7a04 	vldr	s15, [r7, #16]
 800100c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001010:	ee17 0a90 	vmov	r0, s15
 8001014:	f7ff fa98 	bl	8000548 <__aeabi_f2d>
 8001018:	a323      	add	r3, pc, #140	; (adr r3, 80010a8 <calculateAngleControlFlip+0x120>)
 800101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101e:	f7ff faeb 	bl	80005f8 <__aeabi_dmul>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4620      	mov	r0, r4
 8001028:	4629      	mov	r1, r5
 800102a:	f7ff f92f 	bl	800028c <__adddf3>
 800102e:	4603      	mov	r3, r0
 8001030:	460c      	mov	r4, r1
 8001032:	4618      	mov	r0, r3
 8001034:	4621      	mov	r1, r4
 8001036:	f7ff fdd7 	bl	8000be8 <__aeabi_d2f>
 800103a:	4602      	mov	r2, r0
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <calculateAngleControlFlip+0x140>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	ed97 7a04 	vldr	s14, [r7, #16]
 800104a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001056:	ee17 0a90 	vmov	r0, s15
 800105a:	f7ff fa75 	bl	8000548 <__aeabi_f2d>
 800105e:	a312      	add	r3, pc, #72	; (adr r3, 80010a8 <calculateAngleControlFlip+0x120>)
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f7ff fbf2 	bl	800084c <__aeabi_ddiv>
 8001068:	4603      	mov	r3, r0
 800106a:	460c      	mov	r4, r1
 800106c:	4618      	mov	r0, r3
 800106e:	4621      	mov	r1, r4
 8001070:	f7ff fdba 	bl	8000be8 <__aeabi_d2f>
 8001074:	4603      	mov	r3, r0
 8001076:	603b      	str	r3, [r7, #0]

		Angle_control_term = p + i + d;
 8001078:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800107a:	ed93 7a00 	vldr	s14, [r3]
 800107e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001082:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001086:	edd7 7a00 	vldr	s15, [r7]
 800108a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <calculateAngleControlFlip+0x144>)
 8001090:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001094:	4a0c      	ldr	r2, [pc, #48]	; (80010c8 <calculateAngleControlFlip+0x140>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6013      	str	r3, [r2, #0]
	}
}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bdb0      	pop	{r4, r5, r7, pc}
 80010a2:	bf00      	nop
 80010a4:	f3af 8000 	nop.w
 80010a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80010ac:	3f50624d 	.word	0x3f50624d
 80010b0:	45fa0000 	.word	0x45fa0000
 80010b4:	479c4000 	.word	0x479c4000
 80010b8:	20000234 	.word	0x20000234
 80010bc:	20000236 	.word	0x20000236
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000238 	.word	0x20000238
 80010c8:	20000244 	.word	0x20000244
 80010cc:	2000023c 	.word	0x2000023c

080010d0 <getAngleControlTerm>:

float getAngleControlTerm(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	return Angle_control_term;
 80010d4:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <getAngleControlTerm+0x18>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	ee07 3a90 	vmov	s15, r3
}
 80010dc:	eeb0 0a67 	vmov.f32	s0, s15
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	2000023c 	.word	0x2000023c

080010ec <startAngleControl>:

void startAngleControl(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
	Angle_control_enable_flag = 1;
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <startAngleControl+0x1c>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	801a      	strh	r2, [r3, #0]
	i_clear_flag = 1;
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <startAngleControl+0x20>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	801a      	strh	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000234 	.word	0x20000234
 800110c:	20000236 	.word	0x20000236

08001110 <stopAngleControl>:

void stopAngleControl(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
	Angle_control_enable_flag = 0;
 8001114:	4b03      	ldr	r3, [pc, #12]	; (8001124 <stopAngleControl+0x14>)
 8001116:	2200      	movs	r2, #0
 8001118:	801a      	strh	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20000234 	.word	0x20000234

08001128 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 800112c:	213c      	movs	r1, #60	; 0x3c
 800112e:	4808      	ldr	r0, [pc, #32]	; (8001150 <initEncoder+0x28>)
 8001130:	f009 fcae 	bl	800aa90 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 8001134:	213c      	movs	r1, #60	; 0x3c
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <initEncoder+0x2c>)
 8001138:	f009 fcaa 	bl	800aa90 <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <initEncoder+0x30>)
 800113e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <initEncoder+0x34>)
 8001146:	f242 7210 	movw	r2, #10000	; 0x2710
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}
 8001150:	2001ccc0 	.word	0x2001ccc0
 8001154:	2001cc80 	.word	0x2001cc80
 8001158:	40000400 	.word	0x40000400
 800115c:	40000800 	.word	0x40000800

08001160 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001160:	b598      	push	{r3, r4, r7, lr}
 8001162:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001164:	4b5c      	ldr	r3, [pc, #368]	; (80012d8 <updateEncoderCnt+0x178>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	b29b      	uxth	r3, r3
 800116a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800116e:	3b10      	subs	r3, #16
 8001170:	b29b      	uxth	r3, r3
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b59      	ldr	r3, [pc, #356]	; (80012dc <updateEncoderCnt+0x17c>)
 8001176:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001178:	4b59      	ldr	r3, [pc, #356]	; (80012e0 <updateEncoderCnt+0x180>)
 800117a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117c:	b29b      	uxth	r3, r3
 800117e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001182:	3310      	adds	r3, #16
 8001184:	b29b      	uxth	r3, r3
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b56      	ldr	r3, [pc, #344]	; (80012e4 <updateEncoderCnt+0x184>)
 800118a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800118c:	4b56      	ldr	r3, [pc, #344]	; (80012e8 <updateEncoderCnt+0x188>)
 800118e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b51      	ldr	r3, [pc, #324]	; (80012dc <updateEncoderCnt+0x17c>)
 8001196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119a:	b29b      	uxth	r3, r3
 800119c:	4413      	add	r3, r2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	b21a      	sxth	r2, r3
 80011a2:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <updateEncoderCnt+0x188>)
 80011a4:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 80011a6:	4b51      	ldr	r3, [pc, #324]	; (80012ec <updateEncoderCnt+0x18c>)
 80011a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ac:	b29a      	uxth	r2, r3
 80011ae:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <updateEncoderCnt+0x184>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	4413      	add	r3, r2
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b21a      	sxth	r2, r3
 80011bc:	4b4b      	ldr	r3, [pc, #300]	; (80012ec <updateEncoderCnt+0x18c>)
 80011be:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <updateEncoderCnt+0x17c>)
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	461a      	mov	r2, r3
 80011c8:	4b46      	ldr	r3, [pc, #280]	; (80012e4 <updateEncoderCnt+0x184>)
 80011ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ce:	4413      	add	r3, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9a7 	bl	8000524 <__aeabi_i2d>
 80011d6:	a33e      	add	r3, pc, #248	; (adr r3, 80012d0 <updateEncoderCnt+0x170>)
 80011d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011dc:	f7ff fa0c 	bl	80005f8 <__aeabi_dmul>
 80011e0:	4603      	mov	r3, r0
 80011e2:	460c      	mov	r4, r1
 80011e4:	4618      	mov	r0, r3
 80011e6:	4621      	mov	r1, r4
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011f0:	f7ff fb2c 	bl	800084c <__aeabi_ddiv>
 80011f4:	4603      	mov	r3, r0
 80011f6:	460c      	mov	r4, r1
 80011f8:	4618      	mov	r0, r3
 80011fa:	4621      	mov	r1, r4
 80011fc:	f7ff fcf4 	bl	8000be8 <__aeabi_d2f>
 8001200:	4602      	mov	r2, r0
 8001202:	4b3b      	ldr	r3, [pc, #236]	; (80012f0 <updateEncoderCnt+0x190>)
 8001204:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <updateEncoderCnt+0x194>)
 8001208:	ed93 7a00 	vldr	s14, [r3]
 800120c:	4b38      	ldr	r3, [pc, #224]	; (80012f0 <updateEncoderCnt+0x190>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <updateEncoderCnt+0x194>)
 8001218:	edc3 7a00 	vstr	s15, [r3]
	VLT_distance_10mm += distance_1ms;
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <updateEncoderCnt+0x198>)
 800121e:	ed93 7a00 	vldr	s14, [r3]
 8001222:	4b33      	ldr	r3, [pc, #204]	; (80012f0 <updateEncoderCnt+0x190>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122c:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <updateEncoderCnt+0x198>)
 800122e:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 8001232:	4b32      	ldr	r3, [pc, #200]	; (80012fc <updateEncoderCnt+0x19c>)
 8001234:	ed93 7a00 	vldr	s14, [r3]
 8001238:	4b2d      	ldr	r3, [pc, #180]	; (80012f0 <updateEncoderCnt+0x190>)
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <updateEncoderCnt+0x19c>)
 8001244:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 8001248:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <updateEncoderCnt+0x1a0>)
 800124a:	ed93 7a00 	vldr	s14, [r3]
 800124e:	4b28      	ldr	r3, [pc, #160]	; (80012f0 <updateEncoderCnt+0x190>)
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <updateEncoderCnt+0x1a0>)
 800125a:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 800125e:	4b29      	ldr	r3, [pc, #164]	; (8001304 <updateEncoderCnt+0x1a4>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <updateEncoderCnt+0x190>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800126e:	4b25      	ldr	r3, [pc, #148]	; (8001304 <updateEncoderCnt+0x1a4>)
 8001270:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <updateEncoderCnt+0x1a8>)
 8001276:	ed93 7a00 	vldr	s14, [r3]
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <updateEncoderCnt+0x190>)
 800127c:	edd3 7a00 	vldr	s15, [r3]
 8001280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001284:	4b20      	ldr	r3, [pc, #128]	; (8001308 <updateEncoderCnt+0x1a8>)
 8001286:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <updateEncoderCnt+0x1ac>)
 800128c:	ed93 7a00 	vldr	s14, [r3]
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <updateEncoderCnt+0x190>)
 8001292:	edd3 7a00 	vldr	s15, [r3]
 8001296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <updateEncoderCnt+0x1ac>)
 800129c:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 80012a0:	4b1b      	ldr	r3, [pc, #108]	; (8001310 <updateEncoderCnt+0x1b0>)
 80012a2:	ed93 7a00 	vldr	s14, [r3]
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <updateEncoderCnt+0x190>)
 80012a8:	edd3 7a00 	vldr	s15, [r3]
 80012ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <updateEncoderCnt+0x1b0>)
 80012b2:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <updateEncoderCnt+0x178>)
 80012b8:	f242 7210 	movw	r2, #10000	; 0x2710
 80012bc:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <updateEncoderCnt+0x180>)
 80012c0:	f242 7210 	movw	r2, #10000	; 0x2710
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
}
 80012c6:	bf00      	nop
 80012c8:	bd98      	pop	{r3, r4, r7, pc}
 80012ca:	bf00      	nop
 80012cc:	f3af 8000 	nop.w
 80012d0:	2df331e5 	.word	0x2df331e5
 80012d4:	3f878fcc 	.word	0x3f878fcc
 80012d8:	40000400 	.word	0x40000400
 80012dc:	20000248 	.word	0x20000248
 80012e0:	40000800 	.word	0x40000800
 80012e4:	2000024a 	.word	0x2000024a
 80012e8:	2000024c 	.word	0x2000024c
 80012ec:	2000024e 	.word	0x2000024e
 80012f0:	20000250 	.word	0x20000250
 80012f4:	20000254 	.word	0x20000254
 80012f8:	20000258 	.word	0x20000258
 80012fc:	2000025c 	.word	0x2000025c
 8001300:	20000260 	.word	0x20000260
 8001304:	20000264 	.word	0x20000264
 8001308:	20000268 	.word	0x20000268
 800130c:	2000026c 	.word	0x2000026c
 8001310:	20000270 	.word	0x20000270

08001314 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <getEncoderCnt+0x2c>)
 8001320:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <getEncoderCnt+0x30>)
 800132a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	801a      	strh	r2, [r3, #0]
}
 8001332:	bf00      	nop
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	20000248 	.word	0x20000248
 8001344:	2000024a 	.word	0x2000024a

08001348 <getTotalDistance>:

float getTotalDistance(){
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
	return total_distance;
 800134c:	4b04      	ldr	r3, [pc, #16]	; (8001360 <getTotalDistance+0x18>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	ee07 3a90 	vmov	s15, r3
}
 8001354:	eeb0 0a67 	vmov.f32	s0, s15
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	20000260 	.word	0x20000260

08001364 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 8001368:	4b04      	ldr	r3, [pc, #16]	; (800137c <getGoalJudgeDistance+0x18>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	ee07 3a90 	vmov	s15, r3
}
 8001370:	eeb0 0a67 	vmov.f32	s0, s15
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	20000264 	.word	0x20000264

08001380 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <getSideLineJudgeDistance+0x18>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	ee07 3a90 	vmov	s15, r3
}
 800138c:	eeb0 0a67 	vmov.f32	s0, s15
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	20000268 	.word	0x20000268

0800139c <setTotalDistance>:

void setTotalDistance(float distance)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 80013a6:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <setTotalDistance+0x1c>)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	20000260 	.word	0x20000260

080013bc <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <getCrossLineIgnoreDistance+0x18>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	ee07 3a90 	vmov	s15, r3
}
 80013c8:	eeb0 0a67 	vmov.f32	s0, s15
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	2000026c 	.word	0x2000026c

080013d8 <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	total_distance = 0;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <clearTotalDistance+0x18>)
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000260 	.word	0x20000260

080013f4 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <clearGoalJudgeDistance+0x18>)
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000264 	.word	0x20000264

08001410 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 8001414:	4b04      	ldr	r3, [pc, #16]	; (8001428 <clearSideLineJudgeDistance+0x18>)
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000268 	.word	0x20000268

0800142c <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <clearCrossLineIgnoreDistance+0x18>)
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	2000026c 	.word	0x2000026c

08001448 <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <clearSideLineIgnoreDistance+0x18>)
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000270 	.word	0x20000270

08001464 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	return distance_10mm;
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <getDistance10mm+0x18>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	ee07 3a90 	vmov	s15, r3
}
 8001470:	eeb0 0a67 	vmov.f32	s0, s15
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	20000254 	.word	0x20000254

08001480 <clearDistance10mm>:

void clearDistance10mm(void){
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <clearDistance10mm+0x18>)
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000254 	.word	0x20000254

0800149c <getVLT_Distance10mm>:

float getVLT_Distance10mm(void){
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	return VLT_distance_10mm;
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <getVLT_Distance10mm+0x18>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	ee07 3a90 	vmov	s15, r3
}
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	20000258 	.word	0x20000258

080014b8 <clearVLT_Distance10mm>:

void clearVLT_Distance10mm(void){
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	VLT_distance_10mm = 0;
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <clearVLT_Distance10mm+0x18>)
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000258 	.word	0x20000258
 80014d4:	00000000 	.word	0x00000000

080014d8 <getspeedcount>:

float getspeedcount(void){
 80014d8:	b598      	push	{r3, r4, r7, lr}
 80014da:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 80014dc:	4b16      	ldr	r3, [pc, #88]	; (8001538 <getspeedcount+0x60>)
 80014de:	edd3 7a00 	vldr	s15, [r3]
 80014e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ee:	db16      	blt.n	800151e <getspeedcount+0x46>
		speed_cnt += 0.1;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <getspeedcount+0x64>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f827 	bl	8000548 <__aeabi_f2d>
 80014fa:	a30d      	add	r3, pc, #52	; (adr r3, 8001530 <getspeedcount+0x58>)
 80014fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001500:	f7fe fec4 	bl	800028c <__adddf3>
 8001504:	4603      	mov	r3, r0
 8001506:	460c      	mov	r4, r1
 8001508:	4618      	mov	r0, r3
 800150a:	4621      	mov	r1, r4
 800150c:	f7ff fb6c 	bl	8000be8 <__aeabi_d2f>
 8001510:	4602      	mov	r2, r0
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <getspeedcount+0x64>)
 8001514:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <getspeedcount+0x60>)
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <getspeedcount+0x64>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	ee07 3a90 	vmov	s15, r3
}
 8001526:	eeb0 0a67 	vmov.f32	s0, s15
 800152a:	bd98      	pop	{r3, r4, r7, pc}
 800152c:	f3af 8000 	nop.w
 8001530:	9999999a 	.word	0x9999999a
 8001534:	3fb99999 	.word	0x3fb99999
 8001538:	2000025c 	.word	0x2000025c
 800153c:	20000274 	.word	0x20000274

08001540 <clearspeedcount>:

void clearspeedcount(void){
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 8001544:	4b03      	ldr	r3, [pc, #12]	; (8001554 <clearspeedcount+0x14>)
 8001546:	4a04      	ldr	r2, [pc, #16]	; (8001558 <clearspeedcount+0x18>)
 8001548:	601a      	str	r2, [r3, #0]
}
 800154a:	bf00      	nop
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	20000274 	.word	0x20000274
 8001558:	3dcccccd 	.word	0x3dcccccd

0800155c <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <FLASH_Unlock+0x1c>)
 8001562:	4a06      	ldr	r2, [pc, #24]	; (800157c <FLASH_Unlock+0x20>)
 8001564:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <FLASH_Unlock+0x1c>)
 8001568:	4a05      	ldr	r2, [pc, #20]	; (8001580 <FLASH_Unlock+0x24>)
 800156a:	605a      	str	r2, [r3, #4]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023c00 	.word	0x40023c00
 800157c:	45670123 	.word	0x45670123
 8001580:	cdef89ab 	.word	0xcdef89ab

08001584 <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <FLASH_Lock+0x1c>)
 800158a:	691b      	ldr	r3, [r3, #16]
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <FLASH_Lock+0x1c>)
 800158e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001592:	6113      	str	r3, [r2, #16]

}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023c00 	.word	0x40023c00

080015a4 <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 80015a8:	bf00      	nop
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <FLASH_WaitBusy+0x1c>)
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <FLASH_WaitBusy+0x6>
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 80015ce:	f007 fa97 	bl	8008b00 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 80015de:	2302      	movs	r3, #2
 80015e0:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 80015e6:	f107 0208 	add.w	r2, r7, #8
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	4611      	mov	r1, r2
 80015f0:	4618      	mov	r0, r3
 80015f2:	f007 fb4d 	bl	8008c90 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 80015f6:	f007 faa5 	bl	8008b44 <HAL_FLASH_Lock>
}
 80015fa:	bf00      	nop
 80015fc:	3720      	adds	r7, #32
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 8001610:	f7ff ffa4 	bl	800155c <FLASH_Unlock>

	FLASH_WaitBusy();
 8001614:	f7ff ffc6 	bl	80015a4 <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 8001618:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <FLASH_Write_Word_F+0x50>)
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	4a0d      	ldr	r2, [pc, #52]	; (8001654 <FLASH_Write_Word_F+0x50>)
 800161e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001622:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <FLASH_Write_Word_F+0x50>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <FLASH_Write_Word_F+0x50>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 8001636:	f7ff ffb5 	bl	80015a4 <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <FLASH_Write_Word_F+0x50>)
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <FLASH_Write_Word_F+0x50>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 8001646:	f7ff ff9d 	bl	8001584 <FLASH_Lock>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023c00 	.word	0x40023c00

08001658 <initGyro>:
float omega;
float theta_10mm;
float add_theta;
float ang_average = 0;

uint8_t initGyro(){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 800165e:	f002 f85f 	bl	8003720 <IMU_init>
 8001662:	4603      	mov	r3, r0
 8001664:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 8001666:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800166a:	f006 f9b3 	bl	80079d4 <HAL_Delay>

	return who_i_am;
 800166e:	79fb      	ldrb	r3, [r7, #7]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <updateIMUValue>:

void updateIMUValue(){
 8001678:	b5b0      	push	{r4, r5, r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
	read_gyro_data();
 800167e:	f002 f873 	bl	8003768 <read_gyro_data>
	zg_ = zg;
 8001682:	4b5f      	ldr	r3, [pc, #380]	; (8001800 <updateIMUValue+0x188>)
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b21a      	sxth	r2, r3
 8001688:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <updateIMUValue+0x18c>)
 800168a:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 800168c:	4b5c      	ldr	r3, [pc, #368]	; (8001800 <updateIMUValue+0x188>)
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	b21b      	sxth	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7fe ff46 	bl	8000524 <__aeabi_i2d>
 8001698:	4604      	mov	r4, r0
 800169a:	460d      	mov	r5, r1
 800169c:	4b5a      	ldr	r3, [pc, #360]	; (8001808 <updateIMUValue+0x190>)
 800169e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff3e 	bl	8000524 <__aeabi_i2d>
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	f04f 0300 	mov.w	r3, #0
 80016b0:	f7fe ffa2 	bl	80005f8 <__aeabi_dmul>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4620      	mov	r0, r4
 80016ba:	4629      	mov	r1, r5
 80016bc:	f7fe fde6 	bl	800028c <__adddf3>
 80016c0:	4603      	mov	r3, r0
 80016c2:	460c      	mov	r4, r1
 80016c4:	4618      	mov	r0, r3
 80016c6:	4621      	mov	r1, r4
 80016c8:	f7ff fa46 	bl	8000b58 <__aeabi_d2iz>
 80016cc:	4603      	mov	r3, r0
 80016ce:	b21a      	sxth	r2, r3
 80016d0:	4b4c      	ldr	r3, [pc, #304]	; (8001804 <updateIMUValue+0x18c>)
 80016d2:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 80016d4:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <updateIMUValue+0x18c>)
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <updateIMUValue+0x194>)
 80016e4:	edd3 7a00 	vldr	s15, [r3]
 80016e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f0:	ee17 3a90 	vmov	r3, s15
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	4b43      	ldr	r3, [pc, #268]	; (8001804 <updateIMUValue+0x18c>)
 80016f8:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <updateIMUValue+0x18c>)
 80016fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001700:	4b41      	ldr	r3, [pc, #260]	; (8001808 <updateIMUValue+0x190>)
 8001702:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 8001704:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <updateIMUValue+0x18c>)
 8001706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170a:	ee07 3a90 	vmov	s15, r3
 800170e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001712:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7fe ff16 	bl	8000548 <__aeabi_f2d>
 800171c:	a332      	add	r3, pc, #200	; (adr r3, 80017e8 <updateIMUValue+0x170>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	f7ff f893 	bl	800084c <__aeabi_ddiv>
 8001726:	4603      	mov	r3, r0
 8001728:	460c      	mov	r4, r1
 800172a:	4618      	mov	r0, r3
 800172c:	4621      	mov	r1, r4
 800172e:	a330      	add	r3, pc, #192	; (adr r3, 80017f0 <updateIMUValue+0x178>)
 8001730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001734:	f7fe ff60 	bl	80005f8 <__aeabi_dmul>
 8001738:	4603      	mov	r3, r0
 800173a:	460c      	mov	r4, r1
 800173c:	4618      	mov	r0, r3
 800173e:	4621      	mov	r1, r4
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b32      	ldr	r3, [pc, #200]	; (8001810 <updateIMUValue+0x198>)
 8001746:	f7ff f881 	bl	800084c <__aeabi_ddiv>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	4618      	mov	r0, r3
 8001750:	4621      	mov	r1, r4
 8001752:	f7ff fa49 	bl	8000be8 <__aeabi_d2f>
 8001756:	4602      	mov	r2, r0
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <updateIMUValue+0x19c>)
 800175a:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 800175c:	4b2e      	ldr	r3, [pc, #184]	; (8001818 <updateIMUValue+0x1a0>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fef1 	bl	8000548 <__aeabi_f2d>
 8001766:	4604      	mov	r4, r0
 8001768:	460d      	mov	r5, r1
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <updateIMUValue+0x19c>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe feea 	bl	8000548 <__aeabi_f2d>
 8001774:	a320      	add	r3, pc, #128	; (adr r3, 80017f8 <updateIMUValue+0x180>)
 8001776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177a:	f7fe ff3d 	bl	80005f8 <__aeabi_dmul>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4620      	mov	r0, r4
 8001784:	4629      	mov	r1, r5
 8001786:	f7fe fd81 	bl	800028c <__adddf3>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff fa29 	bl	8000be8 <__aeabi_d2f>
 8001796:	4602      	mov	r2, r0
 8001798:	4b1f      	ldr	r3, [pc, #124]	; (8001818 <updateIMUValue+0x1a0>)
 800179a:	601a      	str	r2, [r3, #0]
	add_theta += omega * 0.001;
 800179c:	4b1f      	ldr	r3, [pc, #124]	; (800181c <updateIMUValue+0x1a4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fed1 	bl	8000548 <__aeabi_f2d>
 80017a6:	4604      	mov	r4, r0
 80017a8:	460d      	mov	r5, r1
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <updateIMUValue+0x19c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7fe feca 	bl	8000548 <__aeabi_f2d>
 80017b4:	a310      	add	r3, pc, #64	; (adr r3, 80017f8 <updateIMUValue+0x180>)
 80017b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ba:	f7fe ff1d 	bl	80005f8 <__aeabi_dmul>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4620      	mov	r0, r4
 80017c4:	4629      	mov	r1, r5
 80017c6:	f7fe fd61 	bl	800028c <__adddf3>
 80017ca:	4603      	mov	r3, r0
 80017cc:	460c      	mov	r4, r1
 80017ce:	4618      	mov	r0, r3
 80017d0:	4621      	mov	r1, r4
 80017d2:	f7ff fa09 	bl	8000be8 <__aeabi_d2f>
 80017d6:	4602      	mov	r2, r0
 80017d8:	4b10      	ldr	r3, [pc, #64]	; (800181c <updateIMUValue+0x1a4>)
 80017da:	601a      	str	r2, [r3, #0]
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bdb0      	pop	{r4, r5, r7, pc}
 80017e4:	f3af 8000 	nop.w
 80017e8:	66666666 	.word	0x66666666
 80017ec:	40306666 	.word	0x40306666
 80017f0:	54411744 	.word	0x54411744
 80017f4:	400921fb 	.word	0x400921fb
 80017f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017fc:	3f50624d 	.word	0x3f50624d
 8001800:	2001cde0 	.word	0x2001cde0
 8001804:	2001cd00 	.word	0x2001cd00
 8001808:	2000027c 	.word	0x2000027c
 800180c:	20000278 	.word	0x20000278
 8001810:	40668000 	.word	0x40668000
 8001814:	2001cd10 	.word	0x2001cd10
 8001818:	2001cd08 	.word	0x2001cd08
 800181c:	2001cd0c 	.word	0x2001cd0c

08001820 <IMU_average>:

void IMU_average(){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	float average = 0;
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
	for(int i = 0; i <= 1000; i++){
 800182c:	2300      	movs	r3, #0
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	e015      	b.n	800185e <IMU_average+0x3e>
		average = average+zg;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <IMU_average+0x60>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	b21b      	sxth	r3, r3
 8001838:	ee07 3a90 	vmov	s15, r3
 800183c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001840:	ed97 7a01 	vldr	s14, [r7, #4]
 8001844:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001848:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 800184c:	2001      	movs	r0, #1
 800184e:	f006 f8c1 	bl	80079d4 <HAL_Delay>
		setLED2('A');
 8001852:	2041      	movs	r0, #65	; 0x41
 8001854:	f000 f920 	bl	8001a98 <setLED2>
	for(int i = 0; i <= 1000; i++){
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	3301      	adds	r3, #1
 800185c:	603b      	str	r3, [r7, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001864:	dde5      	ble.n	8001832 <IMU_average+0x12>
	}
	ang_average = average/1000;
 8001866:	ed97 7a01 	vldr	s14, [r7, #4]
 800186a:	eddf 6a06 	vldr	s13, [pc, #24]	; 8001884 <IMU_average+0x64>
 800186e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <IMU_average+0x68>)
 8001874:	edc3 7a00 	vstr	s15, [r3]
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2001cde0 	.word	0x2001cde0
 8001884:	447a0000 	.word	0x447a0000
 8001888:	20000278 	.word	0x20000278

0800188c <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	return theta_10mm;
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <getTheta10mm+0x18>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	ee07 3a90 	vmov	s15, r3
}
 8001898:	eeb0 0a67 	vmov.f32	s0, s15
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	2001cd08 	.word	0x2001cd08

080018a8 <clearTheta10mm>:

void clearTheta10mm()
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <clearTheta10mm+0x18>)
 80018ae:	f04f 0200 	mov.w	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	2001cd08 	.word	0x2001cd08

080018c4 <getaddTheta>:

float getaddTheta()
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	return add_theta;
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <getaddTheta+0x18>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	ee07 3a90 	vmov	s15, r3
}
 80018d0:	eeb0 0a67 	vmov.f32	s0, s15
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	2001cd0c 	.word	0x2001cd0c

080018e0 <clearaddTheta>:

void clearaddTheta()
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
	add_theta = 0;
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <clearaddTheta+0x18>)
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	2001cd0c 	.word	0x2001cd0c

080018fc <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b52      	cmp	r3, #82	; 0x52
 800190a:	d112      	bne.n	8001932 <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001912:	4860      	ldr	r0, [pc, #384]	; (8001a94 <setLED+0x198>)
 8001914:	f007 fc90 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 8001918:	2201      	movs	r2, #1
 800191a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800191e:	485d      	ldr	r0, [pc, #372]	; (8001a94 <setLED+0x198>)
 8001920:	f007 fc8a 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 8001924:	2201      	movs	r2, #1
 8001926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800192a:	485a      	ldr	r0, [pc, #360]	; (8001a94 <setLED+0x198>)
 800192c:	f007 fc84 	bl	8009238 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 8001930:	e0ab      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'G'){
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b47      	cmp	r3, #71	; 0x47
 8001936:	d112      	bne.n	800195e <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800193e:	4855      	ldr	r0, [pc, #340]	; (8001a94 <setLED+0x198>)
 8001940:	f007 fc7a 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001944:	2200      	movs	r2, #0
 8001946:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800194a:	4852      	ldr	r0, [pc, #328]	; (8001a94 <setLED+0x198>)
 800194c:	f007 fc74 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001956:	484f      	ldr	r0, [pc, #316]	; (8001a94 <setLED+0x198>)
 8001958:	f007 fc6e 	bl	8009238 <HAL_GPIO_WritePin>
}
 800195c:	e095      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'B'){
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	2b42      	cmp	r3, #66	; 0x42
 8001962:	d112      	bne.n	800198a <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001964:	2201      	movs	r2, #1
 8001966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196a:	484a      	ldr	r0, [pc, #296]	; (8001a94 <setLED+0x198>)
 800196c:	f007 fc64 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001976:	4847      	ldr	r0, [pc, #284]	; (8001a94 <setLED+0x198>)
 8001978:	f007 fc5e 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800197c:	2200      	movs	r2, #0
 800197e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001982:	4844      	ldr	r0, [pc, #272]	; (8001a94 <setLED+0x198>)
 8001984:	f007 fc58 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001988:	e07f      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'M'){
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b4d      	cmp	r3, #77	; 0x4d
 800198e:	d112      	bne.n	80019b6 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001996:	483f      	ldr	r0, [pc, #252]	; (8001a94 <setLED+0x198>)
 8001998:	f007 fc4e 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800199c:	2201      	movs	r2, #1
 800199e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019a2:	483c      	ldr	r0, [pc, #240]	; (8001a94 <setLED+0x198>)
 80019a4:	f007 fc48 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80019a8:	2200      	movs	r2, #0
 80019aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ae:	4839      	ldr	r0, [pc, #228]	; (8001a94 <setLED+0x198>)
 80019b0:	f007 fc42 	bl	8009238 <HAL_GPIO_WritePin>
}
 80019b4:	e069      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'Y'){
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b59      	cmp	r3, #89	; 0x59
 80019ba:	d112      	bne.n	80019e2 <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c2:	4834      	ldr	r0, [pc, #208]	; (8001a94 <setLED+0x198>)
 80019c4:	f007 fc38 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ce:	4831      	ldr	r0, [pc, #196]	; (8001a94 <setLED+0x198>)
 80019d0:	f007 fc32 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019da:	482e      	ldr	r0, [pc, #184]	; (8001a94 <setLED+0x198>)
 80019dc:	f007 fc2c 	bl	8009238 <HAL_GPIO_WritePin>
}
 80019e0:	e053      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'C'){
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b43      	cmp	r3, #67	; 0x43
 80019e6:	d112      	bne.n	8001a0e <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80019e8:	2201      	movs	r2, #1
 80019ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019ee:	4829      	ldr	r0, [pc, #164]	; (8001a94 <setLED+0x198>)
 80019f0:	f007 fc22 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80019f4:	2200      	movs	r2, #0
 80019f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019fa:	4826      	ldr	r0, [pc, #152]	; (8001a94 <setLED+0x198>)
 80019fc:	f007 fc1c 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a06:	4823      	ldr	r0, [pc, #140]	; (8001a94 <setLED+0x198>)
 8001a08:	f007 fc16 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001a0c:	e03d      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'W'){
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b57      	cmp	r3, #87	; 0x57
 8001a12:	d112      	bne.n	8001a3a <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a1a:	481e      	ldr	r0, [pc, #120]	; (8001a94 <setLED+0x198>)
 8001a1c:	f007 fc0c 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a26:	481b      	ldr	r0, [pc, #108]	; (8001a94 <setLED+0x198>)
 8001a28:	f007 fc06 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a32:	4818      	ldr	r0, [pc, #96]	; (8001a94 <setLED+0x198>)
 8001a34:	f007 fc00 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001a38:	e027      	b.n	8001a8a <setLED+0x18e>
	else if(color == 'N'){
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b4e      	cmp	r3, #78	; 0x4e
 8001a3e:	d112      	bne.n	8001a66 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a46:	4813      	ldr	r0, [pc, #76]	; (8001a94 <setLED+0x198>)
 8001a48:	f007 fbf6 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a52:	4810      	ldr	r0, [pc, #64]	; (8001a94 <setLED+0x198>)
 8001a54:	f007 fbf0 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5e:	480d      	ldr	r0, [pc, #52]	; (8001a94 <setLED+0x198>)
 8001a60:	f007 fbea 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001a64:	e011      	b.n	8001a8a <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a6c:	4809      	ldr	r0, [pc, #36]	; (8001a94 <setLED+0x198>)
 8001a6e:	f007 fbe3 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a78:	4806      	ldr	r0, [pc, #24]	; (8001a94 <setLED+0x198>)
 8001a7a:	f007 fbdd 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a84:	4803      	ldr	r0, [pc, #12]	; (8001a94 <setLED+0x198>)
 8001a86:	f007 fbd7 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40020800 	.word	0x40020800

08001a98 <setLED2>:

void setLED2(uint8_t color2)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	2b52      	cmp	r3, #82	; 0x52
 8001aa6:	d124      	bne.n	8001af2 <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aae:	48c5      	ldr	r0, [pc, #788]	; (8001dc4 <setLED2+0x32c>)
 8001ab0:	f007 fbc2 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001aba:	48c3      	ldr	r0, [pc, #780]	; (8001dc8 <setLED2+0x330>)
 8001abc:	f007 fbbc 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac6:	48c0      	ldr	r0, [pc, #768]	; (8001dc8 <setLED2+0x330>)
 8001ac8:	f007 fbb6 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001acc:	2201      	movs	r2, #1
 8001ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ad2:	48bd      	ldr	r0, [pc, #756]	; (8001dc8 <setLED2+0x330>)
 8001ad4:	f007 fbb0 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ad8:	2201      	movs	r2, #1
 8001ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ade:	48ba      	ldr	r0, [pc, #744]	; (8001dc8 <setLED2+0x330>)
 8001ae0:	f007 fbaa 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001aea:	48b7      	ldr	r0, [pc, #732]	; (8001dc8 <setLED2+0x330>)
 8001aec:	f007 fba4 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8001af0:	e163      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'G'){
 8001af2:	79fb      	ldrb	r3, [r7, #7]
 8001af4:	2b47      	cmp	r3, #71	; 0x47
 8001af6:	d124      	bne.n	8001b42 <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001afe:	48b1      	ldr	r0, [pc, #708]	; (8001dc4 <setLED2+0x32c>)
 8001b00:	f007 fb9a 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b0a:	48af      	ldr	r0, [pc, #700]	; (8001dc8 <setLED2+0x330>)
 8001b0c:	f007 fb94 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b16:	48ac      	ldr	r0, [pc, #688]	; (8001dc8 <setLED2+0x330>)
 8001b18:	f007 fb8e 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b22:	48a9      	ldr	r0, [pc, #676]	; (8001dc8 <setLED2+0x330>)
 8001b24:	f007 fb88 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b2e:	48a6      	ldr	r0, [pc, #664]	; (8001dc8 <setLED2+0x330>)
 8001b30:	f007 fb82 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b34:	2201      	movs	r2, #1
 8001b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b3a:	48a3      	ldr	r0, [pc, #652]	; (8001dc8 <setLED2+0x330>)
 8001b3c:	f007 fb7c 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001b40:	e13b      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'B'){
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b42      	cmp	r3, #66	; 0x42
 8001b46:	d124      	bne.n	8001b92 <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b4e:	489d      	ldr	r0, [pc, #628]	; (8001dc4 <setLED2+0x32c>)
 8001b50:	f007 fb72 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b5a:	489b      	ldr	r0, [pc, #620]	; (8001dc8 <setLED2+0x330>)
 8001b5c:	f007 fb6c 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b66:	4898      	ldr	r0, [pc, #608]	; (8001dc8 <setLED2+0x330>)
 8001b68:	f007 fb66 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b72:	4895      	ldr	r0, [pc, #596]	; (8001dc8 <setLED2+0x330>)
 8001b74:	f007 fb60 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b7e:	4892      	ldr	r0, [pc, #584]	; (8001dc8 <setLED2+0x330>)
 8001b80:	f007 fb5a 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b8a:	488f      	ldr	r0, [pc, #572]	; (8001dc8 <setLED2+0x330>)
 8001b8c:	f007 fb54 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001b90:	e113      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'W'){
 8001b92:	79fb      	ldrb	r3, [r7, #7]
 8001b94:	2b57      	cmp	r3, #87	; 0x57
 8001b96:	d124      	bne.n	8001be2 <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b9e:	4889      	ldr	r0, [pc, #548]	; (8001dc4 <setLED2+0x32c>)
 8001ba0:	f007 fb4a 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001baa:	4887      	ldr	r0, [pc, #540]	; (8001dc8 <setLED2+0x330>)
 8001bac:	f007 fb44 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bb6:	4884      	ldr	r0, [pc, #528]	; (8001dc8 <setLED2+0x330>)
 8001bb8:	f007 fb3e 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc2:	4881      	ldr	r0, [pc, #516]	; (8001dc8 <setLED2+0x330>)
 8001bc4:	f007 fb38 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bce:	487e      	ldr	r0, [pc, #504]	; (8001dc8 <setLED2+0x330>)
 8001bd0:	f007 fb32 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bda:	487b      	ldr	r0, [pc, #492]	; (8001dc8 <setLED2+0x330>)
 8001bdc:	f007 fb2c 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001be0:	e0eb      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'Y'){
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b59      	cmp	r3, #89	; 0x59
 8001be6:	d124      	bne.n	8001c32 <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bee:	4875      	ldr	r0, [pc, #468]	; (8001dc4 <setLED2+0x32c>)
 8001bf0:	f007 fb22 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bfa:	4873      	ldr	r0, [pc, #460]	; (8001dc8 <setLED2+0x330>)
 8001bfc:	f007 fb1c 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c00:	2201      	movs	r2, #1
 8001c02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c06:	4870      	ldr	r0, [pc, #448]	; (8001dc8 <setLED2+0x330>)
 8001c08:	f007 fb16 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c12:	486d      	ldr	r0, [pc, #436]	; (8001dc8 <setLED2+0x330>)
 8001c14:	f007 fb10 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c1e:	486a      	ldr	r0, [pc, #424]	; (8001dc8 <setLED2+0x330>)
 8001c20:	f007 fb0a 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001c24:	2201      	movs	r2, #1
 8001c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c2a:	4867      	ldr	r0, [pc, #412]	; (8001dc8 <setLED2+0x330>)
 8001c2c:	f007 fb04 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001c30:	e0c3      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'X'){
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	2b58      	cmp	r3, #88	; 0x58
 8001c36:	d124      	bne.n	8001c82 <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c3e:	4861      	ldr	r0, [pc, #388]	; (8001dc4 <setLED2+0x32c>)
 8001c40:	f007 fafa 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c44:	2201      	movs	r2, #1
 8001c46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c4a:	485f      	ldr	r0, [pc, #380]	; (8001dc8 <setLED2+0x330>)
 8001c4c:	f007 faf4 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c56:	485c      	ldr	r0, [pc, #368]	; (8001dc8 <setLED2+0x330>)
 8001c58:	f007 faee 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c62:	4859      	ldr	r0, [pc, #356]	; (8001dc8 <setLED2+0x330>)
 8001c64:	f007 fae8 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c6e:	4856      	ldr	r0, [pc, #344]	; (8001dc8 <setLED2+0x330>)
 8001c70:	f007 fae2 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c7a:	4853      	ldr	r0, [pc, #332]	; (8001dc8 <setLED2+0x330>)
 8001c7c:	f007 fadc 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001c80:	e09b      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'V'){
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b56      	cmp	r3, #86	; 0x56
 8001c86:	d124      	bne.n	8001cd2 <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c8e:	484d      	ldr	r0, [pc, #308]	; (8001dc4 <setLED2+0x32c>)
 8001c90:	f007 fad2 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c9a:	484b      	ldr	r0, [pc, #300]	; (8001dc8 <setLED2+0x330>)
 8001c9c:	f007 facc 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ca6:	4848      	ldr	r0, [pc, #288]	; (8001dc8 <setLED2+0x330>)
 8001ca8:	f007 fac6 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001cac:	2201      	movs	r2, #1
 8001cae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cb2:	4845      	ldr	r0, [pc, #276]	; (8001dc8 <setLED2+0x330>)
 8001cb4:	f007 fac0 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cbe:	4842      	ldr	r0, [pc, #264]	; (8001dc8 <setLED2+0x330>)
 8001cc0:	f007 faba 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cca:	483f      	ldr	r0, [pc, #252]	; (8001dc8 <setLED2+0x330>)
 8001ccc:	f007 fab4 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001cd0:	e073      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'T'){
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	2b54      	cmp	r3, #84	; 0x54
 8001cd6:	d124      	bne.n	8001d22 <setLED2+0x28a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cde:	4839      	ldr	r0, [pc, #228]	; (8001dc4 <setLED2+0x32c>)
 8001ce0:	f007 faaa 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cea:	4837      	ldr	r0, [pc, #220]	; (8001dc8 <setLED2+0x330>)
 8001cec:	f007 faa4 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf6:	4834      	ldr	r0, [pc, #208]	; (8001dc8 <setLED2+0x330>)
 8001cf8:	f007 fa9e 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d02:	4831      	ldr	r0, [pc, #196]	; (8001dc8 <setLED2+0x330>)
 8001d04:	f007 fa98 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d0e:	482e      	ldr	r0, [pc, #184]	; (8001dc8 <setLED2+0x330>)
 8001d10:	f007 fa92 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d14:	2200      	movs	r2, #0
 8001d16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d1a:	482b      	ldr	r0, [pc, #172]	; (8001dc8 <setLED2+0x330>)
 8001d1c:	f007 fa8c 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001d20:	e04b      	b.n	8001dba <setLED2+0x322>
	else if(color2 == 'A'){
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b41      	cmp	r3, #65	; 0x41
 8001d26:	d124      	bne.n	8001d72 <setLED2+0x2da>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d2e:	4825      	ldr	r0, [pc, #148]	; (8001dc4 <setLED2+0x32c>)
 8001d30:	f007 fa82 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d3a:	4823      	ldr	r0, [pc, #140]	; (8001dc8 <setLED2+0x330>)
 8001d3c:	f007 fa7c 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d46:	4820      	ldr	r0, [pc, #128]	; (8001dc8 <setLED2+0x330>)
 8001d48:	f007 fa76 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d52:	481d      	ldr	r0, [pc, #116]	; (8001dc8 <setLED2+0x330>)
 8001d54:	f007 fa70 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d5e:	481a      	ldr	r0, [pc, #104]	; (8001dc8 <setLED2+0x330>)
 8001d60:	f007 fa6a 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d64:	2200      	movs	r2, #0
 8001d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d6a:	4817      	ldr	r0, [pc, #92]	; (8001dc8 <setLED2+0x330>)
 8001d6c:	f007 fa64 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001d70:	e023      	b.n	8001dba <setLED2+0x322>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001d72:	2201      	movs	r2, #1
 8001d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d78:	4812      	ldr	r0, [pc, #72]	; (8001dc4 <setLED2+0x32c>)
 8001d7a:	f007 fa5d 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d84:	4810      	ldr	r0, [pc, #64]	; (8001dc8 <setLED2+0x330>)
 8001d86:	f007 fa57 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <setLED2+0x330>)
 8001d92:	f007 fa51 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9c:	480a      	ldr	r0, [pc, #40]	; (8001dc8 <setLED2+0x330>)
 8001d9e:	f007 fa4b 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001da2:	2201      	movs	r2, #1
 8001da4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001da8:	4807      	ldr	r0, [pc, #28]	; (8001dc8 <setLED2+0x330>)
 8001daa:	f007 fa45 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001dae:	2201      	movs	r2, #1
 8001db0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001db4:	4804      	ldr	r0, [pc, #16]	; (8001dc8 <setLED2+0x330>)
 8001db6:	f007 fa3f 	bl	8009238 <HAL_GPIO_WritePin>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	00000000 	.word	0x00000000

08001dd0 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001dd0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dd4:	b086      	sub	sp, #24
 8001dd6:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 2.7, kd = 0.025;//taiya良くないやつ kp = 3.2, kd = 0.018
 8001dd8:	4bb3      	ldr	r3, [pc, #716]	; (80020a8 <calculateLineFollowingTermFlip+0x2d8>)
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	4bb3      	ldr	r3, [pc, #716]	; (80020ac <calculateLineFollowingTermFlip+0x2dc>)
 8001dde:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001de0:	f04f 0300 	mov.w	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001de6:	4bb2      	ldr	r3, [pc, #712]	; (80020b0 <calculateLineFollowingTermFlip+0x2e0>)
 8001de8:	f993 3000 	ldrsb.w	r3, [r3]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	f040 8140 	bne.w	8002072 <calculateLineFollowingTermFlip+0x2a2>
		if(i_clear_flag == 1){
 8001df2:	4bb0      	ldr	r3, [pc, #704]	; (80020b4 <calculateLineFollowingTermFlip+0x2e4>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d106      	bne.n	8001e08 <calculateLineFollowingTermFlip+0x38>
			i = 0;
 8001dfa:	4baf      	ldr	r3, [pc, #700]	; (80020b8 <calculateLineFollowingTermFlip+0x2e8>)
 8001dfc:	f04f 0200 	mov.w	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001e02:	4bac      	ldr	r3, [pc, #688]	; (80020b4 <calculateLineFollowingTermFlip+0x2e4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
		}

		diff = ( ( sensor[0] * 1.75 + sensor[1] * 1.6 + sensor[2] * 1.45 + sensor[3] * 1.3 + sensor[4] * 1.15 + sensor[5]) / 6 ) - ( ( sensor[6] + sensor[7] * 1.15 + sensor[8] * 1.3 + sensor[9] * 1.45 + sensor[10] * 1.6 + sensor[11] * 1.75 ) / 6 );
 8001e08:	4bac      	ldr	r3, [pc, #688]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7fe fb88 	bl	8000524 <__aeabi_i2d>
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4ba9      	ldr	r3, [pc, #676]	; (80020c0 <calculateLineFollowingTermFlip+0x2f0>)
 8001e1a:	f7fe fbed 	bl	80005f8 <__aeabi_dmul>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	460c      	mov	r4, r1
 8001e22:	4625      	mov	r5, r4
 8001e24:	461c      	mov	r4, r3
 8001e26:	4ba5      	ldr	r3, [pc, #660]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001e28:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb79 	bl	8000524 <__aeabi_i2d>
 8001e32:	a393      	add	r3, pc, #588	; (adr r3, 8002080 <calculateLineFollowingTermFlip+0x2b0>)
 8001e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e38:	f7fe fbde 	bl	80005f8 <__aeabi_dmul>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	4620      	mov	r0, r4
 8001e42:	4629      	mov	r1, r5
 8001e44:	f7fe fa22 	bl	800028c <__adddf3>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	460c      	mov	r4, r1
 8001e4c:	4625      	mov	r5, r4
 8001e4e:	461c      	mov	r4, r3
 8001e50:	4b9a      	ldr	r3, [pc, #616]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001e52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb64 	bl	8000524 <__aeabi_i2d>
 8001e5c:	a38a      	add	r3, pc, #552	; (adr r3, 8002088 <calculateLineFollowingTermFlip+0x2b8>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	f7fe fbc9 	bl	80005f8 <__aeabi_dmul>
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	4629      	mov	r1, r5
 8001e6e:	f7fe fa0d 	bl	800028c <__adddf3>
 8001e72:	4603      	mov	r3, r0
 8001e74:	460c      	mov	r4, r1
 8001e76:	4625      	mov	r5, r4
 8001e78:	461c      	mov	r4, r3
 8001e7a:	4b90      	ldr	r3, [pc, #576]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001e7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb4f 	bl	8000524 <__aeabi_i2d>
 8001e86:	a382      	add	r3, pc, #520	; (adr r3, 8002090 <calculateLineFollowingTermFlip+0x2c0>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fbb4 	bl	80005f8 <__aeabi_dmul>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4620      	mov	r0, r4
 8001e96:	4629      	mov	r1, r5
 8001e98:	f7fe f9f8 	bl	800028c <__adddf3>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4625      	mov	r5, r4
 8001ea2:	461c      	mov	r4, r3
 8001ea4:	4b85      	ldr	r3, [pc, #532]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001ea6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe fb3a 	bl	8000524 <__aeabi_i2d>
 8001eb0:	a379      	add	r3, pc, #484	; (adr r3, 8002098 <calculateLineFollowingTermFlip+0x2c8>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	f7fe fb9f 	bl	80005f8 <__aeabi_dmul>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	f7fe f9e3 	bl	800028c <__adddf3>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	4625      	mov	r5, r4
 8001ecc:	461c      	mov	r4, r3
 8001ece:	4b7b      	ldr	r3, [pc, #492]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001ed0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fb25 	bl	8000524 <__aeabi_i2d>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4620      	mov	r0, r4
 8001ee0:	4629      	mov	r1, r5
 8001ee2:	f7fe f9d3 	bl	800028c <__adddf3>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	460c      	mov	r4, r1
 8001eea:	4618      	mov	r0, r3
 8001eec:	4621      	mov	r1, r4
 8001eee:	f04f 0200 	mov.w	r2, #0
 8001ef2:	4b74      	ldr	r3, [pc, #464]	; (80020c4 <calculateLineFollowingTermFlip+0x2f4>)
 8001ef4:	f7fe fcaa 	bl	800084c <__aeabi_ddiv>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	460c      	mov	r4, r1
 8001efc:	4625      	mov	r5, r4
 8001efe:	461c      	mov	r4, r3
 8001f00:	4b6e      	ldr	r3, [pc, #440]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001f02:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fb0c 	bl	8000524 <__aeabi_i2d>
 8001f0c:	4680      	mov	r8, r0
 8001f0e:	4689      	mov	r9, r1
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001f12:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb04 	bl	8000524 <__aeabi_i2d>
 8001f1c:	a35e      	add	r3, pc, #376	; (adr r3, 8002098 <calculateLineFollowingTermFlip+0x2c8>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	f7fe fb69 	bl	80005f8 <__aeabi_dmul>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	4640      	mov	r0, r8
 8001f2c:	4649      	mov	r1, r9
 8001f2e:	f7fe f9ad 	bl	800028c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4690      	mov	r8, r2
 8001f38:	4699      	mov	r9, r3
 8001f3a:	4b60      	ldr	r3, [pc, #384]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001f3c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe faef 	bl	8000524 <__aeabi_i2d>
 8001f46:	a352      	add	r3, pc, #328	; (adr r3, 8002090 <calculateLineFollowingTermFlip+0x2c0>)
 8001f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4c:	f7fe fb54 	bl	80005f8 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4640      	mov	r0, r8
 8001f56:	4649      	mov	r1, r9
 8001f58:	f7fe f998 	bl	800028c <__adddf3>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4690      	mov	r8, r2
 8001f62:	4699      	mov	r9, r3
 8001f64:	4b55      	ldr	r3, [pc, #340]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001f66:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fada 	bl	8000524 <__aeabi_i2d>
 8001f70:	a345      	add	r3, pc, #276	; (adr r3, 8002088 <calculateLineFollowingTermFlip+0x2b8>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe fb3f 	bl	80005f8 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4640      	mov	r0, r8
 8001f80:	4649      	mov	r1, r9
 8001f82:	f7fe f983 	bl	800028c <__adddf3>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4690      	mov	r8, r2
 8001f8c:	4699      	mov	r9, r3
 8001f8e:	4b4b      	ldr	r3, [pc, #300]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001f90:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fac5 	bl	8000524 <__aeabi_i2d>
 8001f9a:	a339      	add	r3, pc, #228	; (adr r3, 8002080 <calculateLineFollowingTermFlip+0x2b0>)
 8001f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa0:	f7fe fb2a 	bl	80005f8 <__aeabi_dmul>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4640      	mov	r0, r8
 8001faa:	4649      	mov	r1, r9
 8001fac:	f7fe f96e 	bl	800028c <__adddf3>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4690      	mov	r8, r2
 8001fb6:	4699      	mov	r9, r3
 8001fb8:	4b40      	ldr	r3, [pc, #256]	; (80020bc <calculateLineFollowingTermFlip+0x2ec>)
 8001fba:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fab0 	bl	8000524 <__aeabi_i2d>
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b3d      	ldr	r3, [pc, #244]	; (80020c0 <calculateLineFollowingTermFlip+0x2f0>)
 8001fca:	f7fe fb15 	bl	80005f8 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4640      	mov	r0, r8
 8001fd4:	4649      	mov	r1, r9
 8001fd6:	f7fe f959 	bl	800028c <__adddf3>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4b37      	ldr	r3, [pc, #220]	; (80020c4 <calculateLineFollowingTermFlip+0x2f4>)
 8001fe8:	f7fe fc30 	bl	800084c <__aeabi_ddiv>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f7fe f948 	bl	8000288 <__aeabi_dsub>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4621      	mov	r1, r4
 8002000:	f7fe fdf2 	bl	8000be8 <__aeabi_d2f>
 8002004:	4603      	mov	r3, r0
 8002006:	60fb      	str	r3, [r7, #12]
		//diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
		//diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );

		p = kp * diff; //P制御
 8002008:	ed97 7a05 	vldr	s14, [r7, #20]
 800200c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002014:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8002018:	4b2b      	ldr	r3, [pc, #172]	; (80020c8 <calculateLineFollowingTermFlip+0x2f8>)
 800201a:	edd3 7a00 	vldr	s15, [r3]
 800201e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002022:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002026:	edd7 7a04 	vldr	s15, [r7, #16]
 800202a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202e:	ee17 0a90 	vmov	r0, s15
 8002032:	f7fe fa89 	bl	8000548 <__aeabi_f2d>
 8002036:	a31a      	add	r3, pc, #104	; (adr r3, 80020a0 <calculateLineFollowingTermFlip+0x2d0>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fc06 	bl	800084c <__aeabi_ddiv>
 8002040:	4603      	mov	r3, r0
 8002042:	460c      	mov	r4, r1
 8002044:	4618      	mov	r0, r3
 8002046:	4621      	mov	r1, r4
 8002048:	f7fe fdce 	bl	8000be8 <__aeabi_d2f>
 800204c:	4603      	mov	r3, r0
 800204e:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8002050:	4b19      	ldr	r3, [pc, #100]	; (80020b8 <calculateLineFollowingTermFlip+0x2e8>)
 8002052:	ed93 7a00 	vldr	s14, [r3]
 8002056:	edd7 7a02 	vldr	s15, [r7, #8]
 800205a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800205e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002066:	4b19      	ldr	r3, [pc, #100]	; (80020cc <calculateLineFollowingTermFlip+0x2fc>)
 8002068:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 800206c:	4a16      	ldr	r2, [pc, #88]	; (80020c8 <calculateLineFollowingTermFlip+0x2f8>)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6013      	str	r3, [r2, #0]
	}
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800207c:	f3af 8000 	nop.w
 8002080:	9999999a 	.word	0x9999999a
 8002084:	3ff99999 	.word	0x3ff99999
 8002088:	33333333 	.word	0x33333333
 800208c:	3ff73333 	.word	0x3ff73333
 8002090:	cccccccd 	.word	0xcccccccd
 8002094:	3ff4cccc 	.word	0x3ff4cccc
 8002098:	66666666 	.word	0x66666666
 800209c:	3ff26666 	.word	0x3ff26666
 80020a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80020a4:	3f50624d 	.word	0x3f50624d
 80020a8:	402ccccd 	.word	0x402ccccd
 80020ac:	3ccccccd 	.word	0x3ccccccd
 80020b0:	2000027e 	.word	0x2000027e
 80020b4:	2000027f 	.word	0x2000027f
 80020b8:	2000028c 	.word	0x2000028c
 80020bc:	2001cc28 	.word	0x2001cc28
 80020c0:	3ffc0000 	.word	0x3ffc0000
 80020c4:	40180000 	.word	0x40180000
 80020c8:	20000288 	.word	0x20000288
 80020cc:	20000280 	.word	0x20000280

080020d0 <lineTraceFlip>:

void lineTraceFlip(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 80020d6:	4b41      	ldr	r3, [pc, #260]	; (80021dc <lineTraceFlip+0x10c>)
 80020d8:	f993 3000 	ldrsb.w	r3, [r3]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d174      	bne.n	80021ca <lineTraceFlip+0xfa>

		float motor_l;
		float motor_r;

		float velocity_control_term = getVelocityControlTerm();
 80020e0:	f001 fc38 	bl	8003954 <getVelocityControlTerm>
 80020e4:	ed87 0a01 	vstr	s0, [r7, #4]
		}

		velocity_control_term -= exceeded;
		line_following_term += exceeded;*/

		if(getControl_Mode() == 1){
 80020e8:	f004 ff06 	bl	8006ef8 <getControl_Mode>
 80020ec:	eeb0 7a40 	vmov.f32	s14, s0
 80020f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80020f4:	eeb4 7a67 	vcmp.f32	s14, s15
 80020f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020fc:	d112      	bne.n	8002124 <lineTraceFlip+0x54>
		    motor_l = velocity_control_term + line_following_term;//ライントレース時のモータ出力
 80020fe:	4b38      	ldr	r3, [pc, #224]	; (80021e0 <lineTraceFlip+0x110>)
 8002100:	edd3 7a00 	vldr	s15, [r3]
 8002104:	ed97 7a01 	vldr	s14, [r7, #4]
 8002108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210c:	edc7 7a03 	vstr	s15, [r7, #12]
			motor_r = velocity_control_term - line_following_term;
 8002110:	4b33      	ldr	r3, [pc, #204]	; (80021e0 <lineTraceFlip+0x110>)
 8002112:	edd3 7a00 	vldr	s15, [r3]
 8002116:	ed97 7a01 	vldr	s14, [r7, #4]
 800211a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800211e:	edc7 7a02 	vstr	s15, [r7, #8]
 8002122:	e03c      	b.n	800219e <lineTraceFlip+0xce>
		}
		else if(getControl_Mode() == 2){
 8002124:	f004 fee8 	bl	8006ef8 <getControl_Mode>
 8002128:	eeb0 7a40 	vmov.f32	s14, s0
 800212c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8002130:	eeb4 7a67 	vcmp.f32	s14, s15
 8002134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002138:	d112      	bne.n	8002160 <lineTraceFlip+0x90>
			motor_l = velocity_control_term + line_following_term;//ライントレース時のモータ出力
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <lineTraceFlip+0x110>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ed97 7a01 	vldr	s14, [r7, #4]
 8002144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002148:	edc7 7a03 	vstr	s15, [r7, #12]
			motor_r = velocity_control_term - line_following_term;
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <lineTraceFlip+0x110>)
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	ed97 7a01 	vldr	s14, [r7, #4]
 8002156:	ee77 7a67 	vsub.f32	s15, s14, s15
 800215a:	edc7 7a02 	vstr	s15, [r7, #8]
 800215e:	e01e      	b.n	800219e <lineTraceFlip+0xce>
		}
		else if(getControl_Mode() == 5)
 8002160:	f004 feca 	bl	8006ef8 <getControl_Mode>
 8002164:	eeb0 7a40 	vmov.f32	s14, s0
 8002168:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800216c:	eeb4 7a67 	vcmp.f32	s14, s15
 8002170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002174:	d113      	bne.n	800219e <lineTraceFlip+0xce>
		{
			motor_l = velocity_control_term - getAngleControlTerm();//バーチャルライントレース時のモータ出力
 8002176:	f7fe ffab 	bl	80010d0 <getAngleControlTerm>
 800217a:	eeb0 7a40 	vmov.f32	s14, s0
 800217e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002186:	edc7 7a03 	vstr	s15, [r7, #12]
			motor_r = velocity_control_term + getAngleControlTerm();
 800218a:	f7fe ffa1 	bl	80010d0 <getAngleControlTerm>
 800218e:	eeb0 7a40 	vmov.f32	s14, s0
 8002192:	edd7 7a01 	vldr	s15, [r7, #4]
 8002196:	ee77 7a87 	vadd.f32	s15, s15, s14
 800219a:	edc7 7a02 	vstr	s15, [r7, #8]


		//motor_l = velocity_control_term ;
		//motor_r = velocity_control_term ;

		mon_velo_term = velocity_control_term;
 800219e:	4a11      	ldr	r2, [pc, #68]	; (80021e4 <lineTraceFlip+0x114>)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6013      	str	r3, [r2, #0]
		//motor_r_Deb = motor_r;

		//motor_l = 500;
		//motor_r = 500;

		setMotor(motor_l, motor_r);
 80021a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ac:	ee17 3a90 	vmov	r3, s15
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80021b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ba:	ee17 2a90 	vmov	r2, s15
 80021be:	b212      	sxth	r2, r2
 80021c0:	4611      	mov	r1, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f003 fc22 	bl	8005a0c <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 80021c8:	e003      	b.n	80021d2 <lineTraceFlip+0x102>
		setMotor(0, 0);
 80021ca:	2100      	movs	r1, #0
 80021cc:	2000      	movs	r0, #0
 80021ce:	f003 fc1d 	bl	8005a0c <setMotor>
}
 80021d2:	bf00      	nop
 80021d4:	3710      	adds	r7, #16
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	2000027e 	.word	0x2000027e
 80021e0:	20000280 	.word	0x20000280
 80021e4:	2001cd14 	.word	0x2001cd14

080021e8 <startLineTrace>:

void startLineTrace()
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 80021ec:	4b05      	ldr	r3, [pc, #20]	; (8002204 <startLineTrace+0x1c>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <startLineTrace+0x20>)
 80021f4:	2201      	movs	r2, #1
 80021f6:	701a      	strb	r2, [r3, #0]
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	2000027e 	.word	0x2000027e
 8002208:	2000027f 	.word	0x2000027f

0800220c <stopLineTrace>:

void stopLineTrace()
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <stopLineTrace+0x1c>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <stopLineTrace+0x20>)
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 800221e:	bf00      	nop
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	2000027e 	.word	0x2000027e
 800222c:	20000280 	.word	0x20000280

08002230 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
	return dark_flag;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <getCouseOutFlag+0x14>)
 8002236:	781b      	ldrb	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000284 	.word	0x20000284

08002248 <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 800224e:	2202      	movs	r2, #2
 8002250:	4933      	ldr	r1, [pc, #204]	; (8002320 <initADC+0xd8>)
 8002252:	4834      	ldr	r0, [pc, #208]	; (8002324 <initADC+0xdc>)
 8002254:	f005 fc24 	bl	8007aa0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 8002258:	220c      	movs	r2, #12
 800225a:	4933      	ldr	r1, [pc, #204]	; (8002328 <initADC+0xe0>)
 800225c:	4833      	ldr	r0, [pc, #204]	; (800232c <initADC+0xe4>)
 800225e:	f005 fc1f 	bl	8007aa0 <HAL_ADC_Start_DMA>

	loadSensor();
 8002262:	f001 f81b 	bl	800329c <loadSensor>
	const float *p_sensor;
	p_sensor = getSensorArrayPointer();
 8002266:	f001 f98d 	bl	8003584 <getSensorArrayPointer>
 800226a:	6038      	str	r0, [r7, #0]

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800226c:	2300      	movs	r3, #0
 800226e:	80fb      	strh	r3, [r7, #6]
 8002270:	e023      	b.n	80022ba <initADC+0x72>
		sensor_coefficient[i] = p_sensor[i*2] - p_sensor[i*2 + 1];
 8002272:	88fb      	ldrh	r3, [r7, #6]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	461a      	mov	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	ed93 7a00 	vldr	s14, [r3]
 8002280:	88fb      	ldrh	r3, [r7, #6]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	3304      	adds	r3, #4
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	4413      	add	r3, r2
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002294:	4a26      	ldr	r2, [pc, #152]	; (8002330 <initADC+0xe8>)
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	edc3 7a00 	vstr	s15, [r3]
		offset_values[i] = p_sensor[i*2 + 1];
 800229e:	88fb      	ldrh	r3, [r7, #6]
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	3304      	adds	r3, #4
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	441a      	add	r2, r3
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	4921      	ldr	r1, [pc, #132]	; (8002334 <initADC+0xec>)
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	3301      	adds	r3, #1
 80022b8:	80fb      	strh	r3, [r7, #6]
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	2b0b      	cmp	r3, #11
 80022be:	d9d8      	bls.n	8002272 <initADC+0x2a>
	}
	for(uint16_t i = LINESENSOR_ADC_NUM; i < LINESENSOR_ADC_NUM + SIDE_LINESENSOR_ADC_NUM; i++){
 80022c0:	230c      	movs	r3, #12
 80022c2:	80bb      	strh	r3, [r7, #4]
 80022c4:	e025      	b.n	8002312 <initADC+0xca>
		side_sensor_coefficient[i - LINESENSOR_ADC_NUM] = p_sensor[i*2] - p_sensor[i*2 + 1];
 80022c6:	88bb      	ldrh	r3, [r7, #4]
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	461a      	mov	r2, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	ed93 7a00 	vldr	s14, [r3]
 80022d4:	88bb      	ldrh	r3, [r7, #4]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	3304      	adds	r3, #4
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	4413      	add	r3, r2
 80022de:	edd3 7a00 	vldr	s15, [r3]
 80022e2:	88bb      	ldrh	r3, [r7, #4]
 80022e4:	3b0c      	subs	r3, #12
 80022e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ea:	4a13      	ldr	r2, [pc, #76]	; (8002338 <initADC+0xf0>)
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	edc3 7a00 	vstr	s15, [r3]
		side_offset_values[i - LINESENSOR_ADC_NUM] = p_sensor[i*2 + 1];
 80022f4:	88bb      	ldrh	r3, [r7, #4]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	3304      	adds	r3, #4
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	441a      	add	r2, r3
 80022fe:	88bb      	ldrh	r3, [r7, #4]
 8002300:	3b0c      	subs	r3, #12
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	490d      	ldr	r1, [pc, #52]	; (800233c <initADC+0xf4>)
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = LINESENSOR_ADC_NUM; i < LINESENSOR_ADC_NUM + SIDE_LINESENSOR_ADC_NUM; i++){
 800230c:	88bb      	ldrh	r3, [r7, #4]
 800230e:	3301      	adds	r3, #1
 8002310:	80bb      	strh	r3, [r7, #4]
 8002312:	88bb      	ldrh	r3, [r7, #4]
 8002314:	2b0d      	cmp	r3, #13
 8002316:	d9d6      	bls.n	80022c6 <initADC+0x7e>
	}
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200002a8 	.word	0x200002a8
 8002324:	2001cd68 	.word	0x2001cd68
 8002328:	20000290 	.word	0x20000290
 800232c:	2001cd18 	.word	0x2001cd18
 8002330:	2001cc50 	.word	0x2001cc50
 8002334:	2001cbe8 	.word	0x2001cbe8
 8002338:	2001cc20 	.word	0x2001cc20
 800233c:	2001cbe0 	.word	0x2001cbe0

08002340 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002344:	4bc9      	ldr	r3, [pc, #804]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 8002346:	885b      	ldrh	r3, [r3, #2]
 8002348:	ee07 3a90 	vmov	s15, r3
 800234c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002350:	4bc7      	ldr	r3, [pc, #796]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 8002352:	edd3 7a01 	vldr	s15, [r3, #4]
 8002356:	ee77 6a67 	vsub.f32	s13, s14, s15
 800235a:	4bc6      	ldr	r3, [pc, #792]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 800235c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002364:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002678 <storeAnalogSensorBuffer+0x338>
 8002368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800236c:	4bc3      	ldr	r3, [pc, #780]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002376:	ee17 3a90 	vmov	r3, s15
 800237a:	b219      	sxth	r1, r3
 800237c:	4bc0      	ldr	r3, [pc, #768]	; (8002680 <storeAnalogSensorBuffer+0x340>)
 800237e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 8002382:	4bba      	ldr	r3, [pc, #744]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 8002384:	881b      	ldrh	r3, [r3, #0]
 8002386:	ee07 3a90 	vmov	s15, r3
 800238a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800238e:	4bb8      	ldr	r3, [pc, #736]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002398:	4bb6      	ldr	r3, [pc, #728]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 800239a:	ed93 7a00 	vldr	s14, [r3]
 800239e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023a2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002678 <storeAnalogSensorBuffer+0x338>
 80023a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023aa:	4bb4      	ldr	r3, [pc, #720]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b4:	ee17 3a90 	vmov	r3, s15
 80023b8:	b219      	sxth	r1, r3
 80023ba:	4bb2      	ldr	r3, [pc, #712]	; (8002684 <storeAnalogSensorBuffer+0x344>)
 80023bc:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80023c0:	4baa      	ldr	r3, [pc, #680]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 80023c2:	889b      	ldrh	r3, [r3, #4]
 80023c4:	ee07 3a90 	vmov	s15, r3
 80023c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023cc:	4ba8      	ldr	r3, [pc, #672]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 80023ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80023d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023d6:	4ba7      	ldr	r3, [pc, #668]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 80023d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80023dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e0:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002678 <storeAnalogSensorBuffer+0x338>
 80023e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e8:	4ba4      	ldr	r3, [pc, #656]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023f2:	ee17 3a90 	vmov	r3, s15
 80023f6:	b219      	sxth	r1, r3
 80023f8:	4ba3      	ldr	r3, [pc, #652]	; (8002688 <storeAnalogSensorBuffer+0x348>)
 80023fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80023fe:	4b9b      	ldr	r3, [pc, #620]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 8002400:	88db      	ldrh	r3, [r3, #6]
 8002402:	ee07 3a90 	vmov	s15, r3
 8002406:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800240a:	4b99      	ldr	r3, [pc, #612]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 800240c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002410:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002414:	4b97      	ldr	r3, [pc, #604]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 8002416:	ed93 7a03 	vldr	s14, [r3, #12]
 800241a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800241e:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002678 <storeAnalogSensorBuffer+0x338>
 8002422:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002426:	4b95      	ldr	r3, [pc, #596]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002430:	ee17 3a90 	vmov	r3, s15
 8002434:	b219      	sxth	r1, r3
 8002436:	4b95      	ldr	r3, [pc, #596]	; (800268c <storeAnalogSensorBuffer+0x34c>)
 8002438:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 800243c:	4b8b      	ldr	r3, [pc, #556]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 800243e:	891b      	ldrh	r3, [r3, #8]
 8002440:	ee07 3a90 	vmov	s15, r3
 8002444:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002448:	4b89      	ldr	r3, [pc, #548]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 800244a:	edd3 7a04 	vldr	s15, [r3, #16]
 800244e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002452:	4b88      	ldr	r3, [pc, #544]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 8002454:	ed93 7a04 	vldr	s14, [r3, #16]
 8002458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800245c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002678 <storeAnalogSensorBuffer+0x338>
 8002460:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002464:	4b85      	ldr	r3, [pc, #532]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800246e:	ee17 3a90 	vmov	r3, s15
 8002472:	b219      	sxth	r1, r3
 8002474:	4b86      	ldr	r3, [pc, #536]	; (8002690 <storeAnalogSensorBuffer+0x350>)
 8002476:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 800247a:	4b7c      	ldr	r3, [pc, #496]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 800247c:	895b      	ldrh	r3, [r3, #10]
 800247e:	ee07 3a90 	vmov	s15, r3
 8002482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002486:	4b7a      	ldr	r3, [pc, #488]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 8002488:	edd3 7a05 	vldr	s15, [r3, #20]
 800248c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002490:	4b78      	ldr	r3, [pc, #480]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 8002492:	ed93 7a05 	vldr	s14, [r3, #20]
 8002496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800249a:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002678 <storeAnalogSensorBuffer+0x338>
 800249e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	461a      	mov	r2, r3
 80024a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ac:	ee17 3a90 	vmov	r3, s15
 80024b0:	b219      	sxth	r1, r3
 80024b2:	4b78      	ldr	r3, [pc, #480]	; (8002694 <storeAnalogSensorBuffer+0x354>)
 80024b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80024b8:	4b6c      	ldr	r3, [pc, #432]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 80024ba:	899b      	ldrh	r3, [r3, #12]
 80024bc:	ee07 3a90 	vmov	s15, r3
 80024c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c4:	4b6a      	ldr	r3, [pc, #424]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 80024c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80024ca:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024ce:	4b69      	ldr	r3, [pc, #420]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 80024d0:	ed93 7a06 	vldr	s14, [r3, #24]
 80024d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d8:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8002678 <storeAnalogSensorBuffer+0x338>
 80024dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e0:	4b66      	ldr	r3, [pc, #408]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024ea:	ee17 3a90 	vmov	r3, s15
 80024ee:	b219      	sxth	r1, r3
 80024f0:	4b69      	ldr	r3, [pc, #420]	; (8002698 <storeAnalogSensorBuffer+0x358>)
 80024f2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80024f6:	4b5d      	ldr	r3, [pc, #372]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 80024f8:	89db      	ldrh	r3, [r3, #14]
 80024fa:	ee07 3a90 	vmov	s15, r3
 80024fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002502:	4b5b      	ldr	r3, [pc, #364]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 8002504:	edd3 7a07 	vldr	s15, [r3, #28]
 8002508:	ee77 6a67 	vsub.f32	s13, s14, s15
 800250c:	4b59      	ldr	r3, [pc, #356]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 800250e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002516:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002678 <storeAnalogSensorBuffer+0x338>
 800251a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251e:	4b57      	ldr	r3, [pc, #348]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	461a      	mov	r2, r3
 8002524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002528:	ee17 3a90 	vmov	r3, s15
 800252c:	b219      	sxth	r1, r3
 800252e:	4b5b      	ldr	r3, [pc, #364]	; (800269c <storeAnalogSensorBuffer+0x35c>)
 8002530:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 8002534:	4b4d      	ldr	r3, [pc, #308]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 8002536:	8a1b      	ldrh	r3, [r3, #16]
 8002538:	ee07 3a90 	vmov	s15, r3
 800253c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002540:	4b4b      	ldr	r3, [pc, #300]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 8002542:	edd3 7a08 	vldr	s15, [r3, #32]
 8002546:	ee77 6a67 	vsub.f32	s13, s14, s15
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 800254c:	ed93 7a08 	vldr	s14, [r3, #32]
 8002550:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002554:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002678 <storeAnalogSensorBuffer+0x338>
 8002558:	ee67 7a87 	vmul.f32	s15, s15, s14
 800255c:	4b47      	ldr	r3, [pc, #284]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002566:	ee17 3a90 	vmov	r3, s15
 800256a:	b219      	sxth	r1, r3
 800256c:	4b4c      	ldr	r3, [pc, #304]	; (80026a0 <storeAnalogSensorBuffer+0x360>)
 800256e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002572:	4b3e      	ldr	r3, [pc, #248]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 8002574:	8a5b      	ldrh	r3, [r3, #18]
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800257e:	4b3c      	ldr	r3, [pc, #240]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 8002580:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002584:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002588:	4b3a      	ldr	r3, [pc, #232]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 800258a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800258e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002592:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002678 <storeAnalogSensorBuffer+0x338>
 8002596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800259a:	4b38      	ldr	r3, [pc, #224]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025a4:	ee17 3a90 	vmov	r3, s15
 80025a8:	b219      	sxth	r1, r3
 80025aa:	4b3e      	ldr	r3, [pc, #248]	; (80026a4 <storeAnalogSensorBuffer+0x364>)
 80025ac:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 80025b0:	4b2e      	ldr	r3, [pc, #184]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 80025b2:	8a9b      	ldrh	r3, [r3, #20]
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 80025be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80025c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025c6:	4b2b      	ldr	r3, [pc, #172]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 80025c8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80025cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025d0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002678 <storeAnalogSensorBuffer+0x338>
 80025d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025d8:	4b28      	ldr	r3, [pc, #160]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025e2:	ee17 3a90 	vmov	r3, s15
 80025e6:	b219      	sxth	r1, r3
 80025e8:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <storeAnalogSensorBuffer+0x368>)
 80025ea:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80025ee:	4b1f      	ldr	r3, [pc, #124]	; (800266c <storeAnalogSensorBuffer+0x32c>)
 80025f0:	8adb      	ldrh	r3, [r3, #22]
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <storeAnalogSensorBuffer+0x330>)
 80025fc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002600:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002604:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <storeAnalogSensorBuffer+0x334>)
 8002606:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800260a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260e:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002678 <storeAnalogSensorBuffer+0x338>
 8002612:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002616:	4b19      	ldr	r3, [pc, #100]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	461a      	mov	r2, r3
 800261c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002620:	ee17 3a90 	vmov	r3, s15
 8002624:	b219      	sxth	r1, r3
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <storeAnalogSensorBuffer+0x36c>)
 8002628:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 800262c:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <storeAnalogSensorBuffer+0x370>)
 800262e:	885b      	ldrh	r3, [r3, #2]
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002638:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <storeAnalogSensorBuffer+0x374>)
 800263a:	edd3 7a01 	vldr	s15, [r3, #4]
 800263e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <storeAnalogSensorBuffer+0x378>)
 8002644:	ed93 7a01 	vldr	s14, [r3, #4]
 8002648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800264c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8002678 <storeAnalogSensorBuffer+0x338>
 8002650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <storeAnalogSensorBuffer+0x33c>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800265e:	ee17 3a90 	vmov	r3, s15
 8002662:	b219      	sxth	r1, r3
 8002664:	4b15      	ldr	r3, [pc, #84]	; (80026bc <storeAnalogSensorBuffer+0x37c>)
 8002666:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 800266a:	e029      	b.n	80026c0 <storeAnalogSensorBuffer+0x380>
 800266c:	20000290 	.word	0x20000290
 8002670:	2001cbe8 	.word	0x2001cbe8
 8002674:	2001cc50 	.word	0x2001cc50
 8002678:	447a0000 	.word	0x447a0000
 800267c:	20000038 	.word	0x20000038
 8002680:	200002c0 	.word	0x200002c0
 8002684:	200002ac 	.word	0x200002ac
 8002688:	200002d4 	.word	0x200002d4
 800268c:	200002e8 	.word	0x200002e8
 8002690:	200002fc 	.word	0x200002fc
 8002694:	20000310 	.word	0x20000310
 8002698:	20000324 	.word	0x20000324
 800269c:	20000338 	.word	0x20000338
 80026a0:	2000034c 	.word	0x2000034c
 80026a4:	20000360 	.word	0x20000360
 80026a8:	20000374 	.word	0x20000374
 80026ac:	20000388 	.word	0x20000388
 80026b0:	200002a8 	.word	0x200002a8
 80026b4:	2001cbe0 	.word	0x2001cbe0
 80026b8:	2001cc20 	.word	0x2001cc20
 80026bc:	2000039c 	.word	0x2000039c
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80026c0:	4b14      	ldr	r3, [pc, #80]	; (8002714 <storeAnalogSensorBuffer+0x3d4>)
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	ee07 3a90 	vmov	s15, r3
 80026c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <storeAnalogSensorBuffer+0x3d8>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <storeAnalogSensorBuffer+0x3dc>)
 80026d8:	ed93 7a00 	vldr	s14, [r3]
 80026dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002720 <storeAnalogSensorBuffer+0x3e0>
 80026e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026e8:	4b0e      	ldr	r3, [pc, #56]	; (8002724 <storeAnalogSensorBuffer+0x3e4>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f2:	ee17 3a90 	vmov	r3, s15
 80026f6:	b219      	sxth	r1, r3
 80026f8:	4b0b      	ldr	r3, [pc, #44]	; (8002728 <storeAnalogSensorBuffer+0x3e8>)
 80026fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <storeAnalogSensorBuffer+0x3e4>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	3301      	adds	r3, #1
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4b07      	ldr	r3, [pc, #28]	; (8002724 <storeAnalogSensorBuffer+0x3e4>)
 8002708:	701a      	strb	r2, [r3, #0]
}
 800270a:	bf00      	nop
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	200002a8 	.word	0x200002a8
 8002718:	2001cbe0 	.word	0x2001cbe0
 800271c:	2001cc20 	.word	0x2001cc20
 8002720:	447a0000 	.word	0x447a0000
 8002724:	20000038 	.word	0x20000038
 8002728:	200003b0 	.word	0x200003b0

0800272c <updateAnalogSensor>:

void updateAnalogSensor(void) {
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 8002732:	4bc9      	ldr	r3, [pc, #804]	; (8002a58 <updateAnalogSensor+0x32c>)
 8002734:	881b      	ldrh	r3, [r3, #0]
 8002736:	ee07 3a90 	vmov	s15, r3
 800273a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800273e:	4bc7      	ldr	r3, [pc, #796]	; (8002a5c <updateAnalogSensor+0x330>)
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002748:	4bc5      	ldr	r3, [pc, #788]	; (8002a60 <updateAnalogSensor+0x334>)
 800274a:	ed93 7a00 	vldr	s14, [r3]
 800274e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002752:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002a64 <updateAnalogSensor+0x338>
 8002756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800275e:	ee17 3a90 	vmov	r3, s15
 8002762:	b21a      	sxth	r2, r3
 8002764:	4bc0      	ldr	r3, [pc, #768]	; (8002a68 <updateAnalogSensor+0x33c>)
 8002766:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002768:	4bbb      	ldr	r3, [pc, #748]	; (8002a58 <updateAnalogSensor+0x32c>)
 800276a:	885b      	ldrh	r3, [r3, #2]
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002774:	4bb9      	ldr	r3, [pc, #740]	; (8002a5c <updateAnalogSensor+0x330>)
 8002776:	edd3 7a01 	vldr	s15, [r3, #4]
 800277a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800277e:	4bb8      	ldr	r3, [pc, #736]	; (8002a60 <updateAnalogSensor+0x334>)
 8002780:	ed93 7a01 	vldr	s14, [r3, #4]
 8002784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002788:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002a64 <updateAnalogSensor+0x338>
 800278c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002790:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002794:	ee17 3a90 	vmov	r3, s15
 8002798:	b21a      	sxth	r2, r3
 800279a:	4bb3      	ldr	r3, [pc, #716]	; (8002a68 <updateAnalogSensor+0x33c>)
 800279c:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 800279e:	4bae      	ldr	r3, [pc, #696]	; (8002a58 <updateAnalogSensor+0x32c>)
 80027a0:	889b      	ldrh	r3, [r3, #4]
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027aa:	4bac      	ldr	r3, [pc, #688]	; (8002a5c <updateAnalogSensor+0x330>)
 80027ac:	edd3 7a02 	vldr	s15, [r3, #8]
 80027b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027b4:	4baa      	ldr	r3, [pc, #680]	; (8002a60 <updateAnalogSensor+0x334>)
 80027b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80027ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027be:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002a64 <updateAnalogSensor+0x338>
 80027c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ca:	ee17 3a90 	vmov	r3, s15
 80027ce:	b21a      	sxth	r2, r3
 80027d0:	4ba5      	ldr	r3, [pc, #660]	; (8002a68 <updateAnalogSensor+0x33c>)
 80027d2:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 80027d4:	4ba0      	ldr	r3, [pc, #640]	; (8002a58 <updateAnalogSensor+0x32c>)
 80027d6:	88db      	ldrh	r3, [r3, #6]
 80027d8:	ee07 3a90 	vmov	s15, r3
 80027dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e0:	4b9e      	ldr	r3, [pc, #632]	; (8002a5c <updateAnalogSensor+0x330>)
 80027e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80027e6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027ea:	4b9d      	ldr	r3, [pc, #628]	; (8002a60 <updateAnalogSensor+0x334>)
 80027ec:	ed93 7a03 	vldr	s14, [r3, #12]
 80027f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f4:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002a64 <updateAnalogSensor+0x338>
 80027f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002800:	ee17 3a90 	vmov	r3, s15
 8002804:	b21a      	sxth	r2, r3
 8002806:	4b98      	ldr	r3, [pc, #608]	; (8002a68 <updateAnalogSensor+0x33c>)
 8002808:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 800280a:	4b93      	ldr	r3, [pc, #588]	; (8002a58 <updateAnalogSensor+0x32c>)
 800280c:	891b      	ldrh	r3, [r3, #8]
 800280e:	ee07 3a90 	vmov	s15, r3
 8002812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002816:	4b91      	ldr	r3, [pc, #580]	; (8002a5c <updateAnalogSensor+0x330>)
 8002818:	edd3 7a04 	vldr	s15, [r3, #16]
 800281c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002820:	4b8f      	ldr	r3, [pc, #572]	; (8002a60 <updateAnalogSensor+0x334>)
 8002822:	ed93 7a04 	vldr	s14, [r3, #16]
 8002826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800282a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002a64 <updateAnalogSensor+0x338>
 800282e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002836:	ee17 3a90 	vmov	r3, s15
 800283a:	b21a      	sxth	r2, r3
 800283c:	4b8a      	ldr	r3, [pc, #552]	; (8002a68 <updateAnalogSensor+0x33c>)
 800283e:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8002840:	4b85      	ldr	r3, [pc, #532]	; (8002a58 <updateAnalogSensor+0x32c>)
 8002842:	895b      	ldrh	r3, [r3, #10]
 8002844:	ee07 3a90 	vmov	s15, r3
 8002848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800284c:	4b83      	ldr	r3, [pc, #524]	; (8002a5c <updateAnalogSensor+0x330>)
 800284e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002852:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002856:	4b82      	ldr	r3, [pc, #520]	; (8002a60 <updateAnalogSensor+0x334>)
 8002858:	ed93 7a05 	vldr	s14, [r3, #20]
 800285c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002860:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002a64 <updateAnalogSensor+0x338>
 8002864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800286c:	ee17 3a90 	vmov	r3, s15
 8002870:	b21a      	sxth	r2, r3
 8002872:	4b7d      	ldr	r3, [pc, #500]	; (8002a68 <updateAnalogSensor+0x33c>)
 8002874:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 8002876:	4b78      	ldr	r3, [pc, #480]	; (8002a58 <updateAnalogSensor+0x32c>)
 8002878:	899b      	ldrh	r3, [r3, #12]
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002882:	4b76      	ldr	r3, [pc, #472]	; (8002a5c <updateAnalogSensor+0x330>)
 8002884:	edd3 7a06 	vldr	s15, [r3, #24]
 8002888:	ee77 6a67 	vsub.f32	s13, s14, s15
 800288c:	4b74      	ldr	r3, [pc, #464]	; (8002a60 <updateAnalogSensor+0x334>)
 800288e:	ed93 7a06 	vldr	s14, [r3, #24]
 8002892:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002896:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002a64 <updateAnalogSensor+0x338>
 800289a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a2:	ee17 3a90 	vmov	r3, s15
 80028a6:	b21a      	sxth	r2, r3
 80028a8:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <updateAnalogSensor+0x33c>)
 80028aa:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80028ac:	4b6a      	ldr	r3, [pc, #424]	; (8002a58 <updateAnalogSensor+0x32c>)
 80028ae:	89db      	ldrh	r3, [r3, #14]
 80028b0:	ee07 3a90 	vmov	s15, r3
 80028b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028b8:	4b68      	ldr	r3, [pc, #416]	; (8002a5c <updateAnalogSensor+0x330>)
 80028ba:	edd3 7a07 	vldr	s15, [r3, #28]
 80028be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028c2:	4b67      	ldr	r3, [pc, #412]	; (8002a60 <updateAnalogSensor+0x334>)
 80028c4:	ed93 7a07 	vldr	s14, [r3, #28]
 80028c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028cc:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002a64 <updateAnalogSensor+0x338>
 80028d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028d8:	ee17 3a90 	vmov	r3, s15
 80028dc:	b21a      	sxth	r2, r3
 80028de:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <updateAnalogSensor+0x33c>)
 80028e0:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 80028e2:	4b5d      	ldr	r3, [pc, #372]	; (8002a58 <updateAnalogSensor+0x32c>)
 80028e4:	8a1b      	ldrh	r3, [r3, #16]
 80028e6:	ee07 3a90 	vmov	s15, r3
 80028ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028ee:	4b5b      	ldr	r3, [pc, #364]	; (8002a5c <updateAnalogSensor+0x330>)
 80028f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80028f4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028f8:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <updateAnalogSensor+0x334>)
 80028fa:	ed93 7a08 	vldr	s14, [r3, #32]
 80028fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002902:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002a64 <updateAnalogSensor+0x338>
 8002906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800290a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800290e:	ee17 3a90 	vmov	r3, s15
 8002912:	b21a      	sxth	r2, r3
 8002914:	4b54      	ldr	r3, [pc, #336]	; (8002a68 <updateAnalogSensor+0x33c>)
 8002916:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <updateAnalogSensor+0x32c>)
 800291a:	8a5b      	ldrh	r3, [r3, #18]
 800291c:	ee07 3a90 	vmov	s15, r3
 8002920:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002924:	4b4d      	ldr	r3, [pc, #308]	; (8002a5c <updateAnalogSensor+0x330>)
 8002926:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800292a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800292e:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <updateAnalogSensor+0x334>)
 8002930:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002938:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002a64 <updateAnalogSensor+0x338>
 800293c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002944:	ee17 3a90 	vmov	r3, s15
 8002948:	b21a      	sxth	r2, r3
 800294a:	4b47      	ldr	r3, [pc, #284]	; (8002a68 <updateAnalogSensor+0x33c>)
 800294c:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 800294e:	4b42      	ldr	r3, [pc, #264]	; (8002a58 <updateAnalogSensor+0x32c>)
 8002950:	8a9b      	ldrh	r3, [r3, #20]
 8002952:	ee07 3a90 	vmov	s15, r3
 8002956:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800295a:	4b40      	ldr	r3, [pc, #256]	; (8002a5c <updateAnalogSensor+0x330>)
 800295c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002960:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002964:	4b3e      	ldr	r3, [pc, #248]	; (8002a60 <updateAnalogSensor+0x334>)
 8002966:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800296a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800296e:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002a64 <updateAnalogSensor+0x338>
 8002972:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800297a:	ee17 3a90 	vmov	r3, s15
 800297e:	b21a      	sxth	r2, r3
 8002980:	4b39      	ldr	r3, [pc, #228]	; (8002a68 <updateAnalogSensor+0x33c>)
 8002982:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 8002984:	4b34      	ldr	r3, [pc, #208]	; (8002a58 <updateAnalogSensor+0x32c>)
 8002986:	8adb      	ldrh	r3, [r3, #22]
 8002988:	ee07 3a90 	vmov	s15, r3
 800298c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002990:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <updateAnalogSensor+0x330>)
 8002992:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002996:	ee77 6a67 	vsub.f32	s13, s14, s15
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <updateAnalogSensor+0x334>)
 800299c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80029a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029a4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002a64 <updateAnalogSensor+0x338>
 80029a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b0:	ee17 3a90 	vmov	r3, s15
 80029b4:	b21a      	sxth	r2, r3
 80029b6:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <updateAnalogSensor+0x33c>)
 80029b8:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80029ba:	4b2c      	ldr	r3, [pc, #176]	; (8002a6c <updateAnalogSensor+0x340>)
 80029bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <updateAnalogSensor+0x340>)
 80029c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029c8:	4413      	add	r3, r2
 80029ca:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <updateAnalogSensor+0x340>)
 80029cc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80029d0:	4413      	add	r3, r2
 80029d2:	4a26      	ldr	r2, [pc, #152]	; (8002a6c <updateAnalogSensor+0x340>)
 80029d4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80029d8:	4413      	add	r3, r2
 80029da:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <updateAnalogSensor+0x340>)
 80029dc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <updateAnalogSensor+0x340>)
 80029e4:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80029e8:	4413      	add	r3, r2
 80029ea:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <updateAnalogSensor+0x340>)
 80029ec:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	4a1e      	ldr	r2, [pc, #120]	; (8002a6c <updateAnalogSensor+0x340>)
 80029f4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a1c      	ldr	r2, [pc, #112]	; (8002a6c <updateAnalogSensor+0x340>)
 80029fc:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a00:	4413      	add	r3, r2
 8002a02:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <updateAnalogSensor+0x340>)
 8002a04:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a08:	4413      	add	r3, r2
 8002a0a:	4a19      	ldr	r2, [pc, #100]	; (8002a70 <updateAnalogSensor+0x344>)
 8002a0c:	fb82 1203 	smull	r1, r2, r2, r3
 8002a10:	1092      	asrs	r2, r2, #2
 8002a12:	17db      	asrs	r3, r3, #31
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <updateAnalogSensor+0x348>)
 8002a1a:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <updateAnalogSensor+0x34c>)
 8002a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <updateAnalogSensor+0x34c>)
 8002a26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <updateAnalogSensor+0x34c>)
 8002a2e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a10      	ldr	r2, [pc, #64]	; (8002a78 <updateAnalogSensor+0x34c>)
 8002a36:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	4a0e      	ldr	r2, [pc, #56]	; (8002a78 <updateAnalogSensor+0x34c>)
 8002a3e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002a42:	4413      	add	r3, r2
 8002a44:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <updateAnalogSensor+0x34c>)
 8002a46:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a0a      	ldr	r2, [pc, #40]	; (8002a78 <updateAnalogSensor+0x34c>)
 8002a4e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	e012      	b.n	8002a7c <updateAnalogSensor+0x350>
 8002a56:	bf00      	nop
 8002a58:	20000290 	.word	0x20000290
 8002a5c:	2001cbe8 	.word	0x2001cbe8
 8002a60:	2001cc50 	.word	0x2001cc50
 8002a64:	447a0000 	.word	0x447a0000
 8002a68:	2001cc28 	.word	0x2001cc28
 8002a6c:	2000039c 	.word	0x2000039c
 8002a70:	66666667 	.word	0x66666667
 8002a74:	2001cbcc 	.word	0x2001cbcc
 8002a78:	200003b0 	.word	0x200003b0
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <updateAnalogSensor+0x3d0>)
 8002a7e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a1d      	ldr	r2, [pc, #116]	; (8002afc <updateAnalogSensor+0x3d0>)
 8002a86:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	4a1b      	ldr	r2, [pc, #108]	; (8002afc <updateAnalogSensor+0x3d0>)
 8002a8e:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002a92:	4413      	add	r3, r2
 8002a94:	4a1a      	ldr	r2, [pc, #104]	; (8002b00 <updateAnalogSensor+0x3d4>)
 8002a96:	fb82 1203 	smull	r1, r2, r2, r3
 8002a9a:	1092      	asrs	r2, r2, #2
 8002a9c:	17db      	asrs	r3, r3, #31
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	b21a      	sxth	r2, r3
 8002aa2:	4b18      	ldr	r3, [pc, #96]	; (8002b04 <updateAnalogSensor+0x3d8>)
 8002aa4:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	607b      	str	r3, [r7, #4]
 8002aaa:	e01a      	b.n	8002ae2 <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002aac:	4a16      	ldr	r2, [pc, #88]	; (8002b08 <updateAnalogSensor+0x3dc>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ab4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab8:	db05      	blt.n	8002ac6 <updateAnalogSensor+0x39a>
 8002aba:	4a13      	ldr	r2, [pc, #76]	; (8002b08 <updateAnalogSensor+0x3dc>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ac2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <updateAnalogSensor+0x3dc>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	dc04      	bgt.n	8002adc <updateAnalogSensor+0x3b0>
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	; (8002b08 <updateAnalogSensor+0x3dc>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b0b      	cmp	r3, #11
 8002ae6:	dde1      	ble.n	8002aac <updateAnalogSensor+0x380>
	}
    L_index = 0;
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <updateAnalogSensor+0x3e0>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	701a      	strb	r2, [r3, #0]

}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	200003b0 	.word	0x200003b0
 8002b00:	66666667 	.word	0x66666667
 8002b04:	2001cc48 	.word	0x2001cc48
 8002b08:	2001cc28 	.word	0x2001cc28
 8002b0c:	20000038 	.word	0x20000038

08002b10 <sensorCalibration>:

void sensorCalibration()//センサキャリブレーションはノムさんに修正してもらいました
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b0a2      	sub	sp, #136	; 0x88
 8002b14:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002b16:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002b1a:	2230      	movs	r2, #48	; 0x30
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f00b fb97 	bl	800e252 <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002b24:	f107 0314 	add.w	r3, r7, #20
 8002b28:	2230      	movs	r2, #48	; 0x30
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f00b fb90 	bl	800e252 <memset>
 8002b32:	4bd5      	ldr	r3, [pc, #852]	; (8002e88 <sensorCalibration+0x378>)
 8002b34:	617b      	str	r3, [r7, #20]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002b3c:	e026      	b.n	8002b8c <sensorCalibration+0x7c>
		max_values[i] = 00;
 8002b3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b42:	4ad2      	ldr	r2, [pc, #840]	; (8002e8c <sensorCalibration+0x37c>)
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 8002b4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b52:	4acf      	ldr	r2, [pc, #828]	; (8002e90 <sensorCalibration+0x380>)
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	4ace      	ldr	r2, [pc, #824]	; (8002e94 <sensorCalibration+0x384>)
 8002b5a:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002b5c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b66:	4413      	add	r3, r2
 8002b68:	3b44      	subs	r3, #68	; 0x44
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 8002b70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3b74      	subs	r3, #116	; 0x74
 8002b7e:	4ac5      	ldr	r2, [pc, #788]	; (8002e94 <sensorCalibration+0x384>)
 8002b80:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b86:	3301      	adds	r3, #1
 8002b88:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
 8002b8c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8002b90:	2b0b      	cmp	r3, #11
 8002b92:	d9d4      	bls.n	8002b3e <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002b9a:	e013      	b.n	8002bc4 <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002b9c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002ba0:	4abd      	ldr	r2, [pc, #756]	; (8002e98 <sensorCalibration+0x388>)
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4413      	add	r3, r2
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002bac:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002bb0:	4aba      	ldr	r2, [pc, #744]	; (8002e9c <sensorCalibration+0x38c>)
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	4ab7      	ldr	r2, [pc, #732]	; (8002e94 <sensorCalibration+0x384>)
 8002bb8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002bba:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
 8002bc4:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d9e7      	bls.n	8002b9c <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw2
 8002bcc:	e1cd      	b.n	8002f6a <sensorCalibration+0x45a>

		ereaseSensorLog();
 8002bce:	f000 fb19 	bl	8003204 <ereaseSensorLog>
		setLED2('X');
 8002bd2:	2058      	movs	r0, #88	; 0x58
 8002bd4:	f7fe ff60 	bl	8001a98 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002bde:	e06e      	b.n	8002cbe <sensorCalibration+0x1ae>

			max_values_buffer[i] = adc_value[i];
 8002be0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002be4:	4aae      	ldr	r2, [pc, #696]	; (8002ea0 <sensorCalibration+0x390>)
 8002be6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002bea:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002bee:	ee07 2a90 	vmov	s15, r2
 8002bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3b44      	subs	r3, #68	; 0x44
 8002c00:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 8002c04:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c08:	4aa5      	ldr	r2, [pc, #660]	; (8002ea0 <sensorCalibration+0x390>)
 8002c0a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c0e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c12:	ee07 2a90 	vmov	s15, r2
 8002c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c20:	4413      	add	r3, r2
 8002c22:	3b74      	subs	r3, #116	; 0x74
 8002c24:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002c28:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c32:	4413      	add	r3, r2
 8002c34:	3b44      	subs	r3, #68	; 0x44
 8002c36:	ed93 7a00 	vldr	s14, [r3]
 8002c3a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c3e:	4a93      	ldr	r2, [pc, #588]	; (8002e8c <sensorCalibration+0x37c>)
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	dd0d      	ble.n	8002c6e <sensorCalibration+0x15e>
				max_values[i] = max_values_buffer[i];
 8002c52:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8002c56:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002c60:	440a      	add	r2, r1
 8002c62:	3a44      	subs	r2, #68	; 0x44
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	4989      	ldr	r1, [pc, #548]	; (8002e8c <sensorCalibration+0x37c>)
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002c6e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002c78:	4413      	add	r3, r2
 8002c7a:	3b74      	subs	r3, #116	; 0x74
 8002c7c:	ed93 7a00 	vldr	s14, [r3]
 8002c80:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002c84:	4a82      	ldr	r2, [pc, #520]	; (8002e90 <sensorCalibration+0x380>)
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	edd3 7a00 	vldr	s15, [r3]
 8002c8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c96:	d50d      	bpl.n	8002cb4 <sensorCalibration+0x1a4>
				min_values[i] = min_values_buffer[i];
 8002c98:	f8b7 2082 	ldrh.w	r2, [r7, #130]	; 0x82
 8002c9c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002ca0:	0092      	lsls	r2, r2, #2
 8002ca2:	f107 0188 	add.w	r1, r7, #136	; 0x88
 8002ca6:	440a      	add	r2, r1
 8002ca8:	3a74      	subs	r2, #116	; 0x74
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	4978      	ldr	r1, [pc, #480]	; (8002e90 <sensorCalibration+0x380>)
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002cb4:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
 8002cbe:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8002cc2:	2b0b      	cmp	r3, #11
 8002cc4:	d98c      	bls.n	8002be0 <sensorCalibration+0xd0>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8002ccc:	e073      	b.n	8002db6 <sensorCalibration+0x2a6>
			side_max_values_buffer[i] = side_adc_value[i];
 8002cce:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002cd2:	4a74      	ldr	r2, [pc, #464]	; (8002ea4 <sensorCalibration+0x394>)
 8002cd4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cd8:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002cdc:	ee07 2a90 	vmov	s15, r2
 8002ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002cea:	4413      	add	r3, r2
 8002cec:	3b7c      	subs	r3, #124	; 0x7c
 8002cee:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 8002cf2:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002cf6:	4a6b      	ldr	r2, [pc, #428]	; (8002ea4 <sensorCalibration+0x394>)
 8002cf8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cfc:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d00:	ee07 2a90 	vmov	s15, r2
 8002d04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d0e:	4413      	add	r3, r2
 8002d10:	3b84      	subs	r3, #132	; 0x84
 8002d12:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 8002d16:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d20:	4413      	add	r3, r2
 8002d22:	3b7c      	subs	r3, #124	; 0x7c
 8002d24:	ed93 7a00 	vldr	s14, [r3]
 8002d28:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d2c:	4a5a      	ldr	r2, [pc, #360]	; (8002e98 <sensorCalibration+0x388>)
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d3e:	dd10      	ble.n	8002d62 <sensorCalibration+0x252>
				side_max_values[i] = side_adc_value[i];
 8002d40:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d44:	4a57      	ldr	r2, [pc, #348]	; (8002ea4 <sensorCalibration+0x394>)
 8002d46:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d4a:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d4e:	ee07 2a90 	vmov	s15, r2
 8002d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d56:	4a50      	ldr	r2, [pc, #320]	; (8002e98 <sensorCalibration+0x388>)
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	edc3 7a00 	vstr	s15, [r3]
 8002d60:	e024      	b.n	8002dac <sensorCalibration+0x29c>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002d62:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3b84      	subs	r3, #132	; 0x84
 8002d70:	ed93 7a00 	vldr	s14, [r3]
 8002d74:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d78:	4a48      	ldr	r2, [pc, #288]	; (8002e9c <sensorCalibration+0x38c>)
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	edd3 7a00 	vldr	s15, [r3]
 8002d82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	d50f      	bpl.n	8002dac <sensorCalibration+0x29c>
				side_min_values[i] = side_adc_value[i];
 8002d8c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d90:	4a44      	ldr	r2, [pc, #272]	; (8002ea4 <sensorCalibration+0x394>)
 8002d92:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002d96:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002d9a:	ee07 2a90 	vmov	s15, r2
 8002d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da2:	4a3e      	ldr	r2, [pc, #248]	; (8002e9c <sensorCalibration+0x38c>)
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002dac:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002db0:	3301      	adds	r3, #1
 8002db2:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
 8002db6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d987      	bls.n	8002cce <sensorCalibration+0x1be>
			}
		}

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002dc4:	e01b      	b.n	8002dfe <sensorCalibration+0x2ee>
			sensor_coefficient[i] = max_values[i] - min_values[i];
 8002dc6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002dca:	4a30      	ldr	r2, [pc, #192]	; (8002e8c <sensorCalibration+0x37c>)
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	ed93 7a00 	vldr	s14, [r3]
 8002dd4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002dd8:	4a2d      	ldr	r2, [pc, #180]	; (8002e90 <sensorCalibration+0x380>)
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	4413      	add	r3, r2
 8002dde:	edd3 7a00 	vldr	s15, [r3]
 8002de2:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dea:	4a2f      	ldr	r2, [pc, #188]	; (8002ea8 <sensorCalibration+0x398>)
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002df4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002df8:	3301      	adds	r3, #1
 8002dfa:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002dfe:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002e02:	2b0b      	cmp	r3, #11
 8002e04:	d9df      	bls.n	8002dc6 <sensorCalibration+0x2b6>
		}
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002e0c:	e010      	b.n	8002e30 <sensorCalibration+0x320>
			offset_values[i] = min_values[i];
 8002e0e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002e12:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002e16:	491e      	ldr	r1, [pc, #120]	; (8002e90 <sensorCalibration+0x380>)
 8002e18:	0092      	lsls	r2, r2, #2
 8002e1a:	440a      	add	r2, r1
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	4923      	ldr	r1, [pc, #140]	; (8002eac <sensorCalibration+0x39c>)
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002e26:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002e30:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002e34:	2b0b      	cmp	r3, #11
 8002e36:	d9ea      	bls.n	8002e0e <sensorCalibration+0x2fe>
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e38:	2300      	movs	r3, #0
 8002e3a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002e3e:	e01b      	b.n	8002e78 <sensorCalibration+0x368>
			side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002e40:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002e44:	4a14      	ldr	r2, [pc, #80]	; (8002e98 <sensorCalibration+0x388>)
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	ed93 7a00 	vldr	s14, [r3]
 8002e4e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002e52:	4a12      	ldr	r2, [pc, #72]	; (8002e9c <sensorCalibration+0x38c>)
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002e60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e64:	4a12      	ldr	r2, [pc, #72]	; (8002eb0 <sensorCalibration+0x3a0>)
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e6e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002e72:	3301      	adds	r3, #1
 8002e74:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002e78:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d9df      	bls.n	8002e40 <sensorCalibration+0x330>
		}
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e80:	2300      	movs	r3, #0
 8002e82:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002e86:	e026      	b.n	8002ed6 <sensorCalibration+0x3c6>
 8002e88:	447a0000 	.word	0x447a0000
 8002e8c:	2001cdb0 	.word	0x2001cdb0
 8002e90:	20000000 	.word	0x20000000
 8002e94:	44bb8000 	.word	0x44bb8000
 8002e98:	2001cd60 	.word	0x2001cd60
 8002e9c:	20000030 	.word	0x20000030
 8002ea0:	20000290 	.word	0x20000290
 8002ea4:	200002a8 	.word	0x200002a8
 8002ea8:	2001cc50 	.word	0x2001cc50
 8002eac:	2001cbe8 	.word	0x2001cbe8
 8002eb0:	2001cc20 	.word	0x2001cc20
			side_offset_values[i] = side_min_values[i];
 8002eb4:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002eb8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002ebc:	4930      	ldr	r1, [pc, #192]	; (8002f80 <sensorCalibration+0x470>)
 8002ebe:	0092      	lsls	r2, r2, #2
 8002ec0:	440a      	add	r2, r1
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	492f      	ldr	r1, [pc, #188]	; (8002f84 <sensorCalibration+0x474>)
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ecc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002ed6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d9ea      	bls.n	8002eb4 <sensorCalibration+0x3a4>
		}

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002ede:	2300      	movs	r3, #0
 8002ee0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002ee4:	e01a      	b.n	8002f1c <sensorCalibration+0x40c>
			saveSensor(max_values[i]);
 8002ee6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002eea:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <sensorCalibration+0x478>)
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef8:	f000 f8a8 	bl	800304c <saveSensor>
			saveSensor(min_values[i]);
 8002efc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002f00:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <sensorCalibration+0x47c>)
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f0e:	f000 f89d 	bl	800304c <saveSensor>
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002f12:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002f16:	3301      	adds	r3, #1
 8002f18:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002f1c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002f20:	2b0b      	cmp	r3, #11
 8002f22:	d9e0      	bls.n	8002ee6 <sensorCalibration+0x3d6>
		}
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002f2a:	e01a      	b.n	8002f62 <sensorCalibration+0x452>
			saveSensor(side_max_values[i]);
 8002f2c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002f30:	4a17      	ldr	r2, [pc, #92]	; (8002f90 <sensorCalibration+0x480>)
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	4413      	add	r3, r2
 8002f36:	edd3 7a00 	vldr	s15, [r3]
 8002f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f3e:	f000 f885 	bl	800304c <saveSensor>
			saveSensor(side_min_values[i]);
 8002f42:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002f46:	4a0e      	ldr	r2, [pc, #56]	; (8002f80 <sensorCalibration+0x470>)
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	edd3 7a00 	vldr	s15, [r3]
 8002f50:	eeb0 0a67 	vmov.f32	s0, s15
 8002f54:	f000 f87a 	bl	800304c <saveSensor>
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002f58:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002f62:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d9e0      	bls.n	8002f2c <sensorCalibration+0x41c>
	while(getSwitchStatus('L') == 1){                       //sw2
 8002f6a:	204c      	movs	r0, #76	; 0x4c
 8002f6c:	f004 fbb2 	bl	80076d4 <getSwitchStatus>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	f43f ae2b 	beq.w	8002bce <sensorCalibration+0xbe>
		}
	}
}
 8002f78:	bf00      	nop
 8002f7a:	3788      	adds	r7, #136	; 0x88
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000030 	.word	0x20000030
 8002f84:	2001cbe0 	.word	0x2001cbe0
 8002f88:	2001cdb0 	.word	0x2001cdb0
 8002f8c:	20000000 	.word	0x20000000
 8002f90:	2001cd60 	.word	0x2001cd60

08002f94 <initLog>:
static float log_debug[18000];
static float log_distance[2000];//int16_tにできるならしたい
static float log_theta[2000];//int16_tにできるならしたい
static uint16_t log_sensor_cnt, log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
	writeAdd_0 = start_adress_sector6;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <initLog+0x70>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <initLog+0x74>)
 8002f9e:	6013      	str	r3, [r2, #0]
	writeAdd_1 = start_adress_sector7;
 8002fa0:	4b1a      	ldr	r3, [pc, #104]	; (800300c <initLog+0x78>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	; (8003010 <initLog+0x7c>)
 8002fa6:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <initLog+0x80>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a1a      	ldr	r2, [pc, #104]	; (8003018 <initLog+0x84>)
 8002fae:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002fb0:	4b1a      	ldr	r3, [pc, #104]	; (800301c <initLog+0x88>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1a      	ldr	r2, [pc, #104]	; (8003020 <initLog+0x8c>)
 8002fb6:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002fb8:	4b1a      	ldr	r3, [pc, #104]	; (8003024 <initLog+0x90>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a1a      	ldr	r2, [pc, #104]	; (8003028 <initLog+0x94>)
 8002fbe:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <initLog+0x98>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1a      	ldr	r2, [pc, #104]	; (8003030 <initLog+0x9c>)
 8002fc6:	6013      	str	r3, [r2, #0]
	readAdd_0 = start_adress_sector6;
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <initLog+0x70>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a19      	ldr	r2, [pc, #100]	; (8003034 <initLog+0xa0>)
 8002fce:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <initLog+0x78>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a18      	ldr	r2, [pc, #96]	; (8003038 <initLog+0xa4>)
 8002fd6:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002fd8:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <initLog+0x80>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a17      	ldr	r2, [pc, #92]	; (800303c <initLog+0xa8>)
 8002fde:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <initLog+0x88>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a16      	ldr	r2, [pc, #88]	; (8003040 <initLog+0xac>)
 8002fe6:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <initLog+0x90>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a15      	ldr	r2, [pc, #84]	; (8003044 <initLog+0xb0>)
 8002fee:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	; (800302c <initLog+0x98>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a14      	ldr	r2, [pc, #80]	; (8003048 <initLog+0xb4>)
 8002ff6:	6013      	str	r3, [r2, #0]
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	08012658 	.word	0x08012658
 8003008:	2001cc44 	.word	0x2001cc44
 800300c:	0801265c 	.word	0x0801265c
 8003010:	2001cbc8 	.word	0x2001cbc8
 8003014:	08012660 	.word	0x08012660
 8003018:	2001cc1c 	.word	0x2001cc1c
 800301c:	08012664 	.word	0x08012664
 8003020:	2001cbd8 	.word	0x2001cbd8
 8003024:	08012668 	.word	0x08012668
 8003028:	2001cbc0 	.word	0x2001cbc0
 800302c:	0801266c 	.word	0x0801266c
 8003030:	2001cbd4 	.word	0x2001cbd4
 8003034:	2001cbc4 	.word	0x2001cbc4
 8003038:	2001cbd0 	.word	0x2001cbd0
 800303c:	2001cbdc 	.word	0x2001cbdc
 8003040:	2001cc4c 	.word	0x2001cc4c
 8003044:	2001cc40 	.word	0x2001cc40
 8003048:	2001cc18 	.word	0x2001cc18

0800304c <saveSensor>:

void saveSensor(float sensor){
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_0, sensor);
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <saveSensor+0x2c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	ed97 0a01 	vldr	s0, [r7, #4]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fad0 	bl	8001604 <FLASH_Write_Word_F>
	writeAdd_0 += 0x04;
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <saveSensor+0x2c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	3304      	adds	r3, #4
 800306a:	4a03      	ldr	r2, [pc, #12]	; (8003078 <saveSensor+0x2c>)
 800306c:	6013      	str	r3, [r2, #0]
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	2001cc44 	.word	0x2001cc44

0800307c <saveDistance>:

void saveDistance(float distance){
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8003086:	4b08      	ldr	r3, [pc, #32]	; (80030a8 <saveDistance+0x2c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	ed97 0a01 	vldr	s0, [r7, #4]
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fab8 	bl	8001604 <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <saveDistance+0x2c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3304      	adds	r3, #4
 800309a:	4a03      	ldr	r2, [pc, #12]	; (80030a8 <saveDistance+0x2c>)
 800309c:	6013      	str	r3, [r2, #0]
}
 800309e:	bf00      	nop
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	2001cbc8 	.word	0x2001cbc8

080030ac <saveTheta>:

void saveTheta(float theta){
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <saveTheta+0x2c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe faa0 	bl	8001604 <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <saveTheta+0x2c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3304      	adds	r3, #4
 80030ca:	4a03      	ldr	r2, [pc, #12]	; (80030d8 <saveTheta+0x2c>)
 80030cc:	6013      	str	r3, [r2, #0]
}
 80030ce:	bf00      	nop
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	2001cc1c 	.word	0x2001cc1c

080030dc <saveCross>:

void saveCross(float cross){
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <saveCross+0x2c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	ed97 0a01 	vldr	s0, [r7, #4]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe fa88 	bl	8001604 <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <saveCross+0x2c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3304      	adds	r3, #4
 80030fa:	4a03      	ldr	r2, [pc, #12]	; (8003108 <saveCross+0x2c>)
 80030fc:	6013      	str	r3, [r2, #0]
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	2001cbd8 	.word	0x2001cbd8

0800310c <saveSide>:

void saveSide(float side){
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 8003116:	4b08      	ldr	r3, [pc, #32]	; (8003138 <saveSide+0x2c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	ed97 0a01 	vldr	s0, [r7, #4]
 800311e:	4618      	mov	r0, r3
 8003120:	f7fe fa70 	bl	8001604 <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8003124:	4b04      	ldr	r3, [pc, #16]	; (8003138 <saveSide+0x2c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3304      	adds	r3, #4
 800312a:	4a03      	ldr	r2, [pc, #12]	; (8003138 <saveSide+0x2c>)
 800312c:	6013      	str	r3, [r2, #0]
}
 800312e:	bf00      	nop
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	2001cbc0 	.word	0x2001cbc0

0800313c <saveDebug>:

void saveDebug(float value){
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 8003146:	4b08      	ldr	r3, [pc, #32]	; (8003168 <saveDebug+0x2c>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	ed97 0a01 	vldr	s0, [r7, #4]
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe fa58 	bl	8001604 <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8003154:	4b04      	ldr	r3, [pc, #16]	; (8003168 <saveDebug+0x2c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3304      	adds	r3, #4
 800315a:	4a03      	ldr	r2, [pc, #12]	; (8003168 <saveDebug+0x2c>)
 800315c:	6013      	str	r3, [r2, #0]
}
 800315e:	bf00      	nop
 8003160:	3708      	adds	r7, #8
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2001cbd4 	.word	0x2001cbd4

0800316c <ereaseLog>:


void ereaseLog(){
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8003170:	2007      	movs	r0, #7
 8003172:	f7fe fa27 	bl	80015c4 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 8003176:	2008      	movs	r0, #8
 8003178:	f7fe fa24 	bl	80015c4 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 800317c:	2009      	movs	r0, #9
 800317e:	f7fe fa21 	bl	80015c4 <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 8003182:	200a      	movs	r0, #10
 8003184:	f7fe fa1e 	bl	80015c4 <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8003188:	200b      	movs	r0, #11
 800318a:	f7fe fa1b 	bl	80015c4 <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 800318e:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <ereaseLog+0x50>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a0b      	ldr	r2, [pc, #44]	; (80031c0 <ereaseLog+0x54>)
 8003194:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <ereaseLog+0x58>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a0b      	ldr	r2, [pc, #44]	; (80031c8 <ereaseLog+0x5c>)
 800319c:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <ereaseLog+0x60>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a0b      	ldr	r2, [pc, #44]	; (80031d0 <ereaseLog+0x64>)
 80031a4:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 80031a6:	4b0b      	ldr	r3, [pc, #44]	; (80031d4 <ereaseLog+0x68>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <ereaseLog+0x6c>)
 80031ac:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <ereaseLog+0x70>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a0b      	ldr	r2, [pc, #44]	; (80031e0 <ereaseLog+0x74>)
 80031b4:	6013      	str	r3, [r2, #0]
}
 80031b6:	bf00      	nop
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	0801265c 	.word	0x0801265c
 80031c0:	2001cbc8 	.word	0x2001cbc8
 80031c4:	08012660 	.word	0x08012660
 80031c8:	2001cc1c 	.word	0x2001cc1c
 80031cc:	08012664 	.word	0x08012664
 80031d0:	2001cbd8 	.word	0x2001cbd8
 80031d4:	08012668 	.word	0x08012668
 80031d8:	2001cbc0 	.word	0x2001cbc0
 80031dc:	0801266c 	.word	0x0801266c
 80031e0:	2001cbd4 	.word	0x2001cbd4

080031e4 <ereaseDebugLog>:

void ereaseDebugLog(){
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 80031e8:	200b      	movs	r0, #11
 80031ea:	f7fe f9eb 	bl	80015c4 <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 80031ee:	4b03      	ldr	r3, [pc, #12]	; (80031fc <ereaseDebugLog+0x18>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a03      	ldr	r2, [pc, #12]	; (8003200 <ereaseDebugLog+0x1c>)
 80031f4:	6013      	str	r3, [r2, #0]
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	0801266c 	.word	0x0801266c
 8003200:	2001cbd4 	.word	0x2001cbd4

08003204 <ereaseSensorLog>:

void ereaseSensorLog(){
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_6);
 8003208:	2006      	movs	r0, #6
 800320a:	f7fe f9db 	bl	80015c4 <FLASH_EreaseSector>

	writeAdd_0= start_adress_sector6;
 800320e:	4b03      	ldr	r3, [pc, #12]	; (800321c <ereaseSensorLog+0x18>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a03      	ldr	r2, [pc, #12]	; (8003220 <ereaseSensorLog+0x1c>)
 8003214:	6013      	str	r3, [r2, #0]
}
 8003216:	bf00      	nop
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	08012658 	.word	0x08012658
 8003220:	2001cc44 	.word	0x2001cc44

08003224 <getSensorLogSize>:

uint16_t getSensorLogSize(){
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
	return log_sensor_cnt;
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <getSensorLogSize+0x14>)
 800322a:	881b      	ldrh	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20015d8c 	.word	0x20015d8c

0800323c <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 8003240:	4b03      	ldr	r3, [pc, #12]	; (8003250 <getDistanceLogSize+0x14>)
 8003242:	881b      	ldrh	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20015d8e 	.word	0x20015d8e

08003254 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 8003258:	4b03      	ldr	r3, [pc, #12]	; (8003268 <getCrossLogSize+0x14>)
 800325a:	881b      	ldrh	r3, [r3, #0]
}
 800325c:	4618      	mov	r0, r3
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	20015d92 	.word	0x20015d92

0800326c <getSideLogSize>:

uint16_t getSideLogSize(){
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
	return log_side_cnt;
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <getSideLogSize+0x14>)
 8003272:	881b      	ldrh	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	20015d94 	.word	0x20015d94

08003284 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8003284:	b480      	push	{r7}
 8003286:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8003288:	4b03      	ldr	r3, [pc, #12]	; (8003298 <getDebugLogSize+0x14>)
 800328a:	881b      	ldrh	r3, [r3, #0]
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	20015d96 	.word	0x20015d96

0800329c <loadSensor>:

void loadSensor(){
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	80fb      	strh	r3, [r7, #6]
	readAdd_0 = start_adress_sector6;
 80032a6:	4b18      	ldr	r3, [pc, #96]	; (8003308 <loadSensor+0x6c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a18      	ldr	r2, [pc, #96]	; (800330c <loadSensor+0x70>)
 80032ac:	6013      	str	r3, [r2, #0]
	log_sensor_cnt = 0;
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <loadSensor+0x74>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	801a      	strh	r2, [r3, #0]

	while(1){
		log_sensor[i] = *(float*)readAdd_0;
 80032b4:	4b15      	ldr	r3, [pc, #84]	; (800330c <loadSensor+0x70>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	4915      	ldr	r1, [pc, #84]	; (8003314 <loadSensor+0x78>)
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	601a      	str	r2, [r3, #0]
		if(isnan(log_sensor[i]) != 0){
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	4a12      	ldr	r2, [pc, #72]	; (8003314 <loadSensor+0x78>)
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	edd3 7a00 	vldr	s15, [r3]
 80032d2:	eef4 7a67 	vcmp.f32	s15, s15
 80032d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032da:	d60e      	bvs.n	80032fa <loadSensor+0x5e>
			break;
		}
		else{
			log_sensor_cnt++;
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <loadSensor+0x74>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <loadSensor+0x74>)
 80032e6:	801a      	strh	r2, [r3, #0]
		}
		readAdd_0 += 0x04;
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <loadSensor+0x70>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4a07      	ldr	r2, [pc, #28]	; (800330c <loadSensor+0x70>)
 80032f0:	6013      	str	r3, [r2, #0]
		i++;
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	3301      	adds	r3, #1
 80032f6:	80fb      	strh	r3, [r7, #6]
		log_sensor[i] = *(float*)readAdd_0;
 80032f8:	e7dc      	b.n	80032b4 <loadSensor+0x18>
			break;
 80032fa:	bf00      	nop
	}
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	08012658 	.word	0x08012658
 800330c:	2001cbc4 	.word	0x2001cbc4
 8003310:	20015d8c 	.word	0x20015d8c
 8003314:	200003c4 	.word	0x200003c4

08003318 <loadDistance>:

void loadDistance(){
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 8003322:	4b18      	ldr	r3, [pc, #96]	; (8003384 <loadDistance+0x6c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a18      	ldr	r2, [pc, #96]	; (8003388 <loadDistance+0x70>)
 8003328:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 800332a:	4b18      	ldr	r3, [pc, #96]	; (800338c <loadDistance+0x74>)
 800332c:	2200      	movs	r2, #0
 800332e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 8003330:	4b15      	ldr	r3, [pc, #84]	; (8003388 <loadDistance+0x70>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	461a      	mov	r2, r3
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	6812      	ldr	r2, [r2, #0]
 800333a:	4915      	ldr	r1, [pc, #84]	; (8003390 <loadDistance+0x78>)
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	4a12      	ldr	r2, [pc, #72]	; (8003390 <loadDistance+0x78>)
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	edd3 7a00 	vldr	s15, [r3]
 800334e:	eef4 7a67 	vcmp.f32	s15, s15
 8003352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003356:	d60e      	bvs.n	8003376 <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 8003358:	4b0c      	ldr	r3, [pc, #48]	; (800338c <loadDistance+0x74>)
 800335a:	881b      	ldrh	r3, [r3, #0]
 800335c:	3301      	adds	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	4b0a      	ldr	r3, [pc, #40]	; (800338c <loadDistance+0x74>)
 8003362:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <loadDistance+0x70>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3304      	adds	r3, #4
 800336a:	4a07      	ldr	r2, [pc, #28]	; (8003388 <loadDistance+0x70>)
 800336c:	6013      	str	r3, [r2, #0]
		i++;
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	3301      	adds	r3, #1
 8003372:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 8003374:	e7dc      	b.n	8003330 <loadDistance+0x18>
			break;
 8003376:	bf00      	nop
	}
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	0801265c 	.word	0x0801265c
 8003388:	2001cbd0 	.word	0x2001cbd0
 800338c:	20015d8e 	.word	0x20015d8e
 8003390:	20011f0c 	.word	0x20011f0c

08003394 <loadTheta>:

void loadTheta(){
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800339a:	2300      	movs	r3, #0
 800339c:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 800339e:	4b18      	ldr	r3, [pc, #96]	; (8003400 <loadTheta+0x6c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a18      	ldr	r2, [pc, #96]	; (8003404 <loadTheta+0x70>)
 80033a4:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 80033a6:	4b18      	ldr	r3, [pc, #96]	; (8003408 <loadTheta+0x74>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 80033ac:	4b15      	ldr	r3, [pc, #84]	; (8003404 <loadTheta+0x70>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	88fb      	ldrh	r3, [r7, #6]
 80033b4:	6812      	ldr	r2, [r2, #0]
 80033b6:	4915      	ldr	r1, [pc, #84]	; (800340c <loadTheta+0x78>)
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	4a12      	ldr	r2, [pc, #72]	; (800340c <loadTheta+0x78>)
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	edd3 7a00 	vldr	s15, [r3]
 80033ca:	eef4 7a67 	vcmp.f32	s15, s15
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	d60e      	bvs.n	80033f2 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <loadTheta+0x74>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <loadTheta+0x74>)
 80033de:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <loadTheta+0x70>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	3304      	adds	r3, #4
 80033e6:	4a07      	ldr	r2, [pc, #28]	; (8003404 <loadTheta+0x70>)
 80033e8:	6013      	str	r3, [r2, #0]
		i++;
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	3301      	adds	r3, #1
 80033ee:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 80033f0:	e7dc      	b.n	80033ac <loadTheta+0x18>
			break;
 80033f2:	bf00      	nop
	}
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	08012660 	.word	0x08012660
 8003404:	2001cbdc 	.word	0x2001cbdc
 8003408:	20015d90 	.word	0x20015d90
 800340c:	20013e4c 	.word	0x20013e4c

08003410 <loadCross>:

void loadCross(){
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <loadCross+0x6c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a18      	ldr	r2, [pc, #96]	; (8003480 <loadCross+0x70>)
 8003420:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 8003422:	4b18      	ldr	r3, [pc, #96]	; (8003484 <loadCross+0x74>)
 8003424:	2200      	movs	r2, #0
 8003426:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 8003428:	4b15      	ldr	r3, [pc, #84]	; (8003480 <loadCross+0x70>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	461a      	mov	r2, r3
 800342e:	88fb      	ldrh	r3, [r7, #6]
 8003430:	6812      	ldr	r2, [r2, #0]
 8003432:	4915      	ldr	r1, [pc, #84]	; (8003488 <loadCross+0x78>)
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	4a12      	ldr	r2, [pc, #72]	; (8003488 <loadCross+0x78>)
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	eef4 7a67 	vcmp.f32	s15, s15
 800344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800344e:	d60e      	bvs.n	800346e <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 8003450:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <loadCross+0x74>)
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	3301      	adds	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <loadCross+0x74>)
 800345a:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <loadCross+0x70>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	3304      	adds	r3, #4
 8003462:	4a07      	ldr	r2, [pc, #28]	; (8003480 <loadCross+0x70>)
 8003464:	6013      	str	r3, [r2, #0]
		i++;
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	3301      	adds	r3, #1
 800346a:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 800346c:	e7dc      	b.n	8003428 <loadCross+0x18>
			break;
 800346e:	bf00      	nop
	}
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	08012664 	.word	0x08012664
 8003480:	2001cc4c 	.word	0x2001cc4c
 8003484:	20015d92 	.word	0x20015d92
 8003488:	2000043c 	.word	0x2000043c

0800348c <loadSide>:

void loadSide(){
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 8003496:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <loadSide+0x6c>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a18      	ldr	r2, [pc, #96]	; (80034fc <loadSide+0x70>)
 800349c:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 800349e:	4b18      	ldr	r3, [pc, #96]	; (8003500 <loadSide+0x74>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 80034a4:	4b15      	ldr	r3, [pc, #84]	; (80034fc <loadSide+0x70>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	4915      	ldr	r1, [pc, #84]	; (8003504 <loadSide+0x78>)
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	440b      	add	r3, r1
 80034b4:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 80034b6:	88fb      	ldrh	r3, [r7, #6]
 80034b8:	4a12      	ldr	r2, [pc, #72]	; (8003504 <loadSide+0x78>)
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	edd3 7a00 	vldr	s15, [r3]
 80034c2:	eef4 7a67 	vcmp.f32	s15, s15
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	d60e      	bvs.n	80034ea <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <loadSide+0x74>)
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	4b0a      	ldr	r3, [pc, #40]	; (8003500 <loadSide+0x74>)
 80034d6:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <loadSide+0x70>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3304      	adds	r3, #4
 80034de:	4a07      	ldr	r2, [pc, #28]	; (80034fc <loadSide+0x70>)
 80034e0:	6013      	str	r3, [r2, #0]
		i++;
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	3301      	adds	r3, #1
 80034e6:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 80034e8:	e7dc      	b.n	80034a4 <loadSide+0x18>
			break;
 80034ea:	bf00      	nop
	}
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr
 80034f8:	08012668 	.word	0x08012668
 80034fc:	2001cc40 	.word	0x2001cc40
 8003500:	20015d94 	.word	0x20015d94
 8003504:	20000504 	.word	0x20000504

08003508 <loadDebug>:

void loadDebug(){
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 8003512:	4b18      	ldr	r3, [pc, #96]	; (8003574 <loadDebug+0x6c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a18      	ldr	r2, [pc, #96]	; (8003578 <loadDebug+0x70>)
 8003518:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <loadDebug+0x74>)
 800351c:	2200      	movs	r2, #0
 800351e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 8003520:	4b15      	ldr	r3, [pc, #84]	; (8003578 <loadDebug+0x70>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	461a      	mov	r2, r3
 8003526:	88fb      	ldrh	r3, [r7, #6]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	4915      	ldr	r1, [pc, #84]	; (8003580 <loadDebug+0x78>)
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 8003532:	88fb      	ldrh	r3, [r7, #6]
 8003534:	4a12      	ldr	r2, [pc, #72]	; (8003580 <loadDebug+0x78>)
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	edd3 7a00 	vldr	s15, [r3]
 800353e:	eef4 7a67 	vcmp.f32	s15, s15
 8003542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003546:	d60e      	bvs.n	8003566 <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 8003548:	4b0c      	ldr	r3, [pc, #48]	; (800357c <loadDebug+0x74>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	3301      	adds	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	4b0a      	ldr	r3, [pc, #40]	; (800357c <loadDebug+0x74>)
 8003552:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 8003554:	4b08      	ldr	r3, [pc, #32]	; (8003578 <loadDebug+0x70>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	3304      	adds	r3, #4
 800355a:	4a07      	ldr	r2, [pc, #28]	; (8003578 <loadDebug+0x70>)
 800355c:	6013      	str	r3, [r2, #0]
		i++;
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	3301      	adds	r3, #1
 8003562:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 8003564:	e7dc      	b.n	8003520 <loadDebug+0x18>
			break;
 8003566:	bf00      	nop
	}
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	0801266c 	.word	0x0801266c
 8003578:	2001cc18 	.word	0x2001cc18
 800357c:	20015d96 	.word	0x20015d96
 8003580:	200005cc 	.word	0x200005cc

08003584 <getSensorArrayPointer>:

const float *getSensorArrayPointer(){
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
	return log_sensor;
 8003588:	4b02      	ldr	r3, [pc, #8]	; (8003594 <getSensorArrayPointer+0x10>)
}
 800358a:	4618      	mov	r0, r3
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	200003c4 	.word	0x200003c4

08003598 <getDistanceArrayPointer>:

const float *getDistanceArrayPointer(){
 8003598:	b480      	push	{r7}
 800359a:	af00      	add	r7, sp, #0
	return log_distance;
 800359c:	4b02      	ldr	r3, [pc, #8]	; (80035a8 <getDistanceArrayPointer+0x10>)
}
 800359e:	4618      	mov	r0, r3
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	20011f0c 	.word	0x20011f0c

080035ac <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
	return log_theta;
 80035b0:	4b02      	ldr	r3, [pc, #8]	; (80035bc <getThetaArrayPointer+0x10>)
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	20013e4c 	.word	0x20013e4c

080035c0 <getDistanceLog>:

float getSensorLog(uint16_t idx){
	return log_sensor[idx];
}

float getDistanceLog(uint16_t idx){
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 80035ca:	88fb      	ldrh	r3, [r7, #6]
 80035cc:	4a06      	ldr	r2, [pc, #24]	; (80035e8 <getDistanceLog+0x28>)
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	ee07 3a90 	vmov	s15, r3
}
 80035d8:	eeb0 0a67 	vmov.f32	s0, s15
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	20011f0c 	.word	0x20011f0c

080035ec <getCrossLog>:

float getThetaLog(uint16_t idx){
	return log_theta[idx];
}

float getCrossLog(uint16_t idx){
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 80035f6:	88fb      	ldrh	r3, [r7, #6]
 80035f8:	4a06      	ldr	r2, [pc, #24]	; (8003614 <getCrossLog+0x28>)
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	ee07 3a90 	vmov	s15, r3
}
 8003604:	eeb0 0a67 	vmov.f32	s0, s15
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	2000043c 	.word	0x2000043c

08003618 <getSideLog>:

float getSideLog(uint16_t idx){
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	4603      	mov	r3, r0
 8003620:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	4a06      	ldr	r2, [pc, #24]	; (8003640 <getSideLog+0x28>)
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	4413      	add	r3, r2
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	ee07 3a90 	vmov	s15, r3
}
 8003630:	eeb0 0a67 	vmov.f32	s0, s15
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	20000504 	.word	0x20000504

08003644 <getDebugLog>:

float getDebugLog(uint16_t idx){
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	4a06      	ldr	r2, [pc, #24]	; (800366c <getDebugLog+0x28>)
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	ee07 3a90 	vmov	s15, r3
}
 800365c:	eeb0 0a67 	vmov.f32	s0, s15
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	200005cc 	.word	0x200005cc

08003670 <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 800367a:	79fb      	ldrb	r3, [r7, #7]
 800367c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003680:	b2db      	uxtb	r3, r3
 8003682:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 8003684:	2200      	movs	r2, #0
 8003686:	2104      	movs	r1, #4
 8003688:	480d      	ldr	r0, [pc, #52]	; (80036c0 <read_byte+0x50>)
 800368a:	f005 fdd5 	bl	8009238 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 800368e:	f107 010f 	add.w	r1, r7, #15
 8003692:	2364      	movs	r3, #100	; 0x64
 8003694:	2201      	movs	r2, #1
 8003696:	480b      	ldr	r0, [pc, #44]	; (80036c4 <read_byte+0x54>)
 8003698:	f006 fbc0 	bl	8009e1c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 800369c:	f107 010e 	add.w	r1, r7, #14
 80036a0:	2364      	movs	r3, #100	; 0x64
 80036a2:	2201      	movs	r2, #1
 80036a4:	4807      	ldr	r0, [pc, #28]	; (80036c4 <read_byte+0x54>)
 80036a6:	f006 fced 	bl	800a084 <HAL_SPI_Receive>
		CS_SET;
 80036aa:	2201      	movs	r2, #1
 80036ac:	2104      	movs	r1, #4
 80036ae:	4804      	ldr	r0, [pc, #16]	; (80036c0 <read_byte+0x50>)
 80036b0:	f005 fdc2 	bl	8009238 <HAL_GPIO_WritePin>

	return val;
 80036b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	2001ceac 	.word	0x2001ceac

080036c8 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	4603      	mov	r3, r0
 80036d0:	460a      	mov	r2, r1
 80036d2:	71fb      	strb	r3, [r7, #7]
 80036d4:	4613      	mov	r3, r2
 80036d6:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80036e2:	2200      	movs	r2, #0
 80036e4:	2104      	movs	r1, #4
 80036e6:	480c      	ldr	r0, [pc, #48]	; (8003718 <write_byte+0x50>)
 80036e8:	f005 fda6 	bl	8009238 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80036ec:	f107 010f 	add.w	r1, r7, #15
 80036f0:	2364      	movs	r3, #100	; 0x64
 80036f2:	2201      	movs	r2, #1
 80036f4:	4809      	ldr	r0, [pc, #36]	; (800371c <write_byte+0x54>)
 80036f6:	f006 fb91 	bl	8009e1c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 80036fa:	1db9      	adds	r1, r7, #6
 80036fc:	2364      	movs	r3, #100	; 0x64
 80036fe:	2201      	movs	r2, #1
 8003700:	4806      	ldr	r0, [pc, #24]	; (800371c <write_byte+0x54>)
 8003702:	f006 fcbf 	bl	800a084 <HAL_SPI_Receive>
	CS_SET;
 8003706:	2201      	movs	r2, #1
 8003708:	2104      	movs	r1, #4
 800370a:	4803      	ldr	r0, [pc, #12]	; (8003718 <write_byte+0x50>)
 800370c:	f005 fd94 	bl	8009238 <HAL_GPIO_WritePin>
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}
 8003718:	40020c00 	.word	0x40020c00
 800371c:	2001ceac 	.word	0x2001ceac

08003720 <IMU_init>:

uint8_t IMU_init() {
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 800372a:	2075      	movs	r0, #117	; 0x75
 800372c:	f7ff ffa0 	bl	8003670 <read_byte>
 8003730:	4603      	mov	r3, r0
 8003732:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 8003734:	79bb      	ldrb	r3, [r7, #6]
 8003736:	2b70      	cmp	r3, #112	; 0x70
 8003738:	d110      	bne.n	800375c <IMU_init+0x3c>
		ret = 1;
 800373a:	2301      	movs	r3, #1
 800373c:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 800373e:	2100      	movs	r1, #0
 8003740:	206b      	movs	r0, #107	; 0x6b
 8003742:	f7ff ffc1 	bl	80036c8 <write_byte>
		HAL_Delay(100);
 8003746:	2064      	movs	r0, #100	; 0x64
 8003748:	f004 f944 	bl	80079d4 <HAL_Delay>
		write_byte(0x1A, 0x00);
 800374c:	2100      	movs	r1, #0
 800374e:	201a      	movs	r0, #26
 8003750:	f7ff ffba 	bl	80036c8 <write_byte>
		write_byte(0x1B, 0x18);
 8003754:	2118      	movs	r1, #24
 8003756:	201b      	movs	r0, #27
 8003758:	f7ff ffb6 	bl	80036c8 <write_byte>
	}
	return ret;
 800375c:	79fb      	ldrb	r3, [r7, #7]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
	...

08003768 <read_gyro_data>:

void read_gyro_data() {
 8003768:	b598      	push	{r3, r4, r7, lr}
 800376a:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 800376c:	2047      	movs	r0, #71	; 0x47
 800376e:	f7ff ff7f 	bl	8003670 <read_byte>
 8003772:	4603      	mov	r3, r0
 8003774:	021b      	lsls	r3, r3, #8
 8003776:	b21c      	sxth	r4, r3
 8003778:	2048      	movs	r0, #72	; 0x48
 800377a:	f7ff ff79 	bl	8003670 <read_byte>
 800377e:	4603      	mov	r3, r0
 8003780:	b21b      	sxth	r3, r3
 8003782:	4323      	orrs	r3, r4
 8003784:	b21a      	sxth	r2, r3
 8003786:	4b02      	ldr	r3, [pc, #8]	; (8003790 <read_gyro_data+0x28>)
 8003788:	801a      	strh	r2, [r3, #0]
}
 800378a:	bf00      	nop
 800378c:	bd98      	pop	{r3, r4, r7, pc}
 800378e:	bf00      	nop
 8003790:	2001cde0 	.word	0x2001cde0
 8003794:	00000000 	.word	0x00000000

08003798 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 2400, ki = 30000, kd = 0.0;
 800379e:	4b62      	ldr	r3, [pc, #392]	; (8003928 <calculateVelocityControlFlip+0x190>)
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	4b62      	ldr	r3, [pc, #392]	; (800392c <calculateVelocityControlFlip+0x194>)
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 80037ac:	f04f 0300 	mov.w	r3, #0
 80037b0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 80037b2:	f000 f931 	bl	8003a18 <getCurrentVelocity>
 80037b6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 80037ba:	4b5d      	ldr	r3, [pc, #372]	; (8003930 <calculateVelocityControlFlip+0x198>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	f040 80a8 	bne.w	8003914 <calculateVelocityControlFlip+0x17c>
		if(i_clear_flag == 1){
 80037c4:	4b5b      	ldr	r3, [pc, #364]	; (8003934 <calculateVelocityControlFlip+0x19c>)
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d106      	bne.n	80037da <calculateVelocityControlFlip+0x42>
			i = 0;
 80037cc:	4b5a      	ldr	r3, [pc, #360]	; (8003938 <calculateVelocityControlFlip+0x1a0>)
 80037ce:	f04f 0200 	mov.w	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 80037d4:	4b57      	ldr	r3, [pc, #348]	; (8003934 <calculateVelocityControlFlip+0x19c>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 80037da:	f000 f8e9 	bl	80039b0 <setvariablespeed>
 80037de:	eeb0 7a40 	vmov.f32	s14, s0
 80037e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ea:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 80037ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80037f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80037f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fa:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 80037fe:	4b4e      	ldr	r3, [pc, #312]	; (8003938 <calculateVelocityControlFlip+0x1a0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f7fc fea0 	bl	8000548 <__aeabi_f2d>
 8003808:	4604      	mov	r4, r0
 800380a:	460d      	mov	r5, r1
 800380c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003810:	edd7 7a04 	vldr	s15, [r7, #16]
 8003814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003818:	ee17 0a90 	vmov	r0, s15
 800381c:	f7fc fe94 	bl	8000548 <__aeabi_f2d>
 8003820:	a33f      	add	r3, pc, #252	; (adr r3, 8003920 <calculateVelocityControlFlip+0x188>)
 8003822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003826:	f7fc fee7 	bl	80005f8 <__aeabi_dmul>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4620      	mov	r0, r4
 8003830:	4629      	mov	r1, r5
 8003832:	f7fc fd2b 	bl	800028c <__adddf3>
 8003836:	4603      	mov	r3, r0
 8003838:	460c      	mov	r4, r1
 800383a:	4618      	mov	r0, r3
 800383c:	4621      	mov	r1, r4
 800383e:	f7fd f9d3 	bl	8000be8 <__aeabi_d2f>
 8003842:	4602      	mov	r2, r0
 8003844:	4b3c      	ldr	r3, [pc, #240]	; (8003938 <calculateVelocityControlFlip+0x1a0>)
 8003846:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 8003848:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <calculateVelocityControlFlip+0x1a0>)
 800384a:	ed93 7a00 	vldr	s14, [r3]
 800384e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003856:	4b39      	ldr	r3, [pc, #228]	; (800393c <calculateVelocityControlFlip+0x1a4>)
 8003858:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 800385c:	4a38      	ldr	r2, [pc, #224]	; (8003940 <calculateVelocityControlFlip+0x1a8>)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	6013      	str	r3, [r2, #0]
		mon_i = i;
 8003862:	4b35      	ldr	r3, [pc, #212]	; (8003938 <calculateVelocityControlFlip+0x1a0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a37      	ldr	r2, [pc, #220]	; (8003944 <calculateVelocityControlFlip+0x1ac>)
 8003868:	6013      	str	r3, [r2, #0]
		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		//velocity_control_term = p + i + d;//速度制御のPIDゲイン調整の時はこのコメント文をはずす

		if(getControl_Mode() == 1){
 800386a:	f003 fb45 	bl	8006ef8 <getControl_Mode>
 800386e:	eeb0 7a40 	vmov.f32	s14, s0
 8003872:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8003876:	eeb4 7a67 	vcmp.f32	s14, s15
 800387a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800387e:	d10e      	bne.n	800389e <calculateVelocityControlFlip+0x106>
		    velocity_control_term = p + i + d;
 8003880:	4b2d      	ldr	r3, [pc, #180]	; (8003938 <calculateVelocityControlFlip+0x1a0>)
 8003882:	ed93 7a00 	vldr	s14, [r3]
 8003886:	edd7 7a02 	vldr	s15, [r7, #8]
 800388a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800388e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003896:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <calculateVelocityControlFlip+0x1b0>)
 8003898:	edc3 7a00 	vstr	s15, [r3]
 800389c:	e037      	b.n	800390e <calculateVelocityControlFlip+0x176>
		}
		else if(getControl_Mode() == 2){
 800389e:	f003 fb2b 	bl	8006ef8 <getControl_Mode>
 80038a2:	eeb0 7a40 	vmov.f32	s14, s0
 80038a6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80038aa:	eeb4 7a67 	vcmp.f32	s14, s15
 80038ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b2:	d10e      	bne.n	80038d2 <calculateVelocityControlFlip+0x13a>
			velocity_control_term = p + i + d;
 80038b4:	4b20      	ldr	r3, [pc, #128]	; (8003938 <calculateVelocityControlFlip+0x1a0>)
 80038b6:	ed93 7a00 	vldr	s14, [r3]
 80038ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80038be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80038c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ca:	4b1f      	ldr	r3, [pc, #124]	; (8003948 <calculateVelocityControlFlip+0x1b0>)
 80038cc:	edc3 7a00 	vstr	s15, [r3]
 80038d0:	e01d      	b.n	800390e <calculateVelocityControlFlip+0x176>
		}
		else if(getControl_Mode() == 5){
 80038d2:	f003 fb11 	bl	8006ef8 <getControl_Mode>
 80038d6:	eeb0 7a40 	vmov.f32	s14, s0
 80038da:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 80038de:	eeb4 7a67 	vcmp.f32	s14, s15
 80038e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e6:	d112      	bne.n	800390e <calculateVelocityControlFlip+0x176>
			velocity_control_term = (p + i + d) + target_acceleration;//速度PID ＋ フィードフォワード制御 2自由度制御
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <calculateVelocityControlFlip+0x1a0>)
 80038ea:	ed93 7a00 	vldr	s14, [r3]
 80038ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80038f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80038fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038fe:	4b13      	ldr	r3, [pc, #76]	; (800394c <calculateVelocityControlFlip+0x1b4>)
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003908:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <calculateVelocityControlFlip+0x1b0>)
 800390a:	edc3 7a00 	vstr	s15, [r3]
			//velocity_control_term = p + i + d;
		}

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 800390e:	4a10      	ldr	r2, [pc, #64]	; (8003950 <calculateVelocityControlFlip+0x1b8>)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6013      	str	r3, [r2, #0]

	}

}
 8003914:	bf00      	nop
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bdb0      	pop	{r4, r5, r7, pc}
 800391c:	f3af 8000 	nop.w
 8003920:	d2f1a9fc 	.word	0xd2f1a9fc
 8003924:	3f50624d 	.word	0x3f50624d
 8003928:	45160000 	.word	0x45160000
 800392c:	46ea6000 	.word	0x46ea6000
 8003930:	20015d98 	.word	0x20015d98
 8003934:	20015d99 	.word	0x20015d99
 8003938:	20015dac 	.word	0x20015dac
 800393c:	2001cdec 	.word	0x2001cdec
 8003940:	2001cdfc 	.word	0x2001cdfc
 8003944:	2001cdf4 	.word	0x2001cdf4
 8003948:	20015d9c 	.word	0x20015d9c
 800394c:	20015da4 	.word	0x20015da4
 8003950:	20015db0 	.word	0x20015db0

08003954 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8003958:	4b04      	ldr	r3, [pc, #16]	; (800396c <getVelocityControlTerm+0x18>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	ee07 3a90 	vmov	s15, r3
}
 8003960:	eeb0 0a67 	vmov.f32	s0, s15
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	20015d9c 	.word	0x20015d9c

08003970 <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 800397a:	4a04      	ldr	r2, [pc, #16]	; (800398c <setTargetVelocity+0x1c>)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6013      	str	r3, [r2, #0]
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr
 800398c:	20015da0 	.word	0x20015da0

08003990 <setTargetAcceleration>:

void setTargetAcceleration(float acceleration)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	ed87 0a01 	vstr	s0, [r7, #4]
	target_acceleration = acceleration;
 800399a:	4a04      	ldr	r2, [pc, #16]	; (80039ac <setTargetAcceleration+0x1c>)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6013      	str	r3, [r2, #0]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	20015da4 	.word	0x20015da4

080039b0 <setvariablespeed>:

float setvariablespeed(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 80039b4:	f7fd fd90 	bl	80014d8 <getspeedcount>
 80039b8:	eeb0 7a40 	vmov.f32	s14, s0
 80039bc:	4b13      	ldr	r3, [pc, #76]	; (8003a0c <setvariablespeed+0x5c>)
 80039be:	edd3 7a00 	vldr	s15, [r3]
 80039c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ca:	db04      	blt.n	80039d6 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <setvariablespeed+0x5c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0f      	ldr	r2, [pc, #60]	; (8003a10 <setvariablespeed+0x60>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e012      	b.n	80039fc <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 80039d6:	f7fd fd7f 	bl	80014d8 <getspeedcount>
 80039da:	eeb0 7a40 	vmov.f32	s14, s0
 80039de:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <setvariablespeed+0x5c>)
 80039e0:	edd3 7a00 	vldr	s15, [r3]
 80039e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ec:	d506      	bpl.n	80039fc <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 80039ee:	f7fd fd73 	bl	80014d8 <getspeedcount>
 80039f2:	eef0 7a40 	vmov.f32	s15, s0
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <setvariablespeed+0x60>)
 80039f8:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <setvariablespeed+0x60>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	ee07 3a90 	vmov	s15, r3
}
 8003a04:	eeb0 0a67 	vmov.f32	s0, s15
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20015da0 	.word	0x20015da0
 8003a10:	20015da8 	.word	0x20015da8
 8003a14:	00000000 	.word	0x00000000

08003a18 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	80fb      	strh	r3, [r7, #6]
 8003a22:	2300      	movs	r3, #0
 8003a24:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 8003a26:	1d3a      	adds	r2, r7, #4
 8003a28:	1dbb      	adds	r3, r7, #6
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7fd fc71 	bl	8001314 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	0fda      	lsrs	r2, r3, #31
 8003a40:	4413      	add	r3, r2
 8003a42:	105b      	asrs	r3, r3, #1
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a4c:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f7fc fd79 	bl	8000548 <__aeabi_f2d>
 8003a56:	a30d      	add	r3, pc, #52	; (adr r3, 8003a8c <getCurrentVelocity+0x74>)
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f7fc fdcc 	bl	80005f8 <__aeabi_dmul>
 8003a60:	4603      	mov	r3, r0
 8003a62:	460c      	mov	r4, r1
 8003a64:	4618      	mov	r0, r3
 8003a66:	4621      	mov	r1, r4
 8003a68:	f7fd f8be 	bl	8000be8 <__aeabi_d2f>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8003a70:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <getCurrentVelocity+0x70>)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	6013      	str	r3, [r2, #0]

	return current_velocity;
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	ee07 3a90 	vmov	s15, r3
}
 8003a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd90      	pop	{r4, r7, pc}
 8003a86:	bf00      	nop
 8003a88:	2001cdf0 	.word	0x2001cdf0
 8003a8c:	2df331e5 	.word	0x2df331e5
 8003a90:	3f878fcc 	.word	0x3f878fcc

08003a94 <getTargetVelocity>:

float getTargetVelocity()
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
	return target_velocity;
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <getTargetVelocity+0x18>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	ee07 3a90 	vmov	s15, r3
}
 8003aa0:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	20015da0 	.word	0x20015da0

08003ab0 <startVelocityControl>:
{
	return pid_plus;
}

void startVelocityControl(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <startVelocityControl+0x1c>)
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <startVelocityControl+0x20>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	701a      	strb	r2, [r3, #0]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20015d98 	.word	0x20015d98
 8003ad0:	20015d99 	.word	0x20015d99

08003ad4 <stopVelocityControl>:

void stopVelocityControl(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 8003ad8:	4b03      	ldr	r3, [pc, #12]	; (8003ae8 <stopVelocityControl+0x14>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr
 8003ae8:	20015d98 	.word	0x20015d98

08003aec <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <setClearFlagOfVelocityControlI+0x14>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	701a      	strb	r2, [r3, #0]
}
 8003af6:	bf00      	nop
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr
 8003b00:	20015d99 	.word	0x20015d99
 8003b04:	00000000 	.word	0x00000000

08003b08 <CreateXYcoordinates>:
static float Output_angularvelocity;

static bool check_flag;

void CreateXYcoordinates()
{
 8003b08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b0c:	b092      	sub	sp, #72	; 0x48
 8003b0e:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 8003b10:	f7ff fd42 	bl	8003598 <getDistanceArrayPointer>
 8003b14:	62b8      	str	r0, [r7, #40]	; 0x28
	p_theta = getThetaArrayPointer();
 8003b16:	f7ff fd49 	bl	80035ac <getThetaArrayPointer>
 8003b1a:	6278      	str	r0, [r7, #36]	; 0x24
	float temp_distance, temp_theta;
	float deltaX = 0, deltaY = 0;
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	623b      	str	r3, [r7, #32]
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]
	float prev_x = 0, prev_y = 0, prev_atan2 = 0;
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
	float atan2th = 0;
 8003b3a:	f04f 0300 	mov.w	r3, #0
 8003b3e:	643b      	str	r3, [r7, #64]	; 0x40
	float EuclideanDistance = 0;
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	60fb      	str	r3, [r7, #12]
	float delta_ang = 0;
 8003b46:	f04f 0300 	mov.w	r3, #0
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c

	float x = 0, y = 0, th = 0;
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b52:	f04f 0300 	mov.w	r3, #0
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	633b      	str	r3, [r7, #48]	; 0x30
	uint16_t log_size = getDistanceLogSize();
 8003b5e:	f7ff fb6d 	bl	800323c <getDistanceLogSize>
 8003b62:	4603      	mov	r3, r0
 8003b64:	817b      	strh	r3, [r7, #10]

	for(uint16_t i = 0; i < log_size; i++){
 8003b66:	2300      	movs	r3, #0
 8003b68:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003b6a:	e199      	b.n	8003ea0 <CreateXYcoordinates+0x398>
		temp_distance = p_distance[i];
 8003b6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b72:	4413      	add	r3, r2
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	607b      	str	r3, [r7, #4]
		temp_theta = p_theta[i];
 8003b78:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7e:	4413      	add	r3, r2
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	647b      	str	r3, [r7, #68]	; 0x44

		if(temp_theta == 0) temp_theta = 0.00001;
 8003b84:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003b88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b90:	d101      	bne.n	8003b96 <CreateXYcoordinates+0x8e>
 8003b92:	4bd3      	ldr	r3, [pc, #844]	; (8003ee0 <CreateXYcoordinates+0x3d8>)
 8003b94:	647b      	str	r3, [r7, #68]	; 0x44

		prev_x = x;
 8003b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b98:	61bb      	str	r3, [r7, #24]
		prev_y = y;
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b9c:	617b      	str	r3, [r7, #20]

		x = x + temp_distance * cos(th + temp_theta/2);//distanceとthetaからx座標を計算
 8003b9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ba0:	f7fc fcd2 	bl	8000548 <__aeabi_f2d>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	460d      	mov	r5, r1
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7fc fccd 	bl	8000548 <__aeabi_f2d>
 8003bae:	4680      	mov	r8, r0
 8003bb0:	4689      	mov	r9, r1
 8003bb2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003bb6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003bba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003bbe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc6:	ee17 0a90 	vmov	r0, s15
 8003bca:	f7fc fcbd 	bl	8000548 <__aeabi_f2d>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	ec43 2b10 	vmov	d0, r2, r3
 8003bd6:	f008 f98f 	bl	800bef8 <cos>
 8003bda:	ec53 2b10 	vmov	r2, r3, d0
 8003bde:	4640      	mov	r0, r8
 8003be0:	4649      	mov	r1, r9
 8003be2:	f7fc fd09 	bl	80005f8 <__aeabi_dmul>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4620      	mov	r0, r4
 8003bec:	4629      	mov	r1, r5
 8003bee:	f7fc fb4d 	bl	800028c <__adddf3>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	4621      	mov	r1, r4
 8003bfa:	f7fc fff5 	bl	8000be8 <__aeabi_d2f>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	63bb      	str	r3, [r7, #56]	; 0x38
		y = y + temp_distance * sin(th + temp_theta/2);//distanceとthetaからy座標を計算
 8003c02:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003c04:	f7fc fca0 	bl	8000548 <__aeabi_f2d>
 8003c08:	4604      	mov	r4, r0
 8003c0a:	460d      	mov	r5, r1
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7fc fc9b 	bl	8000548 <__aeabi_f2d>
 8003c12:	4680      	mov	r8, r0
 8003c14:	4689      	mov	r9, r1
 8003c16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003c1a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003c1e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003c22:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003c26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c2a:	ee17 0a90 	vmov	r0, s15
 8003c2e:	f7fc fc8b 	bl	8000548 <__aeabi_f2d>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	ec43 2b10 	vmov	d0, r2, r3
 8003c3a:	f008 f9a1 	bl	800bf80 <sin>
 8003c3e:	ec53 2b10 	vmov	r2, r3, d0
 8003c42:	4640      	mov	r0, r8
 8003c44:	4649      	mov	r1, r9
 8003c46:	f7fc fcd7 	bl	80005f8 <__aeabi_dmul>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4620      	mov	r0, r4
 8003c50:	4629      	mov	r1, r5
 8003c52:	f7fc fb1b 	bl	800028c <__adddf3>
 8003c56:	4603      	mov	r3, r0
 8003c58:	460c      	mov	r4, r1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	f7fc ffc3 	bl	8000be8 <__aeabi_d2f>
 8003c62:	4603      	mov	r3, r0
 8003c64:	637b      	str	r3, [r7, #52]	; 0x34
		th = th + temp_theta;//累積角度を計算
 8003c66:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003c6a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c72:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		deltaX = x - prev_x;
 8003c76:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003c7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c82:	edc7 7a08 	vstr	s15, [r7, #32]
		deltaY = y - prev_y;
 8003c86:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003c8a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c92:	edc7 7a07 	vstr	s15, [r7, #28]
		atan2th = atan2(deltaY, deltaX);//座標から角度を計算
 8003c96:	69f8      	ldr	r0, [r7, #28]
 8003c98:	f7fc fc56 	bl	8000548 <__aeabi_f2d>
 8003c9c:	4604      	mov	r4, r0
 8003c9e:	460d      	mov	r5, r1
 8003ca0:	6a38      	ldr	r0, [r7, #32]
 8003ca2:	f7fc fc51 	bl	8000548 <__aeabi_f2d>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	ec43 2b11 	vmov	d1, r2, r3
 8003cae:	ec45 4b10 	vmov	d0, r4, r5
 8003cb2:	f008 fa2f 	bl	800c114 <atan2>
 8003cb6:	ec54 3b10 	vmov	r3, r4, d0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	4621      	mov	r1, r4
 8003cbe:	f7fc ff93 	bl	8000be8 <__aeabi_d2f>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	643b      	str	r3, [r7, #64]	; 0x40

		if(i > 0){
 8003cc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d078      	beq.n	8003dbe <CreateXYcoordinates+0x2b6>
			prev_atan2 = Theta_table[i-1] / 1000;
 8003ccc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	4a84      	ldr	r2, [pc, #528]	; (8003ee4 <CreateXYcoordinates+0x3dc>)
 8003cd2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8003cd6:	4a84      	ldr	r2, [pc, #528]	; (8003ee8 <CreateXYcoordinates+0x3e0>)
 8003cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8003cdc:	1192      	asrs	r2, r2, #6
 8003cde:	17db      	asrs	r3, r3, #31
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	b21b      	sxth	r3, r3
 8003ce4:	ee07 3a90 	vmov	s15, r3
 8003ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cec:	edc7 7a04 	vstr	s15, [r7, #16]
			delta_ang = atan2th - prev_atan2;
 8003cf0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003cf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cfc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

			if(delta_ang > M_PI){
 8003d00:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d02:	f7fc fc21 	bl	8000548 <__aeabi_f2d>
 8003d06:	a370      	add	r3, pc, #448	; (adr r3, 8003ec8 <CreateXYcoordinates+0x3c0>)
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f7fc ff04 	bl	8000b18 <__aeabi_dcmpgt>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d024      	beq.n	8003d60 <CreateXYcoordinates+0x258>
				while(delta_ang > M_PI){
 8003d16:	e017      	b.n	8003d48 <CreateXYcoordinates+0x240>
				    atan2th -= 2 * M_PI;
 8003d18:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003d1a:	f7fc fc15 	bl	8000548 <__aeabi_f2d>
 8003d1e:	a36c      	add	r3, pc, #432	; (adr r3, 8003ed0 <CreateXYcoordinates+0x3c8>)
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f7fc fab0 	bl	8000288 <__aeabi_dsub>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	4621      	mov	r1, r4
 8003d30:	f7fc ff5a 	bl	8000be8 <__aeabi_d2f>
 8003d34:	4603      	mov	r3, r0
 8003d36:	643b      	str	r3, [r7, #64]	; 0x40
				    delta_ang = atan2th - prev_atan2;
 8003d38:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003d3c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d44:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				while(delta_ang > M_PI){
 8003d48:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d4a:	f7fc fbfd 	bl	8000548 <__aeabi_f2d>
 8003d4e:	a35e      	add	r3, pc, #376	; (adr r3, 8003ec8 <CreateXYcoordinates+0x3c0>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fee0 	bl	8000b18 <__aeabi_dcmpgt>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1dc      	bne.n	8003d18 <CreateXYcoordinates+0x210>
 8003d5e:	e02e      	b.n	8003dbe <CreateXYcoordinates+0x2b6>
				}
			}
			else if(delta_ang < -M_PI){
 8003d60:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003d62:	f7fc fbf1 	bl	8000548 <__aeabi_f2d>
 8003d66:	a35c      	add	r3, pc, #368	; (adr r3, 8003ed8 <CreateXYcoordinates+0x3d0>)
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f7fc feb6 	bl	8000adc <__aeabi_dcmplt>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d023      	beq.n	8003dbe <CreateXYcoordinates+0x2b6>
				while(delta_ang < -M_PI){
 8003d76:	e017      	b.n	8003da8 <CreateXYcoordinates+0x2a0>
					atan2th += 2 * M_PI;
 8003d78:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003d7a:	f7fc fbe5 	bl	8000548 <__aeabi_f2d>
 8003d7e:	a354      	add	r3, pc, #336	; (adr r3, 8003ed0 <CreateXYcoordinates+0x3c8>)
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	f7fc fa82 	bl	800028c <__adddf3>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	4621      	mov	r1, r4
 8003d90:	f7fc ff2a 	bl	8000be8 <__aeabi_d2f>
 8003d94:	4603      	mov	r3, r0
 8003d96:	643b      	str	r3, [r7, #64]	; 0x40
					delta_ang = atan2th - prev_atan2;
 8003d98:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003d9c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003da0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003da4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
				while(delta_ang < -M_PI){
 8003da8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003daa:	f7fc fbcd 	bl	8000548 <__aeabi_f2d>
 8003dae:	a34a      	add	r3, pc, #296	; (adr r3, 8003ed8 <CreateXYcoordinates+0x3d0>)
 8003db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db4:	f7fc fe92 	bl	8000adc <__aeabi_dcmplt>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1dc      	bne.n	8003d78 <CreateXYcoordinates+0x270>
				}
			}
		}


		EuclideanDistance = sqrt((x - prev_x) * (x - prev_x) + (y - prev_y) * (y - prev_y));//ユークリッド距離の計算
 8003dbe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003dc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dca:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8003dce:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dd2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dda:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8003dde:	edd7 7a05 	vldr	s15, [r7, #20]
 8003de2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003de6:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8003dea:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dee:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfa:	ee17 0a90 	vmov	r0, s15
 8003dfe:	f7fc fba3 	bl	8000548 <__aeabi_f2d>
 8003e02:	4603      	mov	r3, r0
 8003e04:	460c      	mov	r4, r1
 8003e06:	ec44 3b10 	vmov	d0, r3, r4
 8003e0a:	f008 f985 	bl	800c118 <sqrt>
 8003e0e:	ec54 3b10 	vmov	r3, r4, d0
 8003e12:	4618      	mov	r0, r3
 8003e14:	4621      	mov	r1, r4
 8003e16:	f7fc fee7 	bl	8000be8 <__aeabi_d2f>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	60fb      	str	r3, [r7, #12]
		Total_length_of_course += EuclideanDistance;
 8003e1e:	4b33      	ldr	r3, [pc, #204]	; (8003eec <CreateXYcoordinates+0x3e4>)
 8003e20:	ed93 7a00 	vldr	s14, [r3]
 8003e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e2c:	4b2f      	ldr	r3, [pc, #188]	; (8003eec <CreateXYcoordinates+0x3e4>)
 8003e2e:	edc3 7a00 	vstr	s15, [r3]

		X_table[i] = x;//int16で保存するために値を加工
 8003e32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e34:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003e38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e3c:	ee17 2a90 	vmov	r2, s15
 8003e40:	b211      	sxth	r1, r2
 8003e42:	4a2b      	ldr	r2, [pc, #172]	; (8003ef0 <CreateXYcoordinates+0x3e8>)
 8003e44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Y_table[i] = y;//int16で保存するために値を加工
 8003e48:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e4a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e52:	ee17 2a90 	vmov	r2, s15
 8003e56:	b211      	sxth	r1, r2
 8003e58:	4a26      	ldr	r2, [pc, #152]	; (8003ef4 <CreateXYcoordinates+0x3ec>)
 8003e5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		Theta_table[i] = atan2th * 1000;//int16で保存するために値を加工
 8003e5e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003e62:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003ef8 <CreateXYcoordinates+0x3f0>
 8003e66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e70:	ee17 2a90 	vmov	r2, s15
 8003e74:	b211      	sxth	r1, r2
 8003e76:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <CreateXYcoordinates+0x3dc>)
 8003e78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		EuclideanDistance_table[i] = EuclideanDistance * 100;
 8003e7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e80:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003efc <CreateXYcoordinates+0x3f4>
 8003e84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003e88:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e8e:	ee17 2a90 	vmov	r2, s15
 8003e92:	b291      	uxth	r1, r2
 8003e94:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <CreateXYcoordinates+0x3f8>)
 8003e96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint16_t i = 0; i < log_size; i++){
 8003e9a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e9c:	3301      	adds	r3, #1
 8003e9e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003ea0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	f4ff ae61 	bcc.w	8003b6c <CreateXYcoordinates+0x64>
		//saveDebug(Y_table[i]);//目標のy座標
		//saveDebug(Theta_table[i]/1000);//目標の車体角速度
		//saveDebug(EuclideanDistance_table[i]/1000);

	}
	Total_length_of_course = Total_length_of_course + 100;
 8003eaa:	4b10      	ldr	r3, [pc, #64]	; (8003eec <CreateXYcoordinates+0x3e4>)
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003efc <CreateXYcoordinates+0x3f4>
 8003eb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <CreateXYcoordinates+0x3e4>)
 8003eba:	edc3 7a00 	vstr	s15, [r3]
}
 8003ebe:	bf00      	nop
 8003ec0:	3748      	adds	r7, #72	; 0x48
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ec8:	54442d18 	.word	0x54442d18
 8003ecc:	400921fb 	.word	0x400921fb
 8003ed0:	54442d18 	.word	0x54442d18
 8003ed4:	401921fb 	.word	0x401921fb
 8003ed8:	54442d18 	.word	0x54442d18
 8003edc:	c00921fb 	.word	0xc00921fb
 8003ee0:	3727c5ac 	.word	0x3727c5ac
 8003ee4:	20017cf4 	.word	0x20017cf4
 8003ee8:	10624dd3 	.word	0x10624dd3
 8003eec:	20019c38 	.word	0x20019c38
 8003ef0:	20015db4 	.word	0x20015db4
 8003ef4:	20016d54 	.word	0x20016d54
 8003ef8:	447a0000 	.word	0x447a0000
 8003efc:	42c80000 	.word	0x42c80000
 8003f00:	20018c94 	.word	0x20018c94

08003f04 <CurrentXcoordinates>:

float CurrentXcoordinates(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
	static float pre_x;
	static float pre_th;
	float x = 0, th = 0;
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8003f16:	f7fd faa5 	bl	8001464 <getDistance10mm>
 8003f1a:	ed87 0a00 	vstr	s0, [r7]
	float now_X_theta = getTheta10mm();
 8003f1e:	f7fd fcb5 	bl	800188c <getTheta10mm>
 8003f22:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_X_theta == 0) now_X_theta = 0.00001;
 8003f26:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f2a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f32:	d101      	bne.n	8003f38 <CurrentXcoordinates+0x34>
 8003f34:	4b1a      	ldr	r3, [pc, #104]	; (8003fa0 <CurrentXcoordinates+0x9c>)
 8003f36:	60fb      	str	r3, [r7, #12]

	x = pre_x + now_distance * cosf(pre_th + now_X_theta/2);
 8003f38:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003f40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003f44:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <CurrentXcoordinates+0xa0>)
 8003f46:	edd3 7a00 	vldr	s15, [r3]
 8003f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f4e:	eeb0 0a67 	vmov.f32	s0, s15
 8003f52:	f008 f85d 	bl	800c010 <cosf>
 8003f56:	eeb0 7a40 	vmov.f32	s14, s0
 8003f5a:	edd7 7a00 	vldr	s15, [r7]
 8003f5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f62:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <CurrentXcoordinates+0xa4>)
 8003f64:	edd3 7a00 	vldr	s15, [r3]
 8003f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f6c:	edc7 7a02 	vstr	s15, [r7, #8]
	th = pre_th + now_X_theta;
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <CurrentXcoordinates+0xa0>)
 8003f72:	edd3 7a00 	vldr	s15, [r3]
 8003f76:	ed97 7a03 	vldr	s14, [r7, #12]
 8003f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f7e:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_x = x;
 8003f82:	4a09      	ldr	r2, [pc, #36]	; (8003fa8 <CurrentXcoordinates+0xa4>)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	6013      	str	r3, [r2, #0]
	pre_th = th;
 8003f88:	4a06      	ldr	r2, [pc, #24]	; (8003fa4 <CurrentXcoordinates+0xa0>)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6013      	str	r3, [r2, #0]

	return x;
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	ee07 3a90 	vmov	s15, r3
}
 8003f94:	eeb0 0a67 	vmov.f32	s0, s15
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	3727c5ac 	.word	0x3727c5ac
 8003fa4:	20019c60 	.word	0x20019c60
 8003fa8:	20019c64 	.word	0x20019c64

08003fac <CurrentYcoordinates>:

float CurrentYcoordinates(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
	static float pre_y;
	static float pre_th;
	float y = 0, th = 0;
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	607b      	str	r3, [r7, #4]

	float now_distance = getDistance10mm();
 8003fbe:	f7fd fa51 	bl	8001464 <getDistance10mm>
 8003fc2:	ed87 0a00 	vstr	s0, [r7]
	float now_Y_theta = getTheta10mm();
 8003fc6:	f7fd fc61 	bl	800188c <getTheta10mm>
 8003fca:	ed87 0a03 	vstr	s0, [r7, #12]

	if(now_Y_theta == 0) now_Y_theta = 0.00001;
 8003fce:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fd2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fda:	d101      	bne.n	8003fe0 <CurrentYcoordinates+0x34>
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <CurrentYcoordinates+0x9c>)
 8003fde:	60fb      	str	r3, [r7, #12]

	y = pre_y + now_distance * sinf(pre_th + now_Y_theta/2);
 8003fe0:	edd7 7a03 	vldr	s15, [r7, #12]
 8003fe4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003fe8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003fec:	4b17      	ldr	r3, [pc, #92]	; (800404c <CurrentYcoordinates+0xa0>)
 8003fee:	edd3 7a00 	vldr	s15, [r3]
 8003ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffa:	f008 f849 	bl	800c090 <sinf>
 8003ffe:	eeb0 7a40 	vmov.f32	s14, s0
 8004002:	edd7 7a00 	vldr	s15, [r7]
 8004006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800400a:	4b11      	ldr	r3, [pc, #68]	; (8004050 <CurrentYcoordinates+0xa4>)
 800400c:	edd3 7a00 	vldr	s15, [r3]
 8004010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004014:	edc7 7a02 	vstr	s15, [r7, #8]
	th = pre_th + now_Y_theta;
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <CurrentYcoordinates+0xa0>)
 800401a:	edd3 7a00 	vldr	s15, [r3]
 800401e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004026:	edc7 7a01 	vstr	s15, [r7, #4]

	pre_y = y;
 800402a:	4a09      	ldr	r2, [pc, #36]	; (8004050 <CurrentYcoordinates+0xa4>)
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	6013      	str	r3, [r2, #0]
	pre_th = th;
 8004030:	4a06      	ldr	r2, [pc, #24]	; (800404c <CurrentYcoordinates+0xa0>)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6013      	str	r3, [r2, #0]

	return y;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	ee07 3a90 	vmov	s15, r3
}
 800403c:	eeb0 0a67 	vmov.f32	s0, s15
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	3727c5ac 	.word	0x3727c5ac
 800404c:	20019c68 	.word	0x20019c68
 8004050:	20019c6c 	.word	0x20019c6c

08004054 <updateTargetpoint>:

void updateTargetpoint()
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
	static float mon_X_table, mon_Y_table, mon_Theta_table;

	if(getTargetUpdateflag() == true){
 8004058:	f002 ff02 	bl	8006e60 <getTargetUpdateflag>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80be 	beq.w	80041e0 <updateTargetpoint+0x18c>
		if(getVLT_Distance10mm() >= EuclideanDistance_table[euclideandistance_idx] / 100){
 8004064:	f7fd fa1a 	bl	800149c <getVLT_Distance10mm>
 8004068:	eeb0 7a40 	vmov.f32	s14, s0
 800406c:	4b5d      	ldr	r3, [pc, #372]	; (80041e4 <updateTargetpoint+0x190>)
 800406e:	881b      	ldrh	r3, [r3, #0]
 8004070:	461a      	mov	r2, r3
 8004072:	4b5d      	ldr	r3, [pc, #372]	; (80041e8 <updateTargetpoint+0x194>)
 8004074:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004078:	4a5c      	ldr	r2, [pc, #368]	; (80041ec <updateTargetpoint+0x198>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	b29b      	uxth	r3, r3
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800408a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800408e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004092:	db0d      	blt.n	80040b0 <updateTargetpoint+0x5c>
			euclideandistance_idx++;
 8004094:	4b53      	ldr	r3, [pc, #332]	; (80041e4 <updateTargetpoint+0x190>)
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	3301      	adds	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	4b51      	ldr	r3, [pc, #324]	; (80041e4 <updateTargetpoint+0x190>)
 800409e:	801a      	strh	r2, [r3, #0]
			targetpoint_table_idx++;
 80040a0:	4b53      	ldr	r3, [pc, #332]	; (80041f0 <updateTargetpoint+0x19c>)
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	3301      	adds	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	4b51      	ldr	r3, [pc, #324]	; (80041f0 <updateTargetpoint+0x19c>)
 80040aa:	801a      	strh	r2, [r3, #0]
			clearVLT_Distance10mm();
 80040ac:	f7fd fa04 	bl	80014b8 <clearVLT_Distance10mm>
		}
		if(targetpoint_table_idx >= getDistanceLogSize() ){
 80040b0:	f7ff f8c4 	bl	800323c <getDistanceLogSize>
 80040b4:	4603      	mov	r3, r0
 80040b6:	461a      	mov	r2, r3
 80040b8:	4b4d      	ldr	r3, [pc, #308]	; (80041f0 <updateTargetpoint+0x19c>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d838      	bhi.n	8004132 <updateTargetpoint+0xde>
			targetpoint_table_idx = getDistanceLogSize() - 1;
 80040c0:	f7ff f8bc 	bl	800323c <getDistanceLogSize>
 80040c4:	4603      	mov	r3, r0
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	4b49      	ldr	r3, [pc, #292]	; (80041f0 <updateTargetpoint+0x19c>)
 80040cc:	801a      	strh	r2, [r3, #0]
			mon_Y_table = Y_table[targetpoint_table_idx];
 80040ce:	4b48      	ldr	r3, [pc, #288]	; (80041f0 <updateTargetpoint+0x19c>)
 80040d0:	881b      	ldrh	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	4b47      	ldr	r3, [pc, #284]	; (80041f4 <updateTargetpoint+0x1a0>)
 80040d6:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040e2:	4b45      	ldr	r3, [pc, #276]	; (80041f8 <updateTargetpoint+0x1a4>)
 80040e4:	edc3 7a00 	vstr	s15, [r3]
			mon_Theta_table = Theta_table[targetpoint_table_idx];
 80040e8:	4b41      	ldr	r3, [pc, #260]	; (80041f0 <updateTargetpoint+0x19c>)
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	461a      	mov	r2, r3
 80040ee:	4b43      	ldr	r3, [pc, #268]	; (80041fc <updateTargetpoint+0x1a8>)
 80040f0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80040f4:	ee07 3a90 	vmov	s15, r3
 80040f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040fc:	4b40      	ldr	r3, [pc, #256]	; (8004200 <updateTargetpoint+0x1ac>)
 80040fe:	edc3 7a00 	vstr	s15, [r3]
			target_X_coordinate = -450;
 8004102:	4b40      	ldr	r3, [pc, #256]	; (8004204 <updateTargetpoint+0x1b0>)
 8004104:	4a40      	ldr	r2, [pc, #256]	; (8004208 <updateTargetpoint+0x1b4>)
 8004106:	601a      	str	r2, [r3, #0]
			target_Y_coordinate = mon_Y_table / 10;
 8004108:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <updateTargetpoint+0x1a4>)
 800410a:	ed93 7a00 	vldr	s14, [r3]
 800410e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004116:	4b3d      	ldr	r3, [pc, #244]	; (800420c <updateTargetpoint+0x1b8>)
 8004118:	edc3 7a00 	vstr	s15, [r3]
			target_Theta = mon_Theta_table / 1000;
 800411c:	4b38      	ldr	r3, [pc, #224]	; (8004200 <updateTargetpoint+0x1ac>)
 800411e:	ed93 7a00 	vldr	s14, [r3]
 8004122:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8004210 <updateTargetpoint+0x1bc>
 8004126:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800412a:	4b3a      	ldr	r3, [pc, #232]	; (8004214 <updateTargetpoint+0x1c0>)
 800412c:	edc3 7a00 	vstr	s15, [r3]
 8004130:	e044      	b.n	80041bc <updateTargetpoint+0x168>
		}
		else
		{
			mon_X_table = X_table[targetpoint_table_idx];
 8004132:	4b2f      	ldr	r3, [pc, #188]	; (80041f0 <updateTargetpoint+0x19c>)
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	4b37      	ldr	r3, [pc, #220]	; (8004218 <updateTargetpoint+0x1c4>)
 800413a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800413e:	ee07 3a90 	vmov	s15, r3
 8004142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004146:	4b35      	ldr	r3, [pc, #212]	; (800421c <updateTargetpoint+0x1c8>)
 8004148:	edc3 7a00 	vstr	s15, [r3]
			mon_Y_table = Y_table[targetpoint_table_idx];
 800414c:	4b28      	ldr	r3, [pc, #160]	; (80041f0 <updateTargetpoint+0x19c>)
 800414e:	881b      	ldrh	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	4b28      	ldr	r3, [pc, #160]	; (80041f4 <updateTargetpoint+0x1a0>)
 8004154:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004160:	4b25      	ldr	r3, [pc, #148]	; (80041f8 <updateTargetpoint+0x1a4>)
 8004162:	edc3 7a00 	vstr	s15, [r3]
			mon_Theta_table = Theta_table[targetpoint_table_idx];
 8004166:	4b22      	ldr	r3, [pc, #136]	; (80041f0 <updateTargetpoint+0x19c>)
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	4b23      	ldr	r3, [pc, #140]	; (80041fc <updateTargetpoint+0x1a8>)
 800416e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800417a:	4b21      	ldr	r3, [pc, #132]	; (8004200 <updateTargetpoint+0x1ac>)
 800417c:	edc3 7a00 	vstr	s15, [r3]

			target_X_coordinate = mon_X_table / 10;//1nt16の値を元に戻す
 8004180:	4b26      	ldr	r3, [pc, #152]	; (800421c <updateTargetpoint+0x1c8>)
 8004182:	ed93 7a00 	vldr	s14, [r3]
 8004186:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800418a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800418e:	4b1d      	ldr	r3, [pc, #116]	; (8004204 <updateTargetpoint+0x1b0>)
 8004190:	edc3 7a00 	vstr	s15, [r3]
			target_Y_coordinate = mon_Y_table / 10;//1nt16の値を元に戻す
 8004194:	4b18      	ldr	r3, [pc, #96]	; (80041f8 <updateTargetpoint+0x1a4>)
 8004196:	ed93 7a00 	vldr	s14, [r3]
 800419a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800419e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <updateTargetpoint+0x1b8>)
 80041a4:	edc3 7a00 	vstr	s15, [r3]
			target_Theta = mon_Theta_table / 1000;//1nt16の値を元に戻す
 80041a8:	4b15      	ldr	r3, [pc, #84]	; (8004200 <updateTargetpoint+0x1ac>)
 80041aa:	ed93 7a00 	vldr	s14, [r3]
 80041ae:	eddf 6a18 	vldr	s13, [pc, #96]	; 8004210 <updateTargetpoint+0x1bc>
 80041b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041b6:	4b17      	ldr	r3, [pc, #92]	; (8004214 <updateTargetpoint+0x1c0>)
 80041b8:	edc3 7a00 	vstr	s15, [r3]

		/*mon_X_table = X_table[targetpoint_table_idx];
		mon_Y_table = Y_table[targetpoint_table_idx];
		mon_Theta_table = Theta_table[targetpoint_table_idx];*/

		target_X_coordinate = mon_X_table;
 80041bc:	4b17      	ldr	r3, [pc, #92]	; (800421c <updateTargetpoint+0x1c8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a10      	ldr	r2, [pc, #64]	; (8004204 <updateTargetpoint+0x1b0>)
 80041c2:	6013      	str	r3, [r2, #0]
		target_Y_coordinate = mon_Y_table;
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <updateTargetpoint+0x1a4>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a10      	ldr	r2, [pc, #64]	; (800420c <updateTargetpoint+0x1b8>)
 80041ca:	6013      	str	r3, [r2, #0]
		target_Theta = mon_Theta_table / 1000;
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <updateTargetpoint+0x1ac>)
 80041ce:	ed93 7a00 	vldr	s14, [r3]
 80041d2:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8004210 <updateTargetpoint+0x1bc>
 80041d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041da:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <updateTargetpoint+0x1c0>)
 80041dc:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80041e0:	bf00      	nop
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20019c34 	.word	0x20019c34
 80041e8:	20018c94 	.word	0x20018c94
 80041ec:	51eb851f 	.word	0x51eb851f
 80041f0:	2001ce04 	.word	0x2001ce04
 80041f4:	20016d54 	.word	0x20016d54
 80041f8:	20019c70 	.word	0x20019c70
 80041fc:	20017cf4 	.word	0x20017cf4
 8004200:	20019c74 	.word	0x20019c74
 8004204:	20019c3c 	.word	0x20019c3c
 8004208:	c3e10000 	.word	0xc3e10000
 800420c:	20019c40 	.word	0x20019c40
 8004210:	447a0000 	.word	0x447a0000
 8004214:	20019c44 	.word	0x20019c44
 8004218:	20015db4 	.word	0x20015db4
 800421c:	20019c78 	.word	0x20019c78

08004220 <Error_XY>:

void Error_XY(const float now_X, const float now_Y, const float now_Theta)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	; 0x28
 8004224:	af00      	add	r7, sp, #0
 8004226:	ed87 0a03 	vstr	s0, [r7, #12]
 800422a:	edc7 0a02 	vstr	s1, [r7, #8]
 800422e:	ed87 1a01 	vstr	s2, [r7, #4]
	float X_e;
	float Y_e;
	float Theta_e;
	float sin_theta = sinf(now_Theta);
 8004232:	ed97 0a01 	vldr	s0, [r7, #4]
 8004236:	f007 ff2b 	bl	800c090 <sinf>
 800423a:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	float cos_theta = cosf(now_Theta);
 800423e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004242:	f007 fee5 	bl	800c010 <cosf>
 8004246:	ed87 0a08 	vstr	s0, [r7, #32]

	X_e = (target_X_coordinate - now_X) * cos_theta + (target_Y_coordinate - now_Y) * sin_theta;
 800424a:	4b2c      	ldr	r3, [pc, #176]	; (80042fc <Error_XY+0xdc>)
 800424c:	ed93 7a00 	vldr	s14, [r3]
 8004250:	edd7 7a03 	vldr	s15, [r7, #12]
 8004254:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004258:	edd7 7a08 	vldr	s15, [r7, #32]
 800425c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004260:	4b27      	ldr	r3, [pc, #156]	; (8004300 <Error_XY+0xe0>)
 8004262:	edd3 6a00 	vldr	s13, [r3]
 8004266:	edd7 7a02 	vldr	s15, [r7, #8]
 800426a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800426e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427a:	edc7 7a07 	vstr	s15, [r7, #28]
	Y_e = -(target_X_coordinate - now_X) * sin_theta + (target_Y_coordinate - now_Y) * cos_theta;
 800427e:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <Error_XY+0xdc>)
 8004280:	ed93 7a00 	vldr	s14, [r3]
 8004284:	edd7 7a03 	vldr	s15, [r7, #12]
 8004288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800428c:	eeb1 7a67 	vneg.f32	s14, s15
 8004290:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004294:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004298:	4b19      	ldr	r3, [pc, #100]	; (8004300 <Error_XY+0xe0>)
 800429a:	edd3 6a00 	vldr	s13, [r3]
 800429e:	edd7 7a02 	vldr	s15, [r7, #8]
 80042a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80042a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80042aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80042ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b2:	edc7 7a06 	vstr	s15, [r7, #24]
	Theta_e = target_Theta - now_Theta;
 80042b6:	4b13      	ldr	r3, [pc, #76]	; (8004304 <Error_XY+0xe4>)
 80042b8:	ed93 7a00 	vldr	s14, [r3]
 80042bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80042c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042c4:	edc7 7a05 	vstr	s15, [r7, #20]

	now_error_x = X_e;
 80042c8:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <Error_XY+0xe8>)
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	6013      	str	r3, [r2, #0]
	now_error_y = Y_e;
 80042ce:	4a0f      	ldr	r2, [pc, #60]	; (800430c <Error_XY+0xec>)
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	6013      	str	r3, [r2, #0]
	now_error_theta = Theta_e;
 80042d4:	4a0e      	ldr	r2, [pc, #56]	; (8004310 <Error_XY+0xf0>)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	6013      	str	r3, [r2, #0]

	saveDebug(X_e);
 80042da:	ed97 0a07 	vldr	s0, [r7, #28]
 80042de:	f7fe ff2d 	bl	800313c <saveDebug>
	saveDebug(Y_e);
 80042e2:	ed97 0a06 	vldr	s0, [r7, #24]
 80042e6:	f7fe ff29 	bl	800313c <saveDebug>
	saveDebug(Theta_e);
 80042ea:	ed97 0a05 	vldr	s0, [r7, #20]
 80042ee:	f7fe ff25 	bl	800313c <saveDebug>
}
 80042f2:	bf00      	nop
 80042f4:	3728      	adds	r7, #40	; 0x28
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20019c3c 	.word	0x20019c3c
 8004300:	20019c40 	.word	0x20019c40
 8004304:	20019c44 	.word	0x20019c44
 8004308:	20019c48 	.word	0x20019c48
 800430c:	20019c4c 	.word	0x20019c4c
 8004310:	20019c50 	.word	0x20019c50

08004314 <Velocity_Angularvelocity>:

void Velocity_Angularvelocity(void)//Kanayama Control Methodの計算関数 1msで回している
{
 8004314:	b580      	push	{r7, lr}
 8004316:	ed2d 8b02 	vpush	{d8}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
	float kx = 0.0001, ky = 0.0003, kt = 0.0003;//Kanayama Control Methodゲイン値調整 全て0でも走る
 800431e:	4b28      	ldr	r3, [pc, #160]	; (80043c0 <Velocity_Angularvelocity+0xac>)
 8004320:	61fb      	str	r3, [r7, #28]
 8004322:	4b28      	ldr	r3, [pc, #160]	; (80043c4 <Velocity_Angularvelocity+0xb0>)
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <Velocity_Angularvelocity+0xb0>)
 8004328:	617b      	str	r3, [r7, #20]
	float max_angularvelocity = 17.2 / (180/M_PI);//max角速度制限　式　制限角度(deg)/(180/π)
 800432a:	4b27      	ldr	r3, [pc, #156]	; (80043c8 <Velocity_Angularvelocity+0xb4>)
 800432c:	613b      	str	r3, [r7, #16]
	float min_angularvelocity = - (17.2 / (180/M_PI));//min角速度制限
 800432e:	4b27      	ldr	r3, [pc, #156]	; (80043cc <Velocity_Angularvelocity+0xb8>)
 8004330:	60fb      	str	r3, [r7, #12]

	float Target_velocity = getTargetVelocity();
 8004332:	f7ff fbaf 	bl	8003a94 <getTargetVelocity>
 8004336:	ed87 0a02 	vstr	s0, [r7, #8]
	float Target_angularvelocity = now_error_theta;
 800433a:	4b25      	ldr	r3, [pc, #148]	; (80043d0 <Velocity_Angularvelocity+0xbc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	607b      	str	r3, [r7, #4]

	Output_velocity = Target_velocity * cosf(now_error_theta) + kx * now_error_x;//車速計算(m/s)
 8004340:	4b23      	ldr	r3, [pc, #140]	; (80043d0 <Velocity_Angularvelocity+0xbc>)
 8004342:	edd3 7a00 	vldr	s15, [r3]
 8004346:	eeb0 0a67 	vmov.f32	s0, s15
 800434a:	f007 fe61 	bl	800c010 <cosf>
 800434e:	eeb0 7a40 	vmov.f32	s14, s0
 8004352:	edd7 7a02 	vldr	s15, [r7, #8]
 8004356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800435a:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <Velocity_Angularvelocity+0xc0>)
 800435c:	edd3 6a00 	vldr	s13, [r3]
 8004360:	edd7 7a07 	vldr	s15, [r7, #28]
 8004364:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800436c:	4b1a      	ldr	r3, [pc, #104]	; (80043d8 <Velocity_Angularvelocity+0xc4>)
 800436e:	edc3 7a00 	vstr	s15, [r3]
	Output_angularvelocity = Target_angularvelocity + Target_velocity * (ky * now_error_y + kt * sinf(now_error_theta));//車体の角速度計算(rad/s)
 8004372:	4b1a      	ldr	r3, [pc, #104]	; (80043dc <Velocity_Angularvelocity+0xc8>)
 8004374:	ed93 7a00 	vldr	s14, [r3]
 8004378:	edd7 7a06 	vldr	s15, [r7, #24]
 800437c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8004380:	4b13      	ldr	r3, [pc, #76]	; (80043d0 <Velocity_Angularvelocity+0xbc>)
 8004382:	edd3 7a00 	vldr	s15, [r3]
 8004386:	eeb0 0a67 	vmov.f32	s0, s15
 800438a:	f007 fe81 	bl	800c090 <sinf>
 800438e:	eeb0 7a40 	vmov.f32	s14, s0
 8004392:	edd7 7a05 	vldr	s15, [r7, #20]
 8004396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800439a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800439e:	edd7 7a02 	vldr	s15, [r7, #8]
 80043a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80043aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ae:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <Velocity_Angularvelocity+0xcc>)
 80043b0:	edc3 7a00 	vstr	s15, [r3]
	}
	else if(Output_angularvelocity <= min_angularvelocity)
	{
		Output_angularvelocity = min_angularvelocity;
	}*/
}
 80043b4:	bf00      	nop
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	ecbd 8b02 	vpop	{d8}
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	38d1b717 	.word	0x38d1b717
 80043c4:	399d4952 	.word	0x399d4952
 80043c8:	3e99b35f 	.word	0x3e99b35f
 80043cc:	be99b35f 	.word	0xbe99b35f
 80043d0:	20019c50 	.word	0x20019c50
 80043d4:	20019c48 	.word	0x20019c48
 80043d8:	20019c54 	.word	0x20019c54
 80043dc:	20019c4c 	.word	0x20019c4c
 80043e0:	20019c58 	.word	0x20019c58

080043e4 <getTotal_length>:
	else check_flag = false;

}

float getTotal_length()
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
	return Total_length_of_course;
 80043e8:	4b04      	ldr	r3, [pc, #16]	; (80043fc <getTotal_length+0x18>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	ee07 3a90 	vmov	s15, r3
}
 80043f0:	eeb0 0a67 	vmov.f32	s0, s15
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20019c38 	.word	0x20019c38

08004400 <getTargetpoint_X>:

float getTargetpoint_X()
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
	return target_X_coordinate;
 8004404:	4b04      	ldr	r3, [pc, #16]	; (8004418 <getTargetpoint_X+0x18>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	ee07 3a90 	vmov	s15, r3
}
 800440c:	eeb0 0a67 	vmov.f32	s0, s15
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	20019c3c 	.word	0x20019c3c

0800441c <getTargetpoint_Y>:

float getTargetpoint_Y()
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
	return target_Y_coordinate;
 8004420:	4b04      	ldr	r3, [pc, #16]	; (8004434 <getTargetpoint_Y+0x18>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	ee07 3a90 	vmov	s15, r3
}
 8004428:	eeb0 0a67 	vmov.f32	s0, s15
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	20019c40 	.word	0x20019c40

08004438 <getTargetpoint_Theta>:

float getTargetpoint_Theta()
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
	return target_Theta;
 800443c:	4b04      	ldr	r3, [pc, #16]	; (8004450 <getTargetpoint_Theta+0x18>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	ee07 3a90 	vmov	s15, r3
}
 8004444:	eeb0 0a67 	vmov.f32	s0, s15
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	20019c44 	.word	0x20019c44

08004454 <getOutput_velocity>:

float getOutput_velocity()
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
	return Output_velocity;
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <getOutput_velocity+0x18>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	ee07 3a90 	vmov	s15, r3
}
 8004460:	eeb0 0a67 	vmov.f32	s0, s15
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	20019c54 	.word	0x20019c54

08004470 <getOutput_angularvelocity>:

float getOutput_angularvelocity()
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
	return Output_angularvelocity;
 8004474:	4b04      	ldr	r3, [pc, #16]	; (8004488 <getOutput_angularvelocity+0x18>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	ee07 3a90 	vmov	s15, r3
}
 800447c:	eeb0 0a67 	vmov.f32	s0, s15
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr
 8004488:	20019c58 	.word	0x20019c58

0800448c <getcheckAngularvelocityFlag>:

bool getcheckAngularvelocityFlag()
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
	return check_flag;
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <getcheckAngularvelocityFlag+0x14>)
 8004492:	781b      	ldrb	r3, [r3, #0]
}
 8004494:	4618      	mov	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	20019c5c 	.word	0x20019c5c

080044a4 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 80044ac:	1d39      	adds	r1, r7, #4
 80044ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80044b2:	2201      	movs	r2, #1
 80044b4:	4803      	ldr	r0, [pc, #12]	; (80044c4 <__io_putchar+0x20>)
 80044b6:	f007 f8be 	bl	800b636 <HAL_UART_Transmit>
	return ch;
 80044ba:	687b      	ldr	r3, [r7, #4]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	3708      	adds	r7, #8
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	2001cf04 	.word	0x2001cf04

080044c8 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d121      	bne.n	800451e <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 80044da:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	3301      	adds	r3, #1
 80044e0:	4a18      	ldr	r2, [pc, #96]	; (8004544 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80044e2:	6013      	str	r3, [r2, #0]
      timer2++;
 80044e4:	4b18      	ldr	r3, [pc, #96]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3301      	adds	r3, #1
 80044ea:	4a17      	ldr	r2, [pc, #92]	; (8004548 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80044ec:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 80044ee:	f7fc fe37 	bl	8001160 <updateEncoderCnt>
      updateIMUValue();
 80044f2:	f7fd f8c1 	bl	8001678 <updateIMUValue>
      updateAnalogSensor();
 80044f6:	f7fe f919 	bl	800272c <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 80044fa:	f7fd fc69 	bl	8001dd0 <calculateLineFollowingTermFlip>
      Velocity_Angularvelocity();
 80044fe:	f7ff ff09 	bl	8004314 <Velocity_Angularvelocity>
      calculateVelocityControlFlip();
 8004502:	f7ff f949 	bl	8003798 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 8004506:	f7fc fd3f 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 800450a:	f7fd fde1 	bl	80020d0 <lineTraceFlip>
      runningFlip();
 800450e:	f001 fd2f 	bl	8005f70 <runningFlip>
      motorCtrlFlip();
 8004512:	f001 fa05 	bl	8005920 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 8004516:	f001 fa67 	bl	80059e8 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 800451a:	f001 fad3 	bl	8005ac4 <updateSideSensorStatus>

      //checkCourseOut();//コースアウト判定
      //checkAngularvelocity();//角速度のフェイルセーフ
   }

   if(htim->Instance == TIM7){//0.1ms
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a0a      	ldr	r2, [pc, #40]	; (800454c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d106      	bne.n	8004536 <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 8004528:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3301      	adds	r3, #1
 800452e:	4a08      	ldr	r2, [pc, #32]	; (8004550 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8004530:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 8004532:	f7fd ff05 	bl	8002340 <storeAnalogSensorBuffer>

   }
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40001000 	.word	0x40001000
 8004544:	2001ce08 	.word	0x2001ce08
 8004548:	2001ce50 	.word	0x2001ce50
 800454c:	40001400 	.word	0x40001400
 8004550:	2001d028 	.word	0x2001d028

08004554 <init>:

void init(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	  initADC();
 8004558:	f7fd fe76 	bl	8002248 <initADC>
	  initEncoder();
 800455c:	f7fc fde4 	bl	8001128 <initEncoder>
	  initLog();
 8004560:	f7fe fd18 	bl	8002f94 <initLog>
	  initGyro();
 8004564:	f7fd f878 	bl	8001658 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 8004568:	4809      	ldr	r0, [pc, #36]	; (8004590 <init+0x3c>)
 800456a:	f006 f972 	bl	800a852 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 800456e:	4809      	ldr	r0, [pc, #36]	; (8004594 <init+0x40>)
 8004570:	f006 f96f 	bl	800a852 <HAL_TIM_Base_Start_IT>

	  initMotor();
 8004574:	f001 f9bc 	bl	80058f0 <initMotor>

	  setLED('R');
 8004578:	2052      	movs	r0, #82	; 0x52
 800457a:	f7fd f9bf 	bl	80018fc <setLED>

	  sensorCalibration();
 800457e:	f7fe fac7 	bl	8002b10 <sensorCalibration>

	  HAL_Delay(1000);
 8004582:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004586:	f003 fa25 	bl	80079d4 <HAL_Delay>

}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	2001cfa4 	.word	0x2001cfa4
 8004594:	2001d08c 	.word	0x2001d08c

08004598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	b0ad      	sub	sp, #180	; 0xb4
 800459e:	af18      	add	r7, sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045a0:	f003 f9a6 	bl	80078f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045a4:	f000 fc52 	bl	8004e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045a8:	f001 f8e0 	bl	800576c <MX_GPIO_Init>
  MX_DMA_Init();
 80045ac:	f001 f8b6 	bl	800571c <MX_DMA_Init>
  MX_TIM1_Init();
 80045b0:	f000 fe66 	bl	8005280 <MX_TIM1_Init>
  MX_TIM3_Init();
 80045b4:	f000 fee6 	bl	8005384 <MX_TIM3_Init>
  MX_TIM4_Init();
 80045b8:	f000 ff38 	bl	800542c <MX_TIM4_Init>
  MX_TIM8_Init();
 80045bc:	f000 fff4 	bl	80055a8 <MX_TIM8_Init>
  MX_ADC1_Init();
 80045c0:	f000 fcae 	bl	8004f20 <MX_ADC1_Init>
  MX_I2C1_Init();
 80045c4:	f000 fdf8 	bl	80051b8 <MX_I2C1_Init>
  MX_SPI3_Init();
 80045c8:	f000 fe24 	bl	8005214 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80045cc:	f001 f87c 	bl	80056c8 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80045d0:	f000 ff80 	bl	80054d4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80045d4:	f000 ffb4 	bl	8005540 <MX_TIM7_Init>
  MX_ADC2_Init();
 80045d8:	f000 fd02 	bl	8004fe0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 80045dc:	f7ff ffba 	bl	8004554 <init>

  bool running_flag = false;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 80045e6:	204c      	movs	r0, #76	; 0x4c
 80045e8:	f003 f874 	bl	80076d4 <getSwitchStatus>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d109      	bne.n	8004606 <main+0x6e>
 80045f2:	4bb9      	ldr	r3, [pc, #740]	; (80048d8 <main+0x340>)
 80045f4:	881b      	ldrh	r3, [r3, #0]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d105      	bne.n	8004606 <main+0x6e>
		  timer = 0;
 80045fa:	4bb8      	ldr	r3, [pc, #736]	; (80048dc <main+0x344>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8004600:	4bb5      	ldr	r3, [pc, #724]	; (80048d8 <main+0x340>)
 8004602:	2201      	movs	r2, #1
 8004604:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8004606:	204c      	movs	r0, #76	; 0x4c
 8004608:	f003 f864 	bl	80076d4 <getSwitchStatus>
 800460c:	4603      	mov	r3, r0
 800460e:	2b01      	cmp	r3, #1
 8004610:	d10a      	bne.n	8004628 <main+0x90>
 8004612:	4bb2      	ldr	r3, [pc, #712]	; (80048dc <main+0x344>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	2b14      	cmp	r3, #20
 8004618:	d906      	bls.n	8004628 <main+0x90>
 800461a:	4baf      	ldr	r3, [pc, #700]	; (80048d8 <main+0x340>)
 800461c:	881b      	ldrh	r3, [r3, #0]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d102      	bne.n	8004628 <main+0x90>
		  sw = 2;
 8004622:	4bad      	ldr	r3, [pc, #692]	; (80048d8 <main+0x340>)
 8004624:	2202      	movs	r2, #2
 8004626:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 8004628:	4bac      	ldr	r3, [pc, #688]	; (80048dc <main+0x344>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b28      	cmp	r3, #40	; 0x28
 800462e:	d906      	bls.n	800463e <main+0xa6>
 8004630:	4ba9      	ldr	r3, [pc, #676]	; (80048d8 <main+0x340>)
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	2b01      	cmp	r3, #1
 8004636:	d102      	bne.n	800463e <main+0xa6>
		  sw = 0;
 8004638:	4ba7      	ldr	r3, [pc, #668]	; (80048d8 <main+0x340>)
 800463a:	2200      	movs	r2, #0
 800463c:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 800463e:	204c      	movs	r0, #76	; 0x4c
 8004640:	f003 f848 	bl	80076d4 <getSwitchStatus>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10c      	bne.n	8004664 <main+0xcc>
 800464a:	4ba3      	ldr	r3, [pc, #652]	; (80048d8 <main+0x340>)
 800464c:	881b      	ldrh	r3, [r3, #0]
 800464e:	2b02      	cmp	r3, #2
 8004650:	d108      	bne.n	8004664 <main+0xcc>
		  //mode_selector++;
		  soiya++;
 8004652:	4ba3      	ldr	r3, [pc, #652]	; (80048e0 <main+0x348>)
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	3301      	adds	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	4ba1      	ldr	r3, [pc, #644]	; (80048e0 <main+0x348>)
 800465c:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 800465e:	4b9e      	ldr	r3, [pc, #632]	; (80048d8 <main+0x340>)
 8004660:	2200      	movs	r2, #0
 8004662:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 8004664:	2052      	movs	r0, #82	; 0x52
 8004666:	f003 f835 	bl	80076d4 <getSwitchStatus>
 800466a:	4603      	mov	r3, r0
 800466c:	2b01      	cmp	r3, #1
 800466e:	d109      	bne.n	8004684 <main+0xec>
 8004670:	4b9c      	ldr	r3, [pc, #624]	; (80048e4 <main+0x34c>)
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d105      	bne.n	8004684 <main+0xec>
	  	  timer = 0;
 8004678:	4b98      	ldr	r3, [pc, #608]	; (80048dc <main+0x344>)
 800467a:	2200      	movs	r2, #0
 800467c:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 800467e:	4b99      	ldr	r3, [pc, #612]	; (80048e4 <main+0x34c>)
 8004680:	2201      	movs	r2, #1
 8004682:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8004684:	2052      	movs	r0, #82	; 0x52
 8004686:	f003 f825 	bl	80076d4 <getSwitchStatus>
 800468a:	4603      	mov	r3, r0
 800468c:	2b01      	cmp	r3, #1
 800468e:	d10a      	bne.n	80046a6 <main+0x10e>
 8004690:	4b92      	ldr	r3, [pc, #584]	; (80048dc <main+0x344>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b14      	cmp	r3, #20
 8004696:	d906      	bls.n	80046a6 <main+0x10e>
 8004698:	4b92      	ldr	r3, [pc, #584]	; (80048e4 <main+0x34c>)
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d102      	bne.n	80046a6 <main+0x10e>
	  	  sw2 = 2;
 80046a0:	4b90      	ldr	r3, [pc, #576]	; (80048e4 <main+0x34c>)
 80046a2:	2202      	movs	r2, #2
 80046a4:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 80046a6:	4b8d      	ldr	r3, [pc, #564]	; (80048dc <main+0x344>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b28      	cmp	r3, #40	; 0x28
 80046ac:	d906      	bls.n	80046bc <main+0x124>
 80046ae:	4b8d      	ldr	r3, [pc, #564]	; (80048e4 <main+0x34c>)
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d102      	bne.n	80046bc <main+0x124>
	  	  sw2 = 0;
 80046b6:	4b8b      	ldr	r3, [pc, #556]	; (80048e4 <main+0x34c>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 80046bc:	2052      	movs	r0, #82	; 0x52
 80046be:	f003 f809 	bl	80076d4 <getSwitchStatus>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d10c      	bne.n	80046e2 <main+0x14a>
 80046c8:	4b86      	ldr	r3, [pc, #536]	; (80048e4 <main+0x34c>)
 80046ca:	881b      	ldrh	r3, [r3, #0]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d108      	bne.n	80046e2 <main+0x14a>
	  	  cnt++;
 80046d0:	4b85      	ldr	r3, [pc, #532]	; (80048e8 <main+0x350>)
 80046d2:	881b      	ldrh	r3, [r3, #0]
 80046d4:	3301      	adds	r3, #1
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	4b83      	ldr	r3, [pc, #524]	; (80048e8 <main+0x350>)
 80046da:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 80046dc:	4b81      	ldr	r3, [pc, #516]	; (80048e4 <main+0x34c>)
 80046de:	2200      	movs	r2, #0
 80046e0:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 80046e2:	4b81      	ldr	r3, [pc, #516]	; (80048e8 <main+0x350>)
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d902      	bls.n	80046f0 <main+0x158>
		  cnt = 0;
 80046ea:	4b7f      	ldr	r3, [pc, #508]	; (80048e8 <main+0x350>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 80046f0:	4b7d      	ldr	r3, [pc, #500]	; (80048e8 <main+0x350>)
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00c      	beq.n	8004712 <main+0x17a>
		  HAL_Delay(1000);
 80046f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046fc:	f003 f96a 	bl	80079d4 <HAL_Delay>
		  running_flag = true;
 8004700:	2301      	movs	r3, #1
 8004702:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  timer2 = 0;
 8004706:	4b79      	ldr	r3, [pc, #484]	; (80048ec <main+0x354>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 800470c:	4b76      	ldr	r3, [pc, #472]	; (80048e8 <main+0x350>)
 800470e:	2200      	movs	r2, #0
 8004710:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 8004712:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004716:	f083 0301 	eor.w	r3, r3, #1
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d003      	beq.n	8004728 <main+0x190>
		  stopLineTrace();
 8004720:	f7fd fd74 	bl	800220c <stopLineTrace>
		  stopVelocityControl();
 8004724:	f7ff f9d6 	bl	8003ad4 <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){//goal判定
 8004728:	f002 fb8e 	bl	8006e48 <getgoalStatus>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d008      	beq.n	8004744 <main+0x1ac>
		  running_flag = false;
 8004732:	2300      	movs	r3, #0
 8004734:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  cnt = 0;
 8004738:	4b6b      	ldr	r3, [pc, #428]	; (80048e8 <main+0x350>)
 800473a:	2200      	movs	r2, #0
 800473c:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 800473e:	2000      	movs	r0, #0
 8004740:	f001 f9a2 	bl	8005a88 <setsuctionMotor>
		  //getgoalStatus() = false;
	  }

	  if(soiya >= 14){
 8004744:	4b66      	ldr	r3, [pc, #408]	; (80048e0 <main+0x348>)
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	2b0d      	cmp	r3, #13
 800474a:	d902      	bls.n	8004752 <main+0x1ba>
		  soiya = 0;
 800474c:	4b64      	ldr	r3, [pc, #400]	; (80048e0 <main+0x348>)
 800474e:	2200      	movs	r2, #0
 8004750:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 8004752:	4b63      	ldr	r3, [pc, #396]	; (80048e0 <main+0x348>)
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	2b0d      	cmp	r3, #13
 8004758:	f200 8347 	bhi.w	8004dea <main+0x852>
 800475c:	a201      	add	r2, pc, #4	; (adr r2, 8004764 <main+0x1cc>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	0800479d 	.word	0x0800479d
 8004768:	080047e5 	.word	0x080047e5
 800476c:	08004805 	.word	0x08004805
 8004770:	0800484b 	.word	0x0800484b
 8004774:	08004891 	.word	0x08004891
 8004778:	080048fd 	.word	0x080048fd
 800477c:	08004957 	.word	0x08004957
 8004780:	080049b1 	.word	0x080049b1
 8004784:	08004a0b 	.word	0x08004a0b
 8004788:	08004a61 	.word	0x08004a61
 800478c:	08004ab7 	.word	0x08004ab7
 8004790:	08004b0d 	.word	0x08004b0d
 8004794:	08004b63 	.word	0x08004b63
 8004798:	08004bb9 	.word	0x08004bb9

			  case 0:
				  setLED('W');
 800479c:	2057      	movs	r0, #87	; 0x57
 800479e:	f7fd f8ad 	bl	80018fc <setLED>
				  setLED2('R');
 80047a2:	2052      	movs	r0, #82	; 0x52
 80047a4:	f7fd f978 	bl	8001a98 <setLED2>
				  //printf("0\r\n");

				  if(running_flag == true){
 80047a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 831f 	beq.w	8004df0 <main+0x858>

				  		  //setsuctionMotor(500);
					      setRunMode(5);
 80047b2:	2005      	movs	r0, #5
 80047b4:	f001 f9b0 	bl	8005b18 <setRunMode>
					      setVelocityRange(1.5, 3.0);
 80047b8:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80047bc:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80047c0:	f002 fb5a 	bl	8006e78 <setVelocityRange>
						  setAccDec(7, 3);
 80047c4:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80047c8:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 80047cc:	f002 fb6c 	bl	8006ea8 <setAccDec>
						  setStraightRadius(1000);
 80047d0:	ed9f 0a49 	vldr	s0, [pc, #292]	; 80048f8 <main+0x360>
 80047d4:	f002 fb80 	bl	8006ed8 <setStraightRadius>
						  runningInit();
 80047d8:	f001 fcce 	bl	8006178 <runningInit>
						  soiya = 13;
 80047dc:	4b40      	ldr	r3, [pc, #256]	; (80048e0 <main+0x348>)
 80047de:	220d      	movs	r2, #13
 80047e0:	801a      	strh	r2, [r3, #0]

				  }

				  break;
 80047e2:	e305      	b.n	8004df0 <main+0x858>

			  case 1:
				  setLED('G');
 80047e4:	2047      	movs	r0, #71	; 0x47
 80047e6:	f7fd f889 	bl	80018fc <setLED>
				  setLED2('G');
 80047ea:	2047      	movs	r0, #71	; 0x47
 80047ec:	f7fd f954 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 80047f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 82fe 	beq.w	8004df6 <main+0x85e>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 80047fa:	f7fc fea1 	bl	8001540 <clearspeedcount>

						  //setsuctionMotor(800);

						  //HAL_Delay(1500);

						  running();
 80047fe:	f001 fa71 	bl	8005ce4 <running>
				  }

				  break;
 8004802:	e2f8      	b.n	8004df6 <main+0x85e>

			  case 2:
				  setLED('Y');
 8004804:	2059      	movs	r0, #89	; 0x59
 8004806:	f7fd f879 	bl	80018fc <setLED>
				  setLED2('R');
 800480a:	2052      	movs	r0, #82	; 0x52
 800480c:	f7fd f944 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004810:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 82f1 	beq.w	8004dfc <main+0x864>
						  //startLineTrace();

					      IMU_average();
 800481a:	f7fd f801 	bl	8001820 <IMU_average>

					      clearspeedcount();
 800481e:	f7fc fe8f 	bl	8001540 <clearspeedcount>

					      setRunMode(1);
 8004822:	2001      	movs	r0, #1
 8004824:	f001 f978 	bl	8005b18 <setRunMode>

					      setVelocityRange(1.0, 1.0);
 8004828:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800482c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004830:	f002 fb22 	bl	8006e78 <setVelocityRange>

						  setsuctionMotor(800);
 8004834:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004838:	f001 f926 	bl	8005a88 <setsuctionMotor>

						  HAL_Delay(1000);
 800483c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004840:	f003 f8c8 	bl	80079d4 <HAL_Delay>

						  running();
 8004844:	f001 fa4e 	bl	8005ce4 <running>
				  }

				  break;
 8004848:	e2d8      	b.n	8004dfc <main+0x864>

			  case 3:
				  setLED('Y');
 800484a:	2059      	movs	r0, #89	; 0x59
 800484c:	f7fd f856 	bl	80018fc <setLED>
				  setLED2('G');
 8004850:	2047      	movs	r0, #71	; 0x47
 8004852:	f7fd f921 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004856:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 82d1 	beq.w	8004e02 <main+0x86a>
						  //startLineTrace();

						  clearspeedcount();
 8004860:	f7fc fe6e 	bl	8001540 <clearspeedcount>

						  IMU_average();
 8004864:	f7fc ffdc 	bl	8001820 <IMU_average>

						  setRunMode(1);
 8004868:	2001      	movs	r0, #1
 800486a:	f001 f955 	bl	8005b18 <setRunMode>

						  setVelocityRange(1.5, 1.5);
 800486e:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8004872:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 8004876:	f002 faff 	bl	8006e78 <setVelocityRange>

						  setsuctionMotor(800);
 800487a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800487e:	f001 f903 	bl	8005a88 <setsuctionMotor>

						  HAL_Delay(1000);
 8004882:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004886:	f003 f8a5 	bl	80079d4 <HAL_Delay>

						  running();
 800488a:	f001 fa2b 	bl	8005ce4 <running>
				  }

				  break;
 800488e:	e2b8      	b.n	8004e02 <main+0x86a>

			  case 4:
				  setLED('C');
 8004890:	2043      	movs	r0, #67	; 0x43
 8004892:	f7fd f833 	bl	80018fc <setLED>
				  setLED2('R');
 8004896:	2052      	movs	r0, #82	; 0x52
 8004898:	f7fd f8fe 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 800489c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 82b1 	beq.w	8004e08 <main+0x870>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  IMU_average();
 80048a6:	f7fc ffbb 	bl	8001820 <IMU_average>

						  clearspeedcount();
 80048aa:	f7fc fe49 	bl	8001540 <clearspeedcount>

						  setRunMode(5);
 80048ae:	2005      	movs	r0, #5
 80048b0:	f001 f932 	bl	8005b18 <setRunMode>

						  setVelocityRange(1.5, 1.5);
 80048b4:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 80048b8:	eeb7 0a08 	vmov.f32	s0, #120	; 0x3fc00000  1.5
 80048bc:	f002 fadc 	bl	8006e78 <setVelocityRange>

						  setsuctionMotor(800);
 80048c0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80048c4:	f001 f8e0 	bl	8005a88 <setsuctionMotor>

						  HAL_Delay(1000);
 80048c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048cc:	f003 f882 	bl	80079d4 <HAL_Delay>

						  running();
 80048d0:	f001 fa08 	bl	8005ce4 <running>
				  }

				  break;
 80048d4:	e298      	b.n	8004e08 <main+0x870>
 80048d6:	bf00      	nop
 80048d8:	2001d024 	.word	0x2001d024
 80048dc:	2001ce08 	.word	0x2001ce08
 80048e0:	20019c7e 	.word	0x20019c7e
 80048e4:	20019c7c 	.word	0x20019c7c
 80048e8:	2001cea8 	.word	0x2001cea8
 80048ec:	2001ce50 	.word	0x2001ce50
 80048f0:	40133333 	.word	0x40133333
 80048f4:	40266666 	.word	0x40266666
 80048f8:	447a0000 	.word	0x447a0000

			  case 5:
				  setLED('C');
 80048fc:	2043      	movs	r0, #67	; 0x43
 80048fe:	f7fc fffd 	bl	80018fc <setLED>
				  setLED2('G');
 8004902:	2047      	movs	r0, #71	; 0x47
 8004904:	f7fd f8c8 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004908:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 827e 	beq.w	8004e0e <main+0x876>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      IMU_average();
 8004912:	f7fc ff85 	bl	8001820 <IMU_average>

						  clearspeedcount();
 8004916:	f7fc fe13 	bl	8001540 <clearspeedcount>

						  setRunMode(5);
 800491a:	2005      	movs	r0, #5
 800491c:	f001 f8fc 	bl	8005b18 <setRunMode>

						  setVelocityRange(1.0, 2.0);
 8004920:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8004924:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004928:	f002 faa6 	bl	8006e78 <setVelocityRange>
						  setAccDec(4, 3);
 800492c:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8004930:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8004934:	f002 fab8 	bl	8006ea8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004938:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 80048f8 <main+0x360>
 800493c:	f002 facc 	bl	8006ed8 <setStraightRadius>

						  setsuctionMotor(700);
 8004940:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8004944:	f001 f8a0 	bl	8005a88 <setsuctionMotor>

						  HAL_Delay(1000);
 8004948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800494c:	f003 f842 	bl	80079d4 <HAL_Delay>

						  running();
 8004950:	f001 f9c8 	bl	8005ce4 <running>
				  }

				  break;
 8004954:	e25b      	b.n	8004e0e <main+0x876>

			  case 6:
				  setLED('C');
 8004956:	2043      	movs	r0, #67	; 0x43
 8004958:	f7fc ffd0 	bl	80018fc <setLED>
				  setLED2('B');
 800495c:	2042      	movs	r0, #66	; 0x42
 800495e:	f7fd f89b 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004962:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8254 	beq.w	8004e14 <main+0x87c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      IMU_average();
 800496c:	f7fc ff58 	bl	8001820 <IMU_average>

						  clearspeedcount();
 8004970:	f7fc fde6 	bl	8001540 <clearspeedcount>

						  setRunMode(5);
 8004974:	2005      	movs	r0, #5
 8004976:	f001 f8cf 	bl	8005b18 <setRunMode>

						  setVelocityRange(2.0, 3.5);
 800497a:	eef0 0a0c 	vmov.f32	s1, #12	; 0x40600000  3.5
 800497e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8004982:	f002 fa79 	bl	8006e78 <setVelocityRange>
						  setAccDec(3, 2);
 8004986:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800498a:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 800498e:	f002 fa8b 	bl	8006ea8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004992:	ed1f 0a27 	vldr	s0, [pc, #-156]	; 80048f8 <main+0x360>
 8004996:	f002 fa9f 	bl	8006ed8 <setStraightRadius>

						  setsuctionMotor(800);
 800499a:	f44f 7048 	mov.w	r0, #800	; 0x320
 800499e:	f001 f873 	bl	8005a88 <setsuctionMotor>

						  HAL_Delay(1000);
 80049a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049a6:	f003 f815 	bl	80079d4 <HAL_Delay>

						  running();
 80049aa:	f001 f99b 	bl	8005ce4 <running>
				  }

				  break;
 80049ae:	e231      	b.n	8004e14 <main+0x87c>

			  case 7:
				  setLED('C');
 80049b0:	2043      	movs	r0, #67	; 0x43
 80049b2:	f7fc ffa3 	bl	80018fc <setLED>
				  setLED2('W');
 80049b6:	2057      	movs	r0, #87	; 0x57
 80049b8:	f7fd f86e 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 80049bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f000 822a 	beq.w	8004e1a <main+0x882>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      IMU_average();
 80049c6:	f7fc ff2b 	bl	8001820 <IMU_average>

						  clearspeedcount();
 80049ca:	f7fc fdb9 	bl	8001540 <clearspeedcount>

						  setRunMode(5);
 80049ce:	2005      	movs	r0, #5
 80049d0:	f001 f8a2 	bl	8005b18 <setRunMode>

						  setVelocityRange(2.5, 4.0);
 80049d4:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 80049d8:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 80049dc:	f002 fa4c 	bl	8006e78 <setVelocityRange>
						  setAccDec(5, 3);
 80049e0:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 80049e4:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80049e8:	f002 fa5e 	bl	8006ea8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 80049ec:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 80048f8 <main+0x360>
 80049f0:	f002 fa72 	bl	8006ed8 <setStraightRadius>

						  setsuctionMotor(800);
 80049f4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80049f8:	f001 f846 	bl	8005a88 <setsuctionMotor>

						  HAL_Delay(1000);
 80049fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a00:	f002 ffe8 	bl	80079d4 <HAL_Delay>

						  running();
 8004a04:	f001 f96e 	bl	8005ce4 <running>
				  }

				  break;
 8004a08:	e207      	b.n	8004e1a <main+0x882>

			  case 8:
				  setLED('C');
 8004a0a:	2043      	movs	r0, #67	; 0x43
 8004a0c:	f7fc ff76 	bl	80018fc <setLED>
				  setLED2('Y');
 8004a10:	2059      	movs	r0, #89	; 0x59
 8004a12:	f7fd f841 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004a16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8200 	beq.w	8004e20 <main+0x888>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004a20:	f7fc fd8e 	bl	8001540 <clearspeedcount>

						  setRunMode(3);
 8004a24:	2003      	movs	r0, #3
 8004a26:	f001 f877 	bl	8005b18 <setRunMode>

						  setVelocityRange(3.0, 4.5);
 8004a2a:	eef1 0a02 	vmov.f32	s1, #18	; 0x40900000  4.5
 8004a2e:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8004a32:	f002 fa21 	bl	8006e78 <setVelocityRange>
						  setAccDec(4, 2);
 8004a36:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8004a3a:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8004a3e:	f002 fa33 	bl	8006ea8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004a42:	ed1f 0a53 	vldr	s0, [pc, #-332]	; 80048f8 <main+0x360>
 8004a46:	f002 fa47 	bl	8006ed8 <setStraightRadius>

						  setsuctionMotor(500);
 8004a4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a4e:	f001 f81b 	bl	8005a88 <setsuctionMotor>

						  HAL_Delay(1500);
 8004a52:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004a56:	f002 ffbd 	bl	80079d4 <HAL_Delay>

						  running();
 8004a5a:	f001 f943 	bl	8005ce4 <running>
				  }

			  	  break;
 8004a5e:	e1df      	b.n	8004e20 <main+0x888>

			  case 9:
				  setLED('C');
 8004a60:	2043      	movs	r0, #67	; 0x43
 8004a62:	f7fc ff4b 	bl	80018fc <setLED>
				  setLED2('X');
 8004a66:	2058      	movs	r0, #88	; 0x58
 8004a68:	f7fd f816 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004a6c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 81d8 	beq.w	8004e26 <main+0x88e>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8004a76:	f7fc fd63 	bl	8001540 <clearspeedcount>

						  setRunMode(3);
 8004a7a:	2003      	movs	r0, #3
 8004a7c:	f001 f84c 	bl	8005b18 <setRunMode>

						  setVelocityRange(2.3, 6.5);
 8004a80:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 8004a84:	ed1f 0a66 	vldr	s0, [pc, #-408]	; 80048f0 <main+0x358>
 8004a88:	f002 f9f6 	bl	8006e78 <setVelocityRange>
						  setAccDec(8, 6);
 8004a8c:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8004a90:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8004a94:	f002 fa08 	bl	8006ea8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004a98:	ed1f 0a69 	vldr	s0, [pc, #-420]	; 80048f8 <main+0x360>
 8004a9c:	f002 fa1c 	bl	8006ed8 <setStraightRadius>

						  setsuctionMotor(500);
 8004aa0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004aa4:	f000 fff0 	bl	8005a88 <setsuctionMotor>

						  HAL_Delay(1500);
 8004aa8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004aac:	f002 ff92 	bl	80079d4 <HAL_Delay>

						  running();
 8004ab0:	f001 f918 	bl	8005ce4 <running>
				  }

				  break;
 8004ab4:	e1b7      	b.n	8004e26 <main+0x88e>

			  case 10:
				  setLED('C');
 8004ab6:	2043      	movs	r0, #67	; 0x43
 8004ab8:	f7fc ff20 	bl	80018fc <setLED>
				  setLED2('V');
 8004abc:	2056      	movs	r0, #86	; 0x56
 8004abe:	f7fc ffeb 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004ac2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 81b0 	beq.w	8004e2c <main+0x894>
						  //startLineTrace();

						  clearspeedcount();
 8004acc:	f7fc fd38 	bl	8001540 <clearspeedcount>

						  setRunMode(2);
 8004ad0:	2002      	movs	r0, #2
 8004ad2:	f001 f821 	bl	8005b18 <setRunMode>

						  setVelocityRange(2.5, 7.5);
 8004ad6:	eef1 0a0e 	vmov.f32	s1, #30	; 0x40f00000  7.5
 8004ada:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004ade:	f002 f9cb 	bl	8006e78 <setVelocityRange>
						  setAccDec(7, 4);
 8004ae2:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004ae6:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004aea:	f002 f9dd 	bl	8006ea8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004aee:	ed1f 0a7e 	vldr	s0, [pc, #-504]	; 80048f8 <main+0x360>
 8004af2:	f002 f9f1 	bl	8006ed8 <setStraightRadius>

						  setsuctionMotor(500);
 8004af6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004afa:	f000 ffc5 	bl	8005a88 <setsuctionMotor>

						  HAL_Delay(1000);
 8004afe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b02:	f002 ff67 	bl	80079d4 <HAL_Delay>

						  running();
 8004b06:	f001 f8ed 	bl	8005ce4 <running>
				  }

				  break;
 8004b0a:	e18f      	b.n	8004e2c <main+0x894>


			  case 11:
				  setLED('C');
 8004b0c:	2043      	movs	r0, #67	; 0x43
 8004b0e:	f7fc fef5 	bl	80018fc <setLED>
				  setLED2('T');
 8004b12:	2054      	movs	r0, #84	; 0x54
 8004b14:	f7fc ffc0 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004b18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	f000 8188 	beq.w	8004e32 <main+0x89a>
						  //startLineTrace();

						  clearspeedcount();
 8004b22:	f7fc fd0d 	bl	8001540 <clearspeedcount>

						  setRunMode(3);
 8004b26:	2003      	movs	r0, #3
 8004b28:	f000 fff6 	bl	8005b18 <setRunMode>

						  setVelocityRange(2.5, 8.5);
 8004b2c:	eef2 0a01 	vmov.f32	s1, #33	; 0x41080000  8.5
 8004b30:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8004b34:	f002 f9a0 	bl	8006e78 <setVelocityRange>
						  setAccDec(10, 5);
 8004b38:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8004b3c:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8004b40:	f002 f9b2 	bl	8006ea8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004b44:	ed1f 0a94 	vldr	s0, [pc, #-592]	; 80048f8 <main+0x360>
 8004b48:	f002 f9c6 	bl	8006ed8 <setStraightRadius>

						  setsuctionMotor(500);
 8004b4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b50:	f000 ff9a 	bl	8005a88 <setsuctionMotor>

						  HAL_Delay(1000);
 8004b54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b58:	f002 ff3c 	bl	80079d4 <HAL_Delay>

						  running();
 8004b5c:	f001 f8c2 	bl	8005ce4 <running>
				  }

				  break;
 8004b60:	e167      	b.n	8004e32 <main+0x89a>

			  case 12:
				  setLED('C');
 8004b62:	2043      	movs	r0, #67	; 0x43
 8004b64:	f7fc feca 	bl	80018fc <setLED>
				  setLED2('A');
 8004b68:	2041      	movs	r0, #65	; 0x41
 8004b6a:	f7fc ff95 	bl	8001a98 <setLED2>

				  if(running_flag == true){
 8004b6e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 8160 	beq.w	8004e38 <main+0x8a0>
						  //startLineTrace();

						  clearspeedcount();
 8004b78:	f7fc fce2 	bl	8001540 <clearspeedcount>

						  setRunMode(2);
 8004b7c:	2002      	movs	r0, #2
 8004b7e:	f000 ffcb 	bl	8005b18 <setRunMode>

						  setVelocityRange(2.6, 10.0);
 8004b82:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
 8004b86:	ed1f 0aa5 	vldr	s0, [pc, #-660]	; 80048f4 <main+0x35c>
 8004b8a:	f002 f975 	bl	8006e78 <setVelocityRange>
						  setAccDec(7, 4);
 8004b8e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8004b92:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8004b96:	f002 f987 	bl	8006ea8 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8004b9a:	ed1f 0aa9 	vldr	s0, [pc, #-676]	; 80048f8 <main+0x360>
 8004b9e:	f002 f99b 	bl	8006ed8 <setStraightRadius>

						  setsuctionMotor(500);
 8004ba2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ba6:	f000 ff6f 	bl	8005a88 <setsuctionMotor>

						  HAL_Delay(1000);
 8004baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bae:	f002 ff11 	bl	80079d4 <HAL_Delay>

						  running();
 8004bb2:	f001 f897 	bl	8005ce4 <running>
				  }

				  break;
 8004bb6:	e13f      	b.n	8004e38 <main+0x8a0>

			  case 13:
				  setLED('M');
 8004bb8:	204d      	movs	r0, #77	; 0x4d
 8004bba:	f7fc fe9f 	bl	80018fc <setLED>
				  setLED2('A');
 8004bbe:	2041      	movs	r0, #65	; 0x41
 8004bc0:	f7fc ff6a 	bl	8001a98 <setLED2>
				  //printf("6\r\n");

				  if(running_flag == true){
 8004bc4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	f000 8138 	beq.w	8004e3e <main+0x8a6>
					  loadSensor();
 8004bce:	f7fe fb65 	bl	800329c <loadSensor>
					  loadDistance();
 8004bd2:	f7fe fba1 	bl	8003318 <loadDistance>
					  loadTheta();
 8004bd6:	f7fe fbdd 	bl	8003394 <loadTheta>
					  loadCross();
 8004bda:	f7fe fc19 	bl	8003410 <loadCross>
					  loadSide();
 8004bde:	f7fe fc55 	bl	800348c <loadSide>
					  loadDebug();
 8004be2:	f7fe fc91 	bl	8003508 <loadDebug>
						 printf("%f\r\n", getSideLog(i));
					  }*/


					  //printf("TargetVelocity, CurrentVelocity\r\n");
					  uint16_t size = getDebugLogSize();
 8004be6:	f7fe fb4d 	bl	8003284 <getDebugLogSize>
 8004bea:	4603      	mov	r3, r0
 8004bec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
					  uint16_t sensorsize = getSensorLogSize();
 8004bf0:	f7fe fb18 	bl	8003224 <getSensorLogSize>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

					  for(uint16_t i = 0; i < size; i = i+13){
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004c00:	e0e5      	b.n	8004dce <main+0x836>
						 printf("%f, %f, %f , %f, %f, %f , %f, %f, %f , %f, %f, %f, %f\r\n", getDebugLog(i), getDebugLog(i + 1), getDebugLog(i + 2), getDebugLog(i + 3), getDebugLog(i + 4), getDebugLog(i + 5), getDebugLog(i + 6), getDebugLog(i + 7), getDebugLog(i + 8), getDebugLog(i + 9), getDebugLog(i + 10), getDebugLog(i + 11), getDebugLog(i + 12));
 8004c02:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fd1c 	bl	8003644 <getDebugLog>
 8004c0c:	ee10 3a10 	vmov	r3, s0
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fb fc99 	bl	8000548 <__aeabi_f2d>
 8004c16:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8004c1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c1e:	3301      	adds	r3, #1
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fd0e 	bl	8003644 <getDebugLog>
 8004c28:	ee10 3a10 	vmov	r3, s0
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f7fb fc8b 	bl	8000548 <__aeabi_f2d>
 8004c32:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8004c36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c3a:	3302      	adds	r3, #2
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fe fd00 	bl	8003644 <getDebugLog>
 8004c44:	ee10 3a10 	vmov	r3, s0
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f7fb fc7d 	bl	8000548 <__aeabi_f2d>
 8004c4e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8004c52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c56:	3303      	adds	r3, #3
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fe fcf2 	bl	8003644 <getDebugLog>
 8004c60:	ee10 3a10 	vmov	r3, s0
 8004c64:	4618      	mov	r0, r3
 8004c66:	f7fb fc6f 	bl	8000548 <__aeabi_f2d>
 8004c6a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8004c6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c72:	3304      	adds	r3, #4
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe fce4 	bl	8003644 <getDebugLog>
 8004c7c:	ee10 3a10 	vmov	r3, s0
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fb fc61 	bl	8000548 <__aeabi_f2d>
 8004c86:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8004c8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004c8e:	3305      	adds	r3, #5
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fe fcd6 	bl	8003644 <getDebugLog>
 8004c98:	ee10 3a10 	vmov	r3, s0
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb fc53 	bl	8000548 <__aeabi_f2d>
 8004ca2:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004ca6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004caa:	3306      	adds	r3, #6
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe fcc8 	bl	8003644 <getDebugLog>
 8004cb4:	ee10 3a10 	vmov	r3, s0
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f7fb fc45 	bl	8000548 <__aeabi_f2d>
 8004cbe:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004cc2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004cc6:	3307      	adds	r3, #7
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fe fcba 	bl	8003644 <getDebugLog>
 8004cd0:	ee10 3a10 	vmov	r3, s0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fb fc37 	bl	8000548 <__aeabi_f2d>
 8004cda:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004cde:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe fcac 	bl	8003644 <getDebugLog>
 8004cec:	ee10 3a10 	vmov	r3, s0
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f7fb fc29 	bl	8000548 <__aeabi_f2d>
 8004cf6:	e9c7 0100 	strd	r0, r1, [r7]
 8004cfa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004cfe:	3309      	adds	r3, #9
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7fe fc9e 	bl	8003644 <getDebugLog>
 8004d08:	ee10 3a10 	vmov	r3, s0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f7fb fc1b 	bl	8000548 <__aeabi_f2d>
 8004d12:	4682      	mov	sl, r0
 8004d14:	468b      	mov	fp, r1
 8004d16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004d1a:	330a      	adds	r3, #10
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fc90 	bl	8003644 <getDebugLog>
 8004d24:	ee10 3a10 	vmov	r3, s0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f7fb fc0d 	bl	8000548 <__aeabi_f2d>
 8004d2e:	4680      	mov	r8, r0
 8004d30:	4689      	mov	r9, r1
 8004d32:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004d36:	330b      	adds	r3, #11
 8004d38:	b29b      	uxth	r3, r3
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe fc82 	bl	8003644 <getDebugLog>
 8004d40:	ee10 3a10 	vmov	r3, s0
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7fb fbff 	bl	8000548 <__aeabi_f2d>
 8004d4a:	4605      	mov	r5, r0
 8004d4c:	460e      	mov	r6, r1
 8004d4e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004d52:	330c      	adds	r3, #12
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe fc74 	bl	8003644 <getDebugLog>
 8004d5c:	ee10 3a10 	vmov	r3, s0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f7fb fbf1 	bl	8000548 <__aeabi_f2d>
 8004d66:	4603      	mov	r3, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 8004d6e:	e9cd 5614 	strd	r5, r6, [sp, #80]	; 0x50
 8004d72:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8004d76:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8004d7a:	ed97 7b00 	vldr	d7, [r7]
 8004d7e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004d82:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d86:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004d8a:	ed97 7b04 	vldr	d7, [r7, #16]
 8004d8e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004d92:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d96:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004d9a:	ed97 7b08 	vldr	d7, [r7, #32]
 8004d9e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004da2:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004da6:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004daa:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004dae:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004db2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004db6:	ed8d 7b00 	vstr	d7, [sp]
 8004dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004dbe:	4821      	ldr	r0, [pc, #132]	; (8004e44 <main+0x8ac>)
 8004dc0:	f00a f88e 	bl	800eee0 <iprintf>
					  for(uint16_t i = 0; i < size; i = i+13){
 8004dc4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004dc8:	330d      	adds	r3, #13
 8004dca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8004dce:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004dd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	f4ff af13 	bcc.w	8004c02 <main+0x66a>
					  /*
					  for(uint16_t i = 0; i < size; i = i+3){
						 printf("%f, %f, %f\r\n", getDebugLog(i), getDebugLog(i+1), getDebugLog(i+2));
					  }*/

					  running_flag = false;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					  soiya = 0;
 8004de2:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <main+0x8b0>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	801a      	strh	r2, [r3, #0]
				  }

				  break;
 8004de8:	e029      	b.n	8004e3e <main+0x8a6>

			  default:
				  break;
 8004dea:	bf00      	nop
 8004dec:	f7ff bbfb 	b.w	80045e6 <main+0x4e>
				  break;
 8004df0:	bf00      	nop
 8004df2:	f7ff bbf8 	b.w	80045e6 <main+0x4e>
				  break;
 8004df6:	bf00      	nop
 8004df8:	f7ff bbf5 	b.w	80045e6 <main+0x4e>
				  break;
 8004dfc:	bf00      	nop
 8004dfe:	f7ff bbf2 	b.w	80045e6 <main+0x4e>
				  break;
 8004e02:	bf00      	nop
 8004e04:	f7ff bbef 	b.w	80045e6 <main+0x4e>
				  break;
 8004e08:	bf00      	nop
 8004e0a:	f7ff bbec 	b.w	80045e6 <main+0x4e>
				  break;
 8004e0e:	bf00      	nop
 8004e10:	f7ff bbe9 	b.w	80045e6 <main+0x4e>
				  break;
 8004e14:	bf00      	nop
 8004e16:	f7ff bbe6 	b.w	80045e6 <main+0x4e>
				  break;
 8004e1a:	bf00      	nop
 8004e1c:	f7ff bbe3 	b.w	80045e6 <main+0x4e>
			  	  break;
 8004e20:	bf00      	nop
 8004e22:	f7ff bbe0 	b.w	80045e6 <main+0x4e>
				  break;
 8004e26:	bf00      	nop
 8004e28:	f7ff bbdd 	b.w	80045e6 <main+0x4e>
				  break;
 8004e2c:	bf00      	nop
 8004e2e:	f7ff bbda 	b.w	80045e6 <main+0x4e>
				  break;
 8004e32:	bf00      	nop
 8004e34:	f7ff bbd7 	b.w	80045e6 <main+0x4e>
				  break;
 8004e38:	bf00      	nop
 8004e3a:	f7ff bbd4 	b.w	80045e6 <main+0x4e>
				  break;
 8004e3e:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8004e40:	f7ff bbd1 	b.w	80045e6 <main+0x4e>
 8004e44:	08012620 	.word	0x08012620
 8004e48:	20019c7e 	.word	0x20019c7e

08004e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b094      	sub	sp, #80	; 0x50
 8004e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004e52:	f107 0320 	add.w	r3, r7, #32
 8004e56:	2230      	movs	r2, #48	; 0x30
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f009 f9f9 	bl	800e252 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004e60:	f107 030c 	add.w	r3, r7, #12
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004e70:	2300      	movs	r3, #0
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	4b28      	ldr	r3, [pc, #160]	; (8004f18 <SystemClock_Config+0xcc>)
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	4a27      	ldr	r2, [pc, #156]	; (8004f18 <SystemClock_Config+0xcc>)
 8004e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <SystemClock_Config+0xcc>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	607b      	str	r3, [r7, #4]
 8004e90:	4b22      	ldr	r3, [pc, #136]	; (8004f1c <SystemClock_Config+0xd0>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a21      	ldr	r2, [pc, #132]	; (8004f1c <SystemClock_Config+0xd0>)
 8004e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	4b1f      	ldr	r3, [pc, #124]	; (8004f1c <SystemClock_Config+0xd0>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea4:	607b      	str	r3, [r7, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004eac:	2301      	movs	r3, #1
 8004eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004ec0:	23a8      	movs	r3, #168	; 0xa8
 8004ec2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004ec8:	2304      	movs	r3, #4
 8004eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004ecc:	f107 0320 	add.w	r3, r7, #32
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f004 fb03 	bl	80094dc <HAL_RCC_OscConfig>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004edc:	f000 fd04 	bl	80058e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004ee0:	230f      	movs	r3, #15
 8004ee2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004eec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004ef0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ef6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004ef8:	f107 030c 	add.w	r3, r7, #12
 8004efc:	2105      	movs	r1, #5
 8004efe:	4618      	mov	r0, r3
 8004f00:	f004 fd5c 	bl	80099bc <HAL_RCC_ClockConfig>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004f0a:	f000 fced 	bl	80058e8 <Error_Handler>
  }
}
 8004f0e:	bf00      	nop
 8004f10:	3750      	adds	r7, #80	; 0x50
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40007000 	.word	0x40007000

08004f20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f26:	463b      	mov	r3, r7
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	605a      	str	r2, [r3, #4]
 8004f2e:	609a      	str	r2, [r3, #8]
 8004f30:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004f32:	4b28      	ldr	r3, [pc, #160]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f34:	4a28      	ldr	r2, [pc, #160]	; (8004fd8 <MX_ADC1_Init+0xb8>)
 8004f36:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004f38:	4b26      	ldr	r3, [pc, #152]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004f3e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004f40:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004f46:	4b23      	ldr	r3, [pc, #140]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004f4c:	4b21      	ldr	r3, [pc, #132]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f4e:	2201      	movs	r2, #1
 8004f50:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004f52:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f5a:	4b1e      	ldr	r3, [pc, #120]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f60:	4b1c      	ldr	r3, [pc, #112]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f62:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <MX_ADC1_Init+0xbc>)
 8004f64:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f66:	4b1b      	ldr	r3, [pc, #108]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f6e:	2202      	movs	r2, #2
 8004f70:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004f72:	4b18      	ldr	r3, [pc, #96]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f7a:	4b16      	ldr	r3, [pc, #88]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f7c:	2201      	movs	r2, #1
 8004f7e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004f80:	4814      	ldr	r0, [pc, #80]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004f82:	f002 fd49 	bl	8007a18 <HAL_ADC_Init>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004f8c:	f000 fcac 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8004f90:	230c      	movs	r3, #12
 8004f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8004f94:	2301      	movs	r3, #1
 8004f96:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004f98:	2307      	movs	r3, #7
 8004f9a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	480c      	ldr	r0, [pc, #48]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004fa2:	f002 fe8d 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004fac:	f000 fc9c 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004fb0:	230d      	movs	r3, #13
 8004fb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004fb8:	463b      	mov	r3, r7
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4805      	ldr	r0, [pc, #20]	; (8004fd4 <MX_ADC1_Init+0xb4>)
 8004fbe:	f002 fe7f 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d001      	beq.n	8004fcc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8004fc8:	f000 fc8e 	bl	80058e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004fcc:	bf00      	nop
 8004fce:	3710      	adds	r7, #16
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	2001cd68 	.word	0x2001cd68
 8004fd8:	40012000 	.word	0x40012000
 8004fdc:	0f000001 	.word	0x0f000001

08004fe0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	605a      	str	r2, [r3, #4]
 8004fee:	609a      	str	r2, [r3, #8]
 8004ff0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004ff2:	4b6e      	ldr	r3, [pc, #440]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8004ff4:	4a6e      	ldr	r2, [pc, #440]	; (80051b0 <MX_ADC2_Init+0x1d0>)
 8004ff6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004ff8:	4b6c      	ldr	r3, [pc, #432]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8004ffa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ffe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005000:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8005002:	2200      	movs	r2, #0
 8005004:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005006:	4b69      	ldr	r3, [pc, #420]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8005008:	2201      	movs	r2, #1
 800500a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800500c:	4b67      	ldr	r3, [pc, #412]	; (80051ac <MX_ADC2_Init+0x1cc>)
 800500e:	2201      	movs	r2, #1
 8005010:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005012:	4b66      	ldr	r3, [pc, #408]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800501a:	4b64      	ldr	r3, [pc, #400]	; (80051ac <MX_ADC2_Init+0x1cc>)
 800501c:	2200      	movs	r2, #0
 800501e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005020:	4b62      	ldr	r3, [pc, #392]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8005022:	4a64      	ldr	r2, [pc, #400]	; (80051b4 <MX_ADC2_Init+0x1d4>)
 8005024:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005026:	4b61      	ldr	r3, [pc, #388]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8005028:	2200      	movs	r2, #0
 800502a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 800502c:	4b5f      	ldr	r3, [pc, #380]	; (80051ac <MX_ADC2_Init+0x1cc>)
 800502e:	220c      	movs	r2, #12
 8005030:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005032:	4b5e      	ldr	r3, [pc, #376]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800503a:	4b5c      	ldr	r3, [pc, #368]	; (80051ac <MX_ADC2_Init+0x1cc>)
 800503c:	2201      	movs	r2, #1
 800503e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005040:	485a      	ldr	r0, [pc, #360]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8005042:	f002 fce9 	bl	8007a18 <HAL_ADC_Init>
 8005046:	4603      	mov	r3, r0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800504c:	f000 fc4c 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005050:	2300      	movs	r3, #0
 8005052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005054:	2301      	movs	r3, #1
 8005056:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005058:	2307      	movs	r3, #7
 800505a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800505c:	463b      	mov	r3, r7
 800505e:	4619      	mov	r1, r3
 8005060:	4852      	ldr	r0, [pc, #328]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8005062:	f002 fe2d 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800506c:	f000 fc3c 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005070:	2301      	movs	r3, #1
 8005072:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005074:	2302      	movs	r3, #2
 8005076:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005078:	463b      	mov	r3, r7
 800507a:	4619      	mov	r1, r3
 800507c:	484b      	ldr	r0, [pc, #300]	; (80051ac <MX_ADC2_Init+0x1cc>)
 800507e:	f002 fe1f 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d001      	beq.n	800508c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005088:	f000 fc2e 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800508c:	2302      	movs	r3, #2
 800508e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005090:	2303      	movs	r3, #3
 8005092:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005094:	463b      	mov	r3, r7
 8005096:	4619      	mov	r1, r3
 8005098:	4844      	ldr	r0, [pc, #272]	; (80051ac <MX_ADC2_Init+0x1cc>)
 800509a:	f002 fe11 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80050a4:	f000 fc20 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80050a8:	2303      	movs	r3, #3
 80050aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80050ac:	2304      	movs	r3, #4
 80050ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050b0:	463b      	mov	r3, r7
 80050b2:	4619      	mov	r1, r3
 80050b4:	483d      	ldr	r0, [pc, #244]	; (80051ac <MX_ADC2_Init+0x1cc>)
 80050b6:	f002 fe03 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d001      	beq.n	80050c4 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80050c0:	f000 fc12 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80050c4:	2304      	movs	r3, #4
 80050c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80050c8:	2305      	movs	r3, #5
 80050ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050cc:	463b      	mov	r3, r7
 80050ce:	4619      	mov	r1, r3
 80050d0:	4836      	ldr	r0, [pc, #216]	; (80051ac <MX_ADC2_Init+0x1cc>)
 80050d2:	f002 fdf5 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80050dc:	f000 fc04 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80050e0:	2305      	movs	r3, #5
 80050e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80050e4:	2306      	movs	r3, #6
 80050e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80050e8:	463b      	mov	r3, r7
 80050ea:	4619      	mov	r1, r3
 80050ec:	482f      	ldr	r0, [pc, #188]	; (80051ac <MX_ADC2_Init+0x1cc>)
 80050ee:	f002 fde7 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80050f8:	f000 fbf6 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80050fc:	2306      	movs	r3, #6
 80050fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005100:	2307      	movs	r3, #7
 8005102:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005104:	463b      	mov	r3, r7
 8005106:	4619      	mov	r1, r3
 8005108:	4828      	ldr	r0, [pc, #160]	; (80051ac <MX_ADC2_Init+0x1cc>)
 800510a:	f002 fdd9 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005114:	f000 fbe8 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005118:	2307      	movs	r3, #7
 800511a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800511c:	2308      	movs	r3, #8
 800511e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005120:	463b      	mov	r3, r7
 8005122:	4619      	mov	r1, r3
 8005124:	4821      	ldr	r0, [pc, #132]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8005126:	f002 fdcb 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005130:	f000 fbda 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005134:	2308      	movs	r3, #8
 8005136:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005138:	2309      	movs	r3, #9
 800513a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800513c:	463b      	mov	r3, r7
 800513e:	4619      	mov	r1, r3
 8005140:	481a      	ldr	r0, [pc, #104]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8005142:	f002 fdbd 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 800514c:	f000 fbcc 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005150:	2309      	movs	r3, #9
 8005152:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005154:	230a      	movs	r3, #10
 8005156:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005158:	463b      	mov	r3, r7
 800515a:	4619      	mov	r1, r3
 800515c:	4813      	ldr	r0, [pc, #76]	; (80051ac <MX_ADC2_Init+0x1cc>)
 800515e:	f002 fdaf 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005168:	f000 fbbe 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800516c:	230e      	movs	r3, #14
 800516e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005170:	230b      	movs	r3, #11
 8005172:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005174:	463b      	mov	r3, r7
 8005176:	4619      	mov	r1, r3
 8005178:	480c      	ldr	r0, [pc, #48]	; (80051ac <MX_ADC2_Init+0x1cc>)
 800517a:	f002 fda1 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005184:	f000 fbb0 	bl	80058e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8005188:	230f      	movs	r3, #15
 800518a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800518c:	230c      	movs	r3, #12
 800518e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005190:	463b      	mov	r3, r7
 8005192:	4619      	mov	r1, r3
 8005194:	4805      	ldr	r0, [pc, #20]	; (80051ac <MX_ADC2_Init+0x1cc>)
 8005196:	f002 fd93 	bl	8007cc0 <HAL_ADC_ConfigChannel>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80051a0:	f000 fba2 	bl	80058e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80051a4:	bf00      	nop
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	2001cd18 	.word	0x2001cd18
 80051b0:	40012100 	.word	0x40012100
 80051b4:	0f000001 	.word	0x0f000001

080051b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80051bc:	4b12      	ldr	r3, [pc, #72]	; (8005208 <MX_I2C1_Init+0x50>)
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <MX_I2C1_Init+0x54>)
 80051c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80051c2:	4b11      	ldr	r3, [pc, #68]	; (8005208 <MX_I2C1_Init+0x50>)
 80051c4:	4a12      	ldr	r2, [pc, #72]	; (8005210 <MX_I2C1_Init+0x58>)
 80051c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80051c8:	4b0f      	ldr	r3, [pc, #60]	; (8005208 <MX_I2C1_Init+0x50>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80051ce:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <MX_I2C1_Init+0x50>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <MX_I2C1_Init+0x50>)
 80051d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80051dc:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <MX_I2C1_Init+0x50>)
 80051de:	2200      	movs	r2, #0
 80051e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <MX_I2C1_Init+0x50>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80051e8:	4b07      	ldr	r3, [pc, #28]	; (8005208 <MX_I2C1_Init+0x50>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <MX_I2C1_Init+0x50>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80051f4:	4804      	ldr	r0, [pc, #16]	; (8005208 <MX_I2C1_Init+0x50>)
 80051f6:	f004 f839 	bl	800926c <HAL_I2C_Init>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005200:	f000 fb72 	bl	80058e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005204:	bf00      	nop
 8005206:	bd80      	pop	{r7, pc}
 8005208:	2001ce54 	.word	0x2001ce54
 800520c:	40005400 	.word	0x40005400
 8005210:	000186a0 	.word	0x000186a0

08005214 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8005218:	4b17      	ldr	r3, [pc, #92]	; (8005278 <MX_SPI3_Init+0x64>)
 800521a:	4a18      	ldr	r2, [pc, #96]	; (800527c <MX_SPI3_Init+0x68>)
 800521c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800521e:	4b16      	ldr	r3, [pc, #88]	; (8005278 <MX_SPI3_Init+0x64>)
 8005220:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005224:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005226:	4b14      	ldr	r3, [pc, #80]	; (8005278 <MX_SPI3_Init+0x64>)
 8005228:	2200      	movs	r2, #0
 800522a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800522c:	4b12      	ldr	r3, [pc, #72]	; (8005278 <MX_SPI3_Init+0x64>)
 800522e:	2200      	movs	r2, #0
 8005230:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005232:	4b11      	ldr	r3, [pc, #68]	; (8005278 <MX_SPI3_Init+0x64>)
 8005234:	2200      	movs	r2, #0
 8005236:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <MX_SPI3_Init+0x64>)
 800523a:	2200      	movs	r2, #0
 800523c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800523e:	4b0e      	ldr	r3, [pc, #56]	; (8005278 <MX_SPI3_Init+0x64>)
 8005240:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005244:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <MX_SPI3_Init+0x64>)
 8005248:	2228      	movs	r2, #40	; 0x28
 800524a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800524c:	4b0a      	ldr	r3, [pc, #40]	; (8005278 <MX_SPI3_Init+0x64>)
 800524e:	2200      	movs	r2, #0
 8005250:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8005252:	4b09      	ldr	r3, [pc, #36]	; (8005278 <MX_SPI3_Init+0x64>)
 8005254:	2200      	movs	r2, #0
 8005256:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005258:	4b07      	ldr	r3, [pc, #28]	; (8005278 <MX_SPI3_Init+0x64>)
 800525a:	2200      	movs	r2, #0
 800525c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800525e:	4b06      	ldr	r3, [pc, #24]	; (8005278 <MX_SPI3_Init+0x64>)
 8005260:	220a      	movs	r2, #10
 8005262:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005264:	4804      	ldr	r0, [pc, #16]	; (8005278 <MX_SPI3_Init+0x64>)
 8005266:	f004 fd75 	bl	8009d54 <HAL_SPI_Init>
 800526a:	4603      	mov	r3, r0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d001      	beq.n	8005274 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8005270:	f000 fb3a 	bl	80058e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005274:	bf00      	nop
 8005276:	bd80      	pop	{r7, pc}
 8005278:	2001ceac 	.word	0x2001ceac
 800527c:	40003c00 	.word	0x40003c00

08005280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b092      	sub	sp, #72	; 0x48
 8005284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005286:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	605a      	str	r2, [r3, #4]
 800529a:	609a      	str	r2, [r3, #8]
 800529c:	60da      	str	r2, [r3, #12]
 800529e:	611a      	str	r2, [r3, #16]
 80052a0:	615a      	str	r2, [r3, #20]
 80052a2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052a4:	1d3b      	adds	r3, r7, #4
 80052a6:	2220      	movs	r2, #32
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f008 ffd1 	bl	800e252 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80052b0:	4b32      	ldr	r3, [pc, #200]	; (800537c <MX_TIM1_Init+0xfc>)
 80052b2:	4a33      	ldr	r2, [pc, #204]	; (8005380 <MX_TIM1_Init+0x100>)
 80052b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80052b6:	4b31      	ldr	r3, [pc, #196]	; (800537c <MX_TIM1_Init+0xfc>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052bc:	4b2f      	ldr	r3, [pc, #188]	; (800537c <MX_TIM1_Init+0xfc>)
 80052be:	2200      	movs	r2, #0
 80052c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 80052c2:	4b2e      	ldr	r3, [pc, #184]	; (800537c <MX_TIM1_Init+0xfc>)
 80052c4:	f240 3247 	movw	r2, #839	; 0x347
 80052c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052ca:	4b2c      	ldr	r3, [pc, #176]	; (800537c <MX_TIM1_Init+0xfc>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80052d0:	4b2a      	ldr	r3, [pc, #168]	; (800537c <MX_TIM1_Init+0xfc>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052d6:	4b29      	ldr	r3, [pc, #164]	; (800537c <MX_TIM1_Init+0xfc>)
 80052d8:	2200      	movs	r2, #0
 80052da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80052dc:	4827      	ldr	r0, [pc, #156]	; (800537c <MX_TIM1_Init+0xfc>)
 80052de:	f005 fadc 	bl	800a89a <HAL_TIM_PWM_Init>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80052e8:	f000 fafe 	bl	80058e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80052ec:	2300      	movs	r3, #0
 80052ee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80052f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052f8:	4619      	mov	r1, r3
 80052fa:	4820      	ldr	r0, [pc, #128]	; (800537c <MX_TIM1_Init+0xfc>)
 80052fc:	f006 f86c 	bl	800b3d8 <HAL_TIMEx_MasterConfigSynchronization>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d001      	beq.n	800530a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8005306:	f000 faef 	bl	80058e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800530a:	2360      	movs	r3, #96	; 0x60
 800530c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800530e:	2300      	movs	r3, #0
 8005310:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005312:	2300      	movs	r3, #0
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005316:	2300      	movs	r3, #0
 8005318:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800531a:	2300      	movs	r3, #0
 800531c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800531e:	2300      	movs	r3, #0
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005326:	220c      	movs	r2, #12
 8005328:	4619      	mov	r1, r3
 800532a:	4814      	ldr	r0, [pc, #80]	; (800537c <MX_TIM1_Init+0xfc>)
 800532c:	f005 fcf0 	bl	800ad10 <HAL_TIM_PWM_ConfigChannel>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8005336:	f000 fad7 	bl	80058e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800533a:	2300      	movs	r3, #0
 800533c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800534e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005352:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005354:	2300      	movs	r3, #0
 8005356:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005358:	1d3b      	adds	r3, r7, #4
 800535a:	4619      	mov	r1, r3
 800535c:	4807      	ldr	r0, [pc, #28]	; (800537c <MX_TIM1_Init+0xfc>)
 800535e:	f006 f8b7 	bl	800b4d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8005368:	f000 fabe 	bl	80058e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800536c:	4803      	ldr	r0, [pc, #12]	; (800537c <MX_TIM1_Init+0xfc>)
 800536e:	f002 f8b3 	bl	80074d8 <HAL_TIM_MspPostInit>

}
 8005372:	bf00      	nop
 8005374:	3748      	adds	r7, #72	; 0x48
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	2001cfe4 	.word	0x2001cfe4
 8005380:	40010000 	.word	0x40010000

08005384 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08c      	sub	sp, #48	; 0x30
 8005388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800538a:	f107 030c 	add.w	r3, r7, #12
 800538e:	2224      	movs	r2, #36	; 0x24
 8005390:	2100      	movs	r1, #0
 8005392:	4618      	mov	r0, r3
 8005394:	f008 ff5d 	bl	800e252 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005398:	1d3b      	adds	r3, r7, #4
 800539a:	2200      	movs	r2, #0
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80053a0:	4b20      	ldr	r3, [pc, #128]	; (8005424 <MX_TIM3_Init+0xa0>)
 80053a2:	4a21      	ldr	r2, [pc, #132]	; (8005428 <MX_TIM3_Init+0xa4>)
 80053a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80053a6:	4b1f      	ldr	r3, [pc, #124]	; (8005424 <MX_TIM3_Init+0xa0>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053ac:	4b1d      	ldr	r3, [pc, #116]	; (8005424 <MX_TIM3_Init+0xa0>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80053b2:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <MX_TIM3_Init+0xa0>)
 80053b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053ba:	4b1a      	ldr	r3, [pc, #104]	; (8005424 <MX_TIM3_Init+0xa0>)
 80053bc:	2200      	movs	r2, #0
 80053be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053c0:	4b18      	ldr	r3, [pc, #96]	; (8005424 <MX_TIM3_Init+0xa0>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80053c6:	2301      	movs	r3, #1
 80053c8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80053ca:	2300      	movs	r3, #0
 80053cc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80053ce:	2301      	movs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80053da:	2300      	movs	r3, #0
 80053dc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80053de:	2301      	movs	r3, #1
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80053e2:	2300      	movs	r3, #0
 80053e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80053ea:	f107 030c 	add.w	r3, r7, #12
 80053ee:	4619      	mov	r1, r3
 80053f0:	480c      	ldr	r0, [pc, #48]	; (8005424 <MX_TIM3_Init+0xa0>)
 80053f2:	f005 fabb 	bl	800a96c <HAL_TIM_Encoder_Init>
 80053f6:	4603      	mov	r3, r0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d001      	beq.n	8005400 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80053fc:	f000 fa74 	bl	80058e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005400:	2300      	movs	r3, #0
 8005402:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005404:	2300      	movs	r3, #0
 8005406:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005408:	1d3b      	adds	r3, r7, #4
 800540a:	4619      	mov	r1, r3
 800540c:	4805      	ldr	r0, [pc, #20]	; (8005424 <MX_TIM3_Init+0xa0>)
 800540e:	f005 ffe3 	bl	800b3d8 <HAL_TIMEx_MasterConfigSynchronization>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8005418:	f000 fa66 	bl	80058e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800541c:	bf00      	nop
 800541e:	3730      	adds	r7, #48	; 0x30
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	2001ccc0 	.word	0x2001ccc0
 8005428:	40000400 	.word	0x40000400

0800542c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08c      	sub	sp, #48	; 0x30
 8005430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005432:	f107 030c 	add.w	r3, r7, #12
 8005436:	2224      	movs	r2, #36	; 0x24
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f008 ff09 	bl	800e252 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005440:	1d3b      	adds	r3, r7, #4
 8005442:	2200      	movs	r2, #0
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005448:	4b20      	ldr	r3, [pc, #128]	; (80054cc <MX_TIM4_Init+0xa0>)
 800544a:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <MX_TIM4_Init+0xa4>)
 800544c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800544e:	4b1f      	ldr	r3, [pc, #124]	; (80054cc <MX_TIM4_Init+0xa0>)
 8005450:	2200      	movs	r2, #0
 8005452:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005454:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <MX_TIM4_Init+0xa0>)
 8005456:	2200      	movs	r2, #0
 8005458:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800545a:	4b1c      	ldr	r3, [pc, #112]	; (80054cc <MX_TIM4_Init+0xa0>)
 800545c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005460:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005462:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <MX_TIM4_Init+0xa0>)
 8005464:	2200      	movs	r2, #0
 8005466:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005468:	4b18      	ldr	r3, [pc, #96]	; (80054cc <MX_TIM4_Init+0xa0>)
 800546a:	2200      	movs	r2, #0
 800546c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800546e:	2301      	movs	r3, #1
 8005470:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005472:	2300      	movs	r3, #0
 8005474:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005476:	2301      	movs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800547a:	2300      	movs	r3, #0
 800547c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005482:	2300      	movs	r3, #0
 8005484:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005486:	2301      	movs	r3, #1
 8005488:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800548a:	2300      	movs	r3, #0
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8005492:	f107 030c 	add.w	r3, r7, #12
 8005496:	4619      	mov	r1, r3
 8005498:	480c      	ldr	r0, [pc, #48]	; (80054cc <MX_TIM4_Init+0xa0>)
 800549a:	f005 fa67 	bl	800a96c <HAL_TIM_Encoder_Init>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80054a4:	f000 fa20 	bl	80058e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054a8:	2300      	movs	r3, #0
 80054aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054ac:	2300      	movs	r3, #0
 80054ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80054b0:	1d3b      	adds	r3, r7, #4
 80054b2:	4619      	mov	r1, r3
 80054b4:	4805      	ldr	r0, [pc, #20]	; (80054cc <MX_TIM4_Init+0xa0>)
 80054b6:	f005 ff8f 	bl	800b3d8 <HAL_TIMEx_MasterConfigSynchronization>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80054c0:	f000 fa12 	bl	80058e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80054c4:	bf00      	nop
 80054c6:	3730      	adds	r7, #48	; 0x30
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	2001cc80 	.word	0x2001cc80
 80054d0:	40000800 	.word	0x40000800

080054d4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80054da:	463b      	mov	r3, r7
 80054dc:	2200      	movs	r2, #0
 80054de:	601a      	str	r2, [r3, #0]
 80054e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <MX_TIM6_Init+0x64>)
 80054e4:	4a15      	ldr	r2, [pc, #84]	; (800553c <MX_TIM6_Init+0x68>)
 80054e6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 80054e8:	4b13      	ldr	r3, [pc, #76]	; (8005538 <MX_TIM6_Init+0x64>)
 80054ea:	2253      	movs	r2, #83	; 0x53
 80054ec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80054ee:	4b12      	ldr	r3, [pc, #72]	; (8005538 <MX_TIM6_Init+0x64>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80054f4:	4b10      	ldr	r3, [pc, #64]	; (8005538 <MX_TIM6_Init+0x64>)
 80054f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80054fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80054fc:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <MX_TIM6_Init+0x64>)
 80054fe:	2200      	movs	r2, #0
 8005500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005502:	480d      	ldr	r0, [pc, #52]	; (8005538 <MX_TIM6_Init+0x64>)
 8005504:	f005 f97a 	bl	800a7fc <HAL_TIM_Base_Init>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d001      	beq.n	8005512 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800550e:	f000 f9eb 	bl	80058e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005512:	2300      	movs	r3, #0
 8005514:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005516:	2300      	movs	r3, #0
 8005518:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800551a:	463b      	mov	r3, r7
 800551c:	4619      	mov	r1, r3
 800551e:	4806      	ldr	r0, [pc, #24]	; (8005538 <MX_TIM6_Init+0x64>)
 8005520:	f005 ff5a 	bl	800b3d8 <HAL_TIMEx_MasterConfigSynchronization>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800552a:	f000 f9dd 	bl	80058e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	2001cfa4 	.word	0x2001cfa4
 800553c:	40001000 	.word	0x40001000

08005540 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005546:	463b      	mov	r3, r7
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800554e:	4b14      	ldr	r3, [pc, #80]	; (80055a0 <MX_TIM7_Init+0x60>)
 8005550:	4a14      	ldr	r2, [pc, #80]	; (80055a4 <MX_TIM7_Init+0x64>)
 8005552:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8005554:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <MX_TIM7_Init+0x60>)
 8005556:	2253      	movs	r2, #83	; 0x53
 8005558:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800555a:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <MX_TIM7_Init+0x60>)
 800555c:	2200      	movs	r2, #0
 800555e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8005560:	4b0f      	ldr	r3, [pc, #60]	; (80055a0 <MX_TIM7_Init+0x60>)
 8005562:	2263      	movs	r2, #99	; 0x63
 8005564:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005566:	4b0e      	ldr	r3, [pc, #56]	; (80055a0 <MX_TIM7_Init+0x60>)
 8005568:	2200      	movs	r2, #0
 800556a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800556c:	480c      	ldr	r0, [pc, #48]	; (80055a0 <MX_TIM7_Init+0x60>)
 800556e:	f005 f945 	bl	800a7fc <HAL_TIM_Base_Init>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005578:	f000 f9b6 	bl	80058e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800557c:	2300      	movs	r3, #0
 800557e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005580:	2300      	movs	r3, #0
 8005582:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005584:	463b      	mov	r3, r7
 8005586:	4619      	mov	r1, r3
 8005588:	4805      	ldr	r0, [pc, #20]	; (80055a0 <MX_TIM7_Init+0x60>)
 800558a:	f005 ff25 	bl	800b3d8 <HAL_TIMEx_MasterConfigSynchronization>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005594:	f000 f9a8 	bl	80058e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	2001d08c 	.word	0x2001d08c
 80055a4:	40001400 	.word	0x40001400

080055a8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b092      	sub	sp, #72	; 0x48
 80055ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
 80055b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	609a      	str	r2, [r3, #8]
 80055c4:	60da      	str	r2, [r3, #12]
 80055c6:	611a      	str	r2, [r3, #16]
 80055c8:	615a      	str	r2, [r3, #20]
 80055ca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80055cc:	1d3b      	adds	r3, r7, #4
 80055ce:	2220      	movs	r2, #32
 80055d0:	2100      	movs	r1, #0
 80055d2:	4618      	mov	r0, r3
 80055d4:	f008 fe3d 	bl	800e252 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80055d8:	4b39      	ldr	r3, [pc, #228]	; (80056c0 <MX_TIM8_Init+0x118>)
 80055da:	4a3a      	ldr	r2, [pc, #232]	; (80056c4 <MX_TIM8_Init+0x11c>)
 80055dc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 80055de:	4b38      	ldr	r3, [pc, #224]	; (80056c0 <MX_TIM8_Init+0x118>)
 80055e0:	2203      	movs	r2, #3
 80055e2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055e4:	4b36      	ldr	r3, [pc, #216]	; (80056c0 <MX_TIM8_Init+0x118>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80055ea:	4b35      	ldr	r3, [pc, #212]	; (80056c0 <MX_TIM8_Init+0x118>)
 80055ec:	f240 628f 	movw	r2, #1679	; 0x68f
 80055f0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055f2:	4b33      	ldr	r3, [pc, #204]	; (80056c0 <MX_TIM8_Init+0x118>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80055f8:	4b31      	ldr	r3, [pc, #196]	; (80056c0 <MX_TIM8_Init+0x118>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80055fe:	4b30      	ldr	r3, [pc, #192]	; (80056c0 <MX_TIM8_Init+0x118>)
 8005600:	2200      	movs	r2, #0
 8005602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8005604:	482e      	ldr	r0, [pc, #184]	; (80056c0 <MX_TIM8_Init+0x118>)
 8005606:	f005 f948 	bl	800a89a <HAL_TIM_PWM_Init>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8005610:	f000 f96a 	bl	80058e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005614:	2300      	movs	r3, #0
 8005616:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005618:	2300      	movs	r3, #0
 800561a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800561c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005620:	4619      	mov	r1, r3
 8005622:	4827      	ldr	r0, [pc, #156]	; (80056c0 <MX_TIM8_Init+0x118>)
 8005624:	f005 fed8 	bl	800b3d8 <HAL_TIMEx_MasterConfigSynchronization>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800562e:	f000 f95b 	bl	80058e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005632:	2360      	movs	r3, #96	; 0x60
 8005634:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8005636:	2300      	movs	r3, #0
 8005638:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800563a:	2300      	movs	r3, #0
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800563e:	2300      	movs	r3, #0
 8005640:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005642:	2300      	movs	r3, #0
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005646:	2300      	movs	r3, #0
 8005648:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800564a:	2300      	movs	r3, #0
 800564c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800564e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005652:	2200      	movs	r2, #0
 8005654:	4619      	mov	r1, r3
 8005656:	481a      	ldr	r0, [pc, #104]	; (80056c0 <MX_TIM8_Init+0x118>)
 8005658:	f005 fb5a 	bl	800ad10 <HAL_TIM_PWM_ConfigChannel>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8005662:	f000 f941 	bl	80058e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800566a:	2208      	movs	r2, #8
 800566c:	4619      	mov	r1, r3
 800566e:	4814      	ldr	r0, [pc, #80]	; (80056c0 <MX_TIM8_Init+0x118>)
 8005670:	f005 fb4e 	bl	800ad10 <HAL_TIM_PWM_ConfigChannel>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800567a:	f000 f935 	bl	80058e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800567e:	2300      	movs	r3, #0
 8005680:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005682:	2300      	movs	r3, #0
 8005684:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800568e:	2300      	movs	r3, #0
 8005690:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005696:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005698:	2300      	movs	r3, #0
 800569a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800569c:	1d3b      	adds	r3, r7, #4
 800569e:	4619      	mov	r1, r3
 80056a0:	4807      	ldr	r0, [pc, #28]	; (80056c0 <MX_TIM8_Init+0x118>)
 80056a2:	f005 ff15 	bl	800b4d0 <HAL_TIMEx_ConfigBreakDeadTime>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80056ac:	f000 f91c 	bl	80058e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80056b0:	4803      	ldr	r0, [pc, #12]	; (80056c0 <MX_TIM8_Init+0x118>)
 80056b2:	f001 ff11 	bl	80074d8 <HAL_TIM_MspPostInit>

}
 80056b6:	bf00      	nop
 80056b8:	3748      	adds	r7, #72	; 0x48
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	2001ce0c 	.word	0x2001ce0c
 80056c4:	40010400 	.word	0x40010400

080056c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80056cc:	4b11      	ldr	r3, [pc, #68]	; (8005714 <MX_USART1_UART_Init+0x4c>)
 80056ce:	4a12      	ldr	r2, [pc, #72]	; (8005718 <MX_USART1_UART_Init+0x50>)
 80056d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80056d2:	4b10      	ldr	r3, [pc, #64]	; (8005714 <MX_USART1_UART_Init+0x4c>)
 80056d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80056d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80056da:	4b0e      	ldr	r3, [pc, #56]	; (8005714 <MX_USART1_UART_Init+0x4c>)
 80056dc:	2200      	movs	r2, #0
 80056de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80056e0:	4b0c      	ldr	r3, [pc, #48]	; (8005714 <MX_USART1_UART_Init+0x4c>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <MX_USART1_UART_Init+0x4c>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80056ec:	4b09      	ldr	r3, [pc, #36]	; (8005714 <MX_USART1_UART_Init+0x4c>)
 80056ee:	220c      	movs	r2, #12
 80056f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80056f2:	4b08      	ldr	r3, [pc, #32]	; (8005714 <MX_USART1_UART_Init+0x4c>)
 80056f4:	2200      	movs	r2, #0
 80056f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <MX_USART1_UART_Init+0x4c>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80056fe:	4805      	ldr	r0, [pc, #20]	; (8005714 <MX_USART1_UART_Init+0x4c>)
 8005700:	f005 ff4c 	bl	800b59c <HAL_UART_Init>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d001      	beq.n	800570e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800570a:	f000 f8ed 	bl	80058e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	2001cf04 	.word	0x2001cf04
 8005718:	40011000 	.word	0x40011000

0800571c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b082      	sub	sp, #8
 8005720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	607b      	str	r3, [r7, #4]
 8005726:	4b10      	ldr	r3, [pc, #64]	; (8005768 <MX_DMA_Init+0x4c>)
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	4a0f      	ldr	r2, [pc, #60]	; (8005768 <MX_DMA_Init+0x4c>)
 800572c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005730:	6313      	str	r3, [r2, #48]	; 0x30
 8005732:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <MX_DMA_Init+0x4c>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800573a:	607b      	str	r3, [r7, #4]
 800573c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800573e:	2200      	movs	r2, #0
 8005740:	2100      	movs	r1, #0
 8005742:	2038      	movs	r0, #56	; 0x38
 8005744:	f002 fe37 	bl	80083b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8005748:	2038      	movs	r0, #56	; 0x38
 800574a:	f002 fe50 	bl	80083ee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800574e:	2200      	movs	r2, #0
 8005750:	2100      	movs	r1, #0
 8005752:	203a      	movs	r0, #58	; 0x3a
 8005754:	f002 fe2f 	bl	80083b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005758:	203a      	movs	r0, #58	; 0x3a
 800575a:	f002 fe48 	bl	80083ee <HAL_NVIC_EnableIRQ>

}
 800575e:	bf00      	nop
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40023800 	.word	0x40023800

0800576c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	; 0x28
 8005770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005772:	f107 0314 	add.w	r3, r7, #20
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
 800577a:	605a      	str	r2, [r3, #4]
 800577c:	609a      	str	r2, [r3, #8]
 800577e:	60da      	str	r2, [r3, #12]
 8005780:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	4b53      	ldr	r3, [pc, #332]	; (80058d4 <MX_GPIO_Init+0x168>)
 8005788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578a:	4a52      	ldr	r2, [pc, #328]	; (80058d4 <MX_GPIO_Init+0x168>)
 800578c:	f043 0304 	orr.w	r3, r3, #4
 8005790:	6313      	str	r3, [r2, #48]	; 0x30
 8005792:	4b50      	ldr	r3, [pc, #320]	; (80058d4 <MX_GPIO_Init+0x168>)
 8005794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005796:	f003 0304 	and.w	r3, r3, #4
 800579a:	613b      	str	r3, [r7, #16]
 800579c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	4b4c      	ldr	r3, [pc, #304]	; (80058d4 <MX_GPIO_Init+0x168>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	4a4b      	ldr	r2, [pc, #300]	; (80058d4 <MX_GPIO_Init+0x168>)
 80057a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ac:	6313      	str	r3, [r2, #48]	; 0x30
 80057ae:	4b49      	ldr	r3, [pc, #292]	; (80058d4 <MX_GPIO_Init+0x168>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ba:	2300      	movs	r3, #0
 80057bc:	60bb      	str	r3, [r7, #8]
 80057be:	4b45      	ldr	r3, [pc, #276]	; (80058d4 <MX_GPIO_Init+0x168>)
 80057c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c2:	4a44      	ldr	r2, [pc, #272]	; (80058d4 <MX_GPIO_Init+0x168>)
 80057c4:	f043 0301 	orr.w	r3, r3, #1
 80057c8:	6313      	str	r3, [r2, #48]	; 0x30
 80057ca:	4b42      	ldr	r3, [pc, #264]	; (80058d4 <MX_GPIO_Init+0x168>)
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	60bb      	str	r3, [r7, #8]
 80057d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d6:	2300      	movs	r3, #0
 80057d8:	607b      	str	r3, [r7, #4]
 80057da:	4b3e      	ldr	r3, [pc, #248]	; (80058d4 <MX_GPIO_Init+0x168>)
 80057dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057de:	4a3d      	ldr	r2, [pc, #244]	; (80058d4 <MX_GPIO_Init+0x168>)
 80057e0:	f043 0302 	orr.w	r3, r3, #2
 80057e4:	6313      	str	r3, [r2, #48]	; 0x30
 80057e6:	4b3b      	ldr	r3, [pc, #236]	; (80058d4 <MX_GPIO_Init+0x168>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	f003 0302 	and.w	r3, r3, #2
 80057ee:	607b      	str	r3, [r7, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80057f2:	2300      	movs	r3, #0
 80057f4:	603b      	str	r3, [r7, #0]
 80057f6:	4b37      	ldr	r3, [pc, #220]	; (80058d4 <MX_GPIO_Init+0x168>)
 80057f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fa:	4a36      	ldr	r2, [pc, #216]	; (80058d4 <MX_GPIO_Init+0x168>)
 80057fc:	f043 0308 	orr.w	r3, r3, #8
 8005800:	6313      	str	r3, [r2, #48]	; 0x30
 8005802:	4b34      	ldr	r3, [pc, #208]	; (80058d4 <MX_GPIO_Init+0x168>)
 8005804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005806:	f003 0308 	and.w	r3, r3, #8
 800580a:	603b      	str	r3, [r7, #0]
 800580c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 800580e:	2200      	movs	r2, #0
 8005810:	f24e 2180 	movw	r1, #57984	; 0xe280
 8005814:	4830      	ldr	r0, [pc, #192]	; (80058d8 <MX_GPIO_Init+0x16c>)
 8005816:	f003 fd0f 	bl	8009238 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800581a:	2200      	movs	r2, #0
 800581c:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8005820:	482e      	ldr	r0, [pc, #184]	; (80058dc <MX_GPIO_Init+0x170>)
 8005822:	f003 fd09 	bl	8009238 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8005826:	2200      	movs	r2, #0
 8005828:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800582c:	482c      	ldr	r0, [pc, #176]	; (80058e0 <MX_GPIO_Init+0x174>)
 800582e:	f003 fd03 	bl	8009238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8005832:	2200      	movs	r2, #0
 8005834:	2104      	movs	r1, #4
 8005836:	482b      	ldr	r0, [pc, #172]	; (80058e4 <MX_GPIO_Init+0x178>)
 8005838:	f003 fcfe 	bl	8009238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 800583c:	f24e 2380 	movw	r3, #57984	; 0xe280
 8005840:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005842:	2301      	movs	r3, #1
 8005844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800584a:	2300      	movs	r3, #0
 800584c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800584e:	f107 0314 	add.w	r3, r7, #20
 8005852:	4619      	mov	r1, r3
 8005854:	4820      	ldr	r0, [pc, #128]	; (80058d8 <MX_GPIO_Init+0x16c>)
 8005856:	f003 fb3d 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800585a:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800585e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005860:	2301      	movs	r3, #1
 8005862:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005864:	2300      	movs	r3, #0
 8005866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005868:	2300      	movs	r3, #0
 800586a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	4619      	mov	r1, r3
 8005872:	481a      	ldr	r0, [pc, #104]	; (80058dc <MX_GPIO_Init+0x170>)
 8005874:	f003 fb2e 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8005878:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800587c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800587e:	2300      	movs	r3, #0
 8005880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005886:	f107 0314 	add.w	r3, r7, #20
 800588a:	4619      	mov	r1, r3
 800588c:	4814      	ldr	r0, [pc, #80]	; (80058e0 <MX_GPIO_Init+0x174>)
 800588e:	f003 fb21 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005896:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005898:	2301      	movs	r3, #1
 800589a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800589c:	2300      	movs	r3, #0
 800589e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058a0:	2300      	movs	r3, #0
 80058a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058a4:	f107 0314 	add.w	r3, r7, #20
 80058a8:	4619      	mov	r1, r3
 80058aa:	480d      	ldr	r0, [pc, #52]	; (80058e0 <MX_GPIO_Init+0x174>)
 80058ac:	f003 fb12 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80058b0:	2304      	movs	r3, #4
 80058b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80058b4:	2301      	movs	r3, #1
 80058b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058bc:	2300      	movs	r3, #0
 80058be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058c0:	f107 0314 	add.w	r3, r7, #20
 80058c4:	4619      	mov	r1, r3
 80058c6:	4807      	ldr	r0, [pc, #28]	; (80058e4 <MX_GPIO_Init+0x178>)
 80058c8:	f003 fb04 	bl	8008ed4 <HAL_GPIO_Init>

}
 80058cc:	bf00      	nop
 80058ce:	3728      	adds	r7, #40	; 0x28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40023800 	.word	0x40023800
 80058d8:	40020800 	.word	0x40020800
 80058dc:	40020400 	.word	0x40020400
 80058e0:	40020000 	.word	0x40020000
 80058e4:	40020c00 	.word	0x40020c00

080058e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80058ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80058ee:	e7fe      	b.n	80058ee <Error_Handler+0x6>

080058f0 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 80058f4:	2100      	movs	r1, #0
 80058f6:	4808      	ldr	r0, [pc, #32]	; (8005918 <initMotor+0x28>)
 80058f8:	f004 fffa 	bl	800a8f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 80058fc:	2108      	movs	r1, #8
 80058fe:	4806      	ldr	r0, [pc, #24]	; (8005918 <initMotor+0x28>)
 8005900:	f004 fff6 	bl	800a8f0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8005904:	210c      	movs	r1, #12
 8005906:	4805      	ldr	r0, [pc, #20]	; (800591c <initMotor+0x2c>)
 8005908:	f004 fff2 	bl	800a8f0 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 800590c:	2064      	movs	r0, #100	; 0x64
 800590e:	f002 f861 	bl	80079d4 <HAL_Delay>
}
 8005912:	bf00      	nop
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	2001ce0c 	.word	0x2001ce0c
 800591c:	2001cfe4 	.word	0x2001cfe4

08005920 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 8005926:	4b2a      	ldr	r3, [pc, #168]	; (80059d0 <motorCtrlFlip+0xb0>)
 8005928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800592c:	2b00      	cmp	r3, #0
 800592e:	db0d      	blt.n	800594c <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8005930:	4b27      	ldr	r3, [pc, #156]	; (80059d0 <motorCtrlFlip+0xb0>)
 8005932:	881b      	ldrh	r3, [r3, #0]
 8005934:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8005936:	4b27      	ldr	r3, [pc, #156]	; (80059d4 <motorCtrlFlip+0xb4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800593e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8005940:	2200      	movs	r2, #0
 8005942:	2180      	movs	r1, #128	; 0x80
 8005944:	4824      	ldr	r0, [pc, #144]	; (80059d8 <motorCtrlFlip+0xb8>)
 8005946:	f003 fc77 	bl	8009238 <HAL_GPIO_WritePin>
 800594a:	e010      	b.n	800596e <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 800594c:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <motorCtrlFlip+0xb0>)
 800594e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005952:	b29b      	uxth	r3, r3
 8005954:	425b      	negs	r3, r3
 8005956:	b29b      	uxth	r3, r3
 8005958:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 800595a:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <motorCtrlFlip+0xb4>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005962:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8005964:	2201      	movs	r2, #1
 8005966:	2180      	movs	r1, #128	; 0x80
 8005968:	481b      	ldr	r0, [pc, #108]	; (80059d8 <motorCtrlFlip+0xb8>)
 800596a:	f003 fc65 	bl	8009238 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 800596e:	4b1b      	ldr	r3, [pc, #108]	; (80059dc <motorCtrlFlip+0xbc>)
 8005970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005974:	2b00      	cmp	r3, #0
 8005976:	db0e      	blt.n	8005996 <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 8005978:	4b18      	ldr	r3, [pc, #96]	; (80059dc <motorCtrlFlip+0xbc>)
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 800597e:	4b15      	ldr	r3, [pc, #84]	; (80059d4 <motorCtrlFlip+0xb4>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005986:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8005988:	2200      	movs	r2, #0
 800598a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800598e:	4812      	ldr	r0, [pc, #72]	; (80059d8 <motorCtrlFlip+0xb8>)
 8005990:	f003 fc52 	bl	8009238 <HAL_GPIO_WritePin>
 8005994:	e011      	b.n	80059ba <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 8005996:	4b11      	ldr	r3, [pc, #68]	; (80059dc <motorCtrlFlip+0xbc>)
 8005998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800599c:	b29b      	uxth	r3, r3
 800599e:	425b      	negs	r3, r3
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80059a4:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <motorCtrlFlip+0xb4>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80059ac:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80059ae:	2201      	movs	r2, #1
 80059b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059b4:	4808      	ldr	r0, [pc, #32]	; (80059d8 <motorCtrlFlip+0xb8>)
 80059b6:	f003 fc3f 	bl	8009238 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 80059ba:	4a09      	ldr	r2, [pc, #36]	; (80059e0 <motorCtrlFlip+0xc0>)
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 80059c0:	4a08      	ldr	r2, [pc, #32]	; (80059e4 <motorCtrlFlip+0xc4>)
 80059c2:	88bb      	ldrh	r3, [r7, #4]
 80059c4:	8013      	strh	r3, [r2, #0]
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20019c80 	.word	0x20019c80
 80059d4:	2001ce0c 	.word	0x2001ce0c
 80059d8:	40020800 	.word	0x40020800
 80059dc:	20019c82 	.word	0x20019c82
 80059e0:	2001d0d0 	.word	0x2001d0d0
 80059e4:	2001d0ce 	.word	0x2001d0ce

080059e8 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 80059e8:	b480      	push	{r7}
 80059ea:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <suctionmotorCtrlFlip+0x1c>)
 80059ee:	f9b3 2000 	ldrsh.w	r2, [r3]
 80059f2:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <suctionmotorCtrlFlip+0x20>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80059f8:	bf00      	nop
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20019c84 	.word	0x20019c84
 8005a08:	2001cfe4 	.word	0x2001cfe4

08005a0c <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	460a      	mov	r2, r1
 8005a16:	80fb      	strh	r3, [r7, #6]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8005a1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a20:	f240 628e 	movw	r2, #1678	; 0x68e
 8005a24:	4293      	cmp	r3, r2
 8005a26:	dd03      	ble.n	8005a30 <setMotor+0x24>
 8005a28:	f240 638f 	movw	r3, #1679	; 0x68f
 8005a2c:	80fb      	strh	r3, [r7, #6]
 8005a2e:	e007      	b.n	8005a40 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8005a30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a34:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <setMotor+0x70>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	da02      	bge.n	8005a40 <setMotor+0x34>
 8005a3a:	f64f 1371 	movw	r3, #63857	; 0xf971
 8005a3e:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8005a40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a44:	f240 628e 	movw	r2, #1678	; 0x68e
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	dd03      	ble.n	8005a54 <setMotor+0x48>
 8005a4c:	f240 638f 	movw	r3, #1679	; 0x68f
 8005a50:	80bb      	strh	r3, [r7, #4]
 8005a52:	e007      	b.n	8005a64 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8005a54:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a58:	4a08      	ldr	r2, [pc, #32]	; (8005a7c <setMotor+0x70>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	da02      	bge.n	8005a64 <setMotor+0x58>
 8005a5e:	f64f 1371 	movw	r3, #63857	; 0xf971
 8005a62:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8005a64:	4a06      	ldr	r2, [pc, #24]	; (8005a80 <setMotor+0x74>)
 8005a66:	88fb      	ldrh	r3, [r7, #6]
 8005a68:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8005a6a:	4a06      	ldr	r2, [pc, #24]	; (8005a84 <setMotor+0x78>)
 8005a6c:	88bb      	ldrh	r3, [r7, #4]
 8005a6e:	8013      	strh	r3, [r2, #0]
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr
 8005a7c:	fffff972 	.word	0xfffff972
 8005a80:	20019c80 	.word	0x20019c80
 8005a84:	20019c82 	.word	0x20019c82

08005a88 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 8005a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	bfb8      	it	lt
 8005a9a:	425b      	neglt	r3, r3
 8005a9c:	b21a      	sxth	r2, r3
 8005a9e:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <setsuctionMotor+0x38>)
 8005aa0:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 8005aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005aa6:	f240 3246 	movw	r2, #838	; 0x346
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	dd02      	ble.n	8005ab4 <setsuctionMotor+0x2c>
 8005aae:	f240 3347 	movw	r3, #839	; 0x347
 8005ab2:	80fb      	strh	r3, [r7, #6]
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	20019c84 	.word	0x20019c84

08005ac4 <updateSideSensorStatus>:
static float debug_now_X;
static float debug_now_Y;
static float debug_now_Theta;
static int16_t V_motor;

void updateSideSensorStatus(){
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <updateSideSensorStatus+0x44>)
 8005aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ace:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005ad2:	dc03      	bgt.n	8005adc <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 8005ad4:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <updateSideSensorStatus+0x48>)
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	e002      	b.n	8005ae2 <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 8005adc:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <updateSideSensorStatus+0x48>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 8005ae2:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <updateSideSensorStatus+0x4c>)
 8005ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ae8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005aec:	dc03      	bgt.n	8005af6 <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <updateSideSensorStatus+0x50>)
 8005af0:	2201      	movs	r2, #1
 8005af2:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 8005af4:	e002      	b.n	8005afc <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 8005af6:	4b07      	ldr	r3, [pc, #28]	; (8005b14 <updateSideSensorStatus+0x50>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	701a      	strb	r2, [r3, #0]
}
 8005afc:	bf00      	nop
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	2001cc48 	.word	0x2001cc48
 8005b0c:	2001cb74 	.word	0x2001cb74
 8005b10:	2001cbcc 	.word	0x2001cbcc
 8005b14:	2001cb75 	.word	0x2001cb75

08005b18 <setRunMode>:

void setRunMode(uint16_t num){
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	80fb      	strh	r3, [r7, #6]
	Run_Mode = num;
 8005b22:	4a04      	ldr	r2, [pc, #16]	; (8005b34 <setRunMode+0x1c>)
 8005b24:	88fb      	ldrh	r3, [r7, #6]
 8005b26:	8013      	strh	r3, [r2, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	2001d0da 	.word	0x2001d0da

08005b38 <isCrossLine>:

bool isCrossLine()
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 8005b3e:	4b20      	ldr	r3, [pc, #128]	; (8005bc0 <isCrossLine+0x88>)
 8005b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b44:	ee07 3a90 	vmov	s15, r3
 8005b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b4c:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 8005b50:	4b1b      	ldr	r3, [pc, #108]	; (8005bc0 <isCrossLine+0x88>)
 8005b52:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b5e:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 8005b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b66:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005bc4 <isCrossLine+0x8c>
 8005b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b72:	d50f      	bpl.n	8005b94 <isCrossLine+0x5c>
 8005b74:	edd7 7a00 	vldr	s15, [r7]
 8005b78:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005bc4 <isCrossLine+0x8c>
 8005b7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b84:	d506      	bpl.n	8005b94 <isCrossLine+0x5c>
		cnt++;
 8005b86:	4b10      	ldr	r3, [pc, #64]	; (8005bc8 <isCrossLine+0x90>)
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	b29a      	uxth	r2, r3
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <isCrossLine+0x90>)
 8005b90:	801a      	strh	r2, [r3, #0]
 8005b92:	e002      	b.n	8005b9a <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 8005b94:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <isCrossLine+0x90>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8005b9a:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <isCrossLine+0x90>)
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d903      	bls.n	8005baa <isCrossLine+0x72>
		flag = true;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <isCrossLine+0x94>)
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	701a      	strb	r2, [r3, #0]
 8005ba8:	e002      	b.n	8005bb0 <isCrossLine+0x78>
	}
	else{
		flag = false;
 8005baa:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <isCrossLine+0x94>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 8005bb0:	4b06      	ldr	r3, [pc, #24]	; (8005bcc <isCrossLine+0x94>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	2001cc28 	.word	0x2001cc28
 8005bc4:	442f0000 	.word	0x442f0000
 8005bc8:	2001cba2 	.word	0x2001cba2
 8005bcc:	2001cba4 	.word	0x2001cba4

08005bd0 <isContinuousCurvature>:

bool isContinuousCurvature()//連続曲率判定
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	ed2d 8b02 	vpush	{d8}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 8005bde:	4b2e      	ldr	r3, [pc, #184]	; (8005c98 <isContinuousCurvature+0xc8>)
 8005be0:	ed93 8a00 	vldr	s16, [r3]
 8005be4:	f7fb fe52 	bl	800188c <getTheta10mm>
 8005be8:	eef0 7a40 	vmov.f32	s15, s0
 8005bec:	ee78 7a67 	vsub.f32	s15, s16, s15
 8005bf0:	eef0 7ae7 	vabs.f32	s15, s15
 8005bf4:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 8005bf8:	4b28      	ldr	r3, [pc, #160]	; (8005c9c <isContinuousCurvature+0xcc>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d006      	beq.n	8005c0e <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 8005c00:	4b26      	ldr	r3, [pc, #152]	; (8005c9c <isContinuousCurvature+0xcc>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 8005c06:	4b26      	ldr	r3, [pc, #152]	; (8005ca0 <isContinuousCurvature+0xd0>)
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
	}

	//if(diff_theta <= 0.005) continuous_cnt++;
	//if(diff_theta <= 0.010) continuous_cnt++;
	if(diff_theta <= 0.020) continuous_cnt++;
 8005c0e:	6838      	ldr	r0, [r7, #0]
 8005c10:	f7fa fc9a 	bl	8000548 <__aeabi_f2d>
 8005c14:	a31e      	add	r3, pc, #120	; (adr r3, 8005c90 <isContinuousCurvature+0xc0>)
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f7fa ff69 	bl	8000af0 <__aeabi_dcmple>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <isContinuousCurvature+0x6a>
 8005c24:	4b1e      	ldr	r3, [pc, #120]	; (8005ca0 <isContinuousCurvature+0xd0>)
 8005c26:	edd3 7a00 	vldr	s15, [r3]
 8005c2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c32:	4b1b      	ldr	r3, [pc, #108]	; (8005ca0 <isContinuousCurvature+0xd0>)
 8005c34:	edc3 7a00 	vstr	s15, [r3]
 8005c38:	e003      	b.n	8005c42 <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 8005c3a:	4b19      	ldr	r3, [pc, #100]	; (8005ca0 <isContinuousCurvature+0xd0>)
 8005c3c:	f04f 0200 	mov.w	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 8005c42:	4b17      	ldr	r3, [pc, #92]	; (8005ca0 <isContinuousCurvature+0xd0>)
 8005c44:	edd3 7a00 	vldr	s15, [r3]
 8005c48:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005ca4 <isContinuousCurvature+0xd4>
 8005c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c54:	db01      	blt.n	8005c5a <isContinuousCurvature+0x8a>
 8005c56:	2301      	movs	r3, #1
 8005c58:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 8005c5a:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <isContinuousCurvature+0xd0>)
 8005c5c:	edd3 7a00 	vldr	s15, [r3]
 8005c60:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8005ca8 <isContinuousCurvature+0xd8>
 8005c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6c:	db02      	blt.n	8005c74 <isContinuousCurvature+0xa4>
 8005c6e:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <isContinuousCurvature+0xd0>)
 8005c70:	4a0e      	ldr	r2, [pc, #56]	; (8005cac <isContinuousCurvature+0xdc>)
 8005c72:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 8005c74:	f7fb fe0a 	bl	800188c <getTheta10mm>
 8005c78:	eef0 7a40 	vmov.f32	s15, s0
 8005c7c:	4b06      	ldr	r3, [pc, #24]	; (8005c98 <isContinuousCurvature+0xc8>)
 8005c7e:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 8005c82:	79fb      	ldrb	r3, [r7, #7]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3708      	adds	r7, #8
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	ecbd 8b02 	vpop	{d8}
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	47ae147b 	.word	0x47ae147b
 8005c94:	3f947ae1 	.word	0x3f947ae1
 8005c98:	2001cba8 	.word	0x2001cba8
 8005c9c:	2001cb78 	.word	0x2001cb78
 8005ca0:	2001cbac 	.word	0x2001cbac
 8005ca4:	42200000 	.word	0x42200000
 8005ca8:	447a0000 	.word	0x447a0000
 8005cac:	447a0000 	.word	0x447a0000

08005cb0 <isTargetDistance>:

bool isTargetDistance(float target){
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 8005cbe:	f7fb fbd1 	bl	8001464 <getDistance10mm>
 8005cc2:	eeb0 7a40 	vmov.f32	s14, s0
 8005cc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd2:	d801      	bhi.n	8005cd8 <isTargetDistance+0x28>
		ret = true;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8005cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <running>:

void running(void)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	ed2d 8b02 	vpush	{d8}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	80fb      	strh	r3, [r7, #6]

	runningInit();
 8005cf2:	f000 fa41 	bl	8006178 <runningInit>
	startLineTrace();
 8005cf6:	f7fc fa77 	bl	80021e8 <startLineTrace>
	startVelocityControl();
 8005cfa:	f7fd fed9 	bl	8003ab0 <startVelocityControl>
	startAngleControl();
 8005cfe:	f7fb f9f5 	bl	80010ec <startAngleControl>
	setTargetVelocity(min_velocity);
 8005d02:	4b94      	ldr	r3, [pc, #592]	; (8005f54 <running+0x270>)
 8005d04:	edd3 7a00 	vldr	s15, [r3]
 8005d08:	eeb0 0a67 	vmov.f32	s0, s15
 8005d0c:	f7fd fe30 	bl	8003970 <setTargetVelocity>

	while(goal_flag == false){
 8005d10:	e112      	b.n	8005f38 <running+0x254>
		switch(pattern){
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	2b14      	cmp	r3, #20
 8005d16:	f200 80d2 	bhi.w	8005ebe <running+0x1da>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <running+0x3c>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d75 	.word	0x08005d75
 8005d24:	08005ebf 	.word	0x08005ebf
 8005d28:	08005ebf 	.word	0x08005ebf
 8005d2c:	08005ebf 	.word	0x08005ebf
 8005d30:	08005ebf 	.word	0x08005ebf
 8005d34:	08005dc3 	.word	0x08005dc3
 8005d38:	08005ebf 	.word	0x08005ebf
 8005d3c:	08005ebf 	.word	0x08005ebf
 8005d40:	08005ebf 	.word	0x08005ebf
 8005d44:	08005ebf 	.word	0x08005ebf
 8005d48:	08005ddf 	.word	0x08005ddf
 8005d4c:	08005ebf 	.word	0x08005ebf
 8005d50:	08005ebf 	.word	0x08005ebf
 8005d54:	08005ebf 	.word	0x08005ebf
 8005d58:	08005ebf 	.word	0x08005ebf
 8005d5c:	08005ebf 	.word	0x08005ebf
 8005d60:	08005ebf 	.word	0x08005ebf
 8005d64:	08005ebf 	.word	0x08005ebf
 8005d68:	08005ebf 	.word	0x08005ebf
 8005d6c:	08005ebf 	.word	0x08005ebf
 8005d70:	08005e97 	.word	0x08005e97

				  case 0:
					  if(getSideSensorStatusR() == true){
 8005d74:	f001 f8dc 	bl	8006f30 <getSideSensorStatusR>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01d      	beq.n	8005dba <running+0xd6>
						  start_goal_line_cnt++;
 8005d7e:	4b76      	ldr	r3, [pc, #472]	; (8005f58 <running+0x274>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	3301      	adds	r3, #1
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	4b74      	ldr	r3, [pc, #464]	; (8005f58 <running+0x274>)
 8005d88:	701a      	strb	r2, [r3, #0]

						  if(Run_Mode == 1)
 8005d8a:	4b74      	ldr	r3, [pc, #464]	; (8005f5c <running+0x278>)
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d105      	bne.n	8005d9e <running+0xba>
						  {
							  Control_Mode = 2;
 8005d92:	4b73      	ldr	r3, [pc, #460]	; (8005f60 <running+0x27c>)
 8005d94:	2202      	movs	r2, #2
 8005d96:	801a      	strh	r2, [r3, #0]
							  startLogging();
 8005d98:	f000 face 	bl	8006338 <startLogging>
 8005d9c:	e006      	b.n	8005dac <running+0xc8>
						  }
						  else
						  {
							  Control_Mode = 5;
 8005d9e:	4b70      	ldr	r3, [pc, #448]	; (8005f60 <running+0x27c>)
 8005da0:	2205      	movs	r2, #5
 8005da2:	801a      	strh	r2, [r3, #0]
							  startVelocityUpdate();
 8005da4:	f000 fb04 	bl	80063b0 <startVelocityUpdate>
						      startTargetUpdate();
 8005da8:	f000 fae2 	bl	8006370 <startTargetUpdate>
						  }

						  clearGoalJudgeDistance();
 8005dac:	f7fb fb22 	bl	80013f4 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 8005db0:	f7fb fb2e 	bl	8001410 <clearSideLineJudgeDistance>
						  pattern = 5;
 8005db4:	2305      	movs	r3, #5
 8005db6:	80fb      	strh	r3, [r7, #6]
					  else
					  {
						  Control_Mode = 1;
					  }

					  break;
 8005db8:	e081      	b.n	8005ebe <running+0x1da>
						  Control_Mode = 1;
 8005dba:	4b69      	ldr	r3, [pc, #420]	; (8005f60 <running+0x27c>)
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	801a      	strh	r2, [r3, #0]
					  break;
 8005dc0:	e07d      	b.n	8005ebe <running+0x1da>

				  case 5:
					  if(getSideSensorStatusR() == false && Control_Mode == 2) pattern = 10;
 8005dc2:	f001 f8b5 	bl	8006f30 <getSideSensorStatusR>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	f083 0301 	eor.w	r3, r3, #1
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <running+0xfa>
 8005dd2:	4b63      	ldr	r3, [pc, #396]	; (8005f60 <running+0x27c>)
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d101      	bne.n	8005dde <running+0xfa>
 8005dda:	230a      	movs	r3, #10
 8005ddc:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8005dde:	f001 f89b 	bl	8006f18 <getSideSensorStatusL>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <running+0x10e>
						  goal_judge_flag = false;
 8005de8:	4b5e      	ldr	r3, [pc, #376]	; (8005f64 <running+0x280>)
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005dee:	f7fb fb01 	bl	80013f4 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true && getGoalJudgeDistance() >= 30 && Control_Mode == 2){
 8005df2:	4b5c      	ldr	r3, [pc, #368]	; (8005f64 <running+0x280>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	f083 0301 	eor.w	r3, r3, #1
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d019      	beq.n	8005e34 <running+0x150>
 8005e00:	f001 f896 	bl	8006f30 <getSideSensorStatusR>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d014      	beq.n	8005e34 <running+0x150>
 8005e0a:	f7fb faab 	bl	8001364 <getGoalJudgeDistance>
 8005e0e:	eeb0 7a40 	vmov.f32	s14, s0
 8005e12:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8005e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e1e:	db09      	blt.n	8005e34 <running+0x150>
 8005e20:	4b4f      	ldr	r3, [pc, #316]	; (8005f60 <running+0x27c>)
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d105      	bne.n	8005e34 <running+0x150>
						  goal_judge_flag = true;
 8005e28:	4b4e      	ldr	r3, [pc, #312]	; (8005f64 <running+0x280>)
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005e2e:	f7fb fae1 	bl	80013f4 <clearGoalJudgeDistance>
 8005e32:	e01d      	b.n	8005e70 <running+0x18c>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 30 && Control_Mode == 2){
 8005e34:	4b4b      	ldr	r3, [pc, #300]	; (8005f64 <running+0x280>)
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d019      	beq.n	8005e70 <running+0x18c>
 8005e3c:	f7fb fa92 	bl	8001364 <getGoalJudgeDistance>
 8005e40:	eeb0 7a40 	vmov.f32	s14, s0
 8005e44:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8005e48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e50:	db0e      	blt.n	8005e70 <running+0x18c>
 8005e52:	4b43      	ldr	r3, [pc, #268]	; (8005f60 <running+0x27c>)
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d10a      	bne.n	8005e70 <running+0x18c>
						  start_goal_line_cnt++;
 8005e5a:	4b3f      	ldr	r3, [pc, #252]	; (8005f58 <running+0x274>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	4b3d      	ldr	r3, [pc, #244]	; (8005f58 <running+0x274>)
 8005e64:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 8005e66:	4b3f      	ldr	r3, [pc, #252]	; (8005f64 <running+0x280>)
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8005e6c:	f7fb fac2 	bl	80013f4 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2 && Control_Mode == 2){
 8005e70:	4b39      	ldr	r3, [pc, #228]	; (8005f58 <running+0x274>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d921      	bls.n	8005ebc <running+0x1d8>
 8005e78:	4b39      	ldr	r3, [pc, #228]	; (8005f60 <running+0x27c>)
 8005e7a:	881b      	ldrh	r3, [r3, #0]
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d11d      	bne.n	8005ebc <running+0x1d8>
						  stopLogging();
 8005e80:	f000 fa6a 	bl	8006358 <stopLogging>
						  stopVelocityUpdate();
 8005e84:	f000 fab6 	bl	80063f4 <stopVelocityUpdate>
						  stopTargetUpdate();
 8005e88:	f000 fa86 	bl	8006398 <stopTargetUpdate>
						  stopAngleControl();
 8005e8c:	f7fb f940 	bl	8001110 <stopAngleControl>
						  pattern = 20;
 8005e90:	2314      	movs	r3, #20
 8005e92:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8005e94:	e012      	b.n	8005ebc <running+0x1d8>

				  case 20:

					  setTargetVelocity(0.5);
 8005e96:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8005e9a:	f7fd fd69 	bl	8003970 <setTargetVelocity>
					  HAL_Delay(100);
 8005e9e:	2064      	movs	r0, #100	; 0x64
 8005ea0:	f001 fd98 	bl	80079d4 <HAL_Delay>
					  setTargetVelocity(0);
 8005ea4:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8005f68 <running+0x284>
 8005ea8:	f7fd fd62 	bl	8003970 <setTargetVelocity>
					  HAL_Delay(500);
 8005eac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005eb0:	f001 fd90 	bl	80079d4 <HAL_Delay>

					  goal_flag = true;
 8005eb4:	4b2d      	ldr	r3, [pc, #180]	; (8005f6c <running+0x288>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	701a      	strb	r2, [r3, #0]

					  break;
 8005eba:	e000      	b.n	8005ebe <running+0x1da>
					  break;
 8005ebc:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 8005ebe:	f7fc f9b7 	bl	8002230 <getCouseOutFlag>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d009      	beq.n	8005edc <running+0x1f8>
		{
			stopLogging();
 8005ec8:	f000 fa46 	bl	8006358 <stopLogging>
			stopVelocityUpdate();
 8005ecc:	f000 fa92 	bl	80063f4 <stopVelocityUpdate>
			stopTargetUpdate();
 8005ed0:	f000 fa62 	bl	8006398 <stopTargetUpdate>
			stopAngleControl();
 8005ed4:	f7fb f91c 	bl	8001110 <stopAngleControl>
		    pattern = 20;
 8005ed8:	2314      	movs	r3, #20
 8005eda:	80fb      	strh	r3, [r7, #6]
	    }

		if(getcheckAngularvelocityFlag() == true)
 8005edc:	f7fe fad6 	bl	800448c <getcheckAngularvelocityFlag>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d009      	beq.n	8005efa <running+0x216>
		{
			stopLogging();
 8005ee6:	f000 fa37 	bl	8006358 <stopLogging>
			stopVelocityUpdate();
 8005eea:	f000 fa83 	bl	80063f4 <stopVelocityUpdate>
			stopTargetUpdate();
 8005eee:	f000 fa53 	bl	8006398 <stopTargetUpdate>
			stopAngleControl();
 8005ef2:	f7fb f90d 	bl	8001110 <stopAngleControl>
			pattern = 20;
 8005ef6:	2314      	movs	r3, #20
 8005ef8:	80fb      	strh	r3, [r7, #6]
		}

		if(Run_Mode == 5)
 8005efa:	4b18      	ldr	r3, [pc, #96]	; (8005f5c <running+0x278>)
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	2b05      	cmp	r3, #5
 8005f00:	d11a      	bne.n	8005f38 <running+0x254>
		{
			if(getTotalDistance() >= getTotal_length())
 8005f02:	f7fb fa21 	bl	8001348 <getTotalDistance>
 8005f06:	eeb0 8a40 	vmov.f32	s16, s0
 8005f0a:	f7fe fa6b 	bl	80043e4 <getTotal_length>
 8005f0e:	eef0 7a40 	vmov.f32	s15, s0
 8005f12:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1a:	da00      	bge.n	8005f1e <running+0x23a>
 8005f1c:	e00c      	b.n	8005f38 <running+0x254>
			{
				setLED2('A');
 8005f1e:	2041      	movs	r0, #65	; 0x41
 8005f20:	f7fb fdba 	bl	8001a98 <setLED2>
				stopLogging();
 8005f24:	f000 fa18 	bl	8006358 <stopLogging>
				stopVelocityUpdate();
 8005f28:	f000 fa64 	bl	80063f4 <stopVelocityUpdate>
				stopTargetUpdate();
 8005f2c:	f000 fa34 	bl	8006398 <stopTargetUpdate>
				stopAngleControl();
 8005f30:	f7fb f8ee 	bl	8001110 <stopAngleControl>
				pattern = 20;
 8005f34:	2314      	movs	r3, #20
 8005f36:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 8005f38:	4b0c      	ldr	r3, [pc, #48]	; (8005f6c <running+0x288>)
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f083 0301 	eor.w	r3, r3, #1
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f47f aee5 	bne.w	8005d12 <running+0x2e>
			}
		}
	}
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	ecbd 8b02 	vpop	{d8}
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	2001cb80 	.word	0x2001cb80
 8005f58:	2001cb68 	.word	0x2001cb68
 8005f5c:	2001d0da 	.word	0x2001d0da
 8005f60:	2001d0d8 	.word	0x2001d0d8
 8005f64:	2001cb77 	.word	0x2001cb77
 8005f68:	00000000 	.word	0x00000000
 8005f6c:	2001cb76 	.word	0x2001cb76

08005f70 <runningFlip>:

void runningFlip()
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
	if(run_flag == true){
 8005f74:	4b76      	ldr	r3, [pc, #472]	; (8006150 <runningFlip+0x1e0>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 80e7 	beq.w	800614c <runningFlip+0x1dc>
		setLED('G');
 8005f7e:	2047      	movs	r0, #71	; 0x47
 8005f80:	f7fb fcbc 	bl	80018fc <setLED>
		updateTargetVelocity();//速度の更新
 8005f84:	f000 fd26 	bl	80069d4 <updateTargetVelocity>
		updateTargetpoint();//座標の更新
 8005f88:	f7fe f864 	bl	8004054 <updateTargetpoint>

		if(isTargetDistance(30) == true){
 8005f8c:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8005f90:	f7ff fe8e 	bl	8005cb0 <isTargetDistance>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <runningFlip+0x46>
			saveLog();
 8005f9a:	f000 f933 	bl	8006204 <saveLog>

			if(isContinuousCurvature() == true){
 8005f9e:	f7ff fe17 	bl	8005bd0 <isContinuousCurvature>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <runningFlip+0x3e>
				continuous_curve_flag = true;
 8005fa8:	4b6a      	ldr	r3, [pc, #424]	; (8006154 <runningFlip+0x1e4>)
 8005faa:	2201      	movs	r2, #1
 8005fac:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 8005fae:	f7fb fa67 	bl	8001480 <clearDistance10mm>
			clearTheta10mm();
 8005fb2:	f7fb fc79 	bl	80018a8 <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 8005fb6:	f7ff fdbf 	bl	8005b38 <isCrossLine>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d026      	beq.n	800600e <runningFlip+0x9e>
 8005fc0:	4b65      	ldr	r3, [pc, #404]	; (8006158 <runningFlip+0x1e8>)
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f083 0301 	eor.w	r3, r3, #1
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d01f      	beq.n	800600e <runningFlip+0x9e>
			cross_line_ignore_flag = true;
 8005fce:	4b62      	ldr	r3, [pc, #392]	; (8006158 <runningFlip+0x1e8>)
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 8005fd4:	4b5f      	ldr	r3, [pc, #380]	; (8006154 <runningFlip+0x1e4>)
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 8005fda:	f7fb fa27 	bl	800142c <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 8005fde:	f7fb fa33 	bl	8001448 <clearSideLineIgnoreDistance>

			if(Run_Mode == 1){
 8005fe2:	4b5e      	ldr	r3, [pc, #376]	; (800615c <runningFlip+0x1ec>)
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d10b      	bne.n	8006002 <runningFlip+0x92>
				correction_check_cnt_cross = 0;
 8005fea:	4b5d      	ldr	r3, [pc, #372]	; (8006160 <runningFlip+0x1f0>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 8005ff0:	f7fb f9aa 	bl	8001348 <getTotalDistance>
 8005ff4:	eef0 7a40 	vmov.f32	s15, s0
 8005ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8005ffc:	f7fd f86e 	bl	80030dc <saveCross>
			if(Run_Mode == 1){
 8006000:	e017      	b.n	8006032 <runningFlip+0xc2>
			}
			else{
				correction_check_cnt_cross = 0;
 8006002:	4b57      	ldr	r3, [pc, #348]	; (8006160 <runningFlip+0x1f0>)
 8006004:	2200      	movs	r2, #0
 8006006:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();;
 8006008:	f000 fd5a 	bl	8006ac0 <correctionTotalDistanceFromCrossLine>
			if(Run_Mode == 1){
 800600c:	e011      	b.n	8006032 <runningFlip+0xc2>
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 800600e:	4b52      	ldr	r3, [pc, #328]	; (8006158 <runningFlip+0x1e8>)
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00d      	beq.n	8006032 <runningFlip+0xc2>
 8006016:	f7fb f9d1 	bl	80013bc <getCrossLineIgnoreDistance>
 800601a:	eeb0 7a40 	vmov.f32	s14, s0
 800601e:	eddf 7a51 	vldr	s15, [pc, #324]	; 8006164 <runningFlip+0x1f4>
 8006022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602a:	db02      	blt.n	8006032 <runningFlip+0xc2>
			cross_line_ignore_flag = false;
 800602c:	4b4a      	ldr	r3, [pc, #296]	; (8006158 <runningFlip+0x1e8>)
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 8006032:	f000 ff7d 	bl	8006f30 <getSideSensorStatusR>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d004      	beq.n	8006046 <runningFlip+0xd6>
			side_line_judge_flag = false;
 800603c:	4b4a      	ldr	r3, [pc, #296]	; (8006168 <runningFlip+0x1f8>)
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8006042:	f7fb f9e5 	bl	8001410 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag == false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 8006046:	4b48      	ldr	r3, [pc, #288]	; (8006168 <runningFlip+0x1f8>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	f083 0301 	eor.w	r3, r3, #1
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b00      	cmp	r3, #0
 8006052:	d015      	beq.n	8006080 <runningFlip+0x110>
 8006054:	f000 ff60 	bl	8006f18 <getSideSensorStatusL>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d010      	beq.n	8006080 <runningFlip+0x110>
 800605e:	f7fb f98f 	bl	8001380 <getSideLineJudgeDistance>
 8006062:	eeb0 7a40 	vmov.f32	s14, s0
 8006066:	eddf 7a41 	vldr	s15, [pc, #260]	; 800616c <runningFlip+0x1fc>
 800606a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800606e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006072:	db05      	blt.n	8006080 <runningFlip+0x110>
			side_line_judge_flag = true;
 8006074:	4b3c      	ldr	r3, [pc, #240]	; (8006168 <runningFlip+0x1f8>)
 8006076:	2201      	movs	r2, #1
 8006078:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 800607a:	f7fb f9c9 	bl	8001410 <clearSideLineJudgeDistance>
 800607e:	e02f      	b.n	80060e0 <runningFlip+0x170>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 8006080:	4b39      	ldr	r3, [pc, #228]	; (8006168 <runningFlip+0x1f8>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d02b      	beq.n	80060e0 <runningFlip+0x170>
 8006088:	f7fb f97a 	bl	8001380 <getSideLineJudgeDistance>
 800608c:	eeb0 7a40 	vmov.f32	s14, s0
 8006090:	eddf 7a36 	vldr	s15, [pc, #216]	; 800616c <runningFlip+0x1fc>
 8006094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609c:	db20      	blt.n	80060e0 <runningFlip+0x170>
			clearSideLineJudgeDistance();
 800609e:	f7fb f9b7 	bl	8001410 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 80060a2:	4b31      	ldr	r3, [pc, #196]	; (8006168 <runningFlip+0x1f8>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 80060a8:	4b2a      	ldr	r3, [pc, #168]	; (8006154 <runningFlip+0x1e4>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d017      	beq.n	80060e0 <runningFlip+0x170>
				continuous_curve_flag = false;
 80060b0:	4b28      	ldr	r3, [pc, #160]	; (8006154 <runningFlip+0x1e4>)
 80060b2:	2200      	movs	r2, #0
 80060b4:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 80060b6:	4b2e      	ldr	r3, [pc, #184]	; (8006170 <runningFlip+0x200>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	701a      	strb	r2, [r3, #0]

				if(Run_Mode == 1){
 80060bc:	4b27      	ldr	r3, [pc, #156]	; (800615c <runningFlip+0x1ec>)
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	d10b      	bne.n	80060dc <runningFlip+0x16c>
					correction_check_cnt_side = 0;
 80060c4:	4b2b      	ldr	r3, [pc, #172]	; (8006174 <runningFlip+0x204>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 80060ca:	f7fb f93d 	bl	8001348 <getTotalDistance>
 80060ce:	eef0 7a40 	vmov.f32	s15, s0
 80060d2:	eeb0 0a67 	vmov.f32	s0, s15
 80060d6:	f7fd f819 	bl	800310c <saveSide>
 80060da:	e001      	b.n	80060e0 <runningFlip+0x170>
				}
				else{
					correctionTotalDistanceFromSideLine();
 80060dc:	f000 fd46 	bl	8006b6c <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 80060e0:	4b1f      	ldr	r3, [pc, #124]	; (8006160 <runningFlip+0x1f0>)
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	3301      	adds	r3, #1
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	4b1d      	ldr	r3, [pc, #116]	; (8006160 <runningFlip+0x1f0>)
 80060ea:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 80060ec:	4b21      	ldr	r3, [pc, #132]	; (8006174 <runningFlip+0x204>)
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	b29a      	uxth	r2, r3
 80060f4:	4b1f      	ldr	r3, [pc, #124]	; (8006174 <runningFlip+0x204>)
 80060f6:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 80060f8:	4b19      	ldr	r3, [pc, #100]	; (8006160 <runningFlip+0x1f0>)
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8006100:	4293      	cmp	r3, r2
 8006102:	d903      	bls.n	800610c <runningFlip+0x19c>
 8006104:	4b16      	ldr	r3, [pc, #88]	; (8006160 <runningFlip+0x1f0>)
 8006106:	f242 7210 	movw	r2, #10000	; 0x2710
 800610a:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 800610c:	4b19      	ldr	r3, [pc, #100]	; (8006174 <runningFlip+0x204>)
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	f242 720f 	movw	r2, #9999	; 0x270f
 8006114:	4293      	cmp	r3, r2
 8006116:	d903      	bls.n	8006120 <runningFlip+0x1b0>
 8006118:	4b16      	ldr	r3, [pc, #88]	; (8006174 <runningFlip+0x204>)
 800611a:	f242 7210 	movw	r2, #10000	; 0x2710
 800611e:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 8006120:	4b14      	ldr	r3, [pc, #80]	; (8006174 <runningFlip+0x204>)
 8006122:	881b      	ldrh	r3, [r3, #0]
 8006124:	2b96      	cmp	r3, #150	; 0x96
 8006126:	d803      	bhi.n	8006130 <runningFlip+0x1c0>
 8006128:	2047      	movs	r0, #71	; 0x47
 800612a:	f7fb fcb5 	bl	8001a98 <setLED2>
 800612e:	e002      	b.n	8006136 <runningFlip+0x1c6>
	    else setLED2('N');
 8006130:	204e      	movs	r0, #78	; 0x4e
 8006132:	f7fb fcb1 	bl	8001a98 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 8006136:	4b0f      	ldr	r3, [pc, #60]	; (8006174 <runningFlip+0x204>)
 8006138:	881b      	ldrh	r3, [r3, #0]
 800613a:	2b96      	cmp	r3, #150	; 0x96
 800613c:	d803      	bhi.n	8006146 <runningFlip+0x1d6>
 800613e:	2042      	movs	r0, #66	; 0x42
 8006140:	f7fb fbdc 	bl	80018fc <setLED>
	    else setLED('G');
	}
}
 8006144:	e002      	b.n	800614c <runningFlip+0x1dc>
	    else setLED('G');
 8006146:	2047      	movs	r0, #71	; 0x47
 8006148:	f7fb fbd8 	bl	80018fc <setLED>
}
 800614c:	bf00      	nop
 800614e:	bd80      	pop	{r7, pc}
 8006150:	2001cb7a 	.word	0x2001cb7a
 8006154:	2001cb79 	.word	0x2001cb79
 8006158:	2001cb72 	.word	0x2001cb72
 800615c:	2001d0da 	.word	0x2001d0da
 8006160:	2001cb6e 	.word	0x2001cb6e
 8006164:	42480000 	.word	0x42480000
 8006168:	2001cb73 	.word	0x2001cb73
 800616c:	42700000 	.word	0x42700000
 8006170:	2001cb78 	.word	0x2001cb78
 8006174:	2001cb70 	.word	0x2001cb70

08006178 <runningInit>:

void runningInit()
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
	if(Run_Mode == 1){
 800617c:	4b19      	ldr	r3, [pc, #100]	; (80061e4 <runningInit+0x6c>)
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d105      	bne.n	8006190 <runningInit+0x18>
		setLED('W');
 8006184:	2057      	movs	r0, #87	; 0x57
 8006186:	f7fb fbb9 	bl	80018fc <setLED>
		ereaseLog();
 800618a:	f7fc ffef 	bl	800316c <ereaseLog>
 800618e:	e00d      	b.n	80061ac <runningInit+0x34>
	}
	else
	{
		ereaseDebugLog();
 8006190:	f7fd f828 	bl	80031e4 <ereaseDebugLog>
		loadDistance();
 8006194:	f7fd f8c0 	bl	8003318 <loadDistance>
		loadTheta();
 8006198:	f7fd f8fc 	bl	8003394 <loadTheta>
		loadCross();
 800619c:	f7fd f938 	bl	8003410 <loadCross>
		loadSide();
 80061a0:	f7fd f974 	bl	800348c <loadSide>
		CreateXYcoordinates();
 80061a4:	f7fd fcb0 	bl	8003b08 <CreateXYcoordinates>
		CreateVelocityTable();
 80061a8:	f000 f930 	bl	800640c <CreateVelocityTable>
	}

	clearCrossLineIgnoreDistance();
 80061ac:	f7fb f93e 	bl	800142c <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 80061b0:	f7fb f94a 	bl	8001448 <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <runningInit+0x70>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 80061ba:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <runningInit+0x74>)
 80061bc:	2200      	movs	r2, #0
 80061be:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 80061c0:	4b0b      	ldr	r3, [pc, #44]	; (80061f0 <runningInit+0x78>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 80061c6:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <runningInit+0x7c>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 80061cc:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <runningInit+0x80>)
 80061ce:	2201      	movs	r2, #1
 80061d0:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <runningInit+0x84>)
 80061d4:	2200      	movs	r2, #0
 80061d6:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 80061d8:	4b09      	ldr	r3, [pc, #36]	; (8006200 <runningInit+0x88>)
 80061da:	2201      	movs	r2, #1
 80061dc:	701a      	strb	r2, [r3, #0]
}
 80061de:	bf00      	nop
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	2001d0da 	.word	0x2001d0da
 80061e8:	2001cb68 	.word	0x2001cb68
 80061ec:	2001cb72 	.word	0x2001cb72
 80061f0:	2001cb73 	.word	0x2001cb73
 80061f4:	2001cb77 	.word	0x2001cb77
 80061f8:	2001cb78 	.word	0x2001cb78
 80061fc:	2001cb79 	.word	0x2001cb79
 8006200:	2001cb7a 	.word	0x2001cb7a

08006204 <saveLog>:

void saveLog(){
 8006204:	b580      	push	{r7, lr}
 8006206:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 8006208:	4b46      	ldr	r3, [pc, #280]	; (8006324 <saveLog+0x120>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d010      	beq.n	8006232 <saveLog+0x2e>
		saveDistance(getDistance10mm());
 8006210:	f7fb f928 	bl	8001464 <getDistance10mm>
 8006214:	eef0 7a40 	vmov.f32	s15, s0
 8006218:	eeb0 0a67 	vmov.f32	s0, s15
 800621c:	f7fc ff2e 	bl	800307c <saveDistance>
		saveTheta(getTheta10mm());
 8006220:	f7fb fb34 	bl	800188c <getTheta10mm>
 8006224:	eef0 7a40 	vmov.f32	s15, s0
 8006228:	eeb0 0a67 	vmov.f32	s0, s15
 800622c:	f7fc ff3e 	bl	80030ac <saveTheta>
		saveDebug(getOutput_velocity());//目標速度
		saveDebug(getOutput_angularvelocity());//目標車体角速度(ローカル座標系)
		saveDebug(getCurrentVelocity());//実際の速度
		saveDebug(getTheta10mm());//今の角速度
	}
}
 8006230:	e076      	b.n	8006320 <saveLog+0x11c>
	else if(target_update_flag == true){
 8006232:	4b3d      	ldr	r3, [pc, #244]	; (8006328 <saveLog+0x124>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d072      	beq.n	8006320 <saveLog+0x11c>
		debug_now_X = CurrentXcoordinates();//現在のx座標変数
 800623a:	f7fd fe63 	bl	8003f04 <CurrentXcoordinates>
 800623e:	eef0 7a40 	vmov.f32	s15, s0
 8006242:	4b3a      	ldr	r3, [pc, #232]	; (800632c <saveLog+0x128>)
 8006244:	edc3 7a00 	vstr	s15, [r3]
		debug_now_Y = CurrentYcoordinates();//現在のy座標変数
 8006248:	f7fd feb0 	bl	8003fac <CurrentYcoordinates>
 800624c:	eef0 7a40 	vmov.f32	s15, s0
 8006250:	4b37      	ldr	r3, [pc, #220]	; (8006330 <saveLog+0x12c>)
 8006252:	edc3 7a00 	vstr	s15, [r3]
		debug_now_Theta = getaddTheta();//現在の角速度変数
 8006256:	f7fb fb35 	bl	80018c4 <getaddTheta>
 800625a:	eef0 7a40 	vmov.f32	s15, s0
 800625e:	4b35      	ldr	r3, [pc, #212]	; (8006334 <saveLog+0x130>)
 8006260:	edc3 7a00 	vstr	s15, [r3]
		saveDebug(getTargetpoint_X());//目標のx座標
 8006264:	f7fe f8cc 	bl	8004400 <getTargetpoint_X>
 8006268:	eef0 7a40 	vmov.f32	s15, s0
 800626c:	eeb0 0a67 	vmov.f32	s0, s15
 8006270:	f7fc ff64 	bl	800313c <saveDebug>
		saveDebug(getTargetpoint_Y());//目標のy座標
 8006274:	f7fe f8d2 	bl	800441c <getTargetpoint_Y>
 8006278:	eef0 7a40 	vmov.f32	s15, s0
 800627c:	eeb0 0a67 	vmov.f32	s0, s15
 8006280:	f7fc ff5c 	bl	800313c <saveDebug>
		saveDebug(getTargetpoint_Theta());//目標の車体角速度
 8006284:	f7fe f8d8 	bl	8004438 <getTargetpoint_Theta>
 8006288:	eef0 7a40 	vmov.f32	s15, s0
 800628c:	eeb0 0a67 	vmov.f32	s0, s15
 8006290:	f7fc ff54 	bl	800313c <saveDebug>
		saveDebug(debug_now_X);//現在のx座標
 8006294:	4b25      	ldr	r3, [pc, #148]	; (800632c <saveLog+0x128>)
 8006296:	edd3 7a00 	vldr	s15, [r3]
 800629a:	eeb0 0a67 	vmov.f32	s0, s15
 800629e:	f7fc ff4d 	bl	800313c <saveDebug>
		saveDebug(debug_now_Y);//現在のy座標
 80062a2:	4b23      	ldr	r3, [pc, #140]	; (8006330 <saveLog+0x12c>)
 80062a4:	edd3 7a00 	vldr	s15, [r3]
 80062a8:	eeb0 0a67 	vmov.f32	s0, s15
 80062ac:	f7fc ff46 	bl	800313c <saveDebug>
		saveDebug(debug_now_Theta);//現在の車体角速度(絶対座標系)
 80062b0:	4b20      	ldr	r3, [pc, #128]	; (8006334 <saveLog+0x130>)
 80062b2:	edd3 7a00 	vldr	s15, [r3]
 80062b6:	eeb0 0a67 	vmov.f32	s0, s15
 80062ba:	f7fc ff3f 	bl	800313c <saveDebug>
		Error_XY(debug_now_X, debug_now_Y, debug_now_Theta);//誤差の計算関数
 80062be:	4b1b      	ldr	r3, [pc, #108]	; (800632c <saveLog+0x128>)
 80062c0:	edd3 7a00 	vldr	s15, [r3]
 80062c4:	4b1a      	ldr	r3, [pc, #104]	; (8006330 <saveLog+0x12c>)
 80062c6:	ed93 7a00 	vldr	s14, [r3]
 80062ca:	4b1a      	ldr	r3, [pc, #104]	; (8006334 <saveLog+0x130>)
 80062cc:	edd3 6a00 	vldr	s13, [r3]
 80062d0:	eeb0 1a66 	vmov.f32	s2, s13
 80062d4:	eef0 0a47 	vmov.f32	s1, s14
 80062d8:	eeb0 0a67 	vmov.f32	s0, s15
 80062dc:	f7fd ffa0 	bl	8004220 <Error_XY>
		saveDebug(getOutput_velocity());//目標速度
 80062e0:	f7fe f8b8 	bl	8004454 <getOutput_velocity>
 80062e4:	eef0 7a40 	vmov.f32	s15, s0
 80062e8:	eeb0 0a67 	vmov.f32	s0, s15
 80062ec:	f7fc ff26 	bl	800313c <saveDebug>
		saveDebug(getOutput_angularvelocity());//目標車体角速度(ローカル座標系)
 80062f0:	f7fe f8be 	bl	8004470 <getOutput_angularvelocity>
 80062f4:	eef0 7a40 	vmov.f32	s15, s0
 80062f8:	eeb0 0a67 	vmov.f32	s0, s15
 80062fc:	f7fc ff1e 	bl	800313c <saveDebug>
		saveDebug(getCurrentVelocity());//実際の速度
 8006300:	f7fd fb8a 	bl	8003a18 <getCurrentVelocity>
 8006304:	eef0 7a40 	vmov.f32	s15, s0
 8006308:	eeb0 0a67 	vmov.f32	s0, s15
 800630c:	f7fc ff16 	bl	800313c <saveDebug>
		saveDebug(getTheta10mm());//今の角速度
 8006310:	f7fb fabc 	bl	800188c <getTheta10mm>
 8006314:	eef0 7a40 	vmov.f32	s15, s0
 8006318:	eeb0 0a67 	vmov.f32	s0, s15
 800631c:	f7fc ff0e 	bl	800313c <saveDebug>
}
 8006320:	bf00      	nop
 8006322:	bd80      	pop	{r7, pc}
 8006324:	2001cb7b 	.word	0x2001cb7b
 8006328:	2001cb7c 	.word	0x2001cb7c
 800632c:	2001cb94 	.word	0x2001cb94
 8006330:	2001cb98 	.word	0x2001cb98
 8006334:	2001cb9c 	.word	0x2001cb9c

08006338 <startLogging>:

void startLogging(){
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
	clearDistance10mm();
 800633c:	f7fb f8a0 	bl	8001480 <clearDistance10mm>
	clearTheta10mm();
 8006340:	f7fb fab2 	bl	80018a8 <clearTheta10mm>
	clearTotalDistance();
 8006344:	f7fb f848 	bl	80013d8 <clearTotalDistance>
	logging_flag = true;
 8006348:	4b02      	ldr	r3, [pc, #8]	; (8006354 <startLogging+0x1c>)
 800634a:	2201      	movs	r2, #1
 800634c:	701a      	strb	r2, [r3, #0]
}
 800634e:	bf00      	nop
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	2001cb7b 	.word	0x2001cb7b

08006358 <stopLogging>:

void stopLogging()
{
 8006358:	b480      	push	{r7}
 800635a:	af00      	add	r7, sp, #0
	logging_flag = false;
 800635c:	4b03      	ldr	r3, [pc, #12]	; (800636c <stopLogging+0x14>)
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
}
 8006362:	bf00      	nop
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	2001cb7b 	.word	0x2001cb7b

08006370 <startTargetUpdate>:

void startTargetUpdate()
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8006374:	f7fb f884 	bl	8001480 <clearDistance10mm>
	clearVLT_Distance10mm();
 8006378:	f7fb f89e 	bl	80014b8 <clearVLT_Distance10mm>
	clearTheta10mm();
 800637c:	f7fb fa94 	bl	80018a8 <clearTheta10mm>
	clearaddTheta();
 8006380:	f7fb faae 	bl	80018e0 <clearaddTheta>
	clearTotalDistance();
 8006384:	f7fb f828 	bl	80013d8 <clearTotalDistance>
	target_update_flag = true;
 8006388:	4b02      	ldr	r3, [pc, #8]	; (8006394 <startTargetUpdate+0x24>)
 800638a:	2201      	movs	r2, #1
 800638c:	701a      	strb	r2, [r3, #0]
}
 800638e:	bf00      	nop
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	2001cb7c 	.word	0x2001cb7c

08006398 <stopTargetUpdate>:

void stopTargetUpdate()
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
	target_update_flag = false;
 800639c:	4b03      	ldr	r3, [pc, #12]	; (80063ac <stopTargetUpdate+0x14>)
 800639e:	2200      	movs	r2, #0
 80063a0:	701a      	strb	r2, [r3, #0]
}
 80063a2:	bf00      	nop
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	2001cb7c 	.word	0x2001cb7c

080063b0 <startVelocityUpdate>:

void startVelocityUpdate(){
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
	clearDistance10mm();
 80063b4:	f7fb f864 	bl	8001480 <clearDistance10mm>
	clearTotalDistance();
 80063b8:	f7fb f80e 	bl	80013d8 <clearTotalDistance>
	velocity_table_idx = 0;
 80063bc:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <startVelocityUpdate+0x30>)
 80063be:	2200      	movs	r2, #0
 80063c0:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 80063c2:	4b08      	ldr	r3, [pc, #32]	; (80063e4 <startVelocityUpdate+0x34>)
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 80063ca:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <startVelocityUpdate+0x38>)
 80063cc:	2201      	movs	r2, #1
 80063ce:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 80063d0:	4b06      	ldr	r3, [pc, #24]	; (80063ec <startVelocityUpdate+0x3c>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 80063d6:	4b06      	ldr	r3, [pc, #24]	; (80063f0 <startVelocityUpdate+0x40>)
 80063d8:	2200      	movs	r2, #0
 80063da:	801a      	strh	r2, [r3, #0]
}
 80063dc:	bf00      	nop
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	2001d0dc 	.word	0x2001d0dc
 80063e4:	2001d0d4 	.word	0x2001d0d4
 80063e8:	2001cb7d 	.word	0x2001cb7d
 80063ec:	2001cb6a 	.word	0x2001cb6a
 80063f0:	2001cb6c 	.word	0x2001cb6c

080063f4 <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 80063f8:	4b03      	ldr	r3, [pc, #12]	; (8006408 <stopVelocityUpdate+0x14>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	701a      	strb	r2, [r3, #0]
}
 80063fe:	bf00      	nop
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	2001cb7d 	.word	0x2001cb7d

0800640c <CreateVelocityTable>:

void CreateVelocityTable(){//速度テーブル生成関数
 800640c:	b590      	push	{r4, r7, lr}
 800640e:	b08d      	sub	sp, #52	; 0x34
 8006410:	af00      	add	r7, sp, #0
	const float *p_distance_V, *p_theta_V;
	p_distance_V = getDistanceArrayPointer();
 8006412:	f7fd f8c1 	bl	8003598 <getDistanceArrayPointer>
 8006416:	6178      	str	r0, [r7, #20]
	p_theta_V = getThetaArrayPointer();
 8006418:	f7fd f8c8 	bl	80035ac <getThetaArrayPointer>
 800641c:	6138      	str	r0, [r7, #16]
	float temp_distance, temp_theta;

	uint16_t log_size = getDistanceLogSize();
 800641e:	f7fc ff0d 	bl	800323c <getDistanceLogSize>
 8006422:	4603      	mov	r3, r0
 8006424:	81fb      	strh	r3, [r7, #14]

	uint16_t crossline_idx = 0;
 8006426:	2300      	movs	r3, #0
 8006428:	857b      	strh	r3, [r7, #42]	; 0x2a
	float total_distance = 0;
 800642a:	f04f 0300 	mov.w	r3, #0
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint16_t i = 0; i < log_size; i++){
 8006430:	2300      	movs	r3, #0
 8006432:	847b      	strh	r3, [r7, #34]	; 0x22
 8006434:	e079      	b.n	800652a <CreateVelocityTable+0x11e>
		temp_distance = p_distance_V[i];
 8006436:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4413      	add	r3, r2
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta_V[i];
 8006442:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	4413      	add	r3, r2
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(temp_theta == 0) temp_theta = 0.00001;
 800644e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006452:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645a:	d101      	bne.n	8006460 <CreateVelocityTable+0x54>
 800645c:	4b4e      	ldr	r3, [pc, #312]	; (8006598 <CreateVelocityTable+0x18c>)
 800645e:	62fb      	str	r3, [r7, #44]	; 0x2c
		float radius = fabs(temp_distance / temp_theta);
 8006460:	edd7 6a02 	vldr	s13, [r7, #8]
 8006464:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800646c:	eef0 7ae7 	vabs.f32	s15, s15
 8006470:	edc7 7a07 	vstr	s15, [r7, #28]
		if(radius >= straight_radius) radius = straight_radius;
 8006474:	4b49      	ldr	r3, [pc, #292]	; (800659c <CreateVelocityTable+0x190>)
 8006476:	edd3 7a00 	vldr	s15, [r3]
 800647a:	ed97 7a07 	vldr	s14, [r7, #28]
 800647e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006486:	db02      	blt.n	800648e <CreateVelocityTable+0x82>
 8006488:	4b44      	ldr	r3, [pc, #272]	; (800659c <CreateVelocityTable+0x190>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	61fb      	str	r3, [r7, #28]
		velocity_table[i] = radius2Velocity(radius);//速度計画の計算部分
 800648e:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8006490:	ed97 0a07 	vldr	s0, [r7, #28]
 8006494:	f000 f892 	bl	80065bc <radius2Velocity>
 8006498:	eef0 7a40 	vmov.f32	s15, s0
 800649c:	4a40      	ldr	r2, [pc, #256]	; (80065a0 <CreateVelocityTable+0x194>)
 800649e:	00a3      	lsls	r3, r4, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	edc3 7a00 	vstr	s15, [r3]

		//Forced maximum speed on the crossline
		total_distance += temp_distance;
 80064a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80064aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80064ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064b2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		float crossline_distance = getCrossLog(crossline_idx);
 80064b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80064b8:	4618      	mov	r0, r3
 80064ba:	f7fd f897 	bl	80035ec <getCrossLog>
 80064be:	ed87 0a01 	vstr	s0, [r7, #4]
		if(crossline_distance + 60 >= total_distance && total_distance >= crossline_distance - 60){
 80064c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80064c6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80065a4 <CreateVelocityTable+0x198>
 80064ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80064ce:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80064d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064da:	d813      	bhi.n	8006504 <CreateVelocityTable+0xf8>
 80064dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80064e0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80065a4 <CreateVelocityTable+0x198>
 80064e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064e8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80064ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064f4:	db06      	blt.n	8006504 <CreateVelocityTable+0xf8>
			 velocity_table[i] = max_velocity;
 80064f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80064f8:	4a2b      	ldr	r2, [pc, #172]	; (80065a8 <CreateVelocityTable+0x19c>)
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	4928      	ldr	r1, [pc, #160]	; (80065a0 <CreateVelocityTable+0x194>)
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	601a      	str	r2, [r3, #0]
		}

		if(total_distance >= crossline_distance + 60){
 8006504:	edd7 7a01 	vldr	s15, [r7, #4]
 8006508:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80065a4 <CreateVelocityTable+0x198>
 800650c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006510:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8006514:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651c:	db02      	blt.n	8006524 <CreateVelocityTable+0x118>
			crossline_idx++;
 800651e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006520:	3301      	adds	r3, #1
 8006522:	857b      	strh	r3, [r7, #42]	; 0x2a
	for(uint16_t i = 0; i < log_size; i++){
 8006524:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006526:	3301      	adds	r3, #1
 8006528:	847b      	strh	r3, [r7, #34]	; 0x22
 800652a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800652c:	89fb      	ldrh	r3, [r7, #14]
 800652e:	429a      	cmp	r2, r3
 8006530:	d381      	bcc.n	8006436 <CreateVelocityTable+0x2a>
		}

	}

	for(uint16_t i = log_size; i < 2000; i++){
 8006532:	89fb      	ldrh	r3, [r7, #14]
 8006534:	837b      	strh	r3, [r7, #26]
 8006536:	e008      	b.n	800654a <CreateVelocityTable+0x13e>
		velocity_table[i] = 3.0;
 8006538:	8b7b      	ldrh	r3, [r7, #26]
 800653a:	4a19      	ldr	r2, [pc, #100]	; (80065a0 <CreateVelocityTable+0x194>)
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	4a1a      	ldr	r2, [pc, #104]	; (80065ac <CreateVelocityTable+0x1a0>)
 8006542:	601a      	str	r2, [r3, #0]
	for(uint16_t i = log_size; i < 2000; i++){
 8006544:	8b7b      	ldrh	r3, [r7, #26]
 8006546:	3301      	adds	r3, #1
 8006548:	837b      	strh	r3, [r7, #26]
 800654a:	8b7b      	ldrh	r3, [r7, #26]
 800654c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8006550:	d3f2      	bcc.n	8006538 <CreateVelocityTable+0x12c>
	}

	addDecelerationDistanceMergin(velocity_table, 13); //8
 8006552:	210d      	movs	r1, #13
 8006554:	4812      	ldr	r0, [pc, #72]	; (80065a0 <CreateVelocityTable+0x194>)
 8006556:	f000 f85f 	bl	8006618 <addDecelerationDistanceMergin>
	addAccelerationDistanceMergin(velocity_table, 5); //15
 800655a:	2105      	movs	r1, #5
 800655c:	4810      	ldr	r0, [pc, #64]	; (80065a0 <CreateVelocityTable+0x194>)
 800655e:	f000 f8a8 	bl	80066b2 <addAccelerationDistanceMergin>

	velocity_table[0] = min_velocity;
 8006562:	4b13      	ldr	r3, [pc, #76]	; (80065b0 <CreateVelocityTable+0x1a4>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a0e      	ldr	r2, [pc, #56]	; (80065a0 <CreateVelocityTable+0x194>)
 8006568:	6013      	str	r3, [r2, #0]

	decelerateProcessing(deceleration, p_distance_V);
 800656a:	4b12      	ldr	r3, [pc, #72]	; (80065b4 <CreateVelocityTable+0x1a8>)
 800656c:	edd3 7a00 	vldr	s15, [r3]
 8006570:	6978      	ldr	r0, [r7, #20]
 8006572:	eeb0 0a67 	vmov.f32	s0, s15
 8006576:	f000 f8ef 	bl	8006758 <decelerateProcessing>
	accelerateProcessing(acceleration, p_distance_V);
 800657a:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <CreateVelocityTable+0x1ac>)
 800657c:	edd3 7a00 	vldr	s15, [r3]
 8006580:	6978      	ldr	r0, [r7, #20]
 8006582:	eeb0 0a67 	vmov.f32	s0, s15
 8006586:	f000 f987 	bl	8006898 <accelerateProcessing>

	CreateAcceleration(p_distance_V);
 800658a:	6978      	ldr	r0, [r7, #20]
 800658c:	f000 fb44 	bl	8006c18 <CreateAcceleration>
}
 8006590:	bf00      	nop
 8006592:	3734      	adds	r7, #52	; 0x34
 8006594:	46bd      	mov	sp, r7
 8006596:	bd90      	pop	{r4, r7, pc}
 8006598:	3727c5ac 	.word	0x3727c5ac
 800659c:	2001cb90 	.word	0x2001cb90
 80065a0:	20019c88 	.word	0x20019c88
 80065a4:	42700000 	.word	0x42700000
 80065a8:	2001cb84 	.word	0x2001cb84
 80065ac:	40400000 	.word	0x40400000
 80065b0:	2001cb80 	.word	0x2001cb80
 80065b4:	2001cb8c 	.word	0x2001cb8c
 80065b8:	2001cb88 	.word	0x2001cb88

080065bc <radius2Velocity>:

float radius2Velocity(float radius){
 80065bc:	b480      	push	{r7}
 80065be:	b085      	sub	sp, #20
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	ed87 0a01 	vstr	s0, [r7, #4]
	}
	else if(Run_Mode == 3){
		velocity = 1e-3 * radius * radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
	}*/

	velocity = radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
 80065c6:	4b11      	ldr	r3, [pc, #68]	; (800660c <radius2Velocity+0x50>)
 80065c8:	ed93 7a00 	vldr	s14, [r3]
 80065cc:	4b10      	ldr	r3, [pc, #64]	; (8006610 <radius2Velocity+0x54>)
 80065ce:	edd3 7a00 	vldr	s15, [r3]
 80065d2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80065d6:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <radius2Velocity+0x58>)
 80065d8:	edd3 7a00 	vldr	s15, [r3]
 80065dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80065e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80065e8:	4b09      	ldr	r3, [pc, #36]	; (8006610 <radius2Velocity+0x54>)
 80065ea:	edd3 7a00 	vldr	s15, [r3]
 80065ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065f2:	edc7 7a03 	vstr	s15, [r7, #12]

	return velocity;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	ee07 3a90 	vmov	s15, r3
}
 80065fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	2001cb84 	.word	0x2001cb84
 8006610:	2001cb80 	.word	0x2001cb80
 8006614:	2001cb90 	.word	0x2001cb90

08006618 <addDecelerationDistanceMergin>:

//*table：速度テーブル（一定距離ごとの目標速度が格納された配列）
//mergin_size：マージンする距離（10mmごとに速度テーブルを生成している場合，10を引数にすると100mmマージンされます）
void addDecelerationDistanceMergin(float *table, int16_t mergin_size)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	807b      	strh	r3, [r7, #2]
	uint16_t idx = mergin_size;
 8006624:	887b      	ldrh	r3, [r7, #2]
 8006626:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 8006628:	8afb      	ldrh	r3, [r7, #22]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	4413      	add	r3, r2
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	613b      	str	r3, [r7, #16]

	while(idx <= 2000 - 1){
 8006634:	e033      	b.n	800669e <addDecelerationDistanceMergin+0x86>
		if(pre_target_velocity > table[idx]){
 8006636:	8afb      	ldrh	r3, [r7, #22]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	4413      	add	r3, r2
 800663e:	edd3 7a00 	vldr	s15, [r3]
 8006642:	ed97 7a04 	vldr	s14, [r7, #16]
 8006646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800664a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800664e:	dd1d      	ble.n	800668c <addDecelerationDistanceMergin+0x74>
			float low_velocity = table[idx];
 8006650:	8afb      	ldrh	r3, [r7, #22]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	4413      	add	r3, r2
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 800665c:	887b      	ldrh	r3, [r7, #2]
 800665e:	8afa      	ldrh	r2, [r7, #22]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	81fb      	strh	r3, [r7, #14]
 8006664:	e008      	b.n	8006678 <addDecelerationDistanceMergin+0x60>
				table[i] = low_velocity;
 8006666:	89fb      	ldrh	r3, [r7, #14]
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 8006672:	89fb      	ldrh	r3, [r7, #14]
 8006674:	3301      	adds	r3, #1
 8006676:	81fb      	strh	r3, [r7, #14]
 8006678:	89fa      	ldrh	r2, [r7, #14]
 800667a:	8afb      	ldrh	r3, [r7, #22]
 800667c:	429a      	cmp	r2, r3
 800667e:	d3f2      	bcc.n	8006666 <addDecelerationDistanceMergin+0x4e>
			}
			pre_target_velocity = table[idx];
 8006680:	8afb      	ldrh	r3, [r7, #22]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	4413      	add	r3, r2
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 800668c:	8afb      	ldrh	r3, [r7, #22]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	4413      	add	r3, r2
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	613b      	str	r3, [r7, #16]

		idx++;
 8006698:	8afb      	ldrh	r3, [r7, #22]
 800669a:	3301      	adds	r3, #1
 800669c:	82fb      	strh	r3, [r7, #22]
	while(idx <= 2000 - 1){
 800669e:	8afb      	ldrh	r3, [r7, #22]
 80066a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80066a4:	d3c7      	bcc.n	8006636 <addDecelerationDistanceMergin+0x1e>
	}
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <addAccelerationDistanceMergin>:

void addAccelerationDistanceMergin(float *table, int16_t mergin_size)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b087      	sub	sp, #28
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	460b      	mov	r3, r1
 80066bc:	807b      	strh	r3, [r7, #2]
	uint16_t idx = 0;
 80066be:	2300      	movs	r3, #0
 80066c0:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 80066c2:	8afb      	ldrh	r3, [r7, #22]
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	4413      	add	r3, r2
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	613b      	str	r3, [r7, #16]

	while(idx <= 2000 - 1 - mergin_size){
 80066ce:	e034      	b.n	800673a <addAccelerationDistanceMergin+0x88>
		if(pre_target_velocity < table[idx]){
 80066d0:	8afb      	ldrh	r3, [r7, #22]
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	4413      	add	r3, r2
 80066d8:	edd3 7a00 	vldr	s15, [r3]
 80066dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80066e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e8:	d51e      	bpl.n	8006728 <addAccelerationDistanceMergin+0x76>
			float low_velocity = pre_target_velocity;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 80066ee:	8afb      	ldrh	r3, [r7, #22]
 80066f0:	81fb      	strh	r3, [r7, #14]
 80066f2:	e008      	b.n	8006706 <addAccelerationDistanceMergin+0x54>
				table[i] = low_velocity;
 80066f4:	89fb      	ldrh	r3, [r7, #14]
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	4413      	add	r3, r2
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 8006700:	89fb      	ldrh	r3, [r7, #14]
 8006702:	3301      	adds	r3, #1
 8006704:	81fb      	strh	r3, [r7, #14]
 8006706:	89fa      	ldrh	r2, [r7, #14]
 8006708:	8af9      	ldrh	r1, [r7, #22]
 800670a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800670e:	440b      	add	r3, r1
 8006710:	429a      	cmp	r2, r3
 8006712:	dbef      	blt.n	80066f4 <addAccelerationDistanceMergin+0x42>
			}
			idx += mergin_size;
 8006714:	887a      	ldrh	r2, [r7, #2]
 8006716:	8afb      	ldrh	r3, [r7, #22]
 8006718:	4413      	add	r3, r2
 800671a:	82fb      	strh	r3, [r7, #22]
			pre_target_velocity = table[idx];
 800671c:	8afb      	ldrh	r3, [r7, #22]
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	4413      	add	r3, r2
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 8006728:	8afb      	ldrh	r3, [r7, #22]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	687a      	ldr	r2, [r7, #4]
 800672e:	4413      	add	r3, r2
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	613b      	str	r3, [r7, #16]

		idx++;
 8006734:	8afb      	ldrh	r3, [r7, #22]
 8006736:	3301      	adds	r3, #1
 8006738:	82fb      	strh	r3, [r7, #22]
	while(idx <= 2000 - 1 - mergin_size){
 800673a:	8afa      	ldrh	r2, [r7, #22]
 800673c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006740:	f5c3 63f9 	rsb	r3, r3, #1992	; 0x7c8
 8006744:	3307      	adds	r3, #7
 8006746:	429a      	cmp	r2, r3
 8006748:	ddc2      	ble.n	80066d0 <addAccelerationDistanceMergin+0x1e>
	}
}
 800674a:	bf00      	nop
 800674c:	371c      	adds	r7, #28
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr
	...

08006758 <decelerateProcessing>:

void decelerateProcessing(const float am, const float *p_distance){
 8006758:	b5b0      	push	{r4, r5, r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006762:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getDistanceLogSize();
 8006764:	f7fc fd6a 	bl	800323c <getDistanceLogSize>
 8006768:	4603      	mov	r3, r0
 800676a:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 800676c:	8abb      	ldrh	r3, [r7, #20]
 800676e:	3b01      	subs	r3, #1
 8006770:	82fb      	strh	r3, [r7, #22]
 8006772:	e07f      	b.n	8006874 <decelerateProcessing+0x11c>
		float v_diff = velocity_table[i-1] - velocity_table[i];
 8006774:	8afb      	ldrh	r3, [r7, #22]
 8006776:	3b01      	subs	r3, #1
 8006778:	4a45      	ldr	r2, [pc, #276]	; (8006890 <decelerateProcessing+0x138>)
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	ed93 7a00 	vldr	s14, [r3]
 8006782:	8afb      	ldrh	r3, [r7, #22]
 8006784:	4a42      	ldr	r2, [pc, #264]	; (8006890 <decelerateProcessing+0x138>)
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	4413      	add	r3, r2
 800678a:	edd3 7a00 	vldr	s15, [r3]
 800678e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006792:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 8006796:	edd7 7a04 	vldr	s15, [r7, #16]
 800679a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800679e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067a2:	dd64      	ble.n	800686e <decelerateProcessing+0x116>
			float t = p_distance[i]*1e-3 / v_diff;
 80067a4:	8afb      	ldrh	r3, [r7, #22]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	4413      	add	r3, r2
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7f9 feca 	bl	8000548 <__aeabi_f2d>
 80067b4:	a334      	add	r3, pc, #208	; (adr r3, 8006888 <decelerateProcessing+0x130>)
 80067b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ba:	f7f9 ff1d 	bl	80005f8 <__aeabi_dmul>
 80067be:	4603      	mov	r3, r0
 80067c0:	460c      	mov	r4, r1
 80067c2:	4625      	mov	r5, r4
 80067c4:	461c      	mov	r4, r3
 80067c6:	6938      	ldr	r0, [r7, #16]
 80067c8:	f7f9 febe 	bl	8000548 <__aeabi_f2d>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4620      	mov	r0, r4
 80067d2:	4629      	mov	r1, r5
 80067d4:	f7fa f83a 	bl	800084c <__aeabi_ddiv>
 80067d8:	4603      	mov	r3, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	4618      	mov	r0, r3
 80067de:	4621      	mov	r1, r4
 80067e0:	f7fa fa02 	bl	8000be8 <__aeabi_d2f>
 80067e4:	4603      	mov	r3, r0
 80067e6:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 80067e8:	edd7 6a04 	vldr	s13, [r7, #16]
 80067ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80067f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067f4:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 80067f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80067fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8006800:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006808:	dd31      	ble.n	800686e <decelerateProcessing+0x116>
				velocity_table[i-1] = velocity_table[i] + am * p_distance[i]*1e-3;
 800680a:	8afb      	ldrh	r3, [r7, #22]
 800680c:	4a20      	ldr	r2, [pc, #128]	; (8006890 <decelerateProcessing+0x138>)
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4618      	mov	r0, r3
 8006816:	f7f9 fe97 	bl	8000548 <__aeabi_f2d>
 800681a:	4604      	mov	r4, r0
 800681c:	460d      	mov	r5, r1
 800681e:	8afb      	ldrh	r3, [r7, #22]
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4413      	add	r3, r2
 8006826:	ed93 7a00 	vldr	s14, [r3]
 800682a:	edd7 7a01 	vldr	s15, [r7, #4]
 800682e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006832:	ee17 0a90 	vmov	r0, s15
 8006836:	f7f9 fe87 	bl	8000548 <__aeabi_f2d>
 800683a:	a313      	add	r3, pc, #76	; (adr r3, 8006888 <decelerateProcessing+0x130>)
 800683c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006840:	f7f9 feda 	bl	80005f8 <__aeabi_dmul>
 8006844:	4602      	mov	r2, r0
 8006846:	460b      	mov	r3, r1
 8006848:	4620      	mov	r0, r4
 800684a:	4629      	mov	r1, r5
 800684c:	f7f9 fd1e 	bl	800028c <__adddf3>
 8006850:	4603      	mov	r3, r0
 8006852:	460c      	mov	r4, r1
 8006854:	4619      	mov	r1, r3
 8006856:	4622      	mov	r2, r4
 8006858:	8afb      	ldrh	r3, [r7, #22]
 800685a:	1e5c      	subs	r4, r3, #1
 800685c:	4608      	mov	r0, r1
 800685e:	4611      	mov	r1, r2
 8006860:	f7fa f9c2 	bl	8000be8 <__aeabi_d2f>
 8006864:	4601      	mov	r1, r0
 8006866:	4a0a      	ldr	r2, [pc, #40]	; (8006890 <decelerateProcessing+0x138>)
 8006868:	00a3      	lsls	r3, r4, #2
 800686a:	4413      	add	r3, r2
 800686c:	6019      	str	r1, [r3, #0]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 800686e:	8afb      	ldrh	r3, [r7, #22]
 8006870:	3b01      	subs	r3, #1
 8006872:	82fb      	strh	r3, [r7, #22]
 8006874:	8afb      	ldrh	r3, [r7, #22]
 8006876:	2b00      	cmp	r3, #0
 8006878:	f47f af7c 	bne.w	8006774 <decelerateProcessing+0x1c>
			}
		}
	}
}
 800687c:	bf00      	nop
 800687e:	3718      	adds	r7, #24
 8006880:	46bd      	mov	sp, r7
 8006882:	bdb0      	pop	{r4, r5, r7, pc}
 8006884:	f3af 8000 	nop.w
 8006888:	d2f1a9fc 	.word	0xd2f1a9fc
 800688c:	3f50624d 	.word	0x3f50624d
 8006890:	20019c88 	.word	0x20019c88
 8006894:	00000000 	.word	0x00000000

08006898 <accelerateProcessing>:

void accelerateProcessing(const float am, const float *p_distance){
 8006898:	b5b0      	push	{r4, r5, r7, lr}
 800689a:	b086      	sub	sp, #24
 800689c:	af00      	add	r7, sp, #0
 800689e:	ed87 0a01 	vstr	s0, [r7, #4]
 80068a2:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getDistanceLogSize();
 80068a4:	f7fc fcca 	bl	800323c <getDistanceLogSize>
 80068a8:	4603      	mov	r3, r0
 80068aa:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 80068ac:	2300      	movs	r3, #0
 80068ae:	82fb      	strh	r3, [r7, #22]
 80068b0:	e07f      	b.n	80069b2 <accelerateProcessing+0x11a>
		float v_diff = velocity_table[i+1] - velocity_table[i];
 80068b2:	8afb      	ldrh	r3, [r7, #22]
 80068b4:	3301      	adds	r3, #1
 80068b6:	4a46      	ldr	r2, [pc, #280]	; (80069d0 <accelerateProcessing+0x138>)
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	ed93 7a00 	vldr	s14, [r3]
 80068c0:	8afb      	ldrh	r3, [r7, #22]
 80068c2:	4a43      	ldr	r2, [pc, #268]	; (80069d0 <accelerateProcessing+0x138>)
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	edd3 7a00 	vldr	s15, [r3]
 80068cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068d0:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 80068d4:	edd7 7a04 	vldr	s15, [r7, #16]
 80068d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80068dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e0:	dd64      	ble.n	80069ac <accelerateProcessing+0x114>
			float t = p_distance[i]*1e-3 / v_diff;
 80068e2:	8afb      	ldrh	r3, [r7, #22]
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	4413      	add	r3, r2
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7f9 fe2b 	bl	8000548 <__aeabi_f2d>
 80068f2:	a335      	add	r3, pc, #212	; (adr r3, 80069c8 <accelerateProcessing+0x130>)
 80068f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f8:	f7f9 fe7e 	bl	80005f8 <__aeabi_dmul>
 80068fc:	4603      	mov	r3, r0
 80068fe:	460c      	mov	r4, r1
 8006900:	4625      	mov	r5, r4
 8006902:	461c      	mov	r4, r3
 8006904:	6938      	ldr	r0, [r7, #16]
 8006906:	f7f9 fe1f 	bl	8000548 <__aeabi_f2d>
 800690a:	4602      	mov	r2, r0
 800690c:	460b      	mov	r3, r1
 800690e:	4620      	mov	r0, r4
 8006910:	4629      	mov	r1, r5
 8006912:	f7f9 ff9b 	bl	800084c <__aeabi_ddiv>
 8006916:	4603      	mov	r3, r0
 8006918:	460c      	mov	r4, r1
 800691a:	4618      	mov	r0, r3
 800691c:	4621      	mov	r1, r4
 800691e:	f7fa f963 	bl	8000be8 <__aeabi_d2f>
 8006922:	4603      	mov	r3, r0
 8006924:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 8006926:	edd7 6a04 	vldr	s13, [r7, #16]
 800692a:	ed97 7a03 	vldr	s14, [r7, #12]
 800692e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006932:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 8006936:	ed97 7a02 	vldr	s14, [r7, #8]
 800693a:	edd7 7a01 	vldr	s15, [r7, #4]
 800693e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006946:	dd31      	ble.n	80069ac <accelerateProcessing+0x114>
				velocity_table[i+1] = velocity_table[i] + am * p_distance[i]*1e-3;
 8006948:	8afb      	ldrh	r3, [r7, #22]
 800694a:	4a21      	ldr	r2, [pc, #132]	; (80069d0 <accelerateProcessing+0x138>)
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	4413      	add	r3, r2
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f7f9 fdf8 	bl	8000548 <__aeabi_f2d>
 8006958:	4604      	mov	r4, r0
 800695a:	460d      	mov	r5, r1
 800695c:	8afb      	ldrh	r3, [r7, #22]
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	4413      	add	r3, r2
 8006964:	ed93 7a00 	vldr	s14, [r3]
 8006968:	edd7 7a01 	vldr	s15, [r7, #4]
 800696c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006970:	ee17 0a90 	vmov	r0, s15
 8006974:	f7f9 fde8 	bl	8000548 <__aeabi_f2d>
 8006978:	a313      	add	r3, pc, #76	; (adr r3, 80069c8 <accelerateProcessing+0x130>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7f9 fe3b 	bl	80005f8 <__aeabi_dmul>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
 8006986:	4620      	mov	r0, r4
 8006988:	4629      	mov	r1, r5
 800698a:	f7f9 fc7f 	bl	800028c <__adddf3>
 800698e:	4603      	mov	r3, r0
 8006990:	460c      	mov	r4, r1
 8006992:	4619      	mov	r1, r3
 8006994:	4622      	mov	r2, r4
 8006996:	8afb      	ldrh	r3, [r7, #22]
 8006998:	1c5c      	adds	r4, r3, #1
 800699a:	4608      	mov	r0, r1
 800699c:	4611      	mov	r1, r2
 800699e:	f7fa f923 	bl	8000be8 <__aeabi_d2f>
 80069a2:	4601      	mov	r1, r0
 80069a4:	4a0a      	ldr	r2, [pc, #40]	; (80069d0 <accelerateProcessing+0x138>)
 80069a6:	00a3      	lsls	r3, r4, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 80069ac:	8afb      	ldrh	r3, [r7, #22]
 80069ae:	3301      	adds	r3, #1
 80069b0:	82fb      	strh	r3, [r7, #22]
 80069b2:	8afa      	ldrh	r2, [r7, #22]
 80069b4:	8abb      	ldrh	r3, [r7, #20]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	429a      	cmp	r2, r3
 80069ba:	f77f af7a 	ble.w	80068b2 <accelerateProcessing+0x1a>
			}
		}
	}
}
 80069be:	bf00      	nop
 80069c0:	3718      	adds	r7, #24
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bdb0      	pop	{r4, r5, r7, pc}
 80069c6:	bf00      	nop
 80069c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80069cc:	3f50624d 	.word	0x3f50624d
 80069d0:	20019c88 	.word	0x20019c88

080069d4 <updateTargetVelocity>:

void updateTargetVelocity(){
 80069d4:	b580      	push	{r7, lr}
 80069d6:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 80069d8:	4b33      	ldr	r3, [pc, #204]	; (8006aa8 <updateTargetVelocity+0xd4>)
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d061      	beq.n	8006aa4 <updateTargetVelocity+0xd0>
		if(getTotalDistance() >= ref_distance){
 80069e0:	f7fa fcb2 	bl	8001348 <getTotalDistance>
 80069e4:	eeb0 7a40 	vmov.f32	s14, s0
 80069e8:	4b30      	ldr	r3, [pc, #192]	; (8006aac <updateTargetVelocity+0xd8>)
 80069ea:	edd3 7a00 	vldr	s15, [r3]
 80069ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f6:	db14      	blt.n	8006a22 <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 80069f8:	4b2d      	ldr	r3, [pc, #180]	; (8006ab0 <updateTargetVelocity+0xdc>)
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fc fddf 	bl	80035c0 <getDistanceLog>
 8006a02:	eeb0 7a40 	vmov.f32	s14, s0
 8006a06:	4b29      	ldr	r3, [pc, #164]	; (8006aac <updateTargetVelocity+0xd8>)
 8006a08:	edd3 7a00 	vldr	s15, [r3]
 8006a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a10:	4b26      	ldr	r3, [pc, #152]	; (8006aac <updateTargetVelocity+0xd8>)
 8006a12:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 8006a16:	4b26      	ldr	r3, [pc, #152]	; (8006ab0 <updateTargetVelocity+0xdc>)
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	4b24      	ldr	r3, [pc, #144]	; (8006ab0 <updateTargetVelocity+0xdc>)
 8006a20:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 8006a22:	f7fc fc0b 	bl	800323c <getDistanceLogSize>
 8006a26:	4603      	mov	r3, r0
 8006a28:	461a      	mov	r2, r3
 8006a2a:	4b21      	ldr	r3, [pc, #132]	; (8006ab0 <updateTargetVelocity+0xdc>)
 8006a2c:	881b      	ldrh	r3, [r3, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d806      	bhi.n	8006a40 <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 8006a32:	f7fc fc03 	bl	800323c <getDistanceLogSize>
 8006a36:	4603      	mov	r3, r0
 8006a38:	3b01      	subs	r3, #1
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	4b1c      	ldr	r3, [pc, #112]	; (8006ab0 <updateTargetVelocity+0xdc>)
 8006a3e:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 8006a40:	4b1b      	ldr	r3, [pc, #108]	; (8006ab0 <updateTargetVelocity+0xdc>)
 8006a42:	881b      	ldrh	r3, [r3, #0]
 8006a44:	4a1b      	ldr	r2, [pc, #108]	; (8006ab4 <updateTargetVelocity+0xe0>)
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	edd3 7a00 	vldr	s15, [r3]
 8006a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a52:	f7fc ff8d 	bl	8003970 <setTargetVelocity>
		setTargetAcceleration(acceleration_table[velocity_table_idx]);
 8006a56:	4b16      	ldr	r3, [pc, #88]	; (8006ab0 <updateTargetVelocity+0xdc>)
 8006a58:	881b      	ldrh	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <updateTargetVelocity+0xe4>)
 8006a5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006a62:	ee07 3a90 	vmov	s15, r3
 8006a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8006a6e:	f7fc ff8f 	bl	8003990 <setTargetAcceleration>

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 8006a72:	4b0f      	ldr	r3, [pc, #60]	; (8006ab0 <updateTargetVelocity+0xdc>)
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	4a0f      	ldr	r2, [pc, #60]	; (8006ab4 <updateTargetVelocity+0xe0>)
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	4413      	add	r3, r2
 8006a7c:	ed93 7a00 	vldr	s14, [r3]
 8006a80:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <updateTargetVelocity+0xe8>)
 8006a82:	edd3 7a00 	vldr	s15, [r3]
 8006a86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8e:	d501      	bpl.n	8006a94 <updateTargetVelocity+0xc0>
			setClearFlagOfVelocityControlI();
 8006a90:	f7fd f82c 	bl	8003aec <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 8006a94:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <updateTargetVelocity+0xdc>)
 8006a96:	881b      	ldrh	r3, [r3, #0]
 8006a98:	4a06      	ldr	r2, [pc, #24]	; (8006ab4 <updateTargetVelocity+0xe0>)
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	4413      	add	r3, r2
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a06      	ldr	r2, [pc, #24]	; (8006abc <updateTargetVelocity+0xe8>)
 8006aa2:	6013      	str	r3, [r2, #0]
	}
}
 8006aa4:	bf00      	nop
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	2001cb7d 	.word	0x2001cb7d
 8006aac:	2001d0d4 	.word	0x2001d0d4
 8006ab0:	2001d0dc 	.word	0x2001d0dc
 8006ab4:	20019c88 	.word	0x20019c88
 8006ab8:	2001bbc8 	.word	0x2001bbc8
 8006abc:	2001cbb0 	.word	0x2001cbb0

08006ac0 <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()//クロスでの距離補正
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 8006ac6:	e03f      	b.n	8006b48 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 8006ac8:	4b25      	ldr	r3, [pc, #148]	; (8006b60 <correctionTotalDistanceFromCrossLine+0xa0>)
 8006aca:	881b      	ldrh	r3, [r3, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fc fd8d 	bl	80035ec <getCrossLog>
 8006ad2:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 8006ad6:	f7fa fc37 	bl	8001348 <getTotalDistance>
 8006ada:	eeb0 7a40 	vmov.f32	s14, s0
 8006ade:	edd7 7a01 	vldr	s15, [r7, #4]
 8006ae2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ae6:	eef0 7ae7 	vabs.f32	s15, s15
 8006aea:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 8006aee:	edd7 7a00 	vldr	s15, [r7]
 8006af2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006b64 <correctionTotalDistanceFromCrossLine+0xa4>
 8006af6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006afe:	d80d      	bhi.n	8006b1c <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 8006b00:	4b19      	ldr	r3, [pc, #100]	; (8006b68 <correctionTotalDistanceFromCrossLine+0xa8>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 8006b06:	ed97 0a01 	vldr	s0, [r7, #4]
 8006b0a:	f7fa fc47 	bl	800139c <setTotalDistance>
			cross_line_idx++;
 8006b0e:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <correctionTotalDistanceFromCrossLine+0xa0>)
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	3301      	adds	r3, #1
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	4b12      	ldr	r3, [pc, #72]	; (8006b60 <correctionTotalDistanceFromCrossLine+0xa0>)
 8006b18:	801a      	strh	r2, [r3, #0]
			break;
 8006b1a:	e01d      	b.n	8006b58 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 8006b1c:	4b10      	ldr	r3, [pc, #64]	; (8006b60 <correctionTotalDistanceFromCrossLine+0xa0>)
 8006b1e:	881b      	ldrh	r3, [r3, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	4b0e      	ldr	r3, [pc, #56]	; (8006b60 <correctionTotalDistanceFromCrossLine+0xa0>)
 8006b26:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 8006b28:	f7fc fb94 	bl	8003254 <getCrossLogSize>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	461a      	mov	r2, r3
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <correctionTotalDistanceFromCrossLine+0xa0>)
 8006b32:	881b      	ldrh	r3, [r3, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d807      	bhi.n	8006b48 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8006b38:	f7fc fb8c 	bl	8003254 <getCrossLogSize>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	4b07      	ldr	r3, [pc, #28]	; (8006b60 <correctionTotalDistanceFromCrossLine+0xa0>)
 8006b44:	801a      	strh	r2, [r3, #0]
			break;
 8006b46:	e007      	b.n	8006b58 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 8006b48:	f7fc fb84 	bl	8003254 <getCrossLogSize>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4b03      	ldr	r3, [pc, #12]	; (8006b60 <correctionTotalDistanceFromCrossLine+0xa0>)
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d2b7      	bcs.n	8006ac8 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	2001cb6a 	.word	0x2001cb6a
 8006b64:	437a0000 	.word	0x437a0000
 8006b68:	2001cb6e 	.word	0x2001cb6e

08006b6c <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()//連続曲率後の距離補正
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 8006b72:	e03f      	b.n	8006bf4 <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 8006b74:	4b25      	ldr	r3, [pc, #148]	; (8006c0c <correctionTotalDistanceFromSideLine+0xa0>)
 8006b76:	881b      	ldrh	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7fc fd4d 	bl	8003618 <getSideLog>
 8006b7e:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 8006b82:	f7fa fbe1 	bl	8001348 <getTotalDistance>
 8006b86:	eeb0 7a40 	vmov.f32	s14, s0
 8006b8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006b8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006b92:	eef0 7ae7 	vabs.f32	s15, s15
 8006b96:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 8006b9a:	edd7 7a00 	vldr	s15, [r7]
 8006b9e:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006c10 <correctionTotalDistanceFromSideLine+0xa4>
 8006ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006baa:	d80d      	bhi.n	8006bc8 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 8006bac:	4b19      	ldr	r3, [pc, #100]	; (8006c14 <correctionTotalDistanceFromSideLine+0xa8>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 8006bb2:	ed97 0a01 	vldr	s0, [r7, #4]
 8006bb6:	f7fa fbf1 	bl	800139c <setTotalDistance>
			side_line_idx++;
 8006bba:	4b14      	ldr	r3, [pc, #80]	; (8006c0c <correctionTotalDistanceFromSideLine+0xa0>)
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	3301      	adds	r3, #1
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	4b12      	ldr	r3, [pc, #72]	; (8006c0c <correctionTotalDistanceFromSideLine+0xa0>)
 8006bc4:	801a      	strh	r2, [r3, #0]
			break;
 8006bc6:	e01d      	b.n	8006c04 <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 8006bc8:	4b10      	ldr	r3, [pc, #64]	; (8006c0c <correctionTotalDistanceFromSideLine+0xa0>)
 8006bca:	881b      	ldrh	r3, [r3, #0]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	4b0e      	ldr	r3, [pc, #56]	; (8006c0c <correctionTotalDistanceFromSideLine+0xa0>)
 8006bd2:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 8006bd4:	f7fc fb4a 	bl	800326c <getSideLogSize>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4b0b      	ldr	r3, [pc, #44]	; (8006c0c <correctionTotalDistanceFromSideLine+0xa0>)
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d807      	bhi.n	8006bf4 <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 8006be4:	f7fc fb42 	bl	800326c <getSideLogSize>
 8006be8:	4603      	mov	r3, r0
 8006bea:	3b01      	subs	r3, #1
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <correctionTotalDistanceFromSideLine+0xa0>)
 8006bf0:	801a      	strh	r2, [r3, #0]
			break;
 8006bf2:	e007      	b.n	8006c04 <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 8006bf4:	f7fc fb3a 	bl	800326c <getSideLogSize>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <correctionTotalDistanceFromSideLine+0xa0>)
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d2b7      	bcs.n	8006b74 <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 8006c04:	bf00      	nop
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	2001cb6c 	.word	0x2001cb6c
 8006c10:	437a0000 	.word	0x437a0000
 8006c14:	2001cb70 	.word	0x2001cb70

08006c18 <CreateAcceleration>:

void CreateAcceleration(const float *p_distance)//フィードフォワード制御計算
{
 8006c18:	b5b0      	push	{r4, r5, r7, lr}
 8006c1a:	b090      	sub	sp, #64	; 0x40
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
	uint16_t log_size = getDistanceLogSize();
 8006c20:	f7fc fb0c 	bl	800323c <getDistanceLogSize>
 8006c24:	4603      	mov	r3, r0
 8006c26:	86fb      	strh	r3, [r7, #54]	; 0x36
    for(uint16_t i = 0; i <= log_size - 1; i++){
 8006c28:	2300      	movs	r3, #0
 8006c2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006c2c:	e0dd      	b.n	8006dea <CreateAcceleration+0x1d2>
		float v_diff = velocity_table[i+1] - velocity_table[i];//目標速度ー今の速度  Δv [m/s]
 8006c2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006c30:	3301      	adds	r3, #1
 8006c32:	4a7d      	ldr	r2, [pc, #500]	; (8006e28 <CreateAcceleration+0x210>)
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4413      	add	r3, r2
 8006c38:	ed93 7a00 	vldr	s14, [r3]
 8006c3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006c3e:	4a7a      	ldr	r2, [pc, #488]	; (8006e28 <CreateAcceleration+0x210>)
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4413      	add	r3, r2
 8006c44:	edd3 7a00 	vldr	s15, [r3]
 8006c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c4c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		float t = p_distance[i]*1e-3 / velocity_table[i];//時間を求める mm*1e-3 → m Δt [s]
 8006c50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	4413      	add	r3, r2
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7f9 fc74 	bl	8000548 <__aeabi_f2d>
 8006c60:	a367      	add	r3, pc, #412	; (adr r3, 8006e00 <CreateAcceleration+0x1e8>)
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f7f9 fcc7 	bl	80005f8 <__aeabi_dmul>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	4625      	mov	r5, r4
 8006c70:	461c      	mov	r4, r3
 8006c72:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006c74:	4a6c      	ldr	r2, [pc, #432]	; (8006e28 <CreateAcceleration+0x210>)
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4413      	add	r3, r2
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7f9 fc63 	bl	8000548 <__aeabi_f2d>
 8006c82:	4602      	mov	r2, r0
 8006c84:	460b      	mov	r3, r1
 8006c86:	4620      	mov	r0, r4
 8006c88:	4629      	mov	r1, r5
 8006c8a:	f7f9 fddf 	bl	800084c <__aeabi_ddiv>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	4618      	mov	r0, r3
 8006c94:	4621      	mov	r1, r4
 8006c96:	f7f9 ffa7 	bl	8000be8 <__aeabi_d2f>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
		float a = v_diff / t;//加速度計算 [m/s^2]
 8006c9e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8006ca2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006caa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		float n = (60*velocity_table[i]*REDUCTION_RATIO) / (2*PI*WHEEL_RADIUS);//回転数 [rpm]
 8006cae:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006cb0:	4a5d      	ldr	r2, [pc, #372]	; (8006e28 <CreateAcceleration+0x210>)
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	edd3 7a00 	vldr	s15, [r3]
 8006cba:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8006e2c <CreateAcceleration+0x214>
 8006cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cc2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8006cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cca:	ee17 0a90 	vmov	r0, s15
 8006cce:	f7f9 fc3b 	bl	8000548 <__aeabi_f2d>
 8006cd2:	a34d      	add	r3, pc, #308	; (adr r3, 8006e08 <CreateAcceleration+0x1f0>)
 8006cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd8:	f7f9 fdb8 	bl	800084c <__aeabi_ddiv>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	4621      	mov	r1, r4
 8006ce4:	f7f9 ff80 	bl	8000be8 <__aeabi_d2f>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24
		float K_e = ((2*PI)/60) * TORQUE_CONSTANT;//逆起電力定数 [V/rpm]
 8006cec:	4b50      	ldr	r3, [pc, #320]	; (8006e30 <CreateAcceleration+0x218>)
 8006cee:	623b      	str	r3, [r7, #32]
		float E = K_e * n;//逆起電力 [V]
 8006cf0:	ed97 7a08 	vldr	s14, [r7, #32]
 8006cf4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006cf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfc:	edc7 7a07 	vstr	s15, [r7, #28]
		float T_t = (AIRCRAFT_MASS*WHEEL_RADIUS*a) / (2*REDUCTION_RATIO);//タイヤにかかるトルク [Nm]
 8006d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d02:	f7f9 fc21 	bl	8000548 <__aeabi_f2d>
 8006d06:	a342      	add	r3, pc, #264	; (adr r3, 8006e10 <CreateAcceleration+0x1f8>)
 8006d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0c:	f7f9 fc74 	bl	80005f8 <__aeabi_dmul>
 8006d10:	4603      	mov	r3, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	4618      	mov	r0, r3
 8006d16:	4621      	mov	r1, r4
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	4b45      	ldr	r3, [pc, #276]	; (8006e34 <CreateAcceleration+0x21c>)
 8006d1e:	f7f9 fd95 	bl	800084c <__aeabi_ddiv>
 8006d22:	4603      	mov	r3, r0
 8006d24:	460c      	mov	r4, r1
 8006d26:	4618      	mov	r0, r3
 8006d28:	4621      	mov	r1, r4
 8006d2a:	f7f9 ff5d 	bl	8000be8 <__aeabi_d2f>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	61bb      	str	r3, [r7, #24]
		float I = T_t / TORQUE_CONSTANT;//電流 [A]
 8006d32:	69b8      	ldr	r0, [r7, #24]
 8006d34:	f7f9 fc08 	bl	8000548 <__aeabi_f2d>
 8006d38:	a337      	add	r3, pc, #220	; (adr r3, 8006e18 <CreateAcceleration+0x200>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f7f9 fd85 	bl	800084c <__aeabi_ddiv>
 8006d42:	4603      	mov	r3, r0
 8006d44:	460c      	mov	r4, r1
 8006d46:	4618      	mov	r0, r3
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f7f9 ff4d 	bl	8000be8 <__aeabi_d2f>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	617b      	str	r3, [r7, #20]
		float V_mot = I * RWSISTANCE_BETWEEN_TERMINALS + E;//モータの出力に追加したい電圧
 8006d52:	6978      	ldr	r0, [r7, #20]
 8006d54:	f7f9 fbf8 	bl	8000548 <__aeabi_f2d>
 8006d58:	a331      	add	r3, pc, #196	; (adr r3, 8006e20 <CreateAcceleration+0x208>)
 8006d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5e:	f7f9 fc4b 	bl	80005f8 <__aeabi_dmul>
 8006d62:	4603      	mov	r3, r0
 8006d64:	460c      	mov	r4, r1
 8006d66:	4625      	mov	r5, r4
 8006d68:	461c      	mov	r4, r3
 8006d6a:	69f8      	ldr	r0, [r7, #28]
 8006d6c:	f7f9 fbec 	bl	8000548 <__aeabi_f2d>
 8006d70:	4602      	mov	r2, r0
 8006d72:	460b      	mov	r3, r1
 8006d74:	4620      	mov	r0, r4
 8006d76:	4629      	mov	r1, r5
 8006d78:	f7f9 fa88 	bl	800028c <__adddf3>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	4618      	mov	r0, r3
 8006d82:	4621      	mov	r1, r4
 8006d84:	f7f9 ff30 	bl	8000be8 <__aeabi_d2f>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	613b      	str	r3, [r7, #16]
		float Duty = V_mot / Power_supply_voltage;//Duty比
 8006d8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8006d90:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8006d94:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d98:	edc7 7a03 	vstr	s15, [r7, #12]
		float Duty_motor = Duty * MAX_CounterPeriod;
 8006d9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006da0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006e38 <CreateAcceleration+0x220>
 8006da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006da8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		if(Duty_motor >= MAX_CounterPeriod) Duty_motor = MAX_CounterPeriod;
 8006dac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006db0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006e38 <CreateAcceleration+0x220>
 8006db4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dbc:	db01      	blt.n	8006dc2 <CreateAcceleration+0x1aa>
 8006dbe:	4b1f      	ldr	r3, [pc, #124]	; (8006e3c <CreateAcceleration+0x224>)
 8006dc0:	63bb      	str	r3, [r7, #56]	; 0x38

		V_motor = Duty_motor;
 8006dc2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006dc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dca:	ee17 3a90 	vmov	r3, s15
 8006dce:	b21a      	sxth	r2, r3
 8006dd0:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <CreateAcceleration+0x228>)
 8006dd2:	801a      	strh	r2, [r3, #0]

		acceleration_table[i] = V_motor;
 8006dd4:	4b1a      	ldr	r3, [pc, #104]	; (8006e40 <CreateAcceleration+0x228>)
 8006dd6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8006dda:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006ddc:	b291      	uxth	r1, r2
 8006dde:	4a19      	ldr	r2, [pc, #100]	; (8006e44 <CreateAcceleration+0x22c>)
 8006de0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint16_t i = 0; i <= log_size - 1; i++){
 8006de4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006de6:	3301      	adds	r3, #1
 8006de8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006dea:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8006dec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006dee:	3b01      	subs	r3, #1
 8006df0:	429a      	cmp	r2, r3
 8006df2:	f77f af1c 	ble.w	8006c2e <CreateAcceleration+0x16>
    }
}
 8006df6:	bf00      	nop
 8006df8:	3740      	adds	r7, #64	; 0x40
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bdb0      	pop	{r4, r5, r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	d2f1a9fc 	.word	0xd2f1a9fc
 8006e04:	3f50624d 	.word	0x3f50624d
 8006e08:	ed7db22b 	.word	0xed7db22b
 8006e0c:	3fb1b185 	.word	0x3fb1b185
 8006e10:	68b19a42 	.word	0x68b19a42
 8006e14:	3f593b3a 	.word	0x3f593b3a
 8006e18:	9c38b04b 	.word	0x9c38b04b
 8006e1c:	3f6cd5f9 	.word	0x3f6cd5f9
 8006e20:	9999999a 	.word	0x9999999a
 8006e24:	40059999 	.word	0x40059999
 8006e28:	20019c88 	.word	0x20019c88
 8006e2c:	42700000 	.word	0x42700000
 8006e30:	39c14279 	.word	0x39c14279
 8006e34:	40180000 	.word	0x40180000
 8006e38:	44d1e000 	.word	0x44d1e000
 8006e3c:	44d1e000 	.word	0x44d1e000
 8006e40:	2001cba0 	.word	0x2001cba0
 8006e44:	2001bbc8 	.word	0x2001bbc8

08006e48 <getgoalStatus>:

bool getgoalStatus()
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
	return goal_flag;
 8006e4c:	4b03      	ldr	r3, [pc, #12]	; (8006e5c <getgoalStatus+0x14>)
 8006e4e:	781b      	ldrb	r3, [r3, #0]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	2001cb76 	.word	0x2001cb76

08006e60 <getTargetUpdateflag>:

bool getTargetUpdateflag()
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
	return target_update_flag;
 8006e64:	4b03      	ldr	r3, [pc, #12]	; (8006e74 <getTargetUpdateflag+0x14>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	2001cb7c 	.word	0x2001cb7c

08006e78 <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8006e82:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8006e86:	4a06      	ldr	r2, [pc, #24]	; (8006ea0 <setVelocityRange+0x28>)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8006e8c:	4a05      	ldr	r2, [pc, #20]	; (8006ea4 <setVelocityRange+0x2c>)
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	6013      	str	r3, [r2, #0]
}
 8006e92:	bf00      	nop
 8006e94:	370c      	adds	r7, #12
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	2001cb80 	.word	0x2001cb80
 8006ea4:	2001cb84 	.word	0x2001cb84

08006ea8 <setAccDec>:

void setAccDec(float acc, float dec)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	ed87 0a01 	vstr	s0, [r7, #4]
 8006eb2:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8006eb6:	4a06      	ldr	r2, [pc, #24]	; (8006ed0 <setAccDec+0x28>)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8006ebc:	4a05      	ldr	r2, [pc, #20]	; (8006ed4 <setAccDec+0x2c>)
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	6013      	str	r3, [r2, #0]
}
 8006ec2:	bf00      	nop
 8006ec4:	370c      	adds	r7, #12
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	2001cb88 	.word	0x2001cb88
 8006ed4:	2001cb8c 	.word	0x2001cb8c

08006ed8 <setStraightRadius>:

void setStraightRadius(float radius)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8006ee2:	4a04      	ldr	r2, [pc, #16]	; (8006ef4 <setStraightRadius+0x1c>)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6013      	str	r3, [r2, #0]
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	2001cb90 	.word	0x2001cb90

08006ef8 <getControl_Mode>:
{
	return Run_Mode;
}

float getControl_Mode()
{
 8006ef8:	b480      	push	{r7}
 8006efa:	af00      	add	r7, sp, #0
	return Control_Mode;
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <getControl_Mode+0x1c>)
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	ee07 3a90 	vmov	s15, r3
 8006f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8006f08:	eeb0 0a67 	vmov.f32	s0, s15
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	2001d0d8 	.word	0x2001d0d8

08006f18 <getSideSensorStatusL>:
{
	return min_velocity;
}
//↓sidesensorjob
bool getSideSensorStatusL()
{
 8006f18:	b480      	push	{r7}
 8006f1a:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8006f1c:	4b03      	ldr	r3, [pc, #12]	; (8006f2c <getSideSensorStatusL+0x14>)
 8006f1e:	781b      	ldrb	r3, [r3, #0]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	2001cb74 	.word	0x2001cb74

08006f30 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8006f30:	b480      	push	{r7}
 8006f32:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8006f34:	4b03      	ldr	r3, [pc, #12]	; (8006f44 <getSideSensorStatusR+0x14>)
 8006f36:	781b      	ldrb	r3, [r3, #0]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	2001cb75 	.word	0x2001cb75

08006f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f4e:	2300      	movs	r3, #0
 8006f50:	607b      	str	r3, [r7, #4]
 8006f52:	4b10      	ldr	r3, [pc, #64]	; (8006f94 <HAL_MspInit+0x4c>)
 8006f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f56:	4a0f      	ldr	r2, [pc, #60]	; (8006f94 <HAL_MspInit+0x4c>)
 8006f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8006f5e:	4b0d      	ldr	r3, [pc, #52]	; (8006f94 <HAL_MspInit+0x4c>)
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f66:	607b      	str	r3, [r7, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	603b      	str	r3, [r7, #0]
 8006f6e:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <HAL_MspInit+0x4c>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	4a08      	ldr	r2, [pc, #32]	; (8006f94 <HAL_MspInit+0x4c>)
 8006f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f78:	6413      	str	r3, [r2, #64]	; 0x40
 8006f7a:	4b06      	ldr	r3, [pc, #24]	; (8006f94 <HAL_MspInit+0x4c>)
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006f86:	bf00      	nop
 8006f88:	370c      	adds	r7, #12
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	40023800 	.word	0x40023800

08006f98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08e      	sub	sp, #56	; 0x38
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	605a      	str	r2, [r3, #4]
 8006faa:	609a      	str	r2, [r3, #8]
 8006fac:	60da      	str	r2, [r3, #12]
 8006fae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a79      	ldr	r2, [pc, #484]	; (800719c <HAL_ADC_MspInit+0x204>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d158      	bne.n	800706c <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006fba:	2300      	movs	r3, #0
 8006fbc:	623b      	str	r3, [r7, #32]
 8006fbe:	4b78      	ldr	r3, [pc, #480]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 8006fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc2:	4a77      	ldr	r2, [pc, #476]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 8006fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8006fca:	4b75      	ldr	r3, [pc, #468]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 8006fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fd2:	623b      	str	r3, [r7, #32]
 8006fd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	61fb      	str	r3, [r7, #28]
 8006fda:	4b71      	ldr	r3, [pc, #452]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fde:	4a70      	ldr	r2, [pc, #448]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 8006fe0:	f043 0304 	orr.w	r3, r3, #4
 8006fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fe6:	4b6e      	ldr	r3, [pc, #440]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 8006fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fea:	f003 0304 	and.w	r3, r3, #4
 8006fee:	61fb      	str	r3, [r7, #28]
 8006ff0:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006ff2:	230e      	movs	r3, #14
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007002:	4619      	mov	r1, r3
 8007004:	4867      	ldr	r0, [pc, #412]	; (80071a4 <HAL_ADC_MspInit+0x20c>)
 8007006:	f001 ff65 	bl	8008ed4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800700a:	4b67      	ldr	r3, [pc, #412]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 800700c:	4a67      	ldr	r2, [pc, #412]	; (80071ac <HAL_ADC_MspInit+0x214>)
 800700e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007010:	4b65      	ldr	r3, [pc, #404]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 8007012:	2200      	movs	r2, #0
 8007014:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007016:	4b64      	ldr	r3, [pc, #400]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 8007018:	2200      	movs	r2, #0
 800701a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800701c:	4b62      	ldr	r3, [pc, #392]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 800701e:	2200      	movs	r2, #0
 8007020:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007022:	4b61      	ldr	r3, [pc, #388]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 8007024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007028:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800702a:	4b5f      	ldr	r3, [pc, #380]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 800702c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007030:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007032:	4b5d      	ldr	r3, [pc, #372]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 8007034:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007038:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800703a:	4b5b      	ldr	r3, [pc, #364]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 800703c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007040:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007042:	4b59      	ldr	r3, [pc, #356]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 8007044:	2200      	movs	r2, #0
 8007046:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007048:	4b57      	ldr	r3, [pc, #348]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 800704a:	2200      	movs	r2, #0
 800704c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800704e:	4856      	ldr	r0, [pc, #344]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 8007050:	f001 f9e8 	bl	8008424 <HAL_DMA_Init>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800705a:	f7fe fc45 	bl	80058e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a51      	ldr	r2, [pc, #324]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 8007062:	639a      	str	r2, [r3, #56]	; 0x38
 8007064:	4a50      	ldr	r2, [pc, #320]	; (80071a8 <HAL_ADC_MspInit+0x210>)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800706a:	e092      	b.n	8007192 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a4f      	ldr	r2, [pc, #316]	; (80071b0 <HAL_ADC_MspInit+0x218>)
 8007072:	4293      	cmp	r3, r2
 8007074:	f040 808d 	bne.w	8007192 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007078:	2300      	movs	r3, #0
 800707a:	61bb      	str	r3, [r7, #24]
 800707c:	4b48      	ldr	r3, [pc, #288]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 800707e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007080:	4a47      	ldr	r2, [pc, #284]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 8007082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007086:	6453      	str	r3, [r2, #68]	; 0x44
 8007088:	4b45      	ldr	r3, [pc, #276]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 800708a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800708c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007090:	61bb      	str	r3, [r7, #24]
 8007092:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007094:	2300      	movs	r3, #0
 8007096:	617b      	str	r3, [r7, #20]
 8007098:	4b41      	ldr	r3, [pc, #260]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 800709a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709c:	4a40      	ldr	r2, [pc, #256]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 800709e:	f043 0301 	orr.w	r3, r3, #1
 80070a2:	6313      	str	r3, [r2, #48]	; 0x30
 80070a4:	4b3e      	ldr	r3, [pc, #248]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 80070a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a8:	f003 0301 	and.w	r3, r3, #1
 80070ac:	617b      	str	r3, [r7, #20]
 80070ae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070b0:	2300      	movs	r3, #0
 80070b2:	613b      	str	r3, [r7, #16]
 80070b4:	4b3a      	ldr	r3, [pc, #232]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 80070b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b8:	4a39      	ldr	r2, [pc, #228]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 80070ba:	f043 0304 	orr.w	r3, r3, #4
 80070be:	6313      	str	r3, [r2, #48]	; 0x30
 80070c0:	4b37      	ldr	r3, [pc, #220]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 80070c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	613b      	str	r3, [r7, #16]
 80070ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	4b33      	ldr	r3, [pc, #204]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 80070d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d4:	4a32      	ldr	r2, [pc, #200]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 80070d6:	f043 0302 	orr.w	r3, r3, #2
 80070da:	6313      	str	r3, [r2, #48]	; 0x30
 80070dc:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <HAL_ADC_MspInit+0x208>)
 80070de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80070e8:	23ff      	movs	r3, #255	; 0xff
 80070ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80070ec:	2303      	movs	r3, #3
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f0:	2300      	movs	r3, #0
 80070f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070f8:	4619      	mov	r1, r3
 80070fa:	482e      	ldr	r0, [pc, #184]	; (80071b4 <HAL_ADC_MspInit+0x21c>)
 80070fc:	f001 feea 	bl	8008ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007100:	2330      	movs	r3, #48	; 0x30
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007104:	2303      	movs	r3, #3
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007108:	2300      	movs	r3, #0
 800710a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800710c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007110:	4619      	mov	r1, r3
 8007112:	4824      	ldr	r0, [pc, #144]	; (80071a4 <HAL_ADC_MspInit+0x20c>)
 8007114:	f001 fede 	bl	8008ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007118:	2303      	movs	r3, #3
 800711a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800711c:	2303      	movs	r3, #3
 800711e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007120:	2300      	movs	r3, #0
 8007122:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007128:	4619      	mov	r1, r3
 800712a:	4823      	ldr	r0, [pc, #140]	; (80071b8 <HAL_ADC_MspInit+0x220>)
 800712c:	f001 fed2 	bl	8008ed4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8007130:	4b22      	ldr	r3, [pc, #136]	; (80071bc <HAL_ADC_MspInit+0x224>)
 8007132:	4a23      	ldr	r2, [pc, #140]	; (80071c0 <HAL_ADC_MspInit+0x228>)
 8007134:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8007136:	4b21      	ldr	r3, [pc, #132]	; (80071bc <HAL_ADC_MspInit+0x224>)
 8007138:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800713c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800713e:	4b1f      	ldr	r3, [pc, #124]	; (80071bc <HAL_ADC_MspInit+0x224>)
 8007140:	2200      	movs	r2, #0
 8007142:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8007144:	4b1d      	ldr	r3, [pc, #116]	; (80071bc <HAL_ADC_MspInit+0x224>)
 8007146:	2200      	movs	r2, #0
 8007148:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800714a:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <HAL_ADC_MspInit+0x224>)
 800714c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007150:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007152:	4b1a      	ldr	r3, [pc, #104]	; (80071bc <HAL_ADC_MspInit+0x224>)
 8007154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007158:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800715a:	4b18      	ldr	r3, [pc, #96]	; (80071bc <HAL_ADC_MspInit+0x224>)
 800715c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007160:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8007162:	4b16      	ldr	r3, [pc, #88]	; (80071bc <HAL_ADC_MspInit+0x224>)
 8007164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007168:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800716a:	4b14      	ldr	r3, [pc, #80]	; (80071bc <HAL_ADC_MspInit+0x224>)
 800716c:	2200      	movs	r2, #0
 800716e:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007170:	4b12      	ldr	r3, [pc, #72]	; (80071bc <HAL_ADC_MspInit+0x224>)
 8007172:	2200      	movs	r2, #0
 8007174:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8007176:	4811      	ldr	r0, [pc, #68]	; (80071bc <HAL_ADC_MspInit+0x224>)
 8007178:	f001 f954 	bl	8008424 <HAL_DMA_Init>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8007182:	f7fe fbb1 	bl	80058e8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a0c      	ldr	r2, [pc, #48]	; (80071bc <HAL_ADC_MspInit+0x224>)
 800718a:	639a      	str	r2, [r3, #56]	; 0x38
 800718c:	4a0b      	ldr	r2, [pc, #44]	; (80071bc <HAL_ADC_MspInit+0x224>)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007192:	bf00      	nop
 8007194:	3738      	adds	r7, #56	; 0x38
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40012000 	.word	0x40012000
 80071a0:	40023800 	.word	0x40023800
 80071a4:	40020800 	.word	0x40020800
 80071a8:	2001cf44 	.word	0x2001cf44
 80071ac:	40026410 	.word	0x40026410
 80071b0:	40012100 	.word	0x40012100
 80071b4:	40020000 	.word	0x40020000
 80071b8:	40020400 	.word	0x40020400
 80071bc:	2001d02c 	.word	0x2001d02c
 80071c0:	40026440 	.word	0x40026440

080071c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b08a      	sub	sp, #40	; 0x28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071cc:	f107 0314 	add.w	r3, r7, #20
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	605a      	str	r2, [r3, #4]
 80071d6:	609a      	str	r2, [r3, #8]
 80071d8:	60da      	str	r2, [r3, #12]
 80071da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a19      	ldr	r2, [pc, #100]	; (8007248 <HAL_I2C_MspInit+0x84>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d12c      	bne.n	8007240 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071e6:	2300      	movs	r3, #0
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	4b18      	ldr	r3, [pc, #96]	; (800724c <HAL_I2C_MspInit+0x88>)
 80071ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ee:	4a17      	ldr	r2, [pc, #92]	; (800724c <HAL_I2C_MspInit+0x88>)
 80071f0:	f043 0302 	orr.w	r3, r3, #2
 80071f4:	6313      	str	r3, [r2, #48]	; 0x30
 80071f6:	4b15      	ldr	r3, [pc, #84]	; (800724c <HAL_I2C_MspInit+0x88>)
 80071f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	613b      	str	r3, [r7, #16]
 8007200:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007202:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007208:	2312      	movs	r3, #18
 800720a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800720c:	2301      	movs	r3, #1
 800720e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007210:	2303      	movs	r3, #3
 8007212:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007214:	2304      	movs	r3, #4
 8007216:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007218:	f107 0314 	add.w	r3, r7, #20
 800721c:	4619      	mov	r1, r3
 800721e:	480c      	ldr	r0, [pc, #48]	; (8007250 <HAL_I2C_MspInit+0x8c>)
 8007220:	f001 fe58 	bl	8008ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007224:	2300      	movs	r3, #0
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	4b08      	ldr	r3, [pc, #32]	; (800724c <HAL_I2C_MspInit+0x88>)
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	4a07      	ldr	r2, [pc, #28]	; (800724c <HAL_I2C_MspInit+0x88>)
 800722e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007232:	6413      	str	r3, [r2, #64]	; 0x40
 8007234:	4b05      	ldr	r3, [pc, #20]	; (800724c <HAL_I2C_MspInit+0x88>)
 8007236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007238:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800723c:	60fb      	str	r3, [r7, #12]
 800723e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007240:	bf00      	nop
 8007242:	3728      	adds	r7, #40	; 0x28
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	40005400 	.word	0x40005400
 800724c:	40023800 	.word	0x40023800
 8007250:	40020400 	.word	0x40020400

08007254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b08a      	sub	sp, #40	; 0x28
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800725c:	f107 0314 	add.w	r3, r7, #20
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	609a      	str	r2, [r3, #8]
 8007268:	60da      	str	r2, [r3, #12]
 800726a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <HAL_SPI_MspInit+0x84>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d12c      	bne.n	80072d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007276:	2300      	movs	r3, #0
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	4b18      	ldr	r3, [pc, #96]	; (80072dc <HAL_SPI_MspInit+0x88>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	4a17      	ldr	r2, [pc, #92]	; (80072dc <HAL_SPI_MspInit+0x88>)
 8007280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007284:	6413      	str	r3, [r2, #64]	; 0x40
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <HAL_SPI_MspInit+0x88>)
 8007288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007292:	2300      	movs	r3, #0
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	4b11      	ldr	r3, [pc, #68]	; (80072dc <HAL_SPI_MspInit+0x88>)
 8007298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729a:	4a10      	ldr	r2, [pc, #64]	; (80072dc <HAL_SPI_MspInit+0x88>)
 800729c:	f043 0304 	orr.w	r3, r3, #4
 80072a0:	6313      	str	r3, [r2, #48]	; 0x30
 80072a2:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <HAL_SPI_MspInit+0x88>)
 80072a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a6:	f003 0304 	and.w	r3, r3, #4
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80072ae:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80072b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072b4:	2302      	movs	r3, #2
 80072b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b8:	2300      	movs	r3, #0
 80072ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072bc:	2303      	movs	r3, #3
 80072be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80072c0:	2306      	movs	r3, #6
 80072c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072c4:	f107 0314 	add.w	r3, r7, #20
 80072c8:	4619      	mov	r1, r3
 80072ca:	4805      	ldr	r0, [pc, #20]	; (80072e0 <HAL_SPI_MspInit+0x8c>)
 80072cc:	f001 fe02 	bl	8008ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80072d0:	bf00      	nop
 80072d2:	3728      	adds	r7, #40	; 0x28
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	40003c00 	.word	0x40003c00
 80072dc:	40023800 	.word	0x40023800
 80072e0:	40020800 	.word	0x40020800

080072e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a15      	ldr	r2, [pc, #84]	; (8007348 <HAL_TIM_PWM_MspInit+0x64>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d10e      	bne.n	8007314 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	4b14      	ldr	r3, [pc, #80]	; (800734c <HAL_TIM_PWM_MspInit+0x68>)
 80072fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072fe:	4a13      	ldr	r2, [pc, #76]	; (800734c <HAL_TIM_PWM_MspInit+0x68>)
 8007300:	f043 0301 	orr.w	r3, r3, #1
 8007304:	6453      	str	r3, [r2, #68]	; 0x44
 8007306:	4b11      	ldr	r3, [pc, #68]	; (800734c <HAL_TIM_PWM_MspInit+0x68>)
 8007308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007312:	e012      	b.n	800733a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a0d      	ldr	r2, [pc, #52]	; (8007350 <HAL_TIM_PWM_MspInit+0x6c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d10d      	bne.n	800733a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]
 8007322:	4b0a      	ldr	r3, [pc, #40]	; (800734c <HAL_TIM_PWM_MspInit+0x68>)
 8007324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007326:	4a09      	ldr	r2, [pc, #36]	; (800734c <HAL_TIM_PWM_MspInit+0x68>)
 8007328:	f043 0302 	orr.w	r3, r3, #2
 800732c:	6453      	str	r3, [r2, #68]	; 0x44
 800732e:	4b07      	ldr	r3, [pc, #28]	; (800734c <HAL_TIM_PWM_MspInit+0x68>)
 8007330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007332:	f003 0302 	and.w	r3, r3, #2
 8007336:	60bb      	str	r3, [r7, #8]
 8007338:	68bb      	ldr	r3, [r7, #8]
}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	40010000 	.word	0x40010000
 800734c:	40023800 	.word	0x40023800
 8007350:	40010400 	.word	0x40010400

08007354 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08c      	sub	sp, #48	; 0x30
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800735c:	f107 031c 	add.w	r3, r7, #28
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
 8007364:	605a      	str	r2, [r3, #4]
 8007366:	609a      	str	r2, [r3, #8]
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a32      	ldr	r2, [pc, #200]	; (800743c <HAL_TIM_Encoder_MspInit+0xe8>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d12c      	bne.n	80073d0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007376:	2300      	movs	r3, #0
 8007378:	61bb      	str	r3, [r7, #24]
 800737a:	4b31      	ldr	r3, [pc, #196]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 800737c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737e:	4a30      	ldr	r2, [pc, #192]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 8007380:	f043 0302 	orr.w	r3, r3, #2
 8007384:	6413      	str	r3, [r2, #64]	; 0x40
 8007386:	4b2e      	ldr	r3, [pc, #184]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 8007388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738a:	f003 0302 	and.w	r3, r3, #2
 800738e:	61bb      	str	r3, [r7, #24]
 8007390:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007392:	2300      	movs	r3, #0
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	4b2a      	ldr	r3, [pc, #168]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 8007398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739a:	4a29      	ldr	r2, [pc, #164]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 800739c:	f043 0302 	orr.w	r3, r3, #2
 80073a0:	6313      	str	r3, [r2, #48]	; 0x30
 80073a2:	4b27      	ldr	r3, [pc, #156]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 80073a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a6:	f003 0302 	and.w	r3, r3, #2
 80073aa:	617b      	str	r3, [r7, #20]
 80073ac:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80073ae:	2330      	movs	r3, #48	; 0x30
 80073b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073b2:	2302      	movs	r3, #2
 80073b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b6:	2300      	movs	r3, #0
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073ba:	2300      	movs	r3, #0
 80073bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80073be:	2302      	movs	r3, #2
 80073c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073c2:	f107 031c 	add.w	r3, r7, #28
 80073c6:	4619      	mov	r1, r3
 80073c8:	481e      	ldr	r0, [pc, #120]	; (8007444 <HAL_TIM_Encoder_MspInit+0xf0>)
 80073ca:	f001 fd83 	bl	8008ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80073ce:	e030      	b.n	8007432 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a1c      	ldr	r2, [pc, #112]	; (8007448 <HAL_TIM_Encoder_MspInit+0xf4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d12b      	bne.n	8007432 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80073da:	2300      	movs	r3, #0
 80073dc:	613b      	str	r3, [r7, #16]
 80073de:	4b18      	ldr	r3, [pc, #96]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	4a17      	ldr	r2, [pc, #92]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 80073e4:	f043 0304 	orr.w	r3, r3, #4
 80073e8:	6413      	str	r3, [r2, #64]	; 0x40
 80073ea:	4b15      	ldr	r3, [pc, #84]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	f003 0304 	and.w	r3, r3, #4
 80073f2:	613b      	str	r3, [r7, #16]
 80073f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073f6:	2300      	movs	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]
 80073fa:	4b11      	ldr	r3, [pc, #68]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 80073fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fe:	4a10      	ldr	r2, [pc, #64]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 8007400:	f043 0302 	orr.w	r3, r3, #2
 8007404:	6313      	str	r3, [r2, #48]	; 0x30
 8007406:	4b0e      	ldr	r3, [pc, #56]	; (8007440 <HAL_TIM_Encoder_MspInit+0xec>)
 8007408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	60fb      	str	r3, [r7, #12]
 8007410:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007412:	23c0      	movs	r3, #192	; 0xc0
 8007414:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007416:	2302      	movs	r3, #2
 8007418:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800741a:	2300      	movs	r3, #0
 800741c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800741e:	2300      	movs	r3, #0
 8007420:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007422:	2302      	movs	r3, #2
 8007424:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007426:	f107 031c 	add.w	r3, r7, #28
 800742a:	4619      	mov	r1, r3
 800742c:	4805      	ldr	r0, [pc, #20]	; (8007444 <HAL_TIM_Encoder_MspInit+0xf0>)
 800742e:	f001 fd51 	bl	8008ed4 <HAL_GPIO_Init>
}
 8007432:	bf00      	nop
 8007434:	3730      	adds	r7, #48	; 0x30
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	40000400 	.word	0x40000400
 8007440:	40023800 	.word	0x40023800
 8007444:	40020400 	.word	0x40020400
 8007448:	40000800 	.word	0x40000800

0800744c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a1c      	ldr	r2, [pc, #112]	; (80074cc <HAL_TIM_Base_MspInit+0x80>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d116      	bne.n	800748c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	4b1b      	ldr	r3, [pc, #108]	; (80074d0 <HAL_TIM_Base_MspInit+0x84>)
 8007464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007466:	4a1a      	ldr	r2, [pc, #104]	; (80074d0 <HAL_TIM_Base_MspInit+0x84>)
 8007468:	f043 0310 	orr.w	r3, r3, #16
 800746c:	6413      	str	r3, [r2, #64]	; 0x40
 800746e:	4b18      	ldr	r3, [pc, #96]	; (80074d0 <HAL_TIM_Base_MspInit+0x84>)
 8007470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007472:	f003 0310 	and.w	r3, r3, #16
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 800747a:	2200      	movs	r2, #0
 800747c:	2101      	movs	r1, #1
 800747e:	2036      	movs	r0, #54	; 0x36
 8007480:	f000 ff99 	bl	80083b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007484:	2036      	movs	r0, #54	; 0x36
 8007486:	f000 ffb2 	bl	80083ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800748a:	e01a      	b.n	80074c2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a10      	ldr	r2, [pc, #64]	; (80074d4 <HAL_TIM_Base_MspInit+0x88>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d115      	bne.n	80074c2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]
 800749a:	4b0d      	ldr	r3, [pc, #52]	; (80074d0 <HAL_TIM_Base_MspInit+0x84>)
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <HAL_TIM_Base_MspInit+0x84>)
 80074a0:	f043 0320 	orr.w	r3, r3, #32
 80074a4:	6413      	str	r3, [r2, #64]	; 0x40
 80074a6:	4b0a      	ldr	r3, [pc, #40]	; (80074d0 <HAL_TIM_Base_MspInit+0x84>)
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	60bb      	str	r3, [r7, #8]
 80074b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80074b2:	2200      	movs	r2, #0
 80074b4:	2100      	movs	r1, #0
 80074b6:	2037      	movs	r0, #55	; 0x37
 80074b8:	f000 ff7d 	bl	80083b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80074bc:	2037      	movs	r0, #55	; 0x37
 80074be:	f000 ff96 	bl	80083ee <HAL_NVIC_EnableIRQ>
}
 80074c2:	bf00      	nop
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	40001000 	.word	0x40001000
 80074d0:	40023800 	.word	0x40023800
 80074d4:	40001400 	.word	0x40001400

080074d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08a      	sub	sp, #40	; 0x28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074e0:	f107 0314 	add.w	r3, r7, #20
 80074e4:	2200      	movs	r2, #0
 80074e6:	601a      	str	r2, [r3, #0]
 80074e8:	605a      	str	r2, [r3, #4]
 80074ea:	609a      	str	r2, [r3, #8]
 80074ec:	60da      	str	r2, [r3, #12]
 80074ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a25      	ldr	r2, [pc, #148]	; (800758c <HAL_TIM_MspPostInit+0xb4>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d11f      	bne.n	800753a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074fa:	2300      	movs	r3, #0
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	4b24      	ldr	r3, [pc, #144]	; (8007590 <HAL_TIM_MspPostInit+0xb8>)
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	4a23      	ldr	r2, [pc, #140]	; (8007590 <HAL_TIM_MspPostInit+0xb8>)
 8007504:	f043 0301 	orr.w	r3, r3, #1
 8007508:	6313      	str	r3, [r2, #48]	; 0x30
 800750a:	4b21      	ldr	r3, [pc, #132]	; (8007590 <HAL_TIM_MspPostInit+0xb8>)
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	613b      	str	r3, [r7, #16]
 8007514:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007516:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800751a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800751c:	2302      	movs	r3, #2
 800751e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007520:	2300      	movs	r3, #0
 8007522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007524:	2300      	movs	r3, #0
 8007526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007528:	2301      	movs	r3, #1
 800752a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800752c:	f107 0314 	add.w	r3, r7, #20
 8007530:	4619      	mov	r1, r3
 8007532:	4818      	ldr	r0, [pc, #96]	; (8007594 <HAL_TIM_MspPostInit+0xbc>)
 8007534:	f001 fcce 	bl	8008ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8007538:	e023      	b.n	8007582 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a16      	ldr	r2, [pc, #88]	; (8007598 <HAL_TIM_MspPostInit+0xc0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d11e      	bne.n	8007582 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	4b11      	ldr	r3, [pc, #68]	; (8007590 <HAL_TIM_MspPostInit+0xb8>)
 800754a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754c:	4a10      	ldr	r2, [pc, #64]	; (8007590 <HAL_TIM_MspPostInit+0xb8>)
 800754e:	f043 0304 	orr.w	r3, r3, #4
 8007552:	6313      	str	r3, [r2, #48]	; 0x30
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <HAL_TIM_MspPostInit+0xb8>)
 8007556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	60fb      	str	r3, [r7, #12]
 800755e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8007560:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007566:	2302      	movs	r3, #2
 8007568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800756a:	2300      	movs	r3, #0
 800756c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800756e:	2300      	movs	r3, #0
 8007570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007572:	2303      	movs	r3, #3
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007576:	f107 0314 	add.w	r3, r7, #20
 800757a:	4619      	mov	r1, r3
 800757c:	4807      	ldr	r0, [pc, #28]	; (800759c <HAL_TIM_MspPostInit+0xc4>)
 800757e:	f001 fca9 	bl	8008ed4 <HAL_GPIO_Init>
}
 8007582:	bf00      	nop
 8007584:	3728      	adds	r7, #40	; 0x28
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	40010000 	.word	0x40010000
 8007590:	40023800 	.word	0x40023800
 8007594:	40020000 	.word	0x40020000
 8007598:	40010400 	.word	0x40010400
 800759c:	40020800 	.word	0x40020800

080075a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b08a      	sub	sp, #40	; 0x28
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075a8:	f107 0314 	add.w	r3, r7, #20
 80075ac:	2200      	movs	r2, #0
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	605a      	str	r2, [r3, #4]
 80075b2:	609a      	str	r2, [r3, #8]
 80075b4:	60da      	str	r2, [r3, #12]
 80075b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a19      	ldr	r2, [pc, #100]	; (8007624 <HAL_UART_MspInit+0x84>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d12c      	bne.n	800761c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80075c2:	2300      	movs	r3, #0
 80075c4:	613b      	str	r3, [r7, #16]
 80075c6:	4b18      	ldr	r3, [pc, #96]	; (8007628 <HAL_UART_MspInit+0x88>)
 80075c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ca:	4a17      	ldr	r2, [pc, #92]	; (8007628 <HAL_UART_MspInit+0x88>)
 80075cc:	f043 0310 	orr.w	r3, r3, #16
 80075d0:	6453      	str	r3, [r2, #68]	; 0x44
 80075d2:	4b15      	ldr	r3, [pc, #84]	; (8007628 <HAL_UART_MspInit+0x88>)
 80075d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d6:	f003 0310 	and.w	r3, r3, #16
 80075da:	613b      	str	r3, [r7, #16]
 80075dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80075de:	2300      	movs	r3, #0
 80075e0:	60fb      	str	r3, [r7, #12]
 80075e2:	4b11      	ldr	r3, [pc, #68]	; (8007628 <HAL_UART_MspInit+0x88>)
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	4a10      	ldr	r2, [pc, #64]	; (8007628 <HAL_UART_MspInit+0x88>)
 80075e8:	f043 0301 	orr.w	r3, r3, #1
 80075ec:	6313      	str	r3, [r2, #48]	; 0x30
 80075ee:	4b0e      	ldr	r3, [pc, #56]	; (8007628 <HAL_UART_MspInit+0x88>)
 80075f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]
 80075f8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80075fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80075fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007600:	2302      	movs	r3, #2
 8007602:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007604:	2300      	movs	r3, #0
 8007606:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007608:	2303      	movs	r3, #3
 800760a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800760c:	2307      	movs	r3, #7
 800760e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007610:	f107 0314 	add.w	r3, r7, #20
 8007614:	4619      	mov	r1, r3
 8007616:	4805      	ldr	r0, [pc, #20]	; (800762c <HAL_UART_MspInit+0x8c>)
 8007618:	f001 fc5c 	bl	8008ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800761c:	bf00      	nop
 800761e:	3728      	adds	r7, #40	; 0x28
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40011000 	.word	0x40011000
 8007628:	40023800 	.word	0x40023800
 800762c:	40020000 	.word	0x40020000

08007630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007630:	b480      	push	{r7}
 8007632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007634:	e7fe      	b.n	8007634 <NMI_Handler+0x4>

08007636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007636:	b480      	push	{r7}
 8007638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800763a:	e7fe      	b.n	800763a <HardFault_Handler+0x4>

0800763c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800763c:	b480      	push	{r7}
 800763e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007640:	e7fe      	b.n	8007640 <MemManage_Handler+0x4>

08007642 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007642:	b480      	push	{r7}
 8007644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007646:	e7fe      	b.n	8007646 <BusFault_Handler+0x4>

08007648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800764c:	e7fe      	b.n	800764c <UsageFault_Handler+0x4>

0800764e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800764e:	b480      	push	{r7}
 8007650:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007652:	bf00      	nop
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800765c:	b480      	push	{r7}
 800765e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007660:	bf00      	nop
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800766a:	b480      	push	{r7}
 800766c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800766e:	bf00      	nop
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr

08007678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800767c:	f000 f98a 	bl	8007994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007680:	bf00      	nop
 8007682:	bd80      	pop	{r7, pc}

08007684 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007688:	4802      	ldr	r0, [pc, #8]	; (8007694 <TIM6_DAC_IRQHandler+0x10>)
 800768a:	f003 fa38 	bl	800aafe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800768e:	bf00      	nop
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	2001cfa4 	.word	0x2001cfa4

08007698 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800769c:	4802      	ldr	r0, [pc, #8]	; (80076a8 <TIM7_IRQHandler+0x10>)
 800769e:	f003 fa2e 	bl	800aafe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80076a2:	bf00      	nop
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	2001d08c 	.word	0x2001d08c

080076ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80076b0:	4802      	ldr	r0, [pc, #8]	; (80076bc <DMA2_Stream0_IRQHandler+0x10>)
 80076b2:	f000 ffbd 	bl	8008630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80076b6:	bf00      	nop
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	2001cf44 	.word	0x2001cf44

080076c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80076c4:	4802      	ldr	r0, [pc, #8]	; (80076d0 <DMA2_Stream2_IRQHandler+0x10>)
 80076c6:	f000 ffb3 	bl	8008630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	2001d02c 	.word	0x2001d02c

080076d4 <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 80076de:	2300      	movs	r3, #0
 80076e0:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	2b52      	cmp	r3, #82	; 0x52
 80076e6:	d10a      	bne.n	80076fe <getSwitchStatus+0x2a>
 80076e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076ec:	480d      	ldr	r0, [pc, #52]	; (8007724 <getSwitchStatus+0x50>)
 80076ee:	f001 fd8b 	bl	8009208 <HAL_GPIO_ReadPin>
 80076f2:	4603      	mov	r3, r0
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d102      	bne.n	80076fe <getSwitchStatus+0x2a>
		ret = 1;
 80076f8:	2301      	movs	r3, #1
 80076fa:	81fb      	strh	r3, [r7, #14]
 80076fc:	e00c      	b.n	8007718 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 80076fe:	79fb      	ldrb	r3, [r7, #7]
 8007700:	2b4c      	cmp	r3, #76	; 0x4c
 8007702:	d109      	bne.n	8007718 <getSwitchStatus+0x44>
 8007704:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007708:	4806      	ldr	r0, [pc, #24]	; (8007724 <getSwitchStatus+0x50>)
 800770a:	f001 fd7d 	bl	8009208 <HAL_GPIO_ReadPin>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <getSwitchStatus+0x44>
		ret = 1;
 8007714:	2301      	movs	r3, #1
 8007716:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8007718:	89fb      	ldrh	r3, [r7, #14]

}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	40020000 	.word	0x40020000

08007728 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007734:	2300      	movs	r3, #0
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	e00a      	b.n	8007750 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800773a:	f3af 8000 	nop.w
 800773e:	4601      	mov	r1, r0
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	60ba      	str	r2, [r7, #8]
 8007746:	b2ca      	uxtb	r2, r1
 8007748:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	3301      	adds	r3, #1
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	429a      	cmp	r2, r3
 8007756:	dbf0      	blt.n	800773a <_read+0x12>
	}

return len;
 8007758:	687b      	ldr	r3, [r7, #4]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b086      	sub	sp, #24
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800776e:	2300      	movs	r3, #0
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	e009      	b.n	8007788 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	1c5a      	adds	r2, r3, #1
 8007778:	60ba      	str	r2, [r7, #8]
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	4618      	mov	r0, r3
 800777e:	f7fc fe91 	bl	80044a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	3301      	adds	r3, #1
 8007786:	617b      	str	r3, [r7, #20]
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	429a      	cmp	r2, r3
 800778e:	dbf1      	blt.n	8007774 <_write+0x12>
	}
	return len;
 8007790:	687b      	ldr	r3, [r7, #4]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <_close>:

int _close(int file)
{
 800779a:	b480      	push	{r7}
 800779c:	b083      	sub	sp, #12
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
	return -1;
 80077a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	370c      	adds	r7, #12
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr

080077b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80077b2:	b480      	push	{r7}
 80077b4:	b083      	sub	sp, #12
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	6078      	str	r0, [r7, #4]
 80077ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80077c2:	605a      	str	r2, [r3, #4]
	return 0;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <_isatty>:

int _isatty(int file)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
	return 1;
 80077da:	2301      	movs	r3, #1
}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b085      	sub	sp, #20
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
	return 0;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
	...

08007804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b086      	sub	sp, #24
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800780c:	4a14      	ldr	r2, [pc, #80]	; (8007860 <_sbrk+0x5c>)
 800780e:	4b15      	ldr	r3, [pc, #84]	; (8007864 <_sbrk+0x60>)
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007818:	4b13      	ldr	r3, [pc, #76]	; (8007868 <_sbrk+0x64>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d102      	bne.n	8007826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007820:	4b11      	ldr	r3, [pc, #68]	; (8007868 <_sbrk+0x64>)
 8007822:	4a12      	ldr	r2, [pc, #72]	; (800786c <_sbrk+0x68>)
 8007824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007826:	4b10      	ldr	r3, [pc, #64]	; (8007868 <_sbrk+0x64>)
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4413      	add	r3, r2
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	429a      	cmp	r2, r3
 8007832:	d207      	bcs.n	8007844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007834:	f006 fcd8 	bl	800e1e8 <__errno>
 8007838:	4602      	mov	r2, r0
 800783a:	230c      	movs	r3, #12
 800783c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800783e:	f04f 33ff 	mov.w	r3, #4294967295
 8007842:	e009      	b.n	8007858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007844:	4b08      	ldr	r3, [pc, #32]	; (8007868 <_sbrk+0x64>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800784a:	4b07      	ldr	r3, [pc, #28]	; (8007868 <_sbrk+0x64>)
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4413      	add	r3, r2
 8007852:	4a05      	ldr	r2, [pc, #20]	; (8007868 <_sbrk+0x64>)
 8007854:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007856:	68fb      	ldr	r3, [r7, #12]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	20020000 	.word	0x20020000
 8007864:	00000400 	.word	0x00000400
 8007868:	2001cbb4 	.word	0x2001cbb4
 800786c:	2001d108 	.word	0x2001d108

08007870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007870:	b480      	push	{r7}
 8007872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007874:	4b08      	ldr	r3, [pc, #32]	; (8007898 <SystemInit+0x28>)
 8007876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800787a:	4a07      	ldr	r2, [pc, #28]	; (8007898 <SystemInit+0x28>)
 800787c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007880:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <SystemInit+0x28>)
 8007886:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800788a:	609a      	str	r2, [r3, #8]
#endif
}
 800788c:	bf00      	nop
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	e000ed00 	.word	0xe000ed00

0800789c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800789c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80078d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80078a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80078a2:	e003      	b.n	80078ac <LoopCopyDataInit>

080078a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80078a4:	4b0c      	ldr	r3, [pc, #48]	; (80078d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80078a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80078a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80078aa:	3104      	adds	r1, #4

080078ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80078ac:	480b      	ldr	r0, [pc, #44]	; (80078dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80078ae:	4b0c      	ldr	r3, [pc, #48]	; (80078e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80078b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80078b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80078b4:	d3f6      	bcc.n	80078a4 <CopyDataInit>
  ldr  r2, =_sbss
 80078b6:	4a0b      	ldr	r2, [pc, #44]	; (80078e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80078b8:	e002      	b.n	80078c0 <LoopFillZerobss>

080078ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80078ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80078bc:	f842 3b04 	str.w	r3, [r2], #4

080078c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80078c0:	4b09      	ldr	r3, [pc, #36]	; (80078e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80078c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80078c4:	d3f9      	bcc.n	80078ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80078c6:	f7ff ffd3 	bl	8007870 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80078ca:	f006 fc93 	bl	800e1f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80078ce:	f7fc fe63 	bl	8004598 <main>
  bx  lr    
 80078d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80078d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80078d8:	08012fb0 	.word	0x08012fb0
  ldr  r0, =_sdata
 80078dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80078e0:	20000218 	.word	0x20000218
  ldr  r2, =_sbss
 80078e4:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 80078e8:	2001d108 	.word	0x2001d108

080078ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80078ec:	e7fe      	b.n	80078ec <ADC_IRQHandler>
	...

080078f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80078f4:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <HAL_Init+0x40>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a0d      	ldr	r2, [pc, #52]	; (8007930 <HAL_Init+0x40>)
 80078fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007900:	4b0b      	ldr	r3, [pc, #44]	; (8007930 <HAL_Init+0x40>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a0a      	ldr	r2, [pc, #40]	; (8007930 <HAL_Init+0x40>)
 8007906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800790a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800790c:	4b08      	ldr	r3, [pc, #32]	; (8007930 <HAL_Init+0x40>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a07      	ldr	r2, [pc, #28]	; (8007930 <HAL_Init+0x40>)
 8007912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007918:	2003      	movs	r0, #3
 800791a:	f000 fd41 	bl	80083a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800791e:	2000      	movs	r0, #0
 8007920:	f000 f808 	bl	8007934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007924:	f7ff fb10 	bl	8006f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	40023c00 	.word	0x40023c00

08007934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800793c:	4b12      	ldr	r3, [pc, #72]	; (8007988 <HAL_InitTick+0x54>)
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	4b12      	ldr	r3, [pc, #72]	; (800798c <HAL_InitTick+0x58>)
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	4619      	mov	r1, r3
 8007946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800794a:	fbb3 f3f1 	udiv	r3, r3, r1
 800794e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fd59 	bl	800840a <HAL_SYSTICK_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	e00e      	b.n	8007980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2b0f      	cmp	r3, #15
 8007966:	d80a      	bhi.n	800797e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007968:	2200      	movs	r2, #0
 800796a:	6879      	ldr	r1, [r7, #4]
 800796c:	f04f 30ff 	mov.w	r0, #4294967295
 8007970:	f000 fd21 	bl	80083b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007974:	4a06      	ldr	r2, [pc, #24]	; (8007990 <HAL_InitTick+0x5c>)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	e000      	b.n	8007980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800797e:	2301      	movs	r3, #1
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	2000003c 	.word	0x2000003c
 800798c:	20000044 	.word	0x20000044
 8007990:	20000040 	.word	0x20000040

08007994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007994:	b480      	push	{r7}
 8007996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007998:	4b06      	ldr	r3, [pc, #24]	; (80079b4 <HAL_IncTick+0x20>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	4b06      	ldr	r3, [pc, #24]	; (80079b8 <HAL_IncTick+0x24>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4413      	add	r3, r2
 80079a4:	4a04      	ldr	r2, [pc, #16]	; (80079b8 <HAL_IncTick+0x24>)
 80079a6:	6013      	str	r3, [r2, #0]
}
 80079a8:	bf00      	nop
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	20000044 	.word	0x20000044
 80079b8:	2001d0e0 	.word	0x2001d0e0

080079bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  return uwTick;
 80079c0:	4b03      	ldr	r3, [pc, #12]	; (80079d0 <HAL_GetTick+0x14>)
 80079c2:	681b      	ldr	r3, [r3, #0]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	2001d0e0 	.word	0x2001d0e0

080079d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b084      	sub	sp, #16
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80079dc:	f7ff ffee 	bl	80079bc <HAL_GetTick>
 80079e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ec:	d005      	beq.n	80079fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80079ee:	4b09      	ldr	r3, [pc, #36]	; (8007a14 <HAL_Delay+0x40>)
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80079fa:	bf00      	nop
 80079fc:	f7ff ffde 	bl	80079bc <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d8f7      	bhi.n	80079fc <HAL_Delay+0x28>
  {
  }
}
 8007a0c:	bf00      	nop
 8007a0e:	3710      	adds	r7, #16
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20000044 	.word	0x20000044

08007a18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d101      	bne.n	8007a2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e033      	b.n	8007a96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d109      	bne.n	8007a4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff faae 	bl	8006f98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4e:	f003 0310 	and.w	r3, r3, #16
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d118      	bne.n	8007a88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a5e:	f023 0302 	bic.w	r3, r3, #2
 8007a62:	f043 0202 	orr.w	r2, r3, #2
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fa4a 	bl	8007f04 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7a:	f023 0303 	bic.w	r3, r3, #3
 8007a7e:	f043 0201 	orr.w	r2, r3, #1
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	641a      	str	r2, [r3, #64]	; 0x40
 8007a86:	e001      	b.n	8007a8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
	...

08007aa0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d101      	bne.n	8007abe <HAL_ADC_Start_DMA+0x1e>
 8007aba:	2302      	movs	r3, #2
 8007abc:	e0cc      	b.n	8007c58 <HAL_ADC_Start_DMA+0x1b8>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d018      	beq.n	8007b06 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f042 0201 	orr.w	r2, r2, #1
 8007ae2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007ae4:	4b5e      	ldr	r3, [pc, #376]	; (8007c60 <HAL_ADC_Start_DMA+0x1c0>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a5e      	ldr	r2, [pc, #376]	; (8007c64 <HAL_ADC_Start_DMA+0x1c4>)
 8007aea:	fba2 2303 	umull	r2, r3, r2, r3
 8007aee:	0c9a      	lsrs	r2, r3, #18
 8007af0:	4613      	mov	r3, r2
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	4413      	add	r3, r2
 8007af6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007af8:	e002      	b.n	8007b00 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	3b01      	subs	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1f9      	bne.n	8007afa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	f040 80a0 	bne.w	8007c56 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007b1e:	f023 0301 	bic.w	r3, r3, #1
 8007b22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d007      	beq.n	8007b48 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b54:	d106      	bne.n	8007b64 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b5a:	f023 0206 	bic.w	r2, r3, #6
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	645a      	str	r2, [r3, #68]	; 0x44
 8007b62:	e002      	b.n	8007b6a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b72:	4b3d      	ldr	r3, [pc, #244]	; (8007c68 <HAL_ADC_Start_DMA+0x1c8>)
 8007b74:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	4a3c      	ldr	r2, [pc, #240]	; (8007c6c <HAL_ADC_Start_DMA+0x1cc>)
 8007b7c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b82:	4a3b      	ldr	r2, [pc, #236]	; (8007c70 <HAL_ADC_Start_DMA+0x1d0>)
 8007b84:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8a:	4a3a      	ldr	r2, [pc, #232]	; (8007c74 <HAL_ADC_Start_DMA+0x1d4>)
 8007b8c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007b96:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007ba6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	689a      	ldr	r2, [r3, #8]
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007bb6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	334c      	adds	r3, #76	; 0x4c
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f000 fcda 	bl	8008580 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f003 031f 	and.w	r3, r3, #31
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d12a      	bne.n	8007c2e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a26      	ldr	r2, [pc, #152]	; (8007c78 <HAL_ADC_Start_DMA+0x1d8>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d015      	beq.n	8007c0e <HAL_ADC_Start_DMA+0x16e>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a25      	ldr	r2, [pc, #148]	; (8007c7c <HAL_ADC_Start_DMA+0x1dc>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d105      	bne.n	8007bf8 <HAL_ADC_Start_DMA+0x158>
 8007bec:	4b1e      	ldr	r3, [pc, #120]	; (8007c68 <HAL_ADC_Start_DMA+0x1c8>)
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	f003 031f 	and.w	r3, r3, #31
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00a      	beq.n	8007c0e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a20      	ldr	r2, [pc, #128]	; (8007c80 <HAL_ADC_Start_DMA+0x1e0>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d129      	bne.n	8007c56 <HAL_ADC_Start_DMA+0x1b6>
 8007c02:	4b19      	ldr	r3, [pc, #100]	; (8007c68 <HAL_ADC_Start_DMA+0x1c8>)
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f003 031f 	and.w	r3, r3, #31
 8007c0a:	2b0f      	cmp	r3, #15
 8007c0c:	d823      	bhi.n	8007c56 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d11c      	bne.n	8007c56 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	689a      	ldr	r2, [r3, #8]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007c2a:	609a      	str	r2, [r3, #8]
 8007c2c:	e013      	b.n	8007c56 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a11      	ldr	r2, [pc, #68]	; (8007c78 <HAL_ADC_Start_DMA+0x1d8>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d10e      	bne.n	8007c56 <HAL_ADC_Start_DMA+0x1b6>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d107      	bne.n	8007c56 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	689a      	ldr	r2, [r3, #8]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007c54:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	2000003c 	.word	0x2000003c
 8007c64:	431bde83 	.word	0x431bde83
 8007c68:	40012300 	.word	0x40012300
 8007c6c:	080080fd 	.word	0x080080fd
 8007c70:	080081b7 	.word	0x080081b7
 8007c74:	080081d3 	.word	0x080081d3
 8007c78:	40012000 	.word	0x40012000
 8007c7c:	40012100 	.word	0x40012100
 8007c80:	40012200 	.word	0x40012200

08007c84 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_ADC_ConfigChannel+0x1c>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e105      	b.n	8007ee8 <HAL_ADC_ConfigChannel+0x228>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b09      	cmp	r3, #9
 8007cea:	d925      	bls.n	8007d38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68d9      	ldr	r1, [r3, #12]
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	b29b      	uxth	r3, r3
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	4413      	add	r3, r2
 8007d00:	3b1e      	subs	r3, #30
 8007d02:	2207      	movs	r2, #7
 8007d04:	fa02 f303 	lsl.w	r3, r2, r3
 8007d08:	43da      	mvns	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	400a      	ands	r2, r1
 8007d10:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68d9      	ldr	r1, [r3, #12]
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	4618      	mov	r0, r3
 8007d24:	4603      	mov	r3, r0
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	4403      	add	r3, r0
 8007d2a:	3b1e      	subs	r3, #30
 8007d2c:	409a      	lsls	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	60da      	str	r2, [r3, #12]
 8007d36:	e022      	b.n	8007d7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6919      	ldr	r1, [r3, #16]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	461a      	mov	r2, r3
 8007d46:	4613      	mov	r3, r2
 8007d48:	005b      	lsls	r3, r3, #1
 8007d4a:	4413      	add	r3, r2
 8007d4c:	2207      	movs	r2, #7
 8007d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d52:	43da      	mvns	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	400a      	ands	r2, r1
 8007d5a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6919      	ldr	r1, [r3, #16]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	4603      	mov	r3, r0
 8007d70:	005b      	lsls	r3, r3, #1
 8007d72:	4403      	add	r3, r0
 8007d74:	409a      	lsls	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b06      	cmp	r3, #6
 8007d84:	d824      	bhi.n	8007dd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	685a      	ldr	r2, [r3, #4]
 8007d90:	4613      	mov	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	3b05      	subs	r3, #5
 8007d98:	221f      	movs	r2, #31
 8007d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d9e:	43da      	mvns	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	400a      	ands	r2, r1
 8007da6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	4618      	mov	r0, r3
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	685a      	ldr	r2, [r3, #4]
 8007dba:	4613      	mov	r3, r2
 8007dbc:	009b      	lsls	r3, r3, #2
 8007dbe:	4413      	add	r3, r2
 8007dc0:	3b05      	subs	r3, #5
 8007dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8007dce:	e04c      	b.n	8007e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	2b0c      	cmp	r3, #12
 8007dd6:	d824      	bhi.n	8007e22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	4613      	mov	r3, r2
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	4413      	add	r3, r2
 8007de8:	3b23      	subs	r3, #35	; 0x23
 8007dea:	221f      	movs	r2, #31
 8007dec:	fa02 f303 	lsl.w	r3, r2, r3
 8007df0:	43da      	mvns	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	400a      	ands	r2, r1
 8007df8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	4618      	mov	r0, r3
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	3b23      	subs	r3, #35	; 0x23
 8007e14:	fa00 f203 	lsl.w	r2, r0, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	430a      	orrs	r2, r1
 8007e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8007e20:	e023      	b.n	8007e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	4413      	add	r3, r2
 8007e32:	3b41      	subs	r3, #65	; 0x41
 8007e34:	221f      	movs	r2, #31
 8007e36:	fa02 f303 	lsl.w	r3, r2, r3
 8007e3a:	43da      	mvns	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	400a      	ands	r2, r1
 8007e42:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	b29b      	uxth	r3, r3
 8007e50:	4618      	mov	r0, r3
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	4613      	mov	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	4413      	add	r3, r2
 8007e5c:	3b41      	subs	r3, #65	; 0x41
 8007e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007e6a:	4b22      	ldr	r3, [pc, #136]	; (8007ef4 <HAL_ADC_ConfigChannel+0x234>)
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a21      	ldr	r2, [pc, #132]	; (8007ef8 <HAL_ADC_ConfigChannel+0x238>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d109      	bne.n	8007e8c <HAL_ADC_ConfigChannel+0x1cc>
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b12      	cmp	r3, #18
 8007e7e:	d105      	bne.n	8007e8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a19      	ldr	r2, [pc, #100]	; (8007ef8 <HAL_ADC_ConfigChannel+0x238>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d123      	bne.n	8007ede <HAL_ADC_ConfigChannel+0x21e>
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b10      	cmp	r3, #16
 8007e9c:	d003      	beq.n	8007ea6 <HAL_ADC_ConfigChannel+0x1e6>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2b11      	cmp	r3, #17
 8007ea4:	d11b      	bne.n	8007ede <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b10      	cmp	r3, #16
 8007eb8:	d111      	bne.n	8007ede <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007eba:	4b10      	ldr	r3, [pc, #64]	; (8007efc <HAL_ADC_ConfigChannel+0x23c>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a10      	ldr	r2, [pc, #64]	; (8007f00 <HAL_ADC_ConfigChannel+0x240>)
 8007ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec4:	0c9a      	lsrs	r2, r3, #18
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007ed0:	e002      	b.n	8007ed8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d1f9      	bne.n	8007ed2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	40012300 	.word	0x40012300
 8007ef8:	40012000 	.word	0x40012000
 8007efc:	2000003c 	.word	0x2000003c
 8007f00:	431bde83 	.word	0x431bde83

08007f04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007f0c:	4b79      	ldr	r3, [pc, #484]	; (80080f4 <ADC_Init+0x1f0>)
 8007f0e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	685a      	ldr	r2, [r3, #4]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	431a      	orrs	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6859      	ldr	r1, [r3, #4]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	021a      	lsls	r2, r3, #8
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	430a      	orrs	r2, r1
 8007f4c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6859      	ldr	r1, [r3, #4]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	689a      	ldr	r2, [r3, #8]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	6899      	ldr	r1, [r3, #8]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	68da      	ldr	r2, [r3, #12]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	430a      	orrs	r2, r1
 8007f90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	4a58      	ldr	r2, [pc, #352]	; (80080f8 <ADC_Init+0x1f4>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d022      	beq.n	8007fe2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	689a      	ldr	r2, [r3, #8]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007faa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6899      	ldr	r1, [r3, #8]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689a      	ldr	r2, [r3, #8]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6899      	ldr	r1, [r3, #8]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	430a      	orrs	r2, r1
 8007fde:	609a      	str	r2, [r3, #8]
 8007fe0:	e00f      	b.n	8008002 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	689a      	ldr	r2, [r3, #8]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008000:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	689a      	ldr	r2, [r3, #8]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0202 	bic.w	r2, r2, #2
 8008010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6899      	ldr	r1, [r3, #8]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	7e1b      	ldrb	r3, [r3, #24]
 800801c:	005a      	lsls	r2, r3, #1
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01b      	beq.n	8008068 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800803e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800804e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6859      	ldr	r1, [r3, #4]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	3b01      	subs	r3, #1
 800805c:	035a      	lsls	r2, r3, #13
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	605a      	str	r2, [r3, #4]
 8008066:	e007      	b.n	8008078 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008076:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008086:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	3b01      	subs	r3, #1
 8008094:	051a      	lsls	r2, r3, #20
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	430a      	orrs	r2, r1
 800809c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	689a      	ldr	r2, [r3, #8]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80080ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	6899      	ldr	r1, [r3, #8]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80080ba:	025a      	lsls	r2, r3, #9
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	430a      	orrs	r2, r1
 80080c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	689a      	ldr	r2, [r3, #8]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6899      	ldr	r1, [r3, #8]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	695b      	ldr	r3, [r3, #20]
 80080de:	029a      	lsls	r2, r3, #10
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	430a      	orrs	r2, r1
 80080e6:	609a      	str	r2, [r3, #8]
}
 80080e8:	bf00      	nop
 80080ea:	3714      	adds	r7, #20
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr
 80080f4:	40012300 	.word	0x40012300
 80080f8:	0f000001 	.word	0x0f000001

080080fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008108:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008112:	2b00      	cmp	r3, #0
 8008114:	d13c      	bne.n	8008190 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d12b      	bne.n	8008188 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008134:	2b00      	cmp	r3, #0
 8008136:	d127      	bne.n	8008188 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008142:	2b00      	cmp	r3, #0
 8008144:	d006      	beq.n	8008154 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008150:	2b00      	cmp	r3, #0
 8008152:	d119      	bne.n	8008188 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f022 0220 	bic.w	r2, r2, #32
 8008162:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008178:	2b00      	cmp	r3, #0
 800817a:	d105      	bne.n	8008188 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	f043 0201 	orr.w	r2, r3, #1
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f7ff fd7b 	bl	8007c84 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800818e:	e00e      	b.n	80081ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f7ff fd85 	bl	8007cac <HAL_ADC_ErrorCallback>
}
 80081a2:	e004      	b.n	80081ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	4798      	blx	r3
}
 80081ae:	bf00      	nop
 80081b0:	3710      	adds	r7, #16
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b084      	sub	sp, #16
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081c2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80081c4:	68f8      	ldr	r0, [r7, #12]
 80081c6:	f7ff fd67 	bl	8007c98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80081ca:	bf00      	nop
 80081cc:	3710      	adds	r7, #16
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2240      	movs	r2, #64	; 0x40
 80081e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ea:	f043 0204 	orr.w	r2, r3, #4
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f7ff fd5a 	bl	8007cac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80081f8:	bf00      	nop
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f003 0307 	and.w	r3, r3, #7
 800820e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008210:	4b0c      	ldr	r3, [pc, #48]	; (8008244 <__NVIC_SetPriorityGrouping+0x44>)
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800821c:	4013      	ands	r3, r2
 800821e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800822c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008232:	4a04      	ldr	r2, [pc, #16]	; (8008244 <__NVIC_SetPriorityGrouping+0x44>)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	60d3      	str	r3, [r2, #12]
}
 8008238:	bf00      	nop
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr
 8008244:	e000ed00 	.word	0xe000ed00

08008248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008248:	b480      	push	{r7}
 800824a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800824c:	4b04      	ldr	r3, [pc, #16]	; (8008260 <__NVIC_GetPriorityGrouping+0x18>)
 800824e:	68db      	ldr	r3, [r3, #12]
 8008250:	0a1b      	lsrs	r3, r3, #8
 8008252:	f003 0307 	and.w	r3, r3, #7
}
 8008256:	4618      	mov	r0, r3
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	e000ed00 	.word	0xe000ed00

08008264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800826e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008272:	2b00      	cmp	r3, #0
 8008274:	db0b      	blt.n	800828e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008276:	79fb      	ldrb	r3, [r7, #7]
 8008278:	f003 021f 	and.w	r2, r3, #31
 800827c:	4907      	ldr	r1, [pc, #28]	; (800829c <__NVIC_EnableIRQ+0x38>)
 800827e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008282:	095b      	lsrs	r3, r3, #5
 8008284:	2001      	movs	r0, #1
 8008286:	fa00 f202 	lsl.w	r2, r0, r2
 800828a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800828e:	bf00      	nop
 8008290:	370c      	adds	r7, #12
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	e000e100 	.word	0xe000e100

080082a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	db0a      	blt.n	80082ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	b2da      	uxtb	r2, r3
 80082b8:	490c      	ldr	r1, [pc, #48]	; (80082ec <__NVIC_SetPriority+0x4c>)
 80082ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082be:	0112      	lsls	r2, r2, #4
 80082c0:	b2d2      	uxtb	r2, r2
 80082c2:	440b      	add	r3, r1
 80082c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80082c8:	e00a      	b.n	80082e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	b2da      	uxtb	r2, r3
 80082ce:	4908      	ldr	r1, [pc, #32]	; (80082f0 <__NVIC_SetPriority+0x50>)
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	f003 030f 	and.w	r3, r3, #15
 80082d6:	3b04      	subs	r3, #4
 80082d8:	0112      	lsls	r2, r2, #4
 80082da:	b2d2      	uxtb	r2, r2
 80082dc:	440b      	add	r3, r1
 80082de:	761a      	strb	r2, [r3, #24]
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	e000e100 	.word	0xe000e100
 80082f0:	e000ed00 	.word	0xe000ed00

080082f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b089      	sub	sp, #36	; 0x24
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f003 0307 	and.w	r3, r3, #7
 8008306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	f1c3 0307 	rsb	r3, r3, #7
 800830e:	2b04      	cmp	r3, #4
 8008310:	bf28      	it	cs
 8008312:	2304      	movcs	r3, #4
 8008314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008316:	69fb      	ldr	r3, [r7, #28]
 8008318:	3304      	adds	r3, #4
 800831a:	2b06      	cmp	r3, #6
 800831c:	d902      	bls.n	8008324 <NVIC_EncodePriority+0x30>
 800831e:	69fb      	ldr	r3, [r7, #28]
 8008320:	3b03      	subs	r3, #3
 8008322:	e000      	b.n	8008326 <NVIC_EncodePriority+0x32>
 8008324:	2300      	movs	r3, #0
 8008326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008328:	f04f 32ff 	mov.w	r2, #4294967295
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	fa02 f303 	lsl.w	r3, r2, r3
 8008332:	43da      	mvns	r2, r3
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	401a      	ands	r2, r3
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800833c:	f04f 31ff 	mov.w	r1, #4294967295
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	fa01 f303 	lsl.w	r3, r1, r3
 8008346:	43d9      	mvns	r1, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800834c:	4313      	orrs	r3, r2
         );
}
 800834e:	4618      	mov	r0, r3
 8008350:	3724      	adds	r7, #36	; 0x24
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
	...

0800835c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b082      	sub	sp, #8
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	3b01      	subs	r3, #1
 8008368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800836c:	d301      	bcc.n	8008372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800836e:	2301      	movs	r3, #1
 8008370:	e00f      	b.n	8008392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008372:	4a0a      	ldr	r2, [pc, #40]	; (800839c <SysTick_Config+0x40>)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	3b01      	subs	r3, #1
 8008378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800837a:	210f      	movs	r1, #15
 800837c:	f04f 30ff 	mov.w	r0, #4294967295
 8008380:	f7ff ff8e 	bl	80082a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008384:	4b05      	ldr	r3, [pc, #20]	; (800839c <SysTick_Config+0x40>)
 8008386:	2200      	movs	r2, #0
 8008388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800838a:	4b04      	ldr	r3, [pc, #16]	; (800839c <SysTick_Config+0x40>)
 800838c:	2207      	movs	r2, #7
 800838e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008390:	2300      	movs	r3, #0
}
 8008392:	4618      	mov	r0, r3
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	e000e010 	.word	0xe000e010

080083a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b082      	sub	sp, #8
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff ff29 	bl	8008200 <__NVIC_SetPriorityGrouping>
}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b086      	sub	sp, #24
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	4603      	mov	r3, r0
 80083be:	60b9      	str	r1, [r7, #8]
 80083c0:	607a      	str	r2, [r7, #4]
 80083c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80083c8:	f7ff ff3e 	bl	8008248 <__NVIC_GetPriorityGrouping>
 80083cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	68b9      	ldr	r1, [r7, #8]
 80083d2:	6978      	ldr	r0, [r7, #20]
 80083d4:	f7ff ff8e 	bl	80082f4 <NVIC_EncodePriority>
 80083d8:	4602      	mov	r2, r0
 80083da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083de:	4611      	mov	r1, r2
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7ff ff5d 	bl	80082a0 <__NVIC_SetPriority>
}
 80083e6:	bf00      	nop
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	4603      	mov	r3, r0
 80083f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80083f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff ff31 	bl	8008264 <__NVIC_EnableIRQ>
}
 8008402:	bf00      	nop
 8008404:	3708      	adds	r7, #8
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b082      	sub	sp, #8
 800840e:	af00      	add	r7, sp, #0
 8008410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f7ff ffa2 	bl	800835c <SysTick_Config>
 8008418:	4603      	mov	r3, r0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008430:	f7ff fac4 	bl	80079bc <HAL_GetTick>
 8008434:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e099      	b.n	8008574 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2202      	movs	r2, #2
 800844c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 0201 	bic.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008460:	e00f      	b.n	8008482 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008462:	f7ff faab 	bl	80079bc <HAL_GetTick>
 8008466:	4602      	mov	r2, r0
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	1ad3      	subs	r3, r2, r3
 800846c:	2b05      	cmp	r3, #5
 800846e:	d908      	bls.n	8008482 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2220      	movs	r2, #32
 8008474:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2203      	movs	r2, #3
 800847a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e078      	b.n	8008574 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d1e8      	bne.n	8008462 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008498:	697a      	ldr	r2, [r7, #20]
 800849a:	4b38      	ldr	r3, [pc, #224]	; (800857c <HAL_DMA_Init+0x158>)
 800849c:	4013      	ands	r3, r2
 800849e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685a      	ldr	r2, [r3, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	691b      	ldr	r3, [r3, #16]
 80084b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	699b      	ldr	r3, [r3, #24]
 80084c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a1b      	ldr	r3, [r3, #32]
 80084cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	2b04      	cmp	r3, #4
 80084da:	d107      	bne.n	80084ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e4:	4313      	orrs	r3, r2
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	4313      	orrs	r3, r2
 80084ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	697a      	ldr	r2, [r7, #20]
 80084f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f023 0307 	bic.w	r3, r3, #7
 8008502:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	4313      	orrs	r3, r2
 800850c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	2b04      	cmp	r3, #4
 8008514:	d117      	bne.n	8008546 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00e      	beq.n	8008546 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 fa6f 	bl	8008a0c <DMA_CheckFifoParam>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d008      	beq.n	8008546 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2240      	movs	r2, #64	; 0x40
 8008538:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008542:	2301      	movs	r3, #1
 8008544:	e016      	b.n	8008574 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	697a      	ldr	r2, [r7, #20]
 800854c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800854e:	6878      	ldr	r0, [r7, #4]
 8008550:	f000 fa26 	bl	80089a0 <DMA_CalcBaseAndBitshift>
 8008554:	4603      	mov	r3, r0
 8008556:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800855c:	223f      	movs	r2, #63	; 0x3f
 800855e:	409a      	lsls	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3718      	adds	r7, #24
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}
 800857c:	f010803f 	.word	0xf010803f

08008580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800858e:	2300      	movs	r3, #0
 8008590:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008596:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d101      	bne.n	80085a6 <HAL_DMA_Start_IT+0x26>
 80085a2:	2302      	movs	r3, #2
 80085a4:	e040      	b.n	8008628 <HAL_DMA_Start_IT+0xa8>
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2201      	movs	r2, #1
 80085aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d12f      	bne.n	800861a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2202      	movs	r2, #2
 80085be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	68b9      	ldr	r1, [r7, #8]
 80085ce:	68f8      	ldr	r0, [r7, #12]
 80085d0:	f000 f9b8 	bl	8008944 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d8:	223f      	movs	r2, #63	; 0x3f
 80085da:	409a      	lsls	r2, r3
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f042 0216 	orr.w	r2, r2, #22
 80085ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d007      	beq.n	8008608 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f042 0208 	orr.w	r2, r2, #8
 8008606:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f042 0201 	orr.w	r2, r2, #1
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	e005      	b.n	8008626 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008622:	2302      	movs	r3, #2
 8008624:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008626:	7dfb      	ldrb	r3, [r7, #23]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b086      	sub	sp, #24
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008638:	2300      	movs	r3, #0
 800863a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800863c:	4b92      	ldr	r3, [pc, #584]	; (8008888 <HAL_DMA_IRQHandler+0x258>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a92      	ldr	r2, [pc, #584]	; (800888c <HAL_DMA_IRQHandler+0x25c>)
 8008642:	fba2 2303 	umull	r2, r3, r2, r3
 8008646:	0a9b      	lsrs	r3, r3, #10
 8008648:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800864e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800865a:	2208      	movs	r2, #8
 800865c:	409a      	lsls	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	4013      	ands	r3, r2
 8008662:	2b00      	cmp	r3, #0
 8008664:	d01a      	beq.n	800869c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0304 	and.w	r3, r3, #4
 8008670:	2b00      	cmp	r3, #0
 8008672:	d013      	beq.n	800869c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 0204 	bic.w	r2, r2, #4
 8008682:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008688:	2208      	movs	r2, #8
 800868a:	409a      	lsls	r2, r3
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008694:	f043 0201 	orr.w	r2, r3, #1
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086a0:	2201      	movs	r2, #1
 80086a2:	409a      	lsls	r2, r3
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	4013      	ands	r3, r2
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d012      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	695b      	ldr	r3, [r3, #20]
 80086b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00b      	beq.n	80086d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086be:	2201      	movs	r2, #1
 80086c0:	409a      	lsls	r2, r3
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086ca:	f043 0202 	orr.w	r2, r3, #2
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d6:	2204      	movs	r2, #4
 80086d8:	409a      	lsls	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4013      	ands	r3, r2
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d012      	beq.n	8008708 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00b      	beq.n	8008708 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086f4:	2204      	movs	r2, #4
 80086f6:	409a      	lsls	r2, r3
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008700:	f043 0204 	orr.w	r2, r3, #4
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800870c:	2210      	movs	r2, #16
 800870e:	409a      	lsls	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4013      	ands	r3, r2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d043      	beq.n	80087a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0308 	and.w	r3, r3, #8
 8008722:	2b00      	cmp	r3, #0
 8008724:	d03c      	beq.n	80087a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800872a:	2210      	movs	r2, #16
 800872c:	409a      	lsls	r2, r3
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d018      	beq.n	8008772 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d108      	bne.n	8008760 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008752:	2b00      	cmp	r3, #0
 8008754:	d024      	beq.n	80087a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	4798      	blx	r3
 800875e:	e01f      	b.n	80087a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008764:	2b00      	cmp	r3, #0
 8008766:	d01b      	beq.n	80087a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	4798      	blx	r3
 8008770:	e016      	b.n	80087a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800877c:	2b00      	cmp	r3, #0
 800877e:	d107      	bne.n	8008790 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f022 0208 	bic.w	r2, r2, #8
 800878e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087a4:	2220      	movs	r2, #32
 80087a6:	409a      	lsls	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	4013      	ands	r3, r2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	f000 808e 	beq.w	80088ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f003 0310 	and.w	r3, r3, #16
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 8086 	beq.w	80088ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087c6:	2220      	movs	r2, #32
 80087c8:	409a      	lsls	r2, r3
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	2b05      	cmp	r3, #5
 80087d8:	d136      	bne.n	8008848 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f022 0216 	bic.w	r2, r2, #22
 80087e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	695a      	ldr	r2, [r3, #20]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d103      	bne.n	800880a <HAL_DMA_IRQHandler+0x1da>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008806:	2b00      	cmp	r3, #0
 8008808:	d007      	beq.n	800881a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0208 	bic.w	r2, r2, #8
 8008818:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881e:	223f      	movs	r2, #63	; 0x3f
 8008820:	409a      	lsls	r2, r3
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800883a:	2b00      	cmp	r3, #0
 800883c:	d07d      	beq.n	800893a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	4798      	blx	r3
        }
        return;
 8008846:	e078      	b.n	800893a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d01c      	beq.n	8008890 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d108      	bne.n	8008876 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008868:	2b00      	cmp	r3, #0
 800886a:	d030      	beq.n	80088ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	4798      	blx	r3
 8008874:	e02b      	b.n	80088ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887a:	2b00      	cmp	r3, #0
 800887c:	d027      	beq.n	80088ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	4798      	blx	r3
 8008886:	e022      	b.n	80088ce <HAL_DMA_IRQHandler+0x29e>
 8008888:	2000003c 	.word	0x2000003c
 800888c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10f      	bne.n	80088be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	681a      	ldr	r2, [r3, #0]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f022 0210 	bic.w	r2, r2, #16
 80088ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2201      	movs	r2, #1
 80088ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d003      	beq.n	80088ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d032      	beq.n	800893c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088da:	f003 0301 	and.w	r3, r3, #1
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d022      	beq.n	8008928 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2205      	movs	r2, #5
 80088e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f022 0201 	bic.w	r2, r2, #1
 80088f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	3301      	adds	r3, #1
 80088fe:	60bb      	str	r3, [r7, #8]
 8008900:	697a      	ldr	r2, [r7, #20]
 8008902:	429a      	cmp	r2, r3
 8008904:	d307      	bcc.n	8008916 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1f2      	bne.n	80088fa <HAL_DMA_IRQHandler+0x2ca>
 8008914:	e000      	b.n	8008918 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008916:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	4798      	blx	r3
 8008938:	e000      	b.n	800893c <HAL_DMA_IRQHandler+0x30c>
        return;
 800893a:	bf00      	nop
    }
  }
}
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop

08008944 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008944:	b480      	push	{r7}
 8008946:	b085      	sub	sp, #20
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	607a      	str	r2, [r7, #4]
 8008950:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008960:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	683a      	ldr	r2, [r7, #0]
 8008968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	2b40      	cmp	r3, #64	; 0x40
 8008970:	d108      	bne.n	8008984 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008982:	e007      	b.n	8008994 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68ba      	ldr	r2, [r7, #8]
 800898a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	60da      	str	r2, [r3, #12]
}
 8008994:	bf00      	nop
 8008996:	3714      	adds	r7, #20
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	3b10      	subs	r3, #16
 80089b0:	4a14      	ldr	r2, [pc, #80]	; (8008a04 <DMA_CalcBaseAndBitshift+0x64>)
 80089b2:	fba2 2303 	umull	r2, r3, r2, r3
 80089b6:	091b      	lsrs	r3, r3, #4
 80089b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80089ba:	4a13      	ldr	r2, [pc, #76]	; (8008a08 <DMA_CalcBaseAndBitshift+0x68>)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4413      	add	r3, r2
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b03      	cmp	r3, #3
 80089cc:	d909      	bls.n	80089e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80089d6:	f023 0303 	bic.w	r3, r3, #3
 80089da:	1d1a      	adds	r2, r3, #4
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	659a      	str	r2, [r3, #88]	; 0x58
 80089e0:	e007      	b.n	80089f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80089ea:	f023 0303 	bic.w	r3, r3, #3
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3714      	adds	r7, #20
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	aaaaaaab 	.word	0xaaaaaaab
 8008a08:	08012688 	.word	0x08012688

08008a0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d11f      	bne.n	8008a66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b03      	cmp	r3, #3
 8008a2a:	d855      	bhi.n	8008ad8 <DMA_CheckFifoParam+0xcc>
 8008a2c:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <DMA_CheckFifoParam+0x28>)
 8008a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a32:	bf00      	nop
 8008a34:	08008a45 	.word	0x08008a45
 8008a38:	08008a57 	.word	0x08008a57
 8008a3c:	08008a45 	.word	0x08008a45
 8008a40:	08008ad9 	.word	0x08008ad9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d045      	beq.n	8008adc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a54:	e042      	b.n	8008adc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a5e:	d13f      	bne.n	8008ae0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a64:	e03c      	b.n	8008ae0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a6e:	d121      	bne.n	8008ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d836      	bhi.n	8008ae4 <DMA_CheckFifoParam+0xd8>
 8008a76:	a201      	add	r2, pc, #4	; (adr r2, 8008a7c <DMA_CheckFifoParam+0x70>)
 8008a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a7c:	08008a8d 	.word	0x08008a8d
 8008a80:	08008a93 	.word	0x08008a93
 8008a84:	08008a8d 	.word	0x08008a8d
 8008a88:	08008aa5 	.word	0x08008aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a90:	e02f      	b.n	8008af2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d024      	beq.n	8008ae8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008aa2:	e021      	b.n	8008ae8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008aac:	d11e      	bne.n	8008aec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008ab2:	e01b      	b.n	8008aec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d902      	bls.n	8008ac0 <DMA_CheckFifoParam+0xb4>
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	d003      	beq.n	8008ac6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008abe:	e018      	b.n	8008af2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ac4:	e015      	b.n	8008af2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00e      	beq.n	8008af0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ad6:	e00b      	b.n	8008af0 <DMA_CheckFifoParam+0xe4>
      break;
 8008ad8:	bf00      	nop
 8008ada:	e00a      	b.n	8008af2 <DMA_CheckFifoParam+0xe6>
      break;
 8008adc:	bf00      	nop
 8008ade:	e008      	b.n	8008af2 <DMA_CheckFifoParam+0xe6>
      break;
 8008ae0:	bf00      	nop
 8008ae2:	e006      	b.n	8008af2 <DMA_CheckFifoParam+0xe6>
      break;
 8008ae4:	bf00      	nop
 8008ae6:	e004      	b.n	8008af2 <DMA_CheckFifoParam+0xe6>
      break;
 8008ae8:	bf00      	nop
 8008aea:	e002      	b.n	8008af2 <DMA_CheckFifoParam+0xe6>
      break;   
 8008aec:	bf00      	nop
 8008aee:	e000      	b.n	8008af2 <DMA_CheckFifoParam+0xe6>
      break;
 8008af0:	bf00      	nop
    }
  } 
  
  return status; 
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3714      	adds	r7, #20
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	; (8008b38 <HAL_FLASH_Unlock+0x38>)
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	da0b      	bge.n	8008b2a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008b12:	4b09      	ldr	r3, [pc, #36]	; (8008b38 <HAL_FLASH_Unlock+0x38>)
 8008b14:	4a09      	ldr	r2, [pc, #36]	; (8008b3c <HAL_FLASH_Unlock+0x3c>)
 8008b16:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008b18:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <HAL_FLASH_Unlock+0x38>)
 8008b1a:	4a09      	ldr	r2, [pc, #36]	; (8008b40 <HAL_FLASH_Unlock+0x40>)
 8008b1c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008b1e:	4b06      	ldr	r3, [pc, #24]	; (8008b38 <HAL_FLASH_Unlock+0x38>)
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	da01      	bge.n	8008b2a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008b26:	2301      	movs	r3, #1
 8008b28:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr
 8008b38:	40023c00 	.word	0x40023c00
 8008b3c:	45670123 	.word	0x45670123
 8008b40:	cdef89ab 	.word	0xcdef89ab

08008b44 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008b44:	b480      	push	{r7}
 8008b46:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8008b48:	4b05      	ldr	r3, [pc, #20]	; (8008b60 <HAL_FLASH_Lock+0x1c>)
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	4a04      	ldr	r2, [pc, #16]	; (8008b60 <HAL_FLASH_Lock+0x1c>)
 8008b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b52:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8008b54:	2300      	movs	r3, #0
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	40023c00 	.word	0x40023c00

08008b64 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008b70:	4b1a      	ldr	r3, [pc, #104]	; (8008bdc <FLASH_WaitForLastOperation+0x78>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8008b76:	f7fe ff21 	bl	80079bc <HAL_GetTick>
 8008b7a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008b7c:	e010      	b.n	8008ba0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b84:	d00c      	beq.n	8008ba0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d007      	beq.n	8008b9c <FLASH_WaitForLastOperation+0x38>
 8008b8c:	f7fe ff16 	bl	80079bc <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d201      	bcs.n	8008ba0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e019      	b.n	8008bd4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008ba0:	4b0f      	ldr	r3, [pc, #60]	; (8008be0 <FLASH_WaitForLastOperation+0x7c>)
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1e8      	bne.n	8008b7e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008bac:	4b0c      	ldr	r3, [pc, #48]	; (8008be0 <FLASH_WaitForLastOperation+0x7c>)
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f003 0301 	and.w	r3, r3, #1
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d002      	beq.n	8008bbe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008bb8:	4b09      	ldr	r3, [pc, #36]	; (8008be0 <FLASH_WaitForLastOperation+0x7c>)
 8008bba:	2201      	movs	r2, #1
 8008bbc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8008bbe:	4b08      	ldr	r3, [pc, #32]	; (8008be0 <FLASH_WaitForLastOperation+0x7c>)
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8008bca:	f000 f80b 	bl	8008be4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e000      	b.n	8008bd4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
  
}  
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	2001d0e4 	.word	0x2001d0e4
 8008be0:	40023c00 	.word	0x40023c00

08008be4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8008be4:	b480      	push	{r7}
 8008be6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008be8:	4b27      	ldr	r3, [pc, #156]	; (8008c88 <FLASH_SetErrorCode+0xa4>)
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	f003 0310 	and.w	r3, r3, #16
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d008      	beq.n	8008c06 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008bf4:	4b25      	ldr	r3, [pc, #148]	; (8008c8c <FLASH_SetErrorCode+0xa8>)
 8008bf6:	69db      	ldr	r3, [r3, #28]
 8008bf8:	f043 0310 	orr.w	r3, r3, #16
 8008bfc:	4a23      	ldr	r2, [pc, #140]	; (8008c8c <FLASH_SetErrorCode+0xa8>)
 8008bfe:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008c00:	4b21      	ldr	r3, [pc, #132]	; (8008c88 <FLASH_SetErrorCode+0xa4>)
 8008c02:	2210      	movs	r2, #16
 8008c04:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8008c06:	4b20      	ldr	r3, [pc, #128]	; (8008c88 <FLASH_SetErrorCode+0xa4>)
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	f003 0320 	and.w	r3, r3, #32
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d008      	beq.n	8008c24 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008c12:	4b1e      	ldr	r3, [pc, #120]	; (8008c8c <FLASH_SetErrorCode+0xa8>)
 8008c14:	69db      	ldr	r3, [r3, #28]
 8008c16:	f043 0308 	orr.w	r3, r3, #8
 8008c1a:	4a1c      	ldr	r2, [pc, #112]	; (8008c8c <FLASH_SetErrorCode+0xa8>)
 8008c1c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8008c1e:	4b1a      	ldr	r3, [pc, #104]	; (8008c88 <FLASH_SetErrorCode+0xa4>)
 8008c20:	2220      	movs	r2, #32
 8008c22:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8008c24:	4b18      	ldr	r3, [pc, #96]	; (8008c88 <FLASH_SetErrorCode+0xa4>)
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d008      	beq.n	8008c42 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8008c30:	4b16      	ldr	r3, [pc, #88]	; (8008c8c <FLASH_SetErrorCode+0xa8>)
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	f043 0304 	orr.w	r3, r3, #4
 8008c38:	4a14      	ldr	r2, [pc, #80]	; (8008c8c <FLASH_SetErrorCode+0xa8>)
 8008c3a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008c3c:	4b12      	ldr	r3, [pc, #72]	; (8008c88 <FLASH_SetErrorCode+0xa4>)
 8008c3e:	2240      	movs	r2, #64	; 0x40
 8008c40:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8008c42:	4b11      	ldr	r3, [pc, #68]	; (8008c88 <FLASH_SetErrorCode+0xa4>)
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d008      	beq.n	8008c60 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008c4e:	4b0f      	ldr	r3, [pc, #60]	; (8008c8c <FLASH_SetErrorCode+0xa8>)
 8008c50:	69db      	ldr	r3, [r3, #28]
 8008c52:	f043 0302 	orr.w	r3, r3, #2
 8008c56:	4a0d      	ldr	r2, [pc, #52]	; (8008c8c <FLASH_SetErrorCode+0xa8>)
 8008c58:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008c5a:	4b0b      	ldr	r3, [pc, #44]	; (8008c88 <FLASH_SetErrorCode+0xa4>)
 8008c5c:	2280      	movs	r2, #128	; 0x80
 8008c5e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008c60:	4b09      	ldr	r3, [pc, #36]	; (8008c88 <FLASH_SetErrorCode+0xa4>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	f003 0302 	and.w	r3, r3, #2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d008      	beq.n	8008c7e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8008c6c:	4b07      	ldr	r3, [pc, #28]	; (8008c8c <FLASH_SetErrorCode+0xa8>)
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	f043 0320 	orr.w	r3, r3, #32
 8008c74:	4a05      	ldr	r2, [pc, #20]	; (8008c8c <FLASH_SetErrorCode+0xa8>)
 8008c76:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8008c78:	4b03      	ldr	r3, [pc, #12]	; (8008c88 <FLASH_SetErrorCode+0xa4>)
 8008c7a:	2202      	movs	r2, #2
 8008c7c:	60da      	str	r2, [r3, #12]
  }
}
 8008c7e:	bf00      	nop
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	40023c00 	.word	0x40023c00
 8008c8c:	2001d0e4 	.word	0x2001d0e4

08008c90 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008ca2:	4b31      	ldr	r3, [pc, #196]	; (8008d68 <HAL_FLASHEx_Erase+0xd8>)
 8008ca4:	7e1b      	ldrb	r3, [r3, #24]
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d101      	bne.n	8008cae <HAL_FLASHEx_Erase+0x1e>
 8008caa:	2302      	movs	r3, #2
 8008cac:	e058      	b.n	8008d60 <HAL_FLASHEx_Erase+0xd0>
 8008cae:	4b2e      	ldr	r3, [pc, #184]	; (8008d68 <HAL_FLASHEx_Erase+0xd8>)
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008cb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008cb8:	f7ff ff54 	bl	8008b64 <FLASH_WaitForLastOperation>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8008cc0:	7bfb      	ldrb	r3, [r7, #15]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d148      	bne.n	8008d58 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ccc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d115      	bne.n	8008d02 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	4610      	mov	r0, r2
 8008ce4:	f000 f844 	bl	8008d70 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008ce8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008cec:	f7ff ff3a 	bl	8008b64 <FLASH_WaitForLastOperation>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8008cf4:	4b1d      	ldr	r3, [pc, #116]	; (8008d6c <HAL_FLASHEx_Erase+0xdc>)
 8008cf6:	691b      	ldr	r3, [r3, #16]
 8008cf8:	4a1c      	ldr	r2, [pc, #112]	; (8008d6c <HAL_FLASHEx_Erase+0xdc>)
 8008cfa:	f023 0304 	bic.w	r3, r3, #4
 8008cfe:	6113      	str	r3, [r2, #16]
 8008d00:	e028      	b.n	8008d54 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	60bb      	str	r3, [r7, #8]
 8008d08:	e01c      	b.n	8008d44 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	b2db      	uxtb	r3, r3
 8008d10:	4619      	mov	r1, r3
 8008d12:	68b8      	ldr	r0, [r7, #8]
 8008d14:	f000 f850 	bl	8008db8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008d18:	f24c 3050 	movw	r0, #50000	; 0xc350
 8008d1c:	f7ff ff22 	bl	8008b64 <FLASH_WaitForLastOperation>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8008d24:	4b11      	ldr	r3, [pc, #68]	; (8008d6c <HAL_FLASHEx_Erase+0xdc>)
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	4a10      	ldr	r2, [pc, #64]	; (8008d6c <HAL_FLASHEx_Erase+0xdc>)
 8008d2a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8008d2e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8008d30:	7bfb      	ldrb	r3, [r7, #15]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	601a      	str	r2, [r3, #0]
          break;
 8008d3c:	e00a      	b.n	8008d54 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	3301      	adds	r3, #1
 8008d42:	60bb      	str	r3, [r7, #8]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	68ba      	ldr	r2, [r7, #8]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d3da      	bcc.n	8008d0a <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8008d54:	f000 f878 	bl	8008e48 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008d58:	4b03      	ldr	r3, [pc, #12]	; (8008d68 <HAL_FLASHEx_Erase+0xd8>)
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	761a      	strb	r2, [r3, #24]

  return status;
 8008d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3710      	adds	r7, #16
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	2001d0e4 	.word	0x2001d0e4
 8008d6c:	40023c00 	.word	0x40023c00

08008d70 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	6039      	str	r1, [r7, #0]
 8008d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008d7c:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <FLASH_MassErase+0x44>)
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	4a0c      	ldr	r2, [pc, #48]	; (8008db4 <FLASH_MassErase+0x44>)
 8008d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8008d88:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <FLASH_MassErase+0x44>)
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	4a09      	ldr	r2, [pc, #36]	; (8008db4 <FLASH_MassErase+0x44>)
 8008d8e:	f043 0304 	orr.w	r3, r3, #4
 8008d92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8008d94:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <FLASH_MassErase+0x44>)
 8008d96:	691a      	ldr	r2, [r3, #16]
 8008d98:	79fb      	ldrb	r3, [r7, #7]
 8008d9a:	021b      	lsls	r3, r3, #8
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	4a05      	ldr	r2, [pc, #20]	; (8008db4 <FLASH_MassErase+0x44>)
 8008da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008da4:	6113      	str	r3, [r2, #16]
}
 8008da6:	bf00      	nop
 8008da8:	370c      	adds	r7, #12
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	40023c00 	.word	0x40023c00

08008db8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60fb      	str	r3, [r7, #12]
 8008dd2:	e010      	b.n	8008df6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d103      	bne.n	8008de2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8008dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	e009      	b.n	8008df6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d103      	bne.n	8008df0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	e002      	b.n	8008df6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008df0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008df4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008df6:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	4a12      	ldr	r2, [pc, #72]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8008e02:	4b10      	ldr	r3, [pc, #64]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e04:	691a      	ldr	r2, [r3, #16]
 8008e06:	490f      	ldr	r1, [pc, #60]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	4a0c      	ldr	r2, [pc, #48]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e14:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008e18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8008e1a:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	4313      	orrs	r3, r2
 8008e24:	4a07      	ldr	r2, [pc, #28]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e26:	f043 0302 	orr.w	r3, r3, #2
 8008e2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008e2c:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	4a04      	ldr	r2, [pc, #16]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e36:	6113      	str	r3, [r2, #16]
}
 8008e38:	bf00      	nop
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	40023c00 	.word	0x40023c00

08008e48 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8008e4c:	4b20      	ldr	r3, [pc, #128]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d017      	beq.n	8008e88 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008e58:	4b1d      	ldr	r3, [pc, #116]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a1c      	ldr	r2, [pc, #112]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e62:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008e64:	4b1a      	ldr	r3, [pc, #104]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a19      	ldr	r2, [pc, #100]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	4b17      	ldr	r3, [pc, #92]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a16      	ldr	r2, [pc, #88]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e7a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e7c:	4b14      	ldr	r3, [pc, #80]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a13      	ldr	r2, [pc, #76]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e86:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008e88:	4b11      	ldr	r3, [pc, #68]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d017      	beq.n	8008ec4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008e94:	4b0e      	ldr	r3, [pc, #56]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a0d      	ldr	r2, [pc, #52]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e9e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008ea0:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a0a      	ldr	r2, [pc, #40]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008ea6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a07      	ldr	r2, [pc, #28]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eb6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008eb8:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a04      	ldr	r2, [pc, #16]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ec2:	6013      	str	r3, [r2, #0]
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	40023c00 	.word	0x40023c00

08008ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b089      	sub	sp, #36	; 0x24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	e16b      	b.n	80091c8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4013      	ands	r3, r2
 8008f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	f040 815a 	bne.w	80091c2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	2b01      	cmp	r3, #1
 8008f14:	d00b      	beq.n	8008f2e <HAL_GPIO_Init+0x5a>
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	2b02      	cmp	r3, #2
 8008f1c:	d007      	beq.n	8008f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008f22:	2b11      	cmp	r3, #17
 8008f24:	d003      	beq.n	8008f2e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	2b12      	cmp	r3, #18
 8008f2c:	d130      	bne.n	8008f90 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	005b      	lsls	r3, r3, #1
 8008f38:	2203      	movs	r2, #3
 8008f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f3e:	43db      	mvns	r3, r3
 8008f40:	69ba      	ldr	r2, [r7, #24]
 8008f42:	4013      	ands	r3, r2
 8008f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	68da      	ldr	r2, [r3, #12]
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	005b      	lsls	r3, r3, #1
 8008f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f64:	2201      	movs	r2, #1
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	fa02 f303 	lsl.w	r3, r2, r3
 8008f6c:	43db      	mvns	r3, r3
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	4013      	ands	r3, r2
 8008f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	091b      	lsrs	r3, r3, #4
 8008f7a:	f003 0201 	and.w	r2, r3, #1
 8008f7e:	69fb      	ldr	r3, [r7, #28]
 8008f80:	fa02 f303 	lsl.w	r3, r2, r3
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	69ba      	ldr	r2, [r7, #24]
 8008f8e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	68db      	ldr	r3, [r3, #12]
 8008f94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	2203      	movs	r2, #3
 8008f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa0:	43db      	mvns	r3, r3
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	005b      	lsls	r3, r3, #1
 8008fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	69ba      	ldr	r2, [r7, #24]
 8008fbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d003      	beq.n	8008fd0 <HAL_GPIO_Init+0xfc>
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	2b12      	cmp	r3, #18
 8008fce:	d123      	bne.n	8009018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	08da      	lsrs	r2, r3, #3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3208      	adds	r2, #8
 8008fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	220f      	movs	r2, #15
 8008fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fec:	43db      	mvns	r3, r3
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	691a      	ldr	r2, [r3, #16]
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	fa02 f303 	lsl.w	r3, r2, r3
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	4313      	orrs	r3, r2
 8009008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	08da      	lsrs	r2, r3, #3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3208      	adds	r2, #8
 8009012:	69b9      	ldr	r1, [r7, #24]
 8009014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	2203      	movs	r2, #3
 8009024:	fa02 f303 	lsl.w	r3, r2, r3
 8009028:	43db      	mvns	r3, r3
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	4013      	ands	r3, r2
 800902e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f003 0203 	and.w	r2, r3, #3
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	005b      	lsls	r3, r3, #1
 800903c:	fa02 f303 	lsl.w	r3, r2, r3
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	4313      	orrs	r3, r2
 8009044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 80b4 	beq.w	80091c2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	4b5f      	ldr	r3, [pc, #380]	; (80091dc <HAL_GPIO_Init+0x308>)
 8009060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009062:	4a5e      	ldr	r2, [pc, #376]	; (80091dc <HAL_GPIO_Init+0x308>)
 8009064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009068:	6453      	str	r3, [r2, #68]	; 0x44
 800906a:	4b5c      	ldr	r3, [pc, #368]	; (80091dc <HAL_GPIO_Init+0x308>)
 800906c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009076:	4a5a      	ldr	r2, [pc, #360]	; (80091e0 <HAL_GPIO_Init+0x30c>)
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	089b      	lsrs	r3, r3, #2
 800907c:	3302      	adds	r3, #2
 800907e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	220f      	movs	r2, #15
 800908e:	fa02 f303 	lsl.w	r3, r2, r3
 8009092:	43db      	mvns	r3, r3
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	4013      	ands	r3, r2
 8009098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a51      	ldr	r2, [pc, #324]	; (80091e4 <HAL_GPIO_Init+0x310>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d02b      	beq.n	80090fa <HAL_GPIO_Init+0x226>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a50      	ldr	r2, [pc, #320]	; (80091e8 <HAL_GPIO_Init+0x314>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d025      	beq.n	80090f6 <HAL_GPIO_Init+0x222>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a4f      	ldr	r2, [pc, #316]	; (80091ec <HAL_GPIO_Init+0x318>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d01f      	beq.n	80090f2 <HAL_GPIO_Init+0x21e>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a4e      	ldr	r2, [pc, #312]	; (80091f0 <HAL_GPIO_Init+0x31c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d019      	beq.n	80090ee <HAL_GPIO_Init+0x21a>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a4d      	ldr	r2, [pc, #308]	; (80091f4 <HAL_GPIO_Init+0x320>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d013      	beq.n	80090ea <HAL_GPIO_Init+0x216>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a4c      	ldr	r2, [pc, #304]	; (80091f8 <HAL_GPIO_Init+0x324>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d00d      	beq.n	80090e6 <HAL_GPIO_Init+0x212>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a4b      	ldr	r2, [pc, #300]	; (80091fc <HAL_GPIO_Init+0x328>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d007      	beq.n	80090e2 <HAL_GPIO_Init+0x20e>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a4a      	ldr	r2, [pc, #296]	; (8009200 <HAL_GPIO_Init+0x32c>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d101      	bne.n	80090de <HAL_GPIO_Init+0x20a>
 80090da:	2307      	movs	r3, #7
 80090dc:	e00e      	b.n	80090fc <HAL_GPIO_Init+0x228>
 80090de:	2308      	movs	r3, #8
 80090e0:	e00c      	b.n	80090fc <HAL_GPIO_Init+0x228>
 80090e2:	2306      	movs	r3, #6
 80090e4:	e00a      	b.n	80090fc <HAL_GPIO_Init+0x228>
 80090e6:	2305      	movs	r3, #5
 80090e8:	e008      	b.n	80090fc <HAL_GPIO_Init+0x228>
 80090ea:	2304      	movs	r3, #4
 80090ec:	e006      	b.n	80090fc <HAL_GPIO_Init+0x228>
 80090ee:	2303      	movs	r3, #3
 80090f0:	e004      	b.n	80090fc <HAL_GPIO_Init+0x228>
 80090f2:	2302      	movs	r3, #2
 80090f4:	e002      	b.n	80090fc <HAL_GPIO_Init+0x228>
 80090f6:	2301      	movs	r3, #1
 80090f8:	e000      	b.n	80090fc <HAL_GPIO_Init+0x228>
 80090fa:	2300      	movs	r3, #0
 80090fc:	69fa      	ldr	r2, [r7, #28]
 80090fe:	f002 0203 	and.w	r2, r2, #3
 8009102:	0092      	lsls	r2, r2, #2
 8009104:	4093      	lsls	r3, r2
 8009106:	69ba      	ldr	r2, [r7, #24]
 8009108:	4313      	orrs	r3, r2
 800910a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800910c:	4934      	ldr	r1, [pc, #208]	; (80091e0 <HAL_GPIO_Init+0x30c>)
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	089b      	lsrs	r3, r3, #2
 8009112:	3302      	adds	r3, #2
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800911a:	4b3a      	ldr	r3, [pc, #232]	; (8009204 <HAL_GPIO_Init+0x330>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	43db      	mvns	r3, r3
 8009124:	69ba      	ldr	r2, [r7, #24]
 8009126:	4013      	ands	r3, r2
 8009128:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8009136:	69ba      	ldr	r2, [r7, #24]
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	4313      	orrs	r3, r2
 800913c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800913e:	4a31      	ldr	r2, [pc, #196]	; (8009204 <HAL_GPIO_Init+0x330>)
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8009144:	4b2f      	ldr	r3, [pc, #188]	; (8009204 <HAL_GPIO_Init+0x330>)
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	43db      	mvns	r3, r3
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	4013      	ands	r3, r2
 8009152:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	685b      	ldr	r3, [r3, #4]
 8009158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d003      	beq.n	8009168 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8009160:	69ba      	ldr	r2, [r7, #24]
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	4313      	orrs	r3, r2
 8009166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009168:	4a26      	ldr	r2, [pc, #152]	; (8009204 <HAL_GPIO_Init+0x330>)
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800916e:	4b25      	ldr	r3, [pc, #148]	; (8009204 <HAL_GPIO_Init+0x330>)
 8009170:	689b      	ldr	r3, [r3, #8]
 8009172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	43db      	mvns	r3, r3
 8009178:	69ba      	ldr	r2, [r7, #24]
 800917a:	4013      	ands	r3, r2
 800917c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800918a:	69ba      	ldr	r2, [r7, #24]
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	4313      	orrs	r3, r2
 8009190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009192:	4a1c      	ldr	r2, [pc, #112]	; (8009204 <HAL_GPIO_Init+0x330>)
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009198:	4b1a      	ldr	r3, [pc, #104]	; (8009204 <HAL_GPIO_Init+0x330>)
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	43db      	mvns	r3, r3
 80091a2:	69ba      	ldr	r2, [r7, #24]
 80091a4:	4013      	ands	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80091b4:	69ba      	ldr	r2, [r7, #24]
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80091bc:	4a11      	ldr	r2, [pc, #68]	; (8009204 <HAL_GPIO_Init+0x330>)
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	3301      	adds	r3, #1
 80091c6:	61fb      	str	r3, [r7, #28]
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	2b0f      	cmp	r3, #15
 80091cc:	f67f ae90 	bls.w	8008ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80091d0:	bf00      	nop
 80091d2:	3724      	adds	r7, #36	; 0x24
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	40023800 	.word	0x40023800
 80091e0:	40013800 	.word	0x40013800
 80091e4:	40020000 	.word	0x40020000
 80091e8:	40020400 	.word	0x40020400
 80091ec:	40020800 	.word	0x40020800
 80091f0:	40020c00 	.word	0x40020c00
 80091f4:	40021000 	.word	0x40021000
 80091f8:	40021400 	.word	0x40021400
 80091fc:	40021800 	.word	0x40021800
 8009200:	40021c00 	.word	0x40021c00
 8009204:	40013c00 	.word	0x40013c00

08009208 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
 8009210:	460b      	mov	r3, r1
 8009212:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	691a      	ldr	r2, [r3, #16]
 8009218:	887b      	ldrh	r3, [r7, #2]
 800921a:	4013      	ands	r3, r2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009220:	2301      	movs	r3, #1
 8009222:	73fb      	strb	r3, [r7, #15]
 8009224:	e001      	b.n	800922a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009226:	2300      	movs	r3, #0
 8009228:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800922a:	7bfb      	ldrb	r3, [r7, #15]
}
 800922c:	4618      	mov	r0, r3
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009238:	b480      	push	{r7}
 800923a:	b083      	sub	sp, #12
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	807b      	strh	r3, [r7, #2]
 8009244:	4613      	mov	r3, r2
 8009246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009248:	787b      	ldrb	r3, [r7, #1]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800924e:	887a      	ldrh	r2, [r7, #2]
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009254:	e003      	b.n	800925e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009256:	887b      	ldrh	r3, [r7, #2]
 8009258:	041a      	lsls	r2, r3, #16
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	619a      	str	r2, [r3, #24]
}
 800925e:	bf00      	nop
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
	...

0800926c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d101      	bne.n	800927e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e11f      	b.n	80094be <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009284:	b2db      	uxtb	r3, r3
 8009286:	2b00      	cmp	r3, #0
 8009288:	d106      	bne.n	8009298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7fd ff96 	bl	80071c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2224      	movs	r2, #36	; 0x24
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f022 0201 	bic.w	r2, r2, #1
 80092ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	681a      	ldr	r2, [r3, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80092be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80092ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80092d0:	f000 fd18 	bl	8009d04 <HAL_RCC_GetPCLK1Freq>
 80092d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	4a7b      	ldr	r2, [pc, #492]	; (80094c8 <HAL_I2C_Init+0x25c>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d807      	bhi.n	80092f0 <HAL_I2C_Init+0x84>
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4a7a      	ldr	r2, [pc, #488]	; (80094cc <HAL_I2C_Init+0x260>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	bf94      	ite	ls
 80092e8:	2301      	movls	r3, #1
 80092ea:	2300      	movhi	r3, #0
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	e006      	b.n	80092fe <HAL_I2C_Init+0x92>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4a77      	ldr	r2, [pc, #476]	; (80094d0 <HAL_I2C_Init+0x264>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	bf94      	ite	ls
 80092f8:	2301      	movls	r3, #1
 80092fa:	2300      	movhi	r3, #0
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e0db      	b.n	80094be <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	4a72      	ldr	r2, [pc, #456]	; (80094d4 <HAL_I2C_Init+0x268>)
 800930a:	fba2 2303 	umull	r2, r3, r2, r3
 800930e:	0c9b      	lsrs	r3, r3, #18
 8009310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	430a      	orrs	r2, r1
 8009324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	4a64      	ldr	r2, [pc, #400]	; (80094c8 <HAL_I2C_Init+0x25c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d802      	bhi.n	8009340 <HAL_I2C_Init+0xd4>
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	3301      	adds	r3, #1
 800933e:	e009      	b.n	8009354 <HAL_I2C_Init+0xe8>
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009346:	fb02 f303 	mul.w	r3, r2, r3
 800934a:	4a63      	ldr	r2, [pc, #396]	; (80094d8 <HAL_I2C_Init+0x26c>)
 800934c:	fba2 2303 	umull	r2, r3, r2, r3
 8009350:	099b      	lsrs	r3, r3, #6
 8009352:	3301      	adds	r3, #1
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	6812      	ldr	r2, [r2, #0]
 8009358:	430b      	orrs	r3, r1
 800935a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	69db      	ldr	r3, [r3, #28]
 8009362:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	4956      	ldr	r1, [pc, #344]	; (80094c8 <HAL_I2C_Init+0x25c>)
 8009370:	428b      	cmp	r3, r1
 8009372:	d80d      	bhi.n	8009390 <HAL_I2C_Init+0x124>
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	1e59      	subs	r1, r3, #1
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	005b      	lsls	r3, r3, #1
 800937e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009382:	3301      	adds	r3, #1
 8009384:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009388:	2b04      	cmp	r3, #4
 800938a:	bf38      	it	cc
 800938c:	2304      	movcc	r3, #4
 800938e:	e04f      	b.n	8009430 <HAL_I2C_Init+0x1c4>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d111      	bne.n	80093bc <HAL_I2C_Init+0x150>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	1e58      	subs	r0, r3, #1
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6859      	ldr	r1, [r3, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	440b      	add	r3, r1
 80093a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80093aa:	3301      	adds	r3, #1
 80093ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	bf0c      	ite	eq
 80093b4:	2301      	moveq	r3, #1
 80093b6:	2300      	movne	r3, #0
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	e012      	b.n	80093e2 <HAL_I2C_Init+0x176>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	1e58      	subs	r0, r3, #1
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6859      	ldr	r1, [r3, #4]
 80093c4:	460b      	mov	r3, r1
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	440b      	add	r3, r1
 80093ca:	0099      	lsls	r1, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80093d2:	3301      	adds	r3, #1
 80093d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093d8:	2b00      	cmp	r3, #0
 80093da:	bf0c      	ite	eq
 80093dc:	2301      	moveq	r3, #1
 80093de:	2300      	movne	r3, #0
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <HAL_I2C_Init+0x17e>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e022      	b.n	8009430 <HAL_I2C_Init+0x1c4>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10e      	bne.n	8009410 <HAL_I2C_Init+0x1a4>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	1e58      	subs	r0, r3, #1
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6859      	ldr	r1, [r3, #4]
 80093fa:	460b      	mov	r3, r1
 80093fc:	005b      	lsls	r3, r3, #1
 80093fe:	440b      	add	r3, r1
 8009400:	fbb0 f3f3 	udiv	r3, r0, r3
 8009404:	3301      	adds	r3, #1
 8009406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800940a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800940e:	e00f      	b.n	8009430 <HAL_I2C_Init+0x1c4>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	1e58      	subs	r0, r3, #1
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6859      	ldr	r1, [r3, #4]
 8009418:	460b      	mov	r3, r1
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	0099      	lsls	r1, r3, #2
 8009420:	440b      	add	r3, r1
 8009422:	fbb0 f3f3 	udiv	r3, r0, r3
 8009426:	3301      	adds	r3, #1
 8009428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800942c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009430:	6879      	ldr	r1, [r7, #4]
 8009432:	6809      	ldr	r1, [r1, #0]
 8009434:	4313      	orrs	r3, r2
 8009436:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	69da      	ldr	r2, [r3, #28]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	430a      	orrs	r2, r1
 8009452:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800945e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	6911      	ldr	r1, [r2, #16]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	68d2      	ldr	r2, [r2, #12]
 800946a:	4311      	orrs	r1, r2
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	6812      	ldr	r2, [r2, #0]
 8009470:	430b      	orrs	r3, r1
 8009472:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	695a      	ldr	r2, [r3, #20]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	699b      	ldr	r3, [r3, #24]
 8009486:	431a      	orrs	r2, r3
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	430a      	orrs	r2, r1
 800948e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f042 0201 	orr.w	r2, r2, #1
 800949e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	000186a0 	.word	0x000186a0
 80094cc:	001e847f 	.word	0x001e847f
 80094d0:	003d08ff 	.word	0x003d08ff
 80094d4:	431bde83 	.word	0x431bde83
 80094d8:	10624dd3 	.word	0x10624dd3

080094dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b086      	sub	sp, #24
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d101      	bne.n	80094ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80094ea:	2301      	movs	r3, #1
 80094ec:	e25b      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0301 	and.w	r3, r3, #1
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d075      	beq.n	80095e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80094fa:	4ba3      	ldr	r3, [pc, #652]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f003 030c 	and.w	r3, r3, #12
 8009502:	2b04      	cmp	r3, #4
 8009504:	d00c      	beq.n	8009520 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009506:	4ba0      	ldr	r3, [pc, #640]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800950e:	2b08      	cmp	r3, #8
 8009510:	d112      	bne.n	8009538 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009512:	4b9d      	ldr	r3, [pc, #628]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800951a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800951e:	d10b      	bne.n	8009538 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009520:	4b99      	ldr	r3, [pc, #612]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d05b      	beq.n	80095e4 <HAL_RCC_OscConfig+0x108>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d157      	bne.n	80095e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e236      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009540:	d106      	bne.n	8009550 <HAL_RCC_OscConfig+0x74>
 8009542:	4b91      	ldr	r3, [pc, #580]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a90      	ldr	r2, [pc, #576]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800954c:	6013      	str	r3, [r2, #0]
 800954e:	e01d      	b.n	800958c <HAL_RCC_OscConfig+0xb0>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009558:	d10c      	bne.n	8009574 <HAL_RCC_OscConfig+0x98>
 800955a:	4b8b      	ldr	r3, [pc, #556]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	4a8a      	ldr	r2, [pc, #552]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009564:	6013      	str	r3, [r2, #0]
 8009566:	4b88      	ldr	r3, [pc, #544]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a87      	ldr	r2, [pc, #540]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 800956c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	e00b      	b.n	800958c <HAL_RCC_OscConfig+0xb0>
 8009574:	4b84      	ldr	r3, [pc, #528]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a83      	ldr	r2, [pc, #524]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 800957a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800957e:	6013      	str	r3, [r2, #0]
 8009580:	4b81      	ldr	r3, [pc, #516]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a80      	ldr	r2, [pc, #512]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800958a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d013      	beq.n	80095bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009594:	f7fe fa12 	bl	80079bc <HAL_GetTick>
 8009598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800959a:	e008      	b.n	80095ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800959c:	f7fe fa0e 	bl	80079bc <HAL_GetTick>
 80095a0:	4602      	mov	r2, r0
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	2b64      	cmp	r3, #100	; 0x64
 80095a8:	d901      	bls.n	80095ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80095aa:	2303      	movs	r3, #3
 80095ac:	e1fb      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80095ae:	4b76      	ldr	r3, [pc, #472]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0f0      	beq.n	800959c <HAL_RCC_OscConfig+0xc0>
 80095ba:	e014      	b.n	80095e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095bc:	f7fe f9fe 	bl	80079bc <HAL_GetTick>
 80095c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095c2:	e008      	b.n	80095d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80095c4:	f7fe f9fa 	bl	80079bc <HAL_GetTick>
 80095c8:	4602      	mov	r2, r0
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	1ad3      	subs	r3, r2, r3
 80095ce:	2b64      	cmp	r3, #100	; 0x64
 80095d0:	d901      	bls.n	80095d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80095d2:	2303      	movs	r3, #3
 80095d4:	e1e7      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80095d6:	4b6c      	ldr	r3, [pc, #432]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1f0      	bne.n	80095c4 <HAL_RCC_OscConfig+0xe8>
 80095e2:	e000      	b.n	80095e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80095e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0302 	and.w	r3, r3, #2
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d063      	beq.n	80096ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80095f2:	4b65      	ldr	r3, [pc, #404]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f003 030c 	and.w	r3, r3, #12
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d00b      	beq.n	8009616 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80095fe:	4b62      	ldr	r3, [pc, #392]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009606:	2b08      	cmp	r3, #8
 8009608:	d11c      	bne.n	8009644 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800960a:	4b5f      	ldr	r3, [pc, #380]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d116      	bne.n	8009644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009616:	4b5c      	ldr	r3, [pc, #368]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f003 0302 	and.w	r3, r3, #2
 800961e:	2b00      	cmp	r3, #0
 8009620:	d005      	beq.n	800962e <HAL_RCC_OscConfig+0x152>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	2b01      	cmp	r3, #1
 8009628:	d001      	beq.n	800962e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e1bb      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800962e:	4b56      	ldr	r3, [pc, #344]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	00db      	lsls	r3, r3, #3
 800963c:	4952      	ldr	r1, [pc, #328]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 800963e:	4313      	orrs	r3, r2
 8009640:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009642:	e03a      	b.n	80096ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d020      	beq.n	800968e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800964c:	4b4f      	ldr	r3, [pc, #316]	; (800978c <HAL_RCC_OscConfig+0x2b0>)
 800964e:	2201      	movs	r2, #1
 8009650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009652:	f7fe f9b3 	bl	80079bc <HAL_GetTick>
 8009656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009658:	e008      	b.n	800966c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800965a:	f7fe f9af 	bl	80079bc <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	2b02      	cmp	r3, #2
 8009666:	d901      	bls.n	800966c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009668:	2303      	movs	r3, #3
 800966a:	e19c      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800966c:	4b46      	ldr	r3, [pc, #280]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	2b00      	cmp	r3, #0
 8009676:	d0f0      	beq.n	800965a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009678:	4b43      	ldr	r3, [pc, #268]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	00db      	lsls	r3, r3, #3
 8009686:	4940      	ldr	r1, [pc, #256]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009688:	4313      	orrs	r3, r2
 800968a:	600b      	str	r3, [r1, #0]
 800968c:	e015      	b.n	80096ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800968e:	4b3f      	ldr	r3, [pc, #252]	; (800978c <HAL_RCC_OscConfig+0x2b0>)
 8009690:	2200      	movs	r2, #0
 8009692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009694:	f7fe f992 	bl	80079bc <HAL_GetTick>
 8009698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800969a:	e008      	b.n	80096ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800969c:	f7fe f98e 	bl	80079bc <HAL_GetTick>
 80096a0:	4602      	mov	r2, r0
 80096a2:	693b      	ldr	r3, [r7, #16]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d901      	bls.n	80096ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e17b      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80096ae:	4b36      	ldr	r3, [pc, #216]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0302 	and.w	r3, r3, #2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1f0      	bne.n	800969c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f003 0308 	and.w	r3, r3, #8
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d030      	beq.n	8009728 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d016      	beq.n	80096fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80096ce:	4b30      	ldr	r3, [pc, #192]	; (8009790 <HAL_RCC_OscConfig+0x2b4>)
 80096d0:	2201      	movs	r2, #1
 80096d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096d4:	f7fe f972 	bl	80079bc <HAL_GetTick>
 80096d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096da:	e008      	b.n	80096ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80096dc:	f7fe f96e 	bl	80079bc <HAL_GetTick>
 80096e0:	4602      	mov	r2, r0
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	1ad3      	subs	r3, r2, r3
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d901      	bls.n	80096ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e15b      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80096ee:	4b26      	ldr	r3, [pc, #152]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 80096f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096f2:	f003 0302 	and.w	r3, r3, #2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d0f0      	beq.n	80096dc <HAL_RCC_OscConfig+0x200>
 80096fa:	e015      	b.n	8009728 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80096fc:	4b24      	ldr	r3, [pc, #144]	; (8009790 <HAL_RCC_OscConfig+0x2b4>)
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009702:	f7fe f95b 	bl	80079bc <HAL_GetTick>
 8009706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009708:	e008      	b.n	800971c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800970a:	f7fe f957 	bl	80079bc <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	2b02      	cmp	r3, #2
 8009716:	d901      	bls.n	800971c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009718:	2303      	movs	r3, #3
 800971a:	e144      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800971c:	4b1a      	ldr	r3, [pc, #104]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 800971e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1f0      	bne.n	800970a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 80a0 	beq.w	8009876 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009736:	2300      	movs	r3, #0
 8009738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800973a:	4b13      	ldr	r3, [pc, #76]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 800973c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800973e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d10f      	bne.n	8009766 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009746:	2300      	movs	r3, #0
 8009748:	60bb      	str	r3, [r7, #8]
 800974a:	4b0f      	ldr	r3, [pc, #60]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 800974c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974e:	4a0e      	ldr	r2, [pc, #56]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009754:	6413      	str	r3, [r2, #64]	; 0x40
 8009756:	4b0c      	ldr	r3, [pc, #48]	; (8009788 <HAL_RCC_OscConfig+0x2ac>)
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800975e:	60bb      	str	r3, [r7, #8]
 8009760:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009762:	2301      	movs	r3, #1
 8009764:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009766:	4b0b      	ldr	r3, [pc, #44]	; (8009794 <HAL_RCC_OscConfig+0x2b8>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976e:	2b00      	cmp	r3, #0
 8009770:	d121      	bne.n	80097b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009772:	4b08      	ldr	r3, [pc, #32]	; (8009794 <HAL_RCC_OscConfig+0x2b8>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a07      	ldr	r2, [pc, #28]	; (8009794 <HAL_RCC_OscConfig+0x2b8>)
 8009778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800977c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800977e:	f7fe f91d 	bl	80079bc <HAL_GetTick>
 8009782:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009784:	e011      	b.n	80097aa <HAL_RCC_OscConfig+0x2ce>
 8009786:	bf00      	nop
 8009788:	40023800 	.word	0x40023800
 800978c:	42470000 	.word	0x42470000
 8009790:	42470e80 	.word	0x42470e80
 8009794:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009798:	f7fe f910 	bl	80079bc <HAL_GetTick>
 800979c:	4602      	mov	r2, r0
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	2b02      	cmp	r3, #2
 80097a4:	d901      	bls.n	80097aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80097a6:	2303      	movs	r3, #3
 80097a8:	e0fd      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80097aa:	4b81      	ldr	r3, [pc, #516]	; (80099b0 <HAL_RCC_OscConfig+0x4d4>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d0f0      	beq.n	8009798 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d106      	bne.n	80097cc <HAL_RCC_OscConfig+0x2f0>
 80097be:	4b7d      	ldr	r3, [pc, #500]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 80097c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097c2:	4a7c      	ldr	r2, [pc, #496]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 80097c4:	f043 0301 	orr.w	r3, r3, #1
 80097c8:	6713      	str	r3, [r2, #112]	; 0x70
 80097ca:	e01c      	b.n	8009806 <HAL_RCC_OscConfig+0x32a>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	2b05      	cmp	r3, #5
 80097d2:	d10c      	bne.n	80097ee <HAL_RCC_OscConfig+0x312>
 80097d4:	4b77      	ldr	r3, [pc, #476]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 80097d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d8:	4a76      	ldr	r2, [pc, #472]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 80097da:	f043 0304 	orr.w	r3, r3, #4
 80097de:	6713      	str	r3, [r2, #112]	; 0x70
 80097e0:	4b74      	ldr	r3, [pc, #464]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 80097e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e4:	4a73      	ldr	r2, [pc, #460]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 80097e6:	f043 0301 	orr.w	r3, r3, #1
 80097ea:	6713      	str	r3, [r2, #112]	; 0x70
 80097ec:	e00b      	b.n	8009806 <HAL_RCC_OscConfig+0x32a>
 80097ee:	4b71      	ldr	r3, [pc, #452]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 80097f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097f2:	4a70      	ldr	r2, [pc, #448]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 80097f4:	f023 0301 	bic.w	r3, r3, #1
 80097f8:	6713      	str	r3, [r2, #112]	; 0x70
 80097fa:	4b6e      	ldr	r3, [pc, #440]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 80097fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097fe:	4a6d      	ldr	r2, [pc, #436]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 8009800:	f023 0304 	bic.w	r3, r3, #4
 8009804:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d015      	beq.n	800983a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800980e:	f7fe f8d5 	bl	80079bc <HAL_GetTick>
 8009812:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009814:	e00a      	b.n	800982c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009816:	f7fe f8d1 	bl	80079bc <HAL_GetTick>
 800981a:	4602      	mov	r2, r0
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	f241 3288 	movw	r2, #5000	; 0x1388
 8009824:	4293      	cmp	r3, r2
 8009826:	d901      	bls.n	800982c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009828:	2303      	movs	r3, #3
 800982a:	e0bc      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800982c:	4b61      	ldr	r3, [pc, #388]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 800982e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009830:	f003 0302 	and.w	r3, r3, #2
 8009834:	2b00      	cmp	r3, #0
 8009836:	d0ee      	beq.n	8009816 <HAL_RCC_OscConfig+0x33a>
 8009838:	e014      	b.n	8009864 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800983a:	f7fe f8bf 	bl	80079bc <HAL_GetTick>
 800983e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009840:	e00a      	b.n	8009858 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009842:	f7fe f8bb 	bl	80079bc <HAL_GetTick>
 8009846:	4602      	mov	r2, r0
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009850:	4293      	cmp	r3, r2
 8009852:	d901      	bls.n	8009858 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009854:	2303      	movs	r3, #3
 8009856:	e0a6      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009858:	4b56      	ldr	r3, [pc, #344]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 800985a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985c:	f003 0302 	and.w	r3, r3, #2
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1ee      	bne.n	8009842 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009864:	7dfb      	ldrb	r3, [r7, #23]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d105      	bne.n	8009876 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800986a:	4b52      	ldr	r3, [pc, #328]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 800986c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986e:	4a51      	ldr	r2, [pc, #324]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 8009870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009874:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	699b      	ldr	r3, [r3, #24]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f000 8092 	beq.w	80099a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009880:	4b4c      	ldr	r3, [pc, #304]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	f003 030c 	and.w	r3, r3, #12
 8009888:	2b08      	cmp	r3, #8
 800988a:	d05c      	beq.n	8009946 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	2b02      	cmp	r3, #2
 8009892:	d141      	bne.n	8009918 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009894:	4b48      	ldr	r3, [pc, #288]	; (80099b8 <HAL_RCC_OscConfig+0x4dc>)
 8009896:	2200      	movs	r2, #0
 8009898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800989a:	f7fe f88f 	bl	80079bc <HAL_GetTick>
 800989e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098a0:	e008      	b.n	80098b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098a2:	f7fe f88b 	bl	80079bc <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d901      	bls.n	80098b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e078      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80098b4:	4b3f      	ldr	r3, [pc, #252]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1f0      	bne.n	80098a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	69da      	ldr	r2, [r3, #28]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a1b      	ldr	r3, [r3, #32]
 80098c8:	431a      	orrs	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ce:	019b      	lsls	r3, r3, #6
 80098d0:	431a      	orrs	r2, r3
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d6:	085b      	lsrs	r3, r3, #1
 80098d8:	3b01      	subs	r3, #1
 80098da:	041b      	lsls	r3, r3, #16
 80098dc:	431a      	orrs	r2, r3
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	061b      	lsls	r3, r3, #24
 80098e4:	4933      	ldr	r1, [pc, #204]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 80098e6:	4313      	orrs	r3, r2
 80098e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80098ea:	4b33      	ldr	r3, [pc, #204]	; (80099b8 <HAL_RCC_OscConfig+0x4dc>)
 80098ec:	2201      	movs	r2, #1
 80098ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098f0:	f7fe f864 	bl	80079bc <HAL_GetTick>
 80098f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80098f6:	e008      	b.n	800990a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80098f8:	f7fe f860 	bl	80079bc <HAL_GetTick>
 80098fc:	4602      	mov	r2, r0
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	2b02      	cmp	r3, #2
 8009904:	d901      	bls.n	800990a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009906:	2303      	movs	r3, #3
 8009908:	e04d      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800990a:	4b2a      	ldr	r3, [pc, #168]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d0f0      	beq.n	80098f8 <HAL_RCC_OscConfig+0x41c>
 8009916:	e045      	b.n	80099a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009918:	4b27      	ldr	r3, [pc, #156]	; (80099b8 <HAL_RCC_OscConfig+0x4dc>)
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800991e:	f7fe f84d 	bl	80079bc <HAL_GetTick>
 8009922:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009924:	e008      	b.n	8009938 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009926:	f7fe f849 	bl	80079bc <HAL_GetTick>
 800992a:	4602      	mov	r2, r0
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	2b02      	cmp	r3, #2
 8009932:	d901      	bls.n	8009938 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e036      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009938:	4b1e      	ldr	r3, [pc, #120]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d1f0      	bne.n	8009926 <HAL_RCC_OscConfig+0x44a>
 8009944:	e02e      	b.n	80099a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	699b      	ldr	r3, [r3, #24]
 800994a:	2b01      	cmp	r3, #1
 800994c:	d101      	bne.n	8009952 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e029      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009952:	4b18      	ldr	r3, [pc, #96]	; (80099b4 <HAL_RCC_OscConfig+0x4d8>)
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	429a      	cmp	r2, r3
 8009964:	d11c      	bne.n	80099a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009970:	429a      	cmp	r2, r3
 8009972:	d115      	bne.n	80099a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800997a:	4013      	ands	r3, r2
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009980:	4293      	cmp	r3, r2
 8009982:	d10d      	bne.n	80099a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800998e:	429a      	cmp	r2, r3
 8009990:	d106      	bne.n	80099a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800999c:	429a      	cmp	r2, r3
 800999e:	d001      	beq.n	80099a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e000      	b.n	80099a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3718      	adds	r7, #24
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	40007000 	.word	0x40007000
 80099b4:	40023800 	.word	0x40023800
 80099b8:	42470060 	.word	0x42470060

080099bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b084      	sub	sp, #16
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d101      	bne.n	80099d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	e0cc      	b.n	8009b6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80099d0:	4b68      	ldr	r3, [pc, #416]	; (8009b74 <HAL_RCC_ClockConfig+0x1b8>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 030f 	and.w	r3, r3, #15
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	429a      	cmp	r2, r3
 80099dc:	d90c      	bls.n	80099f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099de:	4b65      	ldr	r3, [pc, #404]	; (8009b74 <HAL_RCC_ClockConfig+0x1b8>)
 80099e0:	683a      	ldr	r2, [r7, #0]
 80099e2:	b2d2      	uxtb	r2, r2
 80099e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099e6:	4b63      	ldr	r3, [pc, #396]	; (8009b74 <HAL_RCC_ClockConfig+0x1b8>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 030f 	and.w	r3, r3, #15
 80099ee:	683a      	ldr	r2, [r7, #0]
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d001      	beq.n	80099f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e0b8      	b.n	8009b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f003 0302 	and.w	r3, r3, #2
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d020      	beq.n	8009a46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f003 0304 	and.w	r3, r3, #4
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d005      	beq.n	8009a1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009a10:	4b59      	ldr	r3, [pc, #356]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	4a58      	ldr	r2, [pc, #352]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009a16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009a1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0308 	and.w	r3, r3, #8
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d005      	beq.n	8009a34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009a28:	4b53      	ldr	r3, [pc, #332]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	4a52      	ldr	r2, [pc, #328]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009a2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009a32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a34:	4b50      	ldr	r3, [pc, #320]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	689b      	ldr	r3, [r3, #8]
 8009a40:	494d      	ldr	r1, [pc, #308]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009a42:	4313      	orrs	r3, r2
 8009a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0301 	and.w	r3, r3, #1
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d044      	beq.n	8009adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	685b      	ldr	r3, [r3, #4]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d107      	bne.n	8009a6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009a5a:	4b47      	ldr	r3, [pc, #284]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d119      	bne.n	8009a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a66:	2301      	movs	r3, #1
 8009a68:	e07f      	b.n	8009b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d003      	beq.n	8009a7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d107      	bne.n	8009a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009a7a:	4b3f      	ldr	r3, [pc, #252]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d109      	bne.n	8009a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a86:	2301      	movs	r3, #1
 8009a88:	e06f      	b.n	8009b6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009a8a:	4b3b      	ldr	r3, [pc, #236]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f003 0302 	and.w	r3, r3, #2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e067      	b.n	8009b6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009a9a:	4b37      	ldr	r3, [pc, #220]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f023 0203 	bic.w	r2, r3, #3
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	4934      	ldr	r1, [pc, #208]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009aa8:	4313      	orrs	r3, r2
 8009aaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009aac:	f7fd ff86 	bl	80079bc <HAL_GetTick>
 8009ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009ab2:	e00a      	b.n	8009aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ab4:	f7fd ff82 	bl	80079bc <HAL_GetTick>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	1ad3      	subs	r3, r2, r3
 8009abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d901      	bls.n	8009aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e04f      	b.n	8009b6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009aca:	4b2b      	ldr	r3, [pc, #172]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	f003 020c 	and.w	r2, r3, #12
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d1eb      	bne.n	8009ab4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009adc:	4b25      	ldr	r3, [pc, #148]	; (8009b74 <HAL_RCC_ClockConfig+0x1b8>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f003 030f 	and.w	r3, r3, #15
 8009ae4:	683a      	ldr	r2, [r7, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d20c      	bcs.n	8009b04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009aea:	4b22      	ldr	r3, [pc, #136]	; (8009b74 <HAL_RCC_ClockConfig+0x1b8>)
 8009aec:	683a      	ldr	r2, [r7, #0]
 8009aee:	b2d2      	uxtb	r2, r2
 8009af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009af2:	4b20      	ldr	r3, [pc, #128]	; (8009b74 <HAL_RCC_ClockConfig+0x1b8>)
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f003 030f 	and.w	r3, r3, #15
 8009afa:	683a      	ldr	r2, [r7, #0]
 8009afc:	429a      	cmp	r2, r3
 8009afe:	d001      	beq.n	8009b04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e032      	b.n	8009b6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0304 	and.w	r3, r3, #4
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d008      	beq.n	8009b22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009b10:	4b19      	ldr	r3, [pc, #100]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	4916      	ldr	r1, [pc, #88]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0308 	and.w	r3, r3, #8
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d009      	beq.n	8009b42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009b2e:	4b12      	ldr	r3, [pc, #72]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009b30:	689b      	ldr	r3, [r3, #8]
 8009b32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	00db      	lsls	r3, r3, #3
 8009b3c:	490e      	ldr	r1, [pc, #56]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009b42:	f000 f821 	bl	8009b88 <HAL_RCC_GetSysClockFreq>
 8009b46:	4601      	mov	r1, r0
 8009b48:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <HAL_RCC_ClockConfig+0x1bc>)
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	091b      	lsrs	r3, r3, #4
 8009b4e:	f003 030f 	and.w	r3, r3, #15
 8009b52:	4a0a      	ldr	r2, [pc, #40]	; (8009b7c <HAL_RCC_ClockConfig+0x1c0>)
 8009b54:	5cd3      	ldrb	r3, [r2, r3]
 8009b56:	fa21 f303 	lsr.w	r3, r1, r3
 8009b5a:	4a09      	ldr	r2, [pc, #36]	; (8009b80 <HAL_RCC_ClockConfig+0x1c4>)
 8009b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009b5e:	4b09      	ldr	r3, [pc, #36]	; (8009b84 <HAL_RCC_ClockConfig+0x1c8>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7fd fee6 	bl	8007934 <HAL_InitTick>

  return HAL_OK;
 8009b68:	2300      	movs	r3, #0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	40023c00 	.word	0x40023c00
 8009b78:	40023800 	.word	0x40023800
 8009b7c:	08012670 	.word	0x08012670
 8009b80:	2000003c 	.word	0x2000003c
 8009b84:	20000040 	.word	0x20000040

08009b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	607b      	str	r3, [r7, #4]
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	2300      	movs	r3, #0
 8009b98:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b9e:	4b50      	ldr	r3, [pc, #320]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	f003 030c 	and.w	r3, r3, #12
 8009ba6:	2b04      	cmp	r3, #4
 8009ba8:	d007      	beq.n	8009bba <HAL_RCC_GetSysClockFreq+0x32>
 8009baa:	2b08      	cmp	r3, #8
 8009bac:	d008      	beq.n	8009bc0 <HAL_RCC_GetSysClockFreq+0x38>
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f040 808d 	bne.w	8009cce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009bb4:	4b4b      	ldr	r3, [pc, #300]	; (8009ce4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009bb6:	60bb      	str	r3, [r7, #8]
       break;
 8009bb8:	e08c      	b.n	8009cd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009bba:	4b4b      	ldr	r3, [pc, #300]	; (8009ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009bbc:	60bb      	str	r3, [r7, #8]
      break;
 8009bbe:	e089      	b.n	8009cd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009bc0:	4b47      	ldr	r3, [pc, #284]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009bca:	4b45      	ldr	r3, [pc, #276]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d023      	beq.n	8009c1e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009bd6:	4b42      	ldr	r3, [pc, #264]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	099b      	lsrs	r3, r3, #6
 8009bdc:	f04f 0400 	mov.w	r4, #0
 8009be0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009be4:	f04f 0200 	mov.w	r2, #0
 8009be8:	ea03 0501 	and.w	r5, r3, r1
 8009bec:	ea04 0602 	and.w	r6, r4, r2
 8009bf0:	4a3d      	ldr	r2, [pc, #244]	; (8009ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009bf2:	fb02 f106 	mul.w	r1, r2, r6
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	fb02 f205 	mul.w	r2, r2, r5
 8009bfc:	440a      	add	r2, r1
 8009bfe:	493a      	ldr	r1, [pc, #232]	; (8009ce8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009c00:	fba5 0101 	umull	r0, r1, r5, r1
 8009c04:	1853      	adds	r3, r2, r1
 8009c06:	4619      	mov	r1, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f04f 0400 	mov.w	r4, #0
 8009c0e:	461a      	mov	r2, r3
 8009c10:	4623      	mov	r3, r4
 8009c12:	f7f7 f839 	bl	8000c88 <__aeabi_uldivmod>
 8009c16:	4603      	mov	r3, r0
 8009c18:	460c      	mov	r4, r1
 8009c1a:	60fb      	str	r3, [r7, #12]
 8009c1c:	e049      	b.n	8009cb2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009c1e:	4b30      	ldr	r3, [pc, #192]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	099b      	lsrs	r3, r3, #6
 8009c24:	f04f 0400 	mov.w	r4, #0
 8009c28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	ea03 0501 	and.w	r5, r3, r1
 8009c34:	ea04 0602 	and.w	r6, r4, r2
 8009c38:	4629      	mov	r1, r5
 8009c3a:	4632      	mov	r2, r6
 8009c3c:	f04f 0300 	mov.w	r3, #0
 8009c40:	f04f 0400 	mov.w	r4, #0
 8009c44:	0154      	lsls	r4, r2, #5
 8009c46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009c4a:	014b      	lsls	r3, r1, #5
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4622      	mov	r2, r4
 8009c50:	1b49      	subs	r1, r1, r5
 8009c52:	eb62 0206 	sbc.w	r2, r2, r6
 8009c56:	f04f 0300 	mov.w	r3, #0
 8009c5a:	f04f 0400 	mov.w	r4, #0
 8009c5e:	0194      	lsls	r4, r2, #6
 8009c60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009c64:	018b      	lsls	r3, r1, #6
 8009c66:	1a5b      	subs	r3, r3, r1
 8009c68:	eb64 0402 	sbc.w	r4, r4, r2
 8009c6c:	f04f 0100 	mov.w	r1, #0
 8009c70:	f04f 0200 	mov.w	r2, #0
 8009c74:	00e2      	lsls	r2, r4, #3
 8009c76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009c7a:	00d9      	lsls	r1, r3, #3
 8009c7c:	460b      	mov	r3, r1
 8009c7e:	4614      	mov	r4, r2
 8009c80:	195b      	adds	r3, r3, r5
 8009c82:	eb44 0406 	adc.w	r4, r4, r6
 8009c86:	f04f 0100 	mov.w	r1, #0
 8009c8a:	f04f 0200 	mov.w	r2, #0
 8009c8e:	02a2      	lsls	r2, r4, #10
 8009c90:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009c94:	0299      	lsls	r1, r3, #10
 8009c96:	460b      	mov	r3, r1
 8009c98:	4614      	mov	r4, r2
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	f04f 0400 	mov.w	r4, #0
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	4623      	mov	r3, r4
 8009ca8:	f7f6 ffee 	bl	8000c88 <__aeabi_uldivmod>
 8009cac:	4603      	mov	r3, r0
 8009cae:	460c      	mov	r4, r1
 8009cb0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009cb2:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <HAL_RCC_GetSysClockFreq+0x158>)
 8009cb4:	685b      	ldr	r3, [r3, #4]
 8009cb6:	0c1b      	lsrs	r3, r3, #16
 8009cb8:	f003 0303 	and.w	r3, r3, #3
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009cc2:	68fa      	ldr	r2, [r7, #12]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cca:	60bb      	str	r3, [r7, #8]
      break;
 8009ccc:	e002      	b.n	8009cd4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009cce:	4b05      	ldr	r3, [pc, #20]	; (8009ce4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009cd0:	60bb      	str	r3, [r7, #8]
      break;
 8009cd2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009cd4:	68bb      	ldr	r3, [r7, #8]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3714      	adds	r7, #20
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	40023800 	.word	0x40023800
 8009ce4:	00f42400 	.word	0x00f42400
 8009ce8:	00bebc20 	.word	0x00bebc20

08009cec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009cec:	b480      	push	{r7}
 8009cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009cf0:	4b03      	ldr	r3, [pc, #12]	; (8009d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	2000003c 	.word	0x2000003c

08009d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009d08:	f7ff fff0 	bl	8009cec <HAL_RCC_GetHCLKFreq>
 8009d0c:	4601      	mov	r1, r0
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	0a9b      	lsrs	r3, r3, #10
 8009d14:	f003 0307 	and.w	r3, r3, #7
 8009d18:	4a03      	ldr	r2, [pc, #12]	; (8009d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009d1a:	5cd3      	ldrb	r3, [r2, r3]
 8009d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	bd80      	pop	{r7, pc}
 8009d24:	40023800 	.word	0x40023800
 8009d28:	08012680 	.word	0x08012680

08009d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009d30:	f7ff ffdc 	bl	8009cec <HAL_RCC_GetHCLKFreq>
 8009d34:	4601      	mov	r1, r0
 8009d36:	4b05      	ldr	r3, [pc, #20]	; (8009d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	0b5b      	lsrs	r3, r3, #13
 8009d3c:	f003 0307 	and.w	r3, r3, #7
 8009d40:	4a03      	ldr	r2, [pc, #12]	; (8009d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009d42:	5cd3      	ldrb	r3, [r2, r3]
 8009d44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	40023800 	.word	0x40023800
 8009d50:	08012680 	.word	0x08012680

08009d54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d101      	bne.n	8009d66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d62:	2301      	movs	r3, #1
 8009d64:	e056      	b.n	8009e14 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d72:	b2db      	uxtb	r3, r3
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d106      	bne.n	8009d86 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f7fd fa67 	bl	8007254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2202      	movs	r2, #2
 8009d8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d9c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	431a      	orrs	r2, r3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	431a      	orrs	r2, r3
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	431a      	orrs	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	431a      	orrs	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	69db      	ldr	r3, [r3, #28]
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	ea42 0103 	orr.w	r1, r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	430a      	orrs	r2, r1
 8009ddc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	0c1b      	lsrs	r3, r3, #16
 8009de4:	f003 0104 	and.w	r1, r3, #4
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	430a      	orrs	r2, r1
 8009df2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	69da      	ldr	r2, [r3, #28]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e02:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009e12:	2300      	movs	r3, #0
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3708      	adds	r7, #8
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b088      	sub	sp, #32
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	603b      	str	r3, [r7, #0]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d101      	bne.n	8009e3e <HAL_SPI_Transmit+0x22>
 8009e3a:	2302      	movs	r3, #2
 8009e3c:	e11e      	b.n	800a07c <HAL_SPI_Transmit+0x260>
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e46:	f7fd fdb9 	bl	80079bc <HAL_GetTick>
 8009e4a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009e4c:	88fb      	ldrh	r3, [r7, #6]
 8009e4e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d002      	beq.n	8009e62 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009e60:	e103      	b.n	800a06a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <HAL_SPI_Transmit+0x52>
 8009e68:	88fb      	ldrh	r3, [r7, #6]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d102      	bne.n	8009e74 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009e72:	e0fa      	b.n	800a06a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	2203      	movs	r2, #3
 8009e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	68ba      	ldr	r2, [r7, #8]
 8009e86:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	88fa      	ldrh	r2, [r7, #6]
 8009e8c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	88fa      	ldrh	r2, [r7, #6]
 8009e92:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eba:	d107      	bne.n	8009ecc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009eca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ed6:	2b40      	cmp	r3, #64	; 0x40
 8009ed8:	d007      	beq.n	8009eea <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ee8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ef2:	d14b      	bne.n	8009f8c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	685b      	ldr	r3, [r3, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d002      	beq.n	8009f02 <HAL_SPI_Transmit+0xe6>
 8009efc:	8afb      	ldrh	r3, [r7, #22]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d13e      	bne.n	8009f80 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f06:	881a      	ldrh	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f12:	1c9a      	adds	r2, r3, #2
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	b29a      	uxth	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009f26:	e02b      	b.n	8009f80 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	f003 0302 	and.w	r3, r3, #2
 8009f32:	2b02      	cmp	r3, #2
 8009f34:	d112      	bne.n	8009f5c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3a:	881a      	ldrh	r2, [r3, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f46:	1c9a      	adds	r2, r3, #2
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f50:	b29b      	uxth	r3, r3
 8009f52:	3b01      	subs	r3, #1
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	86da      	strh	r2, [r3, #54]	; 0x36
 8009f5a:	e011      	b.n	8009f80 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f5c:	f7fd fd2e 	bl	80079bc <HAL_GetTick>
 8009f60:	4602      	mov	r2, r0
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	1ad3      	subs	r3, r2, r3
 8009f66:	683a      	ldr	r2, [r7, #0]
 8009f68:	429a      	cmp	r2, r3
 8009f6a:	d803      	bhi.n	8009f74 <HAL_SPI_Transmit+0x158>
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f72:	d102      	bne.n	8009f7a <HAL_SPI_Transmit+0x15e>
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d102      	bne.n	8009f80 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009f7e:	e074      	b.n	800a06a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1ce      	bne.n	8009f28 <HAL_SPI_Transmit+0x10c>
 8009f8a:	e04c      	b.n	800a026 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d002      	beq.n	8009f9a <HAL_SPI_Transmit+0x17e>
 8009f94:	8afb      	ldrh	r3, [r7, #22]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d140      	bne.n	800a01c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	330c      	adds	r3, #12
 8009fa4:	7812      	ldrb	r2, [r2, #0]
 8009fa6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fac:	1c5a      	adds	r2, r3, #1
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009fc0:	e02c      	b.n	800a01c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d113      	bne.n	8009ff8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	330c      	adds	r3, #12
 8009fda:	7812      	ldrb	r2, [r2, #0]
 8009fdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe2:	1c5a      	adds	r2, r3, #1
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	3b01      	subs	r3, #1
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	86da      	strh	r2, [r3, #54]	; 0x36
 8009ff6:	e011      	b.n	800a01c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ff8:	f7fd fce0 	bl	80079bc <HAL_GetTick>
 8009ffc:	4602      	mov	r2, r0
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	429a      	cmp	r2, r3
 800a006:	d803      	bhi.n	800a010 <HAL_SPI_Transmit+0x1f4>
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a00e:	d102      	bne.n	800a016 <HAL_SPI_Transmit+0x1fa>
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d102      	bne.n	800a01c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a01a:	e026      	b.n	800a06a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a020:	b29b      	uxth	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1cd      	bne.n	8009fc2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a026:	69ba      	ldr	r2, [r7, #24]
 800a028:	6839      	ldr	r1, [r7, #0]
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 fba4 	bl	800a778 <SPI_EndRxTxTransaction>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d002      	beq.n	800a03c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2220      	movs	r2, #32
 800a03a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a044:	2300      	movs	r3, #0
 800a046:	613b      	str	r3, [r7, #16]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	613b      	str	r3, [r7, #16]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	613b      	str	r3, [r7, #16]
 800a058:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d002      	beq.n	800a068 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	77fb      	strb	r3, [r7, #31]
 800a066:	e000      	b.n	800a06a <HAL_SPI_Transmit+0x24e>
  }

error:
 800a068:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2201      	movs	r2, #1
 800a06e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a07a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3720      	adds	r7, #32
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af02      	add	r7, sp, #8
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	603b      	str	r3, [r7, #0]
 800a090:	4613      	mov	r3, r2
 800a092:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a094:	2300      	movs	r3, #0
 800a096:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	685b      	ldr	r3, [r3, #4]
 800a09c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a0a0:	d112      	bne.n	800a0c8 <HAL_SPI_Receive+0x44>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d10e      	bne.n	800a0c8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2204      	movs	r2, #4
 800a0ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a0b2:	88fa      	ldrh	r2, [r7, #6]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	68b9      	ldr	r1, [r7, #8]
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f000 f8e9 	bl	800a296 <HAL_SPI_TransmitReceive>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	e0e2      	b.n	800a28e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d101      	bne.n	800a0d6 <HAL_SPI_Receive+0x52>
 800a0d2:	2302      	movs	r3, #2
 800a0d4:	e0db      	b.n	800a28e <HAL_SPI_Receive+0x20a>
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2201      	movs	r2, #1
 800a0da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a0de:	f7fd fc6d 	bl	80079bc <HAL_GetTick>
 800a0e2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d002      	beq.n	800a0f6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a0f0:	2302      	movs	r3, #2
 800a0f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a0f4:	e0c2      	b.n	800a27c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <HAL_SPI_Receive+0x7e>
 800a0fc:	88fb      	ldrh	r3, [r7, #6]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d102      	bne.n	800a108 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a102:	2301      	movs	r3, #1
 800a104:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a106:	e0b9      	b.n	800a27c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2204      	movs	r2, #4
 800a10c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	88fa      	ldrh	r2, [r7, #6]
 800a120:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	88fa      	ldrh	r2, [r7, #6]
 800a126:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2200      	movs	r2, #0
 800a12c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	2200      	movs	r2, #0
 800a138:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a14e:	d107      	bne.n	800a160 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a15e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16a:	2b40      	cmp	r3, #64	; 0x40
 800a16c:	d007      	beq.n	800a17e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a17c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d162      	bne.n	800a24c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a186:	e02e      	b.n	800a1e6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	689b      	ldr	r3, [r3, #8]
 800a18e:	f003 0301 	and.w	r3, r3, #1
 800a192:	2b01      	cmp	r3, #1
 800a194:	d115      	bne.n	800a1c2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f103 020c 	add.w	r2, r3, #12
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a2:	7812      	ldrb	r2, [r2, #0]
 800a1a4:	b2d2      	uxtb	r2, r2
 800a1a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1ac:	1c5a      	adds	r2, r3, #1
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a1c0:	e011      	b.n	800a1e6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1c2:	f7fd fbfb 	bl	80079bc <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	683a      	ldr	r2, [r7, #0]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d803      	bhi.n	800a1da <HAL_SPI_Receive+0x156>
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d8:	d102      	bne.n	800a1e0 <HAL_SPI_Receive+0x15c>
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d102      	bne.n	800a1e6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a1e4:	e04a      	b.n	800a27c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1cb      	bne.n	800a188 <HAL_SPI_Receive+0x104>
 800a1f0:	e031      	b.n	800a256 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	f003 0301 	and.w	r3, r3, #1
 800a1fc:	2b01      	cmp	r3, #1
 800a1fe:	d113      	bne.n	800a228 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68da      	ldr	r2, [r3, #12]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a20a:	b292      	uxth	r2, r2
 800a20c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a212:	1c9a      	adds	r2, r3, #2
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	3b01      	subs	r3, #1
 800a220:	b29a      	uxth	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a226:	e011      	b.n	800a24c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a228:	f7fd fbc8 	bl	80079bc <HAL_GetTick>
 800a22c:	4602      	mov	r2, r0
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	1ad3      	subs	r3, r2, r3
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	429a      	cmp	r2, r3
 800a236:	d803      	bhi.n	800a240 <HAL_SPI_Receive+0x1bc>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23e:	d102      	bne.n	800a246 <HAL_SPI_Receive+0x1c2>
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d102      	bne.n	800a24c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a246:	2303      	movs	r3, #3
 800a248:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a24a:	e017      	b.n	800a27c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a250:	b29b      	uxth	r3, r3
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1cd      	bne.n	800a1f2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	6839      	ldr	r1, [r7, #0]
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f000 fa27 	bl	800a6ae <SPI_EndRxTransaction>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2220      	movs	r2, #32
 800a26a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a274:	2301      	movs	r3, #1
 800a276:	75fb      	strb	r3, [r7, #23]
 800a278:	e000      	b.n	800a27c <HAL_SPI_Receive+0x1f8>
  }

error :
 800a27a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2201      	movs	r2, #1
 800a280:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3718      	adds	r7, #24
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b08c      	sub	sp, #48	; 0x30
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	60f8      	str	r0, [r7, #12]
 800a29e:	60b9      	str	r1, [r7, #8]
 800a2a0:	607a      	str	r2, [r7, #4]
 800a2a2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d101      	bne.n	800a2bc <HAL_SPI_TransmitReceive+0x26>
 800a2b8:	2302      	movs	r3, #2
 800a2ba:	e18a      	b.n	800a5d2 <HAL_SPI_TransmitReceive+0x33c>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2c4:	f7fd fb7a 	bl	80079bc <HAL_GetTick>
 800a2c8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a2d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	685b      	ldr	r3, [r3, #4]
 800a2d8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a2da:	887b      	ldrh	r3, [r7, #2]
 800a2dc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a2de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d00f      	beq.n	800a306 <HAL_SPI_TransmitReceive+0x70>
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2ec:	d107      	bne.n	800a2fe <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	689b      	ldr	r3, [r3, #8]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d103      	bne.n	800a2fe <HAL_SPI_TransmitReceive+0x68>
 800a2f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2fa:	2b04      	cmp	r3, #4
 800a2fc:	d003      	beq.n	800a306 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a2fe:	2302      	movs	r3, #2
 800a300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a304:	e15b      	b.n	800a5be <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d005      	beq.n	800a318 <HAL_SPI_TransmitReceive+0x82>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d002      	beq.n	800a318 <HAL_SPI_TransmitReceive+0x82>
 800a312:	887b      	ldrh	r3, [r7, #2]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d103      	bne.n	800a320 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a31e:	e14e      	b.n	800a5be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a326:	b2db      	uxtb	r3, r3
 800a328:	2b04      	cmp	r3, #4
 800a32a:	d003      	beq.n	800a334 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2205      	movs	r2, #5
 800a330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	687a      	ldr	r2, [r7, #4]
 800a33e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	887a      	ldrh	r2, [r7, #2]
 800a344:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	887a      	ldrh	r2, [r7, #2]
 800a34a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	68ba      	ldr	r2, [r7, #8]
 800a350:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	887a      	ldrh	r2, [r7, #2]
 800a356:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	887a      	ldrh	r2, [r7, #2]
 800a35c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2200      	movs	r2, #0
 800a362:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a374:	2b40      	cmp	r3, #64	; 0x40
 800a376:	d007      	beq.n	800a388 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a386:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	68db      	ldr	r3, [r3, #12]
 800a38c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a390:	d178      	bne.n	800a484 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d002      	beq.n	800a3a0 <HAL_SPI_TransmitReceive+0x10a>
 800a39a:	8b7b      	ldrh	r3, [r7, #26]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d166      	bne.n	800a46e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3a4:	881a      	ldrh	r2, [r3, #0]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b0:	1c9a      	adds	r2, r3, #2
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3c4:	e053      	b.n	800a46e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	f003 0302 	and.w	r3, r3, #2
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d11b      	bne.n	800a40c <HAL_SPI_TransmitReceive+0x176>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d016      	beq.n	800a40c <HAL_SPI_TransmitReceive+0x176>
 800a3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d113      	bne.n	800a40c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e8:	881a      	ldrh	r2, [r3, #0]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f4:	1c9a      	adds	r2, r3, #2
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	3b01      	subs	r3, #1
 800a402:	b29a      	uxth	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f003 0301 	and.w	r3, r3, #1
 800a416:	2b01      	cmp	r3, #1
 800a418:	d119      	bne.n	800a44e <HAL_SPI_TransmitReceive+0x1b8>
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a41e:	b29b      	uxth	r3, r3
 800a420:	2b00      	cmp	r3, #0
 800a422:	d014      	beq.n	800a44e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68da      	ldr	r2, [r3, #12]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a42e:	b292      	uxth	r2, r2
 800a430:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a436:	1c9a      	adds	r2, r3, #2
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a440:	b29b      	uxth	r3, r3
 800a442:	3b01      	subs	r3, #1
 800a444:	b29a      	uxth	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a44a:	2301      	movs	r3, #1
 800a44c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a44e:	f7fd fab5 	bl	80079bc <HAL_GetTick>
 800a452:	4602      	mov	r2, r0
 800a454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d807      	bhi.n	800a46e <HAL_SPI_TransmitReceive+0x1d8>
 800a45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a464:	d003      	beq.n	800a46e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a466:	2303      	movs	r3, #3
 800a468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a46c:	e0a7      	b.n	800a5be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a472:	b29b      	uxth	r3, r3
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1a6      	bne.n	800a3c6 <HAL_SPI_TransmitReceive+0x130>
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d1a1      	bne.n	800a3c6 <HAL_SPI_TransmitReceive+0x130>
 800a482:	e07c      	b.n	800a57e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d002      	beq.n	800a492 <HAL_SPI_TransmitReceive+0x1fc>
 800a48c:	8b7b      	ldrh	r3, [r7, #26]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d16b      	bne.n	800a56a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	330c      	adds	r3, #12
 800a49c:	7812      	ldrb	r2, [r2, #0]
 800a49e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4a4:	1c5a      	adds	r2, r3, #1
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a4b8:	e057      	b.n	800a56a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f003 0302 	and.w	r3, r3, #2
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d11c      	bne.n	800a502 <HAL_SPI_TransmitReceive+0x26c>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d017      	beq.n	800a502 <HAL_SPI_TransmitReceive+0x26c>
 800a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d114      	bne.n	800a502 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	330c      	adds	r3, #12
 800a4e2:	7812      	ldrb	r2, [r2, #0]
 800a4e4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ea:	1c5a      	adds	r2, r3, #1
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	b29a      	uxth	r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4fe:	2300      	movs	r3, #0
 800a500:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f003 0301 	and.w	r3, r3, #1
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d119      	bne.n	800a544 <HAL_SPI_TransmitReceive+0x2ae>
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a514:	b29b      	uxth	r3, r3
 800a516:	2b00      	cmp	r3, #0
 800a518:	d014      	beq.n	800a544 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68da      	ldr	r2, [r3, #12]
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a524:	b2d2      	uxtb	r2, r2
 800a526:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a52c:	1c5a      	adds	r2, r3, #1
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a536:	b29b      	uxth	r3, r3
 800a538:	3b01      	subs	r3, #1
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a540:	2301      	movs	r3, #1
 800a542:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a544:	f7fd fa3a 	bl	80079bc <HAL_GetTick>
 800a548:	4602      	mov	r2, r0
 800a54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a550:	429a      	cmp	r2, r3
 800a552:	d803      	bhi.n	800a55c <HAL_SPI_TransmitReceive+0x2c6>
 800a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55a:	d102      	bne.n	800a562 <HAL_SPI_TransmitReceive+0x2cc>
 800a55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d103      	bne.n	800a56a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a562:	2303      	movs	r3, #3
 800a564:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a568:	e029      	b.n	800a5be <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a56e:	b29b      	uxth	r3, r3
 800a570:	2b00      	cmp	r3, #0
 800a572:	d1a2      	bne.n	800a4ba <HAL_SPI_TransmitReceive+0x224>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a578:	b29b      	uxth	r3, r3
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d19d      	bne.n	800a4ba <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a57e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a580:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f000 f8f8 	bl	800a778 <SPI_EndRxTxTransaction>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d006      	beq.n	800a59c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2220      	movs	r2, #32
 800a598:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a59a:	e010      	b.n	800a5be <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d10b      	bne.n	800a5bc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	617b      	str	r3, [r7, #20]
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68db      	ldr	r3, [r3, #12]
 800a5ae:	617b      	str	r3, [r7, #20]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	617b      	str	r3, [r7, #20]
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	e000      	b.n	800a5be <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a5bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a5ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3730      	adds	r7, #48	; 0x30
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	60f8      	str	r0, [r7, #12]
 800a5e2:	60b9      	str	r1, [r7, #8]
 800a5e4:	603b      	str	r3, [r7, #0]
 800a5e6:	4613      	mov	r3, r2
 800a5e8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a5ea:	e04c      	b.n	800a686 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5f2:	d048      	beq.n	800a686 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a5f4:	f7fd f9e2 	bl	80079bc <HAL_GetTick>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	1ad3      	subs	r3, r2, r3
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	429a      	cmp	r2, r3
 800a602:	d902      	bls.n	800a60a <SPI_WaitFlagStateUntilTimeout+0x30>
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d13d      	bne.n	800a686 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a618:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a622:	d111      	bne.n	800a648 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a62c:	d004      	beq.n	800a638 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	689b      	ldr	r3, [r3, #8]
 800a632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a636:	d107      	bne.n	800a648 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a646:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a650:	d10f      	bne.n	800a672 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a660:	601a      	str	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a670:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2201      	movs	r2, #1
 800a676:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	2200      	movs	r2, #0
 800a67e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a682:	2303      	movs	r3, #3
 800a684:	e00f      	b.n	800a6a6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	689a      	ldr	r2, [r3, #8]
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	4013      	ands	r3, r2
 800a690:	68ba      	ldr	r2, [r7, #8]
 800a692:	429a      	cmp	r2, r3
 800a694:	bf0c      	ite	eq
 800a696:	2301      	moveq	r3, #1
 800a698:	2300      	movne	r3, #0
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	461a      	mov	r2, r3
 800a69e:	79fb      	ldrb	r3, [r7, #7]
 800a6a0:	429a      	cmp	r2, r3
 800a6a2:	d1a3      	bne.n	800a5ec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b086      	sub	sp, #24
 800a6b2:	af02      	add	r7, sp, #8
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6c2:	d111      	bne.n	800a6e8 <SPI_EndRxTransaction+0x3a>
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6cc:	d004      	beq.n	800a6d8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6d6:	d107      	bne.n	800a6e8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6e6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	685b      	ldr	r3, [r3, #4]
 800a6ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6f0:	d12a      	bne.n	800a748 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a6fa:	d012      	beq.n	800a722 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	9300      	str	r3, [sp, #0]
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2200      	movs	r2, #0
 800a704:	2180      	movs	r1, #128	; 0x80
 800a706:	68f8      	ldr	r0, [r7, #12]
 800a708:	f7ff ff67 	bl	800a5da <SPI_WaitFlagStateUntilTimeout>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d02d      	beq.n	800a76e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a716:	f043 0220 	orr.w	r2, r3, #32
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a71e:	2303      	movs	r3, #3
 800a720:	e026      	b.n	800a770 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	2200      	movs	r2, #0
 800a72a:	2101      	movs	r1, #1
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f7ff ff54 	bl	800a5da <SPI_WaitFlagStateUntilTimeout>
 800a732:	4603      	mov	r3, r0
 800a734:	2b00      	cmp	r3, #0
 800a736:	d01a      	beq.n	800a76e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a73c:	f043 0220 	orr.w	r2, r3, #32
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a744:	2303      	movs	r3, #3
 800a746:	e013      	b.n	800a770 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2200      	movs	r2, #0
 800a750:	2101      	movs	r1, #1
 800a752:	68f8      	ldr	r0, [r7, #12]
 800a754:	f7ff ff41 	bl	800a5da <SPI_WaitFlagStateUntilTimeout>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d007      	beq.n	800a76e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a762:	f043 0220 	orr.w	r2, r3, #32
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a76a:	2303      	movs	r3, #3
 800a76c:	e000      	b.n	800a770 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a76e:	2300      	movs	r3, #0
}
 800a770:	4618      	mov	r0, r3
 800a772:	3710      	adds	r7, #16
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b088      	sub	sp, #32
 800a77c:	af02      	add	r7, sp, #8
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	60b9      	str	r1, [r7, #8]
 800a782:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a784:	4b1b      	ldr	r3, [pc, #108]	; (800a7f4 <SPI_EndRxTxTransaction+0x7c>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a1b      	ldr	r2, [pc, #108]	; (800a7f8 <SPI_EndRxTxTransaction+0x80>)
 800a78a:	fba2 2303 	umull	r2, r3, r2, r3
 800a78e:	0d5b      	lsrs	r3, r3, #21
 800a790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a794:	fb02 f303 	mul.w	r3, r2, r3
 800a798:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a7a2:	d112      	bne.n	800a7ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	2180      	movs	r1, #128	; 0x80
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f7ff ff13 	bl	800a5da <SPI_WaitFlagStateUntilTimeout>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d016      	beq.n	800a7e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7be:	f043 0220 	orr.w	r2, r3, #32
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e00f      	b.n	800a7ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d00a      	beq.n	800a7e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	3b01      	subs	r3, #1
 800a7d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7e0:	2b80      	cmp	r3, #128	; 0x80
 800a7e2:	d0f2      	beq.n	800a7ca <SPI_EndRxTxTransaction+0x52>
 800a7e4:	e000      	b.n	800a7e8 <SPI_EndRxTxTransaction+0x70>
        break;
 800a7e6:	bf00      	nop
  }

  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3718      	adds	r7, #24
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}
 800a7f2:	bf00      	nop
 800a7f4:	2000003c 	.word	0x2000003c
 800a7f8:	165e9f81 	.word	0x165e9f81

0800a7fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d101      	bne.n	800a80e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e01d      	b.n	800a84a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a814:	b2db      	uxtb	r3, r3
 800a816:	2b00      	cmp	r3, #0
 800a818:	d106      	bne.n	800a828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f7fc fe12 	bl	800744c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2202      	movs	r2, #2
 800a82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	3304      	adds	r3, #4
 800a838:	4619      	mov	r1, r3
 800a83a:	4610      	mov	r0, r2
 800a83c:	f000 fb56 	bl	800aeec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3708      	adds	r7, #8
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}

0800a852 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a852:	b480      	push	{r7}
 800a854:	b085      	sub	sp, #20
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	68da      	ldr	r2, [r3, #12]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f042 0201 	orr.w	r2, r2, #1
 800a868:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	f003 0307 	and.w	r3, r3, #7
 800a874:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b06      	cmp	r3, #6
 800a87a:	d007      	beq.n	800a88c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f042 0201 	orr.w	r2, r2, #1
 800a88a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr

0800a89a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a89a:	b580      	push	{r7, lr}
 800a89c:	b082      	sub	sp, #8
 800a89e:	af00      	add	r7, sp, #0
 800a8a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d101      	bne.n	800a8ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	e01d      	b.n	800a8e8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d106      	bne.n	800a8c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f7fc fd0f 	bl	80072e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2202      	movs	r2, #2
 800a8ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	4610      	mov	r0, r2
 800a8da:	f000 fb07 	bl	800aeec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3708      	adds	r7, #8
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	2201      	movs	r2, #1
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	4618      	mov	r0, r3
 800a904:	f000 fd42 	bl	800b38c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a15      	ldr	r2, [pc, #84]	; (800a964 <HAL_TIM_PWM_Start+0x74>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d004      	beq.n	800a91c <HAL_TIM_PWM_Start+0x2c>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	4a14      	ldr	r2, [pc, #80]	; (800a968 <HAL_TIM_PWM_Start+0x78>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d101      	bne.n	800a920 <HAL_TIM_PWM_Start+0x30>
 800a91c:	2301      	movs	r3, #1
 800a91e:	e000      	b.n	800a922 <HAL_TIM_PWM_Start+0x32>
 800a920:	2300      	movs	r3, #0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d007      	beq.n	800a936 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a934:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	f003 0307 	and.w	r3, r3, #7
 800a940:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b06      	cmp	r3, #6
 800a946:	d007      	beq.n	800a958 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f042 0201 	orr.w	r2, r2, #1
 800a956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a958:	2300      	movs	r3, #0
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3710      	adds	r7, #16
 800a95e:	46bd      	mov	sp, r7
 800a960:	bd80      	pop	{r7, pc}
 800a962:	bf00      	nop
 800a964:	40010000 	.word	0x40010000
 800a968:	40010400 	.word	0x40010400

0800a96c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e083      	b.n	800aa88 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a986:	b2db      	uxtb	r3, r3
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d106      	bne.n	800a99a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a994:	6878      	ldr	r0, [r7, #4]
 800a996:	f7fc fcdd 	bl	8007354 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2202      	movs	r2, #2
 800a99e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	6812      	ldr	r2, [r2, #0]
 800a9ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9b0:	f023 0307 	bic.w	r3, r3, #7
 800a9b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	3304      	adds	r3, #4
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	f000 fa93 	bl	800aeec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	6a1b      	ldr	r3, [r3, #32]
 800a9dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	4313      	orrs	r3, r2
 800a9e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9ee:	f023 0303 	bic.w	r3, r3, #3
 800a9f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	699b      	ldr	r3, [r3, #24]
 800a9fc:	021b      	lsls	r3, r3, #8
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800aa0c:	f023 030c 	bic.w	r3, r3, #12
 800aa10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	68da      	ldr	r2, [r3, #12]
 800aa22:	683b      	ldr	r3, [r7, #0]
 800aa24:	69db      	ldr	r3, [r3, #28]
 800aa26:	021b      	lsls	r3, r3, #8
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	011a      	lsls	r2, r3, #4
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	6a1b      	ldr	r3, [r3, #32]
 800aa3a:	031b      	lsls	r3, r3, #12
 800aa3c:	4313      	orrs	r3, r2
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	4313      	orrs	r3, r2
 800aa42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800aa4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800aa52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	695b      	ldr	r3, [r3, #20]
 800aa5c:	011b      	lsls	r3, r3, #4
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	693a      	ldr	r2, [r7, #16]
 800aa74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2201      	movs	r2, #1
 800aa82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3718      	adds	r7, #24
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <HAL_TIM_Encoder_Start+0x16>
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d008      	beq.n	800aab6 <HAL_TIM_Encoder_Start+0x26>
 800aaa4:	e00f      	b.n	800aac6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	2100      	movs	r1, #0
 800aaae:	4618      	mov	r0, r3
 800aab0:	f000 fc6c 	bl	800b38c <TIM_CCxChannelCmd>
      break;
 800aab4:	e016      	b.n	800aae4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2201      	movs	r2, #1
 800aabc:	2104      	movs	r1, #4
 800aabe:	4618      	mov	r0, r3
 800aac0:	f000 fc64 	bl	800b38c <TIM_CCxChannelCmd>
      break;
 800aac4:	e00e      	b.n	800aae4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2201      	movs	r2, #1
 800aacc:	2100      	movs	r1, #0
 800aace:	4618      	mov	r0, r3
 800aad0:	f000 fc5c 	bl	800b38c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2201      	movs	r2, #1
 800aada:	2104      	movs	r1, #4
 800aadc:	4618      	mov	r0, r3
 800aade:	f000 fc55 	bl	800b38c <TIM_CCxChannelCmd>
      break;
 800aae2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	f042 0201 	orr.w	r2, r2, #1
 800aaf2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b082      	sub	sp, #8
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	f003 0302 	and.w	r3, r3, #2
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d122      	bne.n	800ab5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	f003 0302 	and.w	r3, r3, #2
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d11b      	bne.n	800ab5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f06f 0202 	mvn.w	r2, #2
 800ab2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	f003 0303 	and.w	r3, r3, #3
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d003      	beq.n	800ab48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f9b5 	bl	800aeb0 <HAL_TIM_IC_CaptureCallback>
 800ab46:	e005      	b.n	800ab54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f9a7 	bl	800ae9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 f9b8 	bl	800aec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	f003 0304 	and.w	r3, r3, #4
 800ab64:	2b04      	cmp	r3, #4
 800ab66:	d122      	bne.n	800abae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	68db      	ldr	r3, [r3, #12]
 800ab6e:	f003 0304 	and.w	r3, r3, #4
 800ab72:	2b04      	cmp	r3, #4
 800ab74:	d11b      	bne.n	800abae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f06f 0204 	mvn.w	r2, #4
 800ab7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2202      	movs	r2, #2
 800ab84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d003      	beq.n	800ab9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 f98b 	bl	800aeb0 <HAL_TIM_IC_CaptureCallback>
 800ab9a:	e005      	b.n	800aba8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 f97d 	bl	800ae9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f98e 	bl	800aec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2200      	movs	r2, #0
 800abac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	f003 0308 	and.w	r3, r3, #8
 800abb8:	2b08      	cmp	r3, #8
 800abba:	d122      	bne.n	800ac02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	68db      	ldr	r3, [r3, #12]
 800abc2:	f003 0308 	and.w	r3, r3, #8
 800abc6:	2b08      	cmp	r3, #8
 800abc8:	d11b      	bne.n	800ac02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f06f 0208 	mvn.w	r2, #8
 800abd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2204      	movs	r2, #4
 800abd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	69db      	ldr	r3, [r3, #28]
 800abe0:	f003 0303 	and.w	r3, r3, #3
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d003      	beq.n	800abf0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f961 	bl	800aeb0 <HAL_TIM_IC_CaptureCallback>
 800abee:	e005      	b.n	800abfc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f953 	bl	800ae9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f964 	bl	800aec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	691b      	ldr	r3, [r3, #16]
 800ac08:	f003 0310 	and.w	r3, r3, #16
 800ac0c:	2b10      	cmp	r3, #16
 800ac0e:	d122      	bne.n	800ac56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	68db      	ldr	r3, [r3, #12]
 800ac16:	f003 0310 	and.w	r3, r3, #16
 800ac1a:	2b10      	cmp	r3, #16
 800ac1c:	d11b      	bne.n	800ac56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f06f 0210 	mvn.w	r2, #16
 800ac26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2208      	movs	r2, #8
 800ac2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	69db      	ldr	r3, [r3, #28]
 800ac34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d003      	beq.n	800ac44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f000 f937 	bl	800aeb0 <HAL_TIM_IC_CaptureCallback>
 800ac42:	e005      	b.n	800ac50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 f929 	bl	800ae9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f000 f93a 	bl	800aec4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2200      	movs	r2, #0
 800ac54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	f003 0301 	and.w	r3, r3, #1
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d10e      	bne.n	800ac82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	f003 0301 	and.w	r3, r3, #1
 800ac6e:	2b01      	cmp	r3, #1
 800ac70:	d107      	bne.n	800ac82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f06f 0201 	mvn.w	r2, #1
 800ac7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7f9 fc23 	bl	80044c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	691b      	ldr	r3, [r3, #16]
 800ac88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac8c:	2b80      	cmp	r3, #128	; 0x80
 800ac8e:	d10e      	bne.n	800acae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	68db      	ldr	r3, [r3, #12]
 800ac96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac9a:	2b80      	cmp	r3, #128	; 0x80
 800ac9c:	d107      	bne.n	800acae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800aca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fc6d 	bl	800b588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb8:	2b40      	cmp	r3, #64	; 0x40
 800acba:	d10e      	bne.n	800acda <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc6:	2b40      	cmp	r3, #64	; 0x40
 800acc8:	d107      	bne.n	800acda <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f8ff 	bl	800aed8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	691b      	ldr	r3, [r3, #16]
 800ace0:	f003 0320 	and.w	r3, r3, #32
 800ace4:	2b20      	cmp	r3, #32
 800ace6:	d10e      	bne.n	800ad06 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f003 0320 	and.w	r3, r3, #32
 800acf2:	2b20      	cmp	r3, #32
 800acf4:	d107      	bne.n	800ad06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f06f 0220 	mvn.w	r2, #32
 800acfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 fc37 	bl	800b574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad06:	bf00      	nop
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
	...

0800ad10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad22:	2b01      	cmp	r3, #1
 800ad24:	d101      	bne.n	800ad2a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ad26:	2302      	movs	r3, #2
 800ad28:	e0b4      	b.n	800ae94 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2202      	movs	r2, #2
 800ad36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2b0c      	cmp	r3, #12
 800ad3e:	f200 809f 	bhi.w	800ae80 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ad42:	a201      	add	r2, pc, #4	; (adr r2, 800ad48 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ad44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad48:	0800ad7d 	.word	0x0800ad7d
 800ad4c:	0800ae81 	.word	0x0800ae81
 800ad50:	0800ae81 	.word	0x0800ae81
 800ad54:	0800ae81 	.word	0x0800ae81
 800ad58:	0800adbd 	.word	0x0800adbd
 800ad5c:	0800ae81 	.word	0x0800ae81
 800ad60:	0800ae81 	.word	0x0800ae81
 800ad64:	0800ae81 	.word	0x0800ae81
 800ad68:	0800adff 	.word	0x0800adff
 800ad6c:	0800ae81 	.word	0x0800ae81
 800ad70:	0800ae81 	.word	0x0800ae81
 800ad74:	0800ae81 	.word	0x0800ae81
 800ad78:	0800ae3f 	.word	0x0800ae3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68b9      	ldr	r1, [r7, #8]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 f952 	bl	800b02c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	699a      	ldr	r2, [r3, #24]
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f042 0208 	orr.w	r2, r2, #8
 800ad96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	699a      	ldr	r2, [r3, #24]
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f022 0204 	bic.w	r2, r2, #4
 800ada6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	6999      	ldr	r1, [r3, #24]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	691a      	ldr	r2, [r3, #16]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	619a      	str	r2, [r3, #24]
      break;
 800adba:	e062      	b.n	800ae82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	68b9      	ldr	r1, [r7, #8]
 800adc2:	4618      	mov	r0, r3
 800adc4:	f000 f9a2 	bl	800b10c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	699a      	ldr	r2, [r3, #24]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800add6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	699a      	ldr	r2, [r3, #24]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ade6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	6999      	ldr	r1, [r3, #24]
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	021a      	lsls	r2, r3, #8
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	619a      	str	r2, [r3, #24]
      break;
 800adfc:	e041      	b.n	800ae82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68b9      	ldr	r1, [r7, #8]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f000 f9f7 	bl	800b1f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	69da      	ldr	r2, [r3, #28]
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f042 0208 	orr.w	r2, r2, #8
 800ae18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	69da      	ldr	r2, [r3, #28]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f022 0204 	bic.w	r2, r2, #4
 800ae28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	69d9      	ldr	r1, [r3, #28]
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	691a      	ldr	r2, [r3, #16]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	61da      	str	r2, [r3, #28]
      break;
 800ae3c:	e021      	b.n	800ae82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68b9      	ldr	r1, [r7, #8]
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fa4b 	bl	800b2e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	69da      	ldr	r2, [r3, #28]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	69da      	ldr	r2, [r3, #28]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	69d9      	ldr	r1, [r3, #28]
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	691b      	ldr	r3, [r3, #16]
 800ae74:	021a      	lsls	r2, r3, #8
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	430a      	orrs	r2, r1
 800ae7c:	61da      	str	r2, [r3, #28]
      break;
 800ae7e:	e000      	b.n	800ae82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800ae80:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2201      	movs	r2, #1
 800ae86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae92:	2300      	movs	r3, #0
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3710      	adds	r7, #16
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b083      	sub	sp, #12
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aecc:	bf00      	nop
 800aece:	370c      	adds	r7, #12
 800aed0:	46bd      	mov	sp, r7
 800aed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed6:	4770      	bx	lr

0800aed8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	4a40      	ldr	r2, [pc, #256]	; (800b000 <TIM_Base_SetConfig+0x114>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d013      	beq.n	800af2c <TIM_Base_SetConfig+0x40>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af0a:	d00f      	beq.n	800af2c <TIM_Base_SetConfig+0x40>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	4a3d      	ldr	r2, [pc, #244]	; (800b004 <TIM_Base_SetConfig+0x118>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d00b      	beq.n	800af2c <TIM_Base_SetConfig+0x40>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4a3c      	ldr	r2, [pc, #240]	; (800b008 <TIM_Base_SetConfig+0x11c>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d007      	beq.n	800af2c <TIM_Base_SetConfig+0x40>
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	4a3b      	ldr	r2, [pc, #236]	; (800b00c <TIM_Base_SetConfig+0x120>)
 800af20:	4293      	cmp	r3, r2
 800af22:	d003      	beq.n	800af2c <TIM_Base_SetConfig+0x40>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	4a3a      	ldr	r2, [pc, #232]	; (800b010 <TIM_Base_SetConfig+0x124>)
 800af28:	4293      	cmp	r3, r2
 800af2a:	d108      	bne.n	800af3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	68fa      	ldr	r2, [r7, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4a2f      	ldr	r2, [pc, #188]	; (800b000 <TIM_Base_SetConfig+0x114>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d02b      	beq.n	800af9e <TIM_Base_SetConfig+0xb2>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af4c:	d027      	beq.n	800af9e <TIM_Base_SetConfig+0xb2>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	4a2c      	ldr	r2, [pc, #176]	; (800b004 <TIM_Base_SetConfig+0x118>)
 800af52:	4293      	cmp	r3, r2
 800af54:	d023      	beq.n	800af9e <TIM_Base_SetConfig+0xb2>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	4a2b      	ldr	r2, [pc, #172]	; (800b008 <TIM_Base_SetConfig+0x11c>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d01f      	beq.n	800af9e <TIM_Base_SetConfig+0xb2>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	4a2a      	ldr	r2, [pc, #168]	; (800b00c <TIM_Base_SetConfig+0x120>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d01b      	beq.n	800af9e <TIM_Base_SetConfig+0xb2>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	4a29      	ldr	r2, [pc, #164]	; (800b010 <TIM_Base_SetConfig+0x124>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d017      	beq.n	800af9e <TIM_Base_SetConfig+0xb2>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	4a28      	ldr	r2, [pc, #160]	; (800b014 <TIM_Base_SetConfig+0x128>)
 800af72:	4293      	cmp	r3, r2
 800af74:	d013      	beq.n	800af9e <TIM_Base_SetConfig+0xb2>
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	4a27      	ldr	r2, [pc, #156]	; (800b018 <TIM_Base_SetConfig+0x12c>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d00f      	beq.n	800af9e <TIM_Base_SetConfig+0xb2>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	4a26      	ldr	r2, [pc, #152]	; (800b01c <TIM_Base_SetConfig+0x130>)
 800af82:	4293      	cmp	r3, r2
 800af84:	d00b      	beq.n	800af9e <TIM_Base_SetConfig+0xb2>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	4a25      	ldr	r2, [pc, #148]	; (800b020 <TIM_Base_SetConfig+0x134>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d007      	beq.n	800af9e <TIM_Base_SetConfig+0xb2>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a24      	ldr	r2, [pc, #144]	; (800b024 <TIM_Base_SetConfig+0x138>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d003      	beq.n	800af9e <TIM_Base_SetConfig+0xb2>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	4a23      	ldr	r2, [pc, #140]	; (800b028 <TIM_Base_SetConfig+0x13c>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d108      	bne.n	800afb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	68db      	ldr	r3, [r3, #12]
 800afaa:	68fa      	ldr	r2, [r7, #12]
 800afac:	4313      	orrs	r3, r2
 800afae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	4313      	orrs	r3, r2
 800afbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68fa      	ldr	r2, [r7, #12]
 800afc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	689a      	ldr	r2, [r3, #8]
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681a      	ldr	r2, [r3, #0]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	4a0a      	ldr	r2, [pc, #40]	; (800b000 <TIM_Base_SetConfig+0x114>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d003      	beq.n	800afe4 <TIM_Base_SetConfig+0xf8>
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	4a0c      	ldr	r2, [pc, #48]	; (800b010 <TIM_Base_SetConfig+0x124>)
 800afe0:	4293      	cmp	r3, r2
 800afe2:	d103      	bne.n	800afec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	691a      	ldr	r2, [r3, #16]
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	615a      	str	r2, [r3, #20]
}
 800aff2:	bf00      	nop
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	40010000 	.word	0x40010000
 800b004:	40000400 	.word	0x40000400
 800b008:	40000800 	.word	0x40000800
 800b00c:	40000c00 	.word	0x40000c00
 800b010:	40010400 	.word	0x40010400
 800b014:	40014000 	.word	0x40014000
 800b018:	40014400 	.word	0x40014400
 800b01c:	40014800 	.word	0x40014800
 800b020:	40001800 	.word	0x40001800
 800b024:	40001c00 	.word	0x40001c00
 800b028:	40002000 	.word	0x40002000

0800b02c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b02c:	b480      	push	{r7}
 800b02e:	b087      	sub	sp, #28
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
 800b034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	f023 0201 	bic.w	r2, r3, #1
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6a1b      	ldr	r3, [r3, #32]
 800b046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b05a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f023 0303 	bic.w	r3, r3, #3
 800b062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f023 0302 	bic.w	r3, r3, #2
 800b074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	4313      	orrs	r3, r2
 800b07e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a20      	ldr	r2, [pc, #128]	; (800b104 <TIM_OC1_SetConfig+0xd8>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d003      	beq.n	800b090 <TIM_OC1_SetConfig+0x64>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a1f      	ldr	r2, [pc, #124]	; (800b108 <TIM_OC1_SetConfig+0xdc>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d10c      	bne.n	800b0aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b090:	697b      	ldr	r3, [r7, #20]
 800b092:	f023 0308 	bic.w	r3, r3, #8
 800b096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b098:	683b      	ldr	r3, [r7, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	f023 0304 	bic.w	r3, r3, #4
 800b0a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a15      	ldr	r2, [pc, #84]	; (800b104 <TIM_OC1_SetConfig+0xd8>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d003      	beq.n	800b0ba <TIM_OC1_SetConfig+0x8e>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a14      	ldr	r2, [pc, #80]	; (800b108 <TIM_OC1_SetConfig+0xdc>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d111      	bne.n	800b0de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b0c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b0c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	693a      	ldr	r2, [r7, #16]
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	699b      	ldr	r3, [r3, #24]
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	4313      	orrs	r3, r2
 800b0dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	697a      	ldr	r2, [r7, #20]
 800b0f6:	621a      	str	r2, [r3, #32]
}
 800b0f8:	bf00      	nop
 800b0fa:	371c      	adds	r7, #28
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b102:	4770      	bx	lr
 800b104:	40010000 	.word	0x40010000
 800b108:	40010400 	.word	0x40010400

0800b10c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b087      	sub	sp, #28
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	f023 0210 	bic.w	r2, r3, #16
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6a1b      	ldr	r3, [r3, #32]
 800b126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	685b      	ldr	r3, [r3, #4]
 800b12c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	699b      	ldr	r3, [r3, #24]
 800b132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b13a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	021b      	lsls	r3, r3, #8
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	f023 0320 	bic.w	r3, r3, #32
 800b156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	011b      	lsls	r3, r3, #4
 800b15e:	697a      	ldr	r2, [r7, #20]
 800b160:	4313      	orrs	r3, r2
 800b162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	4a22      	ldr	r2, [pc, #136]	; (800b1f0 <TIM_OC2_SetConfig+0xe4>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d003      	beq.n	800b174 <TIM_OC2_SetConfig+0x68>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	4a21      	ldr	r2, [pc, #132]	; (800b1f4 <TIM_OC2_SetConfig+0xe8>)
 800b170:	4293      	cmp	r3, r2
 800b172:	d10d      	bne.n	800b190 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b174:	697b      	ldr	r3, [r7, #20]
 800b176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b17a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	68db      	ldr	r3, [r3, #12]
 800b180:	011b      	lsls	r3, r3, #4
 800b182:	697a      	ldr	r2, [r7, #20]
 800b184:	4313      	orrs	r3, r2
 800b186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b18e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4a17      	ldr	r2, [pc, #92]	; (800b1f0 <TIM_OC2_SetConfig+0xe4>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d003      	beq.n	800b1a0 <TIM_OC2_SetConfig+0x94>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a16      	ldr	r2, [pc, #88]	; (800b1f4 <TIM_OC2_SetConfig+0xe8>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d113      	bne.n	800b1c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b1a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b1ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	695b      	ldr	r3, [r3, #20]
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	693a      	ldr	r2, [r7, #16]
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	699b      	ldr	r3, [r3, #24]
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	693a      	ldr	r2, [r7, #16]
 800b1cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	685a      	ldr	r2, [r3, #4]
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	697a      	ldr	r2, [r7, #20]
 800b1e0:	621a      	str	r2, [r3, #32]
}
 800b1e2:	bf00      	nop
 800b1e4:	371c      	adds	r7, #28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop
 800b1f0:	40010000 	.word	0x40010000
 800b1f4:	40010400 	.word	0x40010400

0800b1f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b1f8:	b480      	push	{r7}
 800b1fa:	b087      	sub	sp, #28
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
 800b200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	6a1b      	ldr	r3, [r3, #32]
 800b206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	6a1b      	ldr	r3, [r3, #32]
 800b212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	69db      	ldr	r3, [r3, #28]
 800b21e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	f023 0303 	bic.w	r3, r3, #3
 800b22e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	4313      	orrs	r3, r2
 800b238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	689b      	ldr	r3, [r3, #8]
 800b246:	021b      	lsls	r3, r3, #8
 800b248:	697a      	ldr	r2, [r7, #20]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a21      	ldr	r2, [pc, #132]	; (800b2d8 <TIM_OC3_SetConfig+0xe0>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d003      	beq.n	800b25e <TIM_OC3_SetConfig+0x66>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a20      	ldr	r2, [pc, #128]	; (800b2dc <TIM_OC3_SetConfig+0xe4>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d10d      	bne.n	800b27a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	68db      	ldr	r3, [r3, #12]
 800b26a:	021b      	lsls	r3, r3, #8
 800b26c:	697a      	ldr	r2, [r7, #20]
 800b26e:	4313      	orrs	r3, r2
 800b270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	4a16      	ldr	r2, [pc, #88]	; (800b2d8 <TIM_OC3_SetConfig+0xe0>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d003      	beq.n	800b28a <TIM_OC3_SetConfig+0x92>
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a15      	ldr	r2, [pc, #84]	; (800b2dc <TIM_OC3_SetConfig+0xe4>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d113      	bne.n	800b2b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	695b      	ldr	r3, [r3, #20]
 800b29e:	011b      	lsls	r3, r3, #4
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	011b      	lsls	r3, r3, #4
 800b2ac:	693a      	ldr	r2, [r7, #16]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68fa      	ldr	r2, [r7, #12]
 800b2bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	685a      	ldr	r2, [r3, #4]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	621a      	str	r2, [r3, #32]
}
 800b2cc:	bf00      	nop
 800b2ce:	371c      	adds	r7, #28
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	40010000 	.word	0x40010000
 800b2dc:	40010400 	.word	0x40010400

0800b2e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b087      	sub	sp, #28
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a1b      	ldr	r3, [r3, #32]
 800b2fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	69db      	ldr	r3, [r3, #28]
 800b306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b30e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	021b      	lsls	r3, r3, #8
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	4313      	orrs	r3, r2
 800b322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b32a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	031b      	lsls	r3, r3, #12
 800b332:	693a      	ldr	r2, [r7, #16]
 800b334:	4313      	orrs	r3, r2
 800b336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	4a12      	ldr	r2, [pc, #72]	; (800b384 <TIM_OC4_SetConfig+0xa4>)
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d003      	beq.n	800b348 <TIM_OC4_SetConfig+0x68>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	4a11      	ldr	r2, [pc, #68]	; (800b388 <TIM_OC4_SetConfig+0xa8>)
 800b344:	4293      	cmp	r3, r2
 800b346:	d109      	bne.n	800b35c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b34e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	695b      	ldr	r3, [r3, #20]
 800b354:	019b      	lsls	r3, r3, #6
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	4313      	orrs	r3, r2
 800b35a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	697a      	ldr	r2, [r7, #20]
 800b360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	68fa      	ldr	r2, [r7, #12]
 800b366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	685a      	ldr	r2, [r3, #4]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	693a      	ldr	r2, [r7, #16]
 800b374:	621a      	str	r2, [r3, #32]
}
 800b376:	bf00      	nop
 800b378:	371c      	adds	r7, #28
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	40010000 	.word	0x40010000
 800b388:	40010400 	.word	0x40010400

0800b38c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	f003 031f 	and.w	r3, r3, #31
 800b39e:	2201      	movs	r2, #1
 800b3a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6a1a      	ldr	r2, [r3, #32]
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	43db      	mvns	r3, r3
 800b3ae:	401a      	ands	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6a1a      	ldr	r2, [r3, #32]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	f003 031f 	and.w	r3, r3, #31
 800b3be:	6879      	ldr	r1, [r7, #4]
 800b3c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	621a      	str	r2, [r3, #32]
}
 800b3ca:	bf00      	nop
 800b3cc:	371c      	adds	r7, #28
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr
	...

0800b3d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d101      	bne.n	800b3f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	e05a      	b.n	800b4a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2202      	movs	r2, #2
 800b3fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	4313      	orrs	r3, r2
 800b420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	68fa      	ldr	r2, [r7, #12]
 800b428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	4a21      	ldr	r2, [pc, #132]	; (800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d022      	beq.n	800b47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b43c:	d01d      	beq.n	800b47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	4a1d      	ldr	r2, [pc, #116]	; (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d018      	beq.n	800b47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4a1b      	ldr	r2, [pc, #108]	; (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d013      	beq.n	800b47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4a1a      	ldr	r2, [pc, #104]	; (800b4c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d00e      	beq.n	800b47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	4a18      	ldr	r2, [pc, #96]	; (800b4c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b462:	4293      	cmp	r3, r2
 800b464:	d009      	beq.n	800b47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	4a17      	ldr	r2, [pc, #92]	; (800b4c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b46c:	4293      	cmp	r3, r2
 800b46e:	d004      	beq.n	800b47a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a15      	ldr	r2, [pc, #84]	; (800b4cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d10c      	bne.n	800b494 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	4313      	orrs	r3, r2
 800b48a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	68ba      	ldr	r2, [r7, #8]
 800b492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2201      	movs	r2, #1
 800b498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3714      	adds	r7, #20
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr
 800b4b2:	bf00      	nop
 800b4b4:	40010000 	.word	0x40010000
 800b4b8:	40000400 	.word	0x40000400
 800b4bc:	40000800 	.word	0x40000800
 800b4c0:	40000c00 	.word	0x40000c00
 800b4c4:	40010400 	.word	0x40010400
 800b4c8:	40014000 	.word	0x40014000
 800b4cc:	40001800 	.word	0x40001800

0800b4d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4d0:	b480      	push	{r7}
 800b4d2:	b085      	sub	sp, #20
 800b4d4:	af00      	add	r7, sp, #0
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d101      	bne.n	800b4ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b4e8:	2302      	movs	r3, #2
 800b4ea:	e03d      	b.n	800b568 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	4313      	orrs	r3, r2
 800b500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	4313      	orrs	r3, r2
 800b50e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	4313      	orrs	r3, r2
 800b52a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	4313      	orrs	r3, r2
 800b538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	695b      	ldr	r3, [r3, #20]
 800b544:	4313      	orrs	r3, r2
 800b546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b54e:	683b      	ldr	r3, [r7, #0]
 800b550:	69db      	ldr	r3, [r3, #28]
 800b552:	4313      	orrs	r3, r2
 800b554:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d101      	bne.n	800b5ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e03f      	b.n	800b62e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d106      	bne.n	800b5c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f7fb ffec 	bl	80075a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2224      	movs	r2, #36	; 0x24
 800b5cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68da      	ldr	r2, [r3, #12]
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b5de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f000 f90b 	bl	800b7fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	691a      	ldr	r2, [r3, #16]
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b5f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	695a      	ldr	r2, [r3, #20]
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b604:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	68da      	ldr	r2, [r3, #12]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b614:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2220      	movs	r2, #32
 800b620:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	2220      	movs	r2, #32
 800b628:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}

0800b636 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b088      	sub	sp, #32
 800b63a:	af02      	add	r7, sp, #8
 800b63c:	60f8      	str	r0, [r7, #12]
 800b63e:	60b9      	str	r1, [r7, #8]
 800b640:	603b      	str	r3, [r7, #0]
 800b642:	4613      	mov	r3, r2
 800b644:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800b646:	2300      	movs	r3, #0
 800b648:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b650:	b2db      	uxtb	r3, r3
 800b652:	2b20      	cmp	r3, #32
 800b654:	f040 8083 	bne.w	800b75e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d002      	beq.n	800b664 <HAL_UART_Transmit+0x2e>
 800b65e:	88fb      	ldrh	r3, [r7, #6]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d101      	bne.n	800b668 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e07b      	b.n	800b760 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d101      	bne.n	800b676 <HAL_UART_Transmit+0x40>
 800b672:	2302      	movs	r3, #2
 800b674:	e074      	b.n	800b760 <HAL_UART_Transmit+0x12a>
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2201      	movs	r2, #1
 800b67a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2221      	movs	r2, #33	; 0x21
 800b688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800b68c:	f7fc f996 	bl	80079bc <HAL_GetTick>
 800b690:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	88fa      	ldrh	r2, [r7, #6]
 800b696:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	88fa      	ldrh	r2, [r7, #6]
 800b69c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800b6a6:	e042      	b.n	800b72e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	3b01      	subs	r3, #1
 800b6b0:	b29a      	uxth	r2, r3
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	689b      	ldr	r3, [r3, #8]
 800b6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6be:	d122      	bne.n	800b706 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	2180      	movs	r1, #128	; 0x80
 800b6ca:	68f8      	ldr	r0, [r7, #12]
 800b6cc:	f000 f84c 	bl	800b768 <UART_WaitOnFlagUntilTimeout>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d001      	beq.n	800b6da <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	e042      	b.n	800b760 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b6ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d103      	bne.n	800b6fe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	3302      	adds	r3, #2
 800b6fa:	60bb      	str	r3, [r7, #8]
 800b6fc:	e017      	b.n	800b72e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	3301      	adds	r3, #1
 800b702:	60bb      	str	r3, [r7, #8]
 800b704:	e013      	b.n	800b72e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	2200      	movs	r2, #0
 800b70e:	2180      	movs	r1, #128	; 0x80
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f000 f829 	bl	800b768 <UART_WaitOnFlagUntilTimeout>
 800b716:	4603      	mov	r3, r0
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d001      	beq.n	800b720 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800b71c:	2303      	movs	r3, #3
 800b71e:	e01f      	b.n	800b760 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	1c5a      	adds	r2, r3, #1
 800b724:	60ba      	str	r2, [r7, #8]
 800b726:	781a      	ldrb	r2, [r3, #0]
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b732:	b29b      	uxth	r3, r3
 800b734:	2b00      	cmp	r3, #0
 800b736:	d1b7      	bne.n	800b6a8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	2200      	movs	r2, #0
 800b740:	2140      	movs	r1, #64	; 0x40
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f000 f810 	bl	800b768 <UART_WaitOnFlagUntilTimeout>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d001      	beq.n	800b752 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800b74e:	2303      	movs	r3, #3
 800b750:	e006      	b.n	800b760 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2220      	movs	r2, #32
 800b756:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800b75a:	2300      	movs	r3, #0
 800b75c:	e000      	b.n	800b760 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800b75e:	2302      	movs	r3, #2
  }
}
 800b760:	4618      	mov	r0, r3
 800b762:	3718      	adds	r7, #24
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}

0800b768 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	603b      	str	r3, [r7, #0]
 800b774:	4613      	mov	r3, r2
 800b776:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b778:	e02c      	b.n	800b7d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b77a:	69bb      	ldr	r3, [r7, #24]
 800b77c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b780:	d028      	beq.n	800b7d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d007      	beq.n	800b798 <UART_WaitOnFlagUntilTimeout+0x30>
 800b788:	f7fc f918 	bl	80079bc <HAL_GetTick>
 800b78c:	4602      	mov	r2, r0
 800b78e:	683b      	ldr	r3, [r7, #0]
 800b790:	1ad3      	subs	r3, r2, r3
 800b792:	69ba      	ldr	r2, [r7, #24]
 800b794:	429a      	cmp	r2, r3
 800b796:	d21d      	bcs.n	800b7d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68da      	ldr	r2, [r3, #12]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b7a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	695a      	ldr	r2, [r3, #20]
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f022 0201 	bic.w	r2, r2, #1
 800b7b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	2220      	movs	r2, #32
 800b7bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2220      	movs	r2, #32
 800b7c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	e00f      	b.n	800b7f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681a      	ldr	r2, [r3, #0]
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	4013      	ands	r3, r2
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	bf0c      	ite	eq
 800b7e4:	2301      	moveq	r3, #1
 800b7e6:	2300      	movne	r3, #0
 800b7e8:	b2db      	uxtb	r3, r3
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	79fb      	ldrb	r3, [r7, #7]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d0c3      	beq.n	800b77a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	b085      	sub	sp, #20
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	691b      	ldr	r3, [r3, #16]
 800b80c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	68da      	ldr	r2, [r3, #12]
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	430a      	orrs	r2, r1
 800b81a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	689a      	ldr	r2, [r3, #8]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	431a      	orrs	r2, r3
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	695b      	ldr	r3, [r3, #20]
 800b82a:	431a      	orrs	r2, r3
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	69db      	ldr	r3, [r3, #28]
 800b830:	4313      	orrs	r3, r2
 800b832:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b83e:	f023 030c 	bic.w	r3, r3, #12
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	6812      	ldr	r2, [r2, #0]
 800b846:	68f9      	ldr	r1, [r7, #12]
 800b848:	430b      	orrs	r3, r1
 800b84a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	699a      	ldr	r2, [r3, #24]
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	430a      	orrs	r2, r1
 800b860:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	69db      	ldr	r3, [r3, #28]
 800b866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b86a:	f040 818b 	bne.w	800bb84 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4ac1      	ldr	r2, [pc, #772]	; (800bb78 <UART_SetConfig+0x37c>)
 800b874:	4293      	cmp	r3, r2
 800b876:	d005      	beq.n	800b884 <UART_SetConfig+0x88>
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4abf      	ldr	r2, [pc, #764]	; (800bb7c <UART_SetConfig+0x380>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	f040 80bd 	bne.w	800b9fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b884:	f7fe fa52 	bl	8009d2c <HAL_RCC_GetPCLK2Freq>
 800b888:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	461d      	mov	r5, r3
 800b88e:	f04f 0600 	mov.w	r6, #0
 800b892:	46a8      	mov	r8, r5
 800b894:	46b1      	mov	r9, r6
 800b896:	eb18 0308 	adds.w	r3, r8, r8
 800b89a:	eb49 0409 	adc.w	r4, r9, r9
 800b89e:	4698      	mov	r8, r3
 800b8a0:	46a1      	mov	r9, r4
 800b8a2:	eb18 0805 	adds.w	r8, r8, r5
 800b8a6:	eb49 0906 	adc.w	r9, r9, r6
 800b8aa:	f04f 0100 	mov.w	r1, #0
 800b8ae:	f04f 0200 	mov.w	r2, #0
 800b8b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b8b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b8ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b8be:	4688      	mov	r8, r1
 800b8c0:	4691      	mov	r9, r2
 800b8c2:	eb18 0005 	adds.w	r0, r8, r5
 800b8c6:	eb49 0106 	adc.w	r1, r9, r6
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	461d      	mov	r5, r3
 800b8d0:	f04f 0600 	mov.w	r6, #0
 800b8d4:	196b      	adds	r3, r5, r5
 800b8d6:	eb46 0406 	adc.w	r4, r6, r6
 800b8da:	461a      	mov	r2, r3
 800b8dc:	4623      	mov	r3, r4
 800b8de:	f7f5 f9d3 	bl	8000c88 <__aeabi_uldivmod>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	460c      	mov	r4, r1
 800b8e6:	461a      	mov	r2, r3
 800b8e8:	4ba5      	ldr	r3, [pc, #660]	; (800bb80 <UART_SetConfig+0x384>)
 800b8ea:	fba3 2302 	umull	r2, r3, r3, r2
 800b8ee:	095b      	lsrs	r3, r3, #5
 800b8f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	461d      	mov	r5, r3
 800b8f8:	f04f 0600 	mov.w	r6, #0
 800b8fc:	46a9      	mov	r9, r5
 800b8fe:	46b2      	mov	sl, r6
 800b900:	eb19 0309 	adds.w	r3, r9, r9
 800b904:	eb4a 040a 	adc.w	r4, sl, sl
 800b908:	4699      	mov	r9, r3
 800b90a:	46a2      	mov	sl, r4
 800b90c:	eb19 0905 	adds.w	r9, r9, r5
 800b910:	eb4a 0a06 	adc.w	sl, sl, r6
 800b914:	f04f 0100 	mov.w	r1, #0
 800b918:	f04f 0200 	mov.w	r2, #0
 800b91c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b920:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b924:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b928:	4689      	mov	r9, r1
 800b92a:	4692      	mov	sl, r2
 800b92c:	eb19 0005 	adds.w	r0, r9, r5
 800b930:	eb4a 0106 	adc.w	r1, sl, r6
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	461d      	mov	r5, r3
 800b93a:	f04f 0600 	mov.w	r6, #0
 800b93e:	196b      	adds	r3, r5, r5
 800b940:	eb46 0406 	adc.w	r4, r6, r6
 800b944:	461a      	mov	r2, r3
 800b946:	4623      	mov	r3, r4
 800b948:	f7f5 f99e 	bl	8000c88 <__aeabi_uldivmod>
 800b94c:	4603      	mov	r3, r0
 800b94e:	460c      	mov	r4, r1
 800b950:	461a      	mov	r2, r3
 800b952:	4b8b      	ldr	r3, [pc, #556]	; (800bb80 <UART_SetConfig+0x384>)
 800b954:	fba3 1302 	umull	r1, r3, r3, r2
 800b958:	095b      	lsrs	r3, r3, #5
 800b95a:	2164      	movs	r1, #100	; 0x64
 800b95c:	fb01 f303 	mul.w	r3, r1, r3
 800b960:	1ad3      	subs	r3, r2, r3
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	3332      	adds	r3, #50	; 0x32
 800b966:	4a86      	ldr	r2, [pc, #536]	; (800bb80 <UART_SetConfig+0x384>)
 800b968:	fba2 2303 	umull	r2, r3, r2, r3
 800b96c:	095b      	lsrs	r3, r3, #5
 800b96e:	005b      	lsls	r3, r3, #1
 800b970:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b974:	4498      	add	r8, r3
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	461d      	mov	r5, r3
 800b97a:	f04f 0600 	mov.w	r6, #0
 800b97e:	46a9      	mov	r9, r5
 800b980:	46b2      	mov	sl, r6
 800b982:	eb19 0309 	adds.w	r3, r9, r9
 800b986:	eb4a 040a 	adc.w	r4, sl, sl
 800b98a:	4699      	mov	r9, r3
 800b98c:	46a2      	mov	sl, r4
 800b98e:	eb19 0905 	adds.w	r9, r9, r5
 800b992:	eb4a 0a06 	adc.w	sl, sl, r6
 800b996:	f04f 0100 	mov.w	r1, #0
 800b99a:	f04f 0200 	mov.w	r2, #0
 800b99e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b9a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b9a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b9aa:	4689      	mov	r9, r1
 800b9ac:	4692      	mov	sl, r2
 800b9ae:	eb19 0005 	adds.w	r0, r9, r5
 800b9b2:	eb4a 0106 	adc.w	r1, sl, r6
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	461d      	mov	r5, r3
 800b9bc:	f04f 0600 	mov.w	r6, #0
 800b9c0:	196b      	adds	r3, r5, r5
 800b9c2:	eb46 0406 	adc.w	r4, r6, r6
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	4623      	mov	r3, r4
 800b9ca:	f7f5 f95d 	bl	8000c88 <__aeabi_uldivmod>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	4b6a      	ldr	r3, [pc, #424]	; (800bb80 <UART_SetConfig+0x384>)
 800b9d6:	fba3 1302 	umull	r1, r3, r3, r2
 800b9da:	095b      	lsrs	r3, r3, #5
 800b9dc:	2164      	movs	r1, #100	; 0x64
 800b9de:	fb01 f303 	mul.w	r3, r1, r3
 800b9e2:	1ad3      	subs	r3, r2, r3
 800b9e4:	00db      	lsls	r3, r3, #3
 800b9e6:	3332      	adds	r3, #50	; 0x32
 800b9e8:	4a65      	ldr	r2, [pc, #404]	; (800bb80 <UART_SetConfig+0x384>)
 800b9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ee:	095b      	lsrs	r3, r3, #5
 800b9f0:	f003 0207 	and.w	r2, r3, #7
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4442      	add	r2, r8
 800b9fa:	609a      	str	r2, [r3, #8]
 800b9fc:	e26f      	b.n	800bede <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b9fe:	f7fe f981 	bl	8009d04 <HAL_RCC_GetPCLK1Freq>
 800ba02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	461d      	mov	r5, r3
 800ba08:	f04f 0600 	mov.w	r6, #0
 800ba0c:	46a8      	mov	r8, r5
 800ba0e:	46b1      	mov	r9, r6
 800ba10:	eb18 0308 	adds.w	r3, r8, r8
 800ba14:	eb49 0409 	adc.w	r4, r9, r9
 800ba18:	4698      	mov	r8, r3
 800ba1a:	46a1      	mov	r9, r4
 800ba1c:	eb18 0805 	adds.w	r8, r8, r5
 800ba20:	eb49 0906 	adc.w	r9, r9, r6
 800ba24:	f04f 0100 	mov.w	r1, #0
 800ba28:	f04f 0200 	mov.w	r2, #0
 800ba2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ba30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ba34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ba38:	4688      	mov	r8, r1
 800ba3a:	4691      	mov	r9, r2
 800ba3c:	eb18 0005 	adds.w	r0, r8, r5
 800ba40:	eb49 0106 	adc.w	r1, r9, r6
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	685b      	ldr	r3, [r3, #4]
 800ba48:	461d      	mov	r5, r3
 800ba4a:	f04f 0600 	mov.w	r6, #0
 800ba4e:	196b      	adds	r3, r5, r5
 800ba50:	eb46 0406 	adc.w	r4, r6, r6
 800ba54:	461a      	mov	r2, r3
 800ba56:	4623      	mov	r3, r4
 800ba58:	f7f5 f916 	bl	8000c88 <__aeabi_uldivmod>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	460c      	mov	r4, r1
 800ba60:	461a      	mov	r2, r3
 800ba62:	4b47      	ldr	r3, [pc, #284]	; (800bb80 <UART_SetConfig+0x384>)
 800ba64:	fba3 2302 	umull	r2, r3, r3, r2
 800ba68:	095b      	lsrs	r3, r3, #5
 800ba6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	461d      	mov	r5, r3
 800ba72:	f04f 0600 	mov.w	r6, #0
 800ba76:	46a9      	mov	r9, r5
 800ba78:	46b2      	mov	sl, r6
 800ba7a:	eb19 0309 	adds.w	r3, r9, r9
 800ba7e:	eb4a 040a 	adc.w	r4, sl, sl
 800ba82:	4699      	mov	r9, r3
 800ba84:	46a2      	mov	sl, r4
 800ba86:	eb19 0905 	adds.w	r9, r9, r5
 800ba8a:	eb4a 0a06 	adc.w	sl, sl, r6
 800ba8e:	f04f 0100 	mov.w	r1, #0
 800ba92:	f04f 0200 	mov.w	r2, #0
 800ba96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ba9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800baa2:	4689      	mov	r9, r1
 800baa4:	4692      	mov	sl, r2
 800baa6:	eb19 0005 	adds.w	r0, r9, r5
 800baaa:	eb4a 0106 	adc.w	r1, sl, r6
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	461d      	mov	r5, r3
 800bab4:	f04f 0600 	mov.w	r6, #0
 800bab8:	196b      	adds	r3, r5, r5
 800baba:	eb46 0406 	adc.w	r4, r6, r6
 800babe:	461a      	mov	r2, r3
 800bac0:	4623      	mov	r3, r4
 800bac2:	f7f5 f8e1 	bl	8000c88 <__aeabi_uldivmod>
 800bac6:	4603      	mov	r3, r0
 800bac8:	460c      	mov	r4, r1
 800baca:	461a      	mov	r2, r3
 800bacc:	4b2c      	ldr	r3, [pc, #176]	; (800bb80 <UART_SetConfig+0x384>)
 800bace:	fba3 1302 	umull	r1, r3, r3, r2
 800bad2:	095b      	lsrs	r3, r3, #5
 800bad4:	2164      	movs	r1, #100	; 0x64
 800bad6:	fb01 f303 	mul.w	r3, r1, r3
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	00db      	lsls	r3, r3, #3
 800bade:	3332      	adds	r3, #50	; 0x32
 800bae0:	4a27      	ldr	r2, [pc, #156]	; (800bb80 <UART_SetConfig+0x384>)
 800bae2:	fba2 2303 	umull	r2, r3, r2, r3
 800bae6:	095b      	lsrs	r3, r3, #5
 800bae8:	005b      	lsls	r3, r3, #1
 800baea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800baee:	4498      	add	r8, r3
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	461d      	mov	r5, r3
 800baf4:	f04f 0600 	mov.w	r6, #0
 800baf8:	46a9      	mov	r9, r5
 800bafa:	46b2      	mov	sl, r6
 800bafc:	eb19 0309 	adds.w	r3, r9, r9
 800bb00:	eb4a 040a 	adc.w	r4, sl, sl
 800bb04:	4699      	mov	r9, r3
 800bb06:	46a2      	mov	sl, r4
 800bb08:	eb19 0905 	adds.w	r9, r9, r5
 800bb0c:	eb4a 0a06 	adc.w	sl, sl, r6
 800bb10:	f04f 0100 	mov.w	r1, #0
 800bb14:	f04f 0200 	mov.w	r2, #0
 800bb18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bb1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bb20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bb24:	4689      	mov	r9, r1
 800bb26:	4692      	mov	sl, r2
 800bb28:	eb19 0005 	adds.w	r0, r9, r5
 800bb2c:	eb4a 0106 	adc.w	r1, sl, r6
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	685b      	ldr	r3, [r3, #4]
 800bb34:	461d      	mov	r5, r3
 800bb36:	f04f 0600 	mov.w	r6, #0
 800bb3a:	196b      	adds	r3, r5, r5
 800bb3c:	eb46 0406 	adc.w	r4, r6, r6
 800bb40:	461a      	mov	r2, r3
 800bb42:	4623      	mov	r3, r4
 800bb44:	f7f5 f8a0 	bl	8000c88 <__aeabi_uldivmod>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	4b0c      	ldr	r3, [pc, #48]	; (800bb80 <UART_SetConfig+0x384>)
 800bb50:	fba3 1302 	umull	r1, r3, r3, r2
 800bb54:	095b      	lsrs	r3, r3, #5
 800bb56:	2164      	movs	r1, #100	; 0x64
 800bb58:	fb01 f303 	mul.w	r3, r1, r3
 800bb5c:	1ad3      	subs	r3, r2, r3
 800bb5e:	00db      	lsls	r3, r3, #3
 800bb60:	3332      	adds	r3, #50	; 0x32
 800bb62:	4a07      	ldr	r2, [pc, #28]	; (800bb80 <UART_SetConfig+0x384>)
 800bb64:	fba2 2303 	umull	r2, r3, r2, r3
 800bb68:	095b      	lsrs	r3, r3, #5
 800bb6a:	f003 0207 	and.w	r2, r3, #7
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	4442      	add	r2, r8
 800bb74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800bb76:	e1b2      	b.n	800bede <UART_SetConfig+0x6e2>
 800bb78:	40011000 	.word	0x40011000
 800bb7c:	40011400 	.word	0x40011400
 800bb80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4ad7      	ldr	r2, [pc, #860]	; (800bee8 <UART_SetConfig+0x6ec>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d005      	beq.n	800bb9a <UART_SetConfig+0x39e>
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4ad6      	ldr	r2, [pc, #856]	; (800beec <UART_SetConfig+0x6f0>)
 800bb94:	4293      	cmp	r3, r2
 800bb96:	f040 80d1 	bne.w	800bd3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800bb9a:	f7fe f8c7 	bl	8009d2c <HAL_RCC_GetPCLK2Freq>
 800bb9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	469a      	mov	sl, r3
 800bba4:	f04f 0b00 	mov.w	fp, #0
 800bba8:	46d0      	mov	r8, sl
 800bbaa:	46d9      	mov	r9, fp
 800bbac:	eb18 0308 	adds.w	r3, r8, r8
 800bbb0:	eb49 0409 	adc.w	r4, r9, r9
 800bbb4:	4698      	mov	r8, r3
 800bbb6:	46a1      	mov	r9, r4
 800bbb8:	eb18 080a 	adds.w	r8, r8, sl
 800bbbc:	eb49 090b 	adc.w	r9, r9, fp
 800bbc0:	f04f 0100 	mov.w	r1, #0
 800bbc4:	f04f 0200 	mov.w	r2, #0
 800bbc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bbcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bbd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bbd4:	4688      	mov	r8, r1
 800bbd6:	4691      	mov	r9, r2
 800bbd8:	eb1a 0508 	adds.w	r5, sl, r8
 800bbdc:	eb4b 0609 	adc.w	r6, fp, r9
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	f04f 0200 	mov.w	r2, #0
 800bbea:	f04f 0300 	mov.w	r3, #0
 800bbee:	f04f 0400 	mov.w	r4, #0
 800bbf2:	0094      	lsls	r4, r2, #2
 800bbf4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bbf8:	008b      	lsls	r3, r1, #2
 800bbfa:	461a      	mov	r2, r3
 800bbfc:	4623      	mov	r3, r4
 800bbfe:	4628      	mov	r0, r5
 800bc00:	4631      	mov	r1, r6
 800bc02:	f7f5 f841 	bl	8000c88 <__aeabi_uldivmod>
 800bc06:	4603      	mov	r3, r0
 800bc08:	460c      	mov	r4, r1
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	4bb8      	ldr	r3, [pc, #736]	; (800bef0 <UART_SetConfig+0x6f4>)
 800bc0e:	fba3 2302 	umull	r2, r3, r3, r2
 800bc12:	095b      	lsrs	r3, r3, #5
 800bc14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	469b      	mov	fp, r3
 800bc1c:	f04f 0c00 	mov.w	ip, #0
 800bc20:	46d9      	mov	r9, fp
 800bc22:	46e2      	mov	sl, ip
 800bc24:	eb19 0309 	adds.w	r3, r9, r9
 800bc28:	eb4a 040a 	adc.w	r4, sl, sl
 800bc2c:	4699      	mov	r9, r3
 800bc2e:	46a2      	mov	sl, r4
 800bc30:	eb19 090b 	adds.w	r9, r9, fp
 800bc34:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bc38:	f04f 0100 	mov.w	r1, #0
 800bc3c:	f04f 0200 	mov.w	r2, #0
 800bc40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bc48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bc4c:	4689      	mov	r9, r1
 800bc4e:	4692      	mov	sl, r2
 800bc50:	eb1b 0509 	adds.w	r5, fp, r9
 800bc54:	eb4c 060a 	adc.w	r6, ip, sl
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	f04f 0200 	mov.w	r2, #0
 800bc62:	f04f 0300 	mov.w	r3, #0
 800bc66:	f04f 0400 	mov.w	r4, #0
 800bc6a:	0094      	lsls	r4, r2, #2
 800bc6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bc70:	008b      	lsls	r3, r1, #2
 800bc72:	461a      	mov	r2, r3
 800bc74:	4623      	mov	r3, r4
 800bc76:	4628      	mov	r0, r5
 800bc78:	4631      	mov	r1, r6
 800bc7a:	f7f5 f805 	bl	8000c88 <__aeabi_uldivmod>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	460c      	mov	r4, r1
 800bc82:	461a      	mov	r2, r3
 800bc84:	4b9a      	ldr	r3, [pc, #616]	; (800bef0 <UART_SetConfig+0x6f4>)
 800bc86:	fba3 1302 	umull	r1, r3, r3, r2
 800bc8a:	095b      	lsrs	r3, r3, #5
 800bc8c:	2164      	movs	r1, #100	; 0x64
 800bc8e:	fb01 f303 	mul.w	r3, r1, r3
 800bc92:	1ad3      	subs	r3, r2, r3
 800bc94:	011b      	lsls	r3, r3, #4
 800bc96:	3332      	adds	r3, #50	; 0x32
 800bc98:	4a95      	ldr	r2, [pc, #596]	; (800bef0 <UART_SetConfig+0x6f4>)
 800bc9a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc9e:	095b      	lsrs	r3, r3, #5
 800bca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bca4:	4498      	add	r8, r3
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	469b      	mov	fp, r3
 800bcaa:	f04f 0c00 	mov.w	ip, #0
 800bcae:	46d9      	mov	r9, fp
 800bcb0:	46e2      	mov	sl, ip
 800bcb2:	eb19 0309 	adds.w	r3, r9, r9
 800bcb6:	eb4a 040a 	adc.w	r4, sl, sl
 800bcba:	4699      	mov	r9, r3
 800bcbc:	46a2      	mov	sl, r4
 800bcbe:	eb19 090b 	adds.w	r9, r9, fp
 800bcc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bcc6:	f04f 0100 	mov.w	r1, #0
 800bcca:	f04f 0200 	mov.w	r2, #0
 800bcce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bcd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bcd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bcda:	4689      	mov	r9, r1
 800bcdc:	4692      	mov	sl, r2
 800bcde:	eb1b 0509 	adds.w	r5, fp, r9
 800bce2:	eb4c 060a 	adc.w	r6, ip, sl
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	4619      	mov	r1, r3
 800bcec:	f04f 0200 	mov.w	r2, #0
 800bcf0:	f04f 0300 	mov.w	r3, #0
 800bcf4:	f04f 0400 	mov.w	r4, #0
 800bcf8:	0094      	lsls	r4, r2, #2
 800bcfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bcfe:	008b      	lsls	r3, r1, #2
 800bd00:	461a      	mov	r2, r3
 800bd02:	4623      	mov	r3, r4
 800bd04:	4628      	mov	r0, r5
 800bd06:	4631      	mov	r1, r6
 800bd08:	f7f4 ffbe 	bl	8000c88 <__aeabi_uldivmod>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	460c      	mov	r4, r1
 800bd10:	461a      	mov	r2, r3
 800bd12:	4b77      	ldr	r3, [pc, #476]	; (800bef0 <UART_SetConfig+0x6f4>)
 800bd14:	fba3 1302 	umull	r1, r3, r3, r2
 800bd18:	095b      	lsrs	r3, r3, #5
 800bd1a:	2164      	movs	r1, #100	; 0x64
 800bd1c:	fb01 f303 	mul.w	r3, r1, r3
 800bd20:	1ad3      	subs	r3, r2, r3
 800bd22:	011b      	lsls	r3, r3, #4
 800bd24:	3332      	adds	r3, #50	; 0x32
 800bd26:	4a72      	ldr	r2, [pc, #456]	; (800bef0 <UART_SetConfig+0x6f4>)
 800bd28:	fba2 2303 	umull	r2, r3, r2, r3
 800bd2c:	095b      	lsrs	r3, r3, #5
 800bd2e:	f003 020f 	and.w	r2, r3, #15
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4442      	add	r2, r8
 800bd38:	609a      	str	r2, [r3, #8]
 800bd3a:	e0d0      	b.n	800bede <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800bd3c:	f7fd ffe2 	bl	8009d04 <HAL_RCC_GetPCLK1Freq>
 800bd40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	469a      	mov	sl, r3
 800bd46:	f04f 0b00 	mov.w	fp, #0
 800bd4a:	46d0      	mov	r8, sl
 800bd4c:	46d9      	mov	r9, fp
 800bd4e:	eb18 0308 	adds.w	r3, r8, r8
 800bd52:	eb49 0409 	adc.w	r4, r9, r9
 800bd56:	4698      	mov	r8, r3
 800bd58:	46a1      	mov	r9, r4
 800bd5a:	eb18 080a 	adds.w	r8, r8, sl
 800bd5e:	eb49 090b 	adc.w	r9, r9, fp
 800bd62:	f04f 0100 	mov.w	r1, #0
 800bd66:	f04f 0200 	mov.w	r2, #0
 800bd6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bd6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bd72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bd76:	4688      	mov	r8, r1
 800bd78:	4691      	mov	r9, r2
 800bd7a:	eb1a 0508 	adds.w	r5, sl, r8
 800bd7e:	eb4b 0609 	adc.w	r6, fp, r9
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	4619      	mov	r1, r3
 800bd88:	f04f 0200 	mov.w	r2, #0
 800bd8c:	f04f 0300 	mov.w	r3, #0
 800bd90:	f04f 0400 	mov.w	r4, #0
 800bd94:	0094      	lsls	r4, r2, #2
 800bd96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bd9a:	008b      	lsls	r3, r1, #2
 800bd9c:	461a      	mov	r2, r3
 800bd9e:	4623      	mov	r3, r4
 800bda0:	4628      	mov	r0, r5
 800bda2:	4631      	mov	r1, r6
 800bda4:	f7f4 ff70 	bl	8000c88 <__aeabi_uldivmod>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	460c      	mov	r4, r1
 800bdac:	461a      	mov	r2, r3
 800bdae:	4b50      	ldr	r3, [pc, #320]	; (800bef0 <UART_SetConfig+0x6f4>)
 800bdb0:	fba3 2302 	umull	r2, r3, r3, r2
 800bdb4:	095b      	lsrs	r3, r3, #5
 800bdb6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	469b      	mov	fp, r3
 800bdbe:	f04f 0c00 	mov.w	ip, #0
 800bdc2:	46d9      	mov	r9, fp
 800bdc4:	46e2      	mov	sl, ip
 800bdc6:	eb19 0309 	adds.w	r3, r9, r9
 800bdca:	eb4a 040a 	adc.w	r4, sl, sl
 800bdce:	4699      	mov	r9, r3
 800bdd0:	46a2      	mov	sl, r4
 800bdd2:	eb19 090b 	adds.w	r9, r9, fp
 800bdd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bdda:	f04f 0100 	mov.w	r1, #0
 800bdde:	f04f 0200 	mov.w	r2, #0
 800bde2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bde6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bdea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bdee:	4689      	mov	r9, r1
 800bdf0:	4692      	mov	sl, r2
 800bdf2:	eb1b 0509 	adds.w	r5, fp, r9
 800bdf6:	eb4c 060a 	adc.w	r6, ip, sl
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	4619      	mov	r1, r3
 800be00:	f04f 0200 	mov.w	r2, #0
 800be04:	f04f 0300 	mov.w	r3, #0
 800be08:	f04f 0400 	mov.w	r4, #0
 800be0c:	0094      	lsls	r4, r2, #2
 800be0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800be12:	008b      	lsls	r3, r1, #2
 800be14:	461a      	mov	r2, r3
 800be16:	4623      	mov	r3, r4
 800be18:	4628      	mov	r0, r5
 800be1a:	4631      	mov	r1, r6
 800be1c:	f7f4 ff34 	bl	8000c88 <__aeabi_uldivmod>
 800be20:	4603      	mov	r3, r0
 800be22:	460c      	mov	r4, r1
 800be24:	461a      	mov	r2, r3
 800be26:	4b32      	ldr	r3, [pc, #200]	; (800bef0 <UART_SetConfig+0x6f4>)
 800be28:	fba3 1302 	umull	r1, r3, r3, r2
 800be2c:	095b      	lsrs	r3, r3, #5
 800be2e:	2164      	movs	r1, #100	; 0x64
 800be30:	fb01 f303 	mul.w	r3, r1, r3
 800be34:	1ad3      	subs	r3, r2, r3
 800be36:	011b      	lsls	r3, r3, #4
 800be38:	3332      	adds	r3, #50	; 0x32
 800be3a:	4a2d      	ldr	r2, [pc, #180]	; (800bef0 <UART_SetConfig+0x6f4>)
 800be3c:	fba2 2303 	umull	r2, r3, r2, r3
 800be40:	095b      	lsrs	r3, r3, #5
 800be42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800be46:	4498      	add	r8, r3
 800be48:	68bb      	ldr	r3, [r7, #8]
 800be4a:	469b      	mov	fp, r3
 800be4c:	f04f 0c00 	mov.w	ip, #0
 800be50:	46d9      	mov	r9, fp
 800be52:	46e2      	mov	sl, ip
 800be54:	eb19 0309 	adds.w	r3, r9, r9
 800be58:	eb4a 040a 	adc.w	r4, sl, sl
 800be5c:	4699      	mov	r9, r3
 800be5e:	46a2      	mov	sl, r4
 800be60:	eb19 090b 	adds.w	r9, r9, fp
 800be64:	eb4a 0a0c 	adc.w	sl, sl, ip
 800be68:	f04f 0100 	mov.w	r1, #0
 800be6c:	f04f 0200 	mov.w	r2, #0
 800be70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800be74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800be78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800be7c:	4689      	mov	r9, r1
 800be7e:	4692      	mov	sl, r2
 800be80:	eb1b 0509 	adds.w	r5, fp, r9
 800be84:	eb4c 060a 	adc.w	r6, ip, sl
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	4619      	mov	r1, r3
 800be8e:	f04f 0200 	mov.w	r2, #0
 800be92:	f04f 0300 	mov.w	r3, #0
 800be96:	f04f 0400 	mov.w	r4, #0
 800be9a:	0094      	lsls	r4, r2, #2
 800be9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bea0:	008b      	lsls	r3, r1, #2
 800bea2:	461a      	mov	r2, r3
 800bea4:	4623      	mov	r3, r4
 800bea6:	4628      	mov	r0, r5
 800bea8:	4631      	mov	r1, r6
 800beaa:	f7f4 feed 	bl	8000c88 <__aeabi_uldivmod>
 800beae:	4603      	mov	r3, r0
 800beb0:	460c      	mov	r4, r1
 800beb2:	461a      	mov	r2, r3
 800beb4:	4b0e      	ldr	r3, [pc, #56]	; (800bef0 <UART_SetConfig+0x6f4>)
 800beb6:	fba3 1302 	umull	r1, r3, r3, r2
 800beba:	095b      	lsrs	r3, r3, #5
 800bebc:	2164      	movs	r1, #100	; 0x64
 800bebe:	fb01 f303 	mul.w	r3, r1, r3
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	011b      	lsls	r3, r3, #4
 800bec6:	3332      	adds	r3, #50	; 0x32
 800bec8:	4a09      	ldr	r2, [pc, #36]	; (800bef0 <UART_SetConfig+0x6f4>)
 800beca:	fba2 2303 	umull	r2, r3, r2, r3
 800bece:	095b      	lsrs	r3, r3, #5
 800bed0:	f003 020f 	and.w	r2, r3, #15
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4442      	add	r2, r8
 800beda:	609a      	str	r2, [r3, #8]
}
 800bedc:	e7ff      	b.n	800bede <UART_SetConfig+0x6e2>
 800bede:	bf00      	nop
 800bee0:	3714      	adds	r7, #20
 800bee2:	46bd      	mov	sp, r7
 800bee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee8:	40011000 	.word	0x40011000
 800beec:	40011400 	.word	0x40011400
 800bef0:	51eb851f 	.word	0x51eb851f
 800bef4:	00000000 	.word	0x00000000

0800bef8 <cos>:
 800bef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800befa:	ec51 0b10 	vmov	r0, r1, d0
 800befe:	4a1e      	ldr	r2, [pc, #120]	; (800bf78 <cos+0x80>)
 800bf00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf04:	4293      	cmp	r3, r2
 800bf06:	dc06      	bgt.n	800bf16 <cos+0x1e>
 800bf08:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800bf70 <cos+0x78>
 800bf0c:	f000 fe10 	bl	800cb30 <__kernel_cos>
 800bf10:	ec51 0b10 	vmov	r0, r1, d0
 800bf14:	e007      	b.n	800bf26 <cos+0x2e>
 800bf16:	4a19      	ldr	r2, [pc, #100]	; (800bf7c <cos+0x84>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	dd09      	ble.n	800bf30 <cos+0x38>
 800bf1c:	ee10 2a10 	vmov	r2, s0
 800bf20:	460b      	mov	r3, r1
 800bf22:	f7f4 f9b1 	bl	8000288 <__aeabi_dsub>
 800bf26:	ec41 0b10 	vmov	d0, r0, r1
 800bf2a:	b005      	add	sp, #20
 800bf2c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf30:	4668      	mov	r0, sp
 800bf32:	f000 fa2d 	bl	800c390 <__ieee754_rem_pio2>
 800bf36:	f000 0003 	and.w	r0, r0, #3
 800bf3a:	2801      	cmp	r0, #1
 800bf3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf40:	ed9d 0b00 	vldr	d0, [sp]
 800bf44:	d007      	beq.n	800bf56 <cos+0x5e>
 800bf46:	2802      	cmp	r0, #2
 800bf48:	d00e      	beq.n	800bf68 <cos+0x70>
 800bf4a:	2800      	cmp	r0, #0
 800bf4c:	d0de      	beq.n	800bf0c <cos+0x14>
 800bf4e:	2001      	movs	r0, #1
 800bf50:	f001 f9f6 	bl	800d340 <__kernel_sin>
 800bf54:	e7dc      	b.n	800bf10 <cos+0x18>
 800bf56:	f001 f9f3 	bl	800d340 <__kernel_sin>
 800bf5a:	ec53 2b10 	vmov	r2, r3, d0
 800bf5e:	ee10 0a10 	vmov	r0, s0
 800bf62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bf66:	e7de      	b.n	800bf26 <cos+0x2e>
 800bf68:	f000 fde2 	bl	800cb30 <__kernel_cos>
 800bf6c:	e7f5      	b.n	800bf5a <cos+0x62>
 800bf6e:	bf00      	nop
	...
 800bf78:	3fe921fb 	.word	0x3fe921fb
 800bf7c:	7fefffff 	.word	0x7fefffff

0800bf80 <sin>:
 800bf80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf82:	ec51 0b10 	vmov	r0, r1, d0
 800bf86:	4a20      	ldr	r2, [pc, #128]	; (800c008 <sin+0x88>)
 800bf88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	dc07      	bgt.n	800bfa0 <sin+0x20>
 800bf90:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800c000 <sin+0x80>
 800bf94:	2000      	movs	r0, #0
 800bf96:	f001 f9d3 	bl	800d340 <__kernel_sin>
 800bf9a:	ec51 0b10 	vmov	r0, r1, d0
 800bf9e:	e007      	b.n	800bfb0 <sin+0x30>
 800bfa0:	4a1a      	ldr	r2, [pc, #104]	; (800c00c <sin+0x8c>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	dd09      	ble.n	800bfba <sin+0x3a>
 800bfa6:	ee10 2a10 	vmov	r2, s0
 800bfaa:	460b      	mov	r3, r1
 800bfac:	f7f4 f96c 	bl	8000288 <__aeabi_dsub>
 800bfb0:	ec41 0b10 	vmov	d0, r0, r1
 800bfb4:	b005      	add	sp, #20
 800bfb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfba:	4668      	mov	r0, sp
 800bfbc:	f000 f9e8 	bl	800c390 <__ieee754_rem_pio2>
 800bfc0:	f000 0003 	and.w	r0, r0, #3
 800bfc4:	2801      	cmp	r0, #1
 800bfc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfca:	ed9d 0b00 	vldr	d0, [sp]
 800bfce:	d004      	beq.n	800bfda <sin+0x5a>
 800bfd0:	2802      	cmp	r0, #2
 800bfd2:	d005      	beq.n	800bfe0 <sin+0x60>
 800bfd4:	b970      	cbnz	r0, 800bff4 <sin+0x74>
 800bfd6:	2001      	movs	r0, #1
 800bfd8:	e7dd      	b.n	800bf96 <sin+0x16>
 800bfda:	f000 fda9 	bl	800cb30 <__kernel_cos>
 800bfde:	e7dc      	b.n	800bf9a <sin+0x1a>
 800bfe0:	2001      	movs	r0, #1
 800bfe2:	f001 f9ad 	bl	800d340 <__kernel_sin>
 800bfe6:	ec53 2b10 	vmov	r2, r3, d0
 800bfea:	ee10 0a10 	vmov	r0, s0
 800bfee:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bff2:	e7dd      	b.n	800bfb0 <sin+0x30>
 800bff4:	f000 fd9c 	bl	800cb30 <__kernel_cos>
 800bff8:	e7f5      	b.n	800bfe6 <sin+0x66>
 800bffa:	bf00      	nop
 800bffc:	f3af 8000 	nop.w
	...
 800c008:	3fe921fb 	.word	0x3fe921fb
 800c00c:	7fefffff 	.word	0x7fefffff

0800c010 <cosf>:
 800c010:	ee10 3a10 	vmov	r3, s0
 800c014:	b507      	push	{r0, r1, r2, lr}
 800c016:	4a1c      	ldr	r2, [pc, #112]	; (800c088 <cosf+0x78>)
 800c018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c01c:	4293      	cmp	r3, r2
 800c01e:	dc04      	bgt.n	800c02a <cosf+0x1a>
 800c020:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800c08c <cosf+0x7c>
 800c024:	f001 fa46 	bl	800d4b4 <__kernel_cosf>
 800c028:	e004      	b.n	800c034 <cosf+0x24>
 800c02a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c02e:	db04      	blt.n	800c03a <cosf+0x2a>
 800c030:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c034:	b003      	add	sp, #12
 800c036:	f85d fb04 	ldr.w	pc, [sp], #4
 800c03a:	4668      	mov	r0, sp
 800c03c:	f000 fc4a 	bl	800c8d4 <__ieee754_rem_pio2f>
 800c040:	f000 0003 	and.w	r0, r0, #3
 800c044:	2801      	cmp	r0, #1
 800c046:	d007      	beq.n	800c058 <cosf+0x48>
 800c048:	2802      	cmp	r0, #2
 800c04a:	d00e      	beq.n	800c06a <cosf+0x5a>
 800c04c:	b9a0      	cbnz	r0, 800c078 <cosf+0x68>
 800c04e:	eddd 0a01 	vldr	s1, [sp, #4]
 800c052:	ed9d 0a00 	vldr	s0, [sp]
 800c056:	e7e5      	b.n	800c024 <cosf+0x14>
 800c058:	eddd 0a01 	vldr	s1, [sp, #4]
 800c05c:	ed9d 0a00 	vldr	s0, [sp]
 800c060:	f001 fd08 	bl	800da74 <__kernel_sinf>
 800c064:	eeb1 0a40 	vneg.f32	s0, s0
 800c068:	e7e4      	b.n	800c034 <cosf+0x24>
 800c06a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c06e:	ed9d 0a00 	vldr	s0, [sp]
 800c072:	f001 fa1f 	bl	800d4b4 <__kernel_cosf>
 800c076:	e7f5      	b.n	800c064 <cosf+0x54>
 800c078:	2001      	movs	r0, #1
 800c07a:	eddd 0a01 	vldr	s1, [sp, #4]
 800c07e:	ed9d 0a00 	vldr	s0, [sp]
 800c082:	f001 fcf7 	bl	800da74 <__kernel_sinf>
 800c086:	e7d5      	b.n	800c034 <cosf+0x24>
 800c088:	3f490fd8 	.word	0x3f490fd8
 800c08c:	00000000 	.word	0x00000000

0800c090 <sinf>:
 800c090:	ee10 3a10 	vmov	r3, s0
 800c094:	b507      	push	{r0, r1, r2, lr}
 800c096:	4a1d      	ldr	r2, [pc, #116]	; (800c10c <sinf+0x7c>)
 800c098:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c09c:	4293      	cmp	r3, r2
 800c09e:	dc05      	bgt.n	800c0ac <sinf+0x1c>
 800c0a0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800c110 <sinf+0x80>
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	f001 fce5 	bl	800da74 <__kernel_sinf>
 800c0aa:	e004      	b.n	800c0b6 <sinf+0x26>
 800c0ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c0b0:	db04      	blt.n	800c0bc <sinf+0x2c>
 800c0b2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c0b6:	b003      	add	sp, #12
 800c0b8:	f85d fb04 	ldr.w	pc, [sp], #4
 800c0bc:	4668      	mov	r0, sp
 800c0be:	f000 fc09 	bl	800c8d4 <__ieee754_rem_pio2f>
 800c0c2:	f000 0003 	and.w	r0, r0, #3
 800c0c6:	2801      	cmp	r0, #1
 800c0c8:	d008      	beq.n	800c0dc <sinf+0x4c>
 800c0ca:	2802      	cmp	r0, #2
 800c0cc:	d00d      	beq.n	800c0ea <sinf+0x5a>
 800c0ce:	b9b0      	cbnz	r0, 800c0fe <sinf+0x6e>
 800c0d0:	2001      	movs	r0, #1
 800c0d2:	eddd 0a01 	vldr	s1, [sp, #4]
 800c0d6:	ed9d 0a00 	vldr	s0, [sp]
 800c0da:	e7e4      	b.n	800c0a6 <sinf+0x16>
 800c0dc:	eddd 0a01 	vldr	s1, [sp, #4]
 800c0e0:	ed9d 0a00 	vldr	s0, [sp]
 800c0e4:	f001 f9e6 	bl	800d4b4 <__kernel_cosf>
 800c0e8:	e7e5      	b.n	800c0b6 <sinf+0x26>
 800c0ea:	2001      	movs	r0, #1
 800c0ec:	eddd 0a01 	vldr	s1, [sp, #4]
 800c0f0:	ed9d 0a00 	vldr	s0, [sp]
 800c0f4:	f001 fcbe 	bl	800da74 <__kernel_sinf>
 800c0f8:	eeb1 0a40 	vneg.f32	s0, s0
 800c0fc:	e7db      	b.n	800c0b6 <sinf+0x26>
 800c0fe:	eddd 0a01 	vldr	s1, [sp, #4]
 800c102:	ed9d 0a00 	vldr	s0, [sp]
 800c106:	f001 f9d5 	bl	800d4b4 <__kernel_cosf>
 800c10a:	e7f5      	b.n	800c0f8 <sinf+0x68>
 800c10c:	3f490fd8 	.word	0x3f490fd8
 800c110:	00000000 	.word	0x00000000

0800c114 <atan2>:
 800c114:	f000 b85c 	b.w	800c1d0 <__ieee754_atan2>

0800c118 <sqrt>:
 800c118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c11c:	ed2d 8b02 	vpush	{d8}
 800c120:	b08b      	sub	sp, #44	; 0x2c
 800c122:	ec55 4b10 	vmov	r4, r5, d0
 800c126:	f000 fb25 	bl	800c774 <__ieee754_sqrt>
 800c12a:	4b26      	ldr	r3, [pc, #152]	; (800c1c4 <sqrt+0xac>)
 800c12c:	eeb0 8a40 	vmov.f32	s16, s0
 800c130:	eef0 8a60 	vmov.f32	s17, s1
 800c134:	f993 6000 	ldrsb.w	r6, [r3]
 800c138:	1c73      	adds	r3, r6, #1
 800c13a:	d02a      	beq.n	800c192 <sqrt+0x7a>
 800c13c:	4622      	mov	r2, r4
 800c13e:	462b      	mov	r3, r5
 800c140:	4620      	mov	r0, r4
 800c142:	4629      	mov	r1, r5
 800c144:	f7f4 fcf2 	bl	8000b2c <__aeabi_dcmpun>
 800c148:	4607      	mov	r7, r0
 800c14a:	bb10      	cbnz	r0, 800c192 <sqrt+0x7a>
 800c14c:	f04f 0800 	mov.w	r8, #0
 800c150:	f04f 0900 	mov.w	r9, #0
 800c154:	4642      	mov	r2, r8
 800c156:	464b      	mov	r3, r9
 800c158:	4620      	mov	r0, r4
 800c15a:	4629      	mov	r1, r5
 800c15c:	f7f4 fcbe 	bl	8000adc <__aeabi_dcmplt>
 800c160:	b1b8      	cbz	r0, 800c192 <sqrt+0x7a>
 800c162:	2301      	movs	r3, #1
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	4b18      	ldr	r3, [pc, #96]	; (800c1c8 <sqrt+0xb0>)
 800c168:	9301      	str	r3, [sp, #4]
 800c16a:	9708      	str	r7, [sp, #32]
 800c16c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800c170:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800c174:	b9b6      	cbnz	r6, 800c1a4 <sqrt+0x8c>
 800c176:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800c17a:	4668      	mov	r0, sp
 800c17c:	f001 fef4 	bl	800df68 <matherr>
 800c180:	b1d0      	cbz	r0, 800c1b8 <sqrt+0xa0>
 800c182:	9b08      	ldr	r3, [sp, #32]
 800c184:	b11b      	cbz	r3, 800c18e <sqrt+0x76>
 800c186:	f002 f82f 	bl	800e1e8 <__errno>
 800c18a:	9b08      	ldr	r3, [sp, #32]
 800c18c:	6003      	str	r3, [r0, #0]
 800c18e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800c192:	eeb0 0a48 	vmov.f32	s0, s16
 800c196:	eef0 0a68 	vmov.f32	s1, s17
 800c19a:	b00b      	add	sp, #44	; 0x2c
 800c19c:	ecbd 8b02 	vpop	{d8}
 800c1a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1a4:	4642      	mov	r2, r8
 800c1a6:	464b      	mov	r3, r9
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	4649      	mov	r1, r9
 800c1ac:	f7f4 fb4e 	bl	800084c <__aeabi_ddiv>
 800c1b0:	2e02      	cmp	r6, #2
 800c1b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c1b6:	d1e0      	bne.n	800c17a <sqrt+0x62>
 800c1b8:	f002 f816 	bl	800e1e8 <__errno>
 800c1bc:	2321      	movs	r3, #33	; 0x21
 800c1be:	6003      	str	r3, [r0, #0]
 800c1c0:	e7df      	b.n	800c182 <sqrt+0x6a>
 800c1c2:	bf00      	nop
 800c1c4:	20000045 	.word	0x20000045
 800c1c8:	08012690 	.word	0x08012690
 800c1cc:	00000000 	.word	0x00000000

0800c1d0 <__ieee754_atan2>:
 800c1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d4:	ec57 6b11 	vmov	r6, r7, d1
 800c1d8:	4273      	negs	r3, r6
 800c1da:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800c1de:	4333      	orrs	r3, r6
 800c1e0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800c388 <__ieee754_atan2+0x1b8>
 800c1e4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800c1e8:	4573      	cmp	r3, lr
 800c1ea:	ec51 0b10 	vmov	r0, r1, d0
 800c1ee:	ee11 8a10 	vmov	r8, s2
 800c1f2:	d80a      	bhi.n	800c20a <__ieee754_atan2+0x3a>
 800c1f4:	4244      	negs	r4, r0
 800c1f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c1fa:	4304      	orrs	r4, r0
 800c1fc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800c200:	4574      	cmp	r4, lr
 800c202:	468c      	mov	ip, r1
 800c204:	ee10 9a10 	vmov	r9, s0
 800c208:	d907      	bls.n	800c21a <__ieee754_atan2+0x4a>
 800c20a:	4632      	mov	r2, r6
 800c20c:	463b      	mov	r3, r7
 800c20e:	f7f4 f83d 	bl	800028c <__adddf3>
 800c212:	ec41 0b10 	vmov	d0, r0, r1
 800c216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c21a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800c21e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c222:	4334      	orrs	r4, r6
 800c224:	d103      	bne.n	800c22e <__ieee754_atan2+0x5e>
 800c226:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c22a:	f001 bc6d 	b.w	800db08 <atan>
 800c22e:	17bc      	asrs	r4, r7, #30
 800c230:	f004 0402 	and.w	r4, r4, #2
 800c234:	ea53 0909 	orrs.w	r9, r3, r9
 800c238:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800c23c:	d107      	bne.n	800c24e <__ieee754_atan2+0x7e>
 800c23e:	2c02      	cmp	r4, #2
 800c240:	d073      	beq.n	800c32a <__ieee754_atan2+0x15a>
 800c242:	2c03      	cmp	r4, #3
 800c244:	d1e5      	bne.n	800c212 <__ieee754_atan2+0x42>
 800c246:	a13e      	add	r1, pc, #248	; (adr r1, 800c340 <__ieee754_atan2+0x170>)
 800c248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c24c:	e7e1      	b.n	800c212 <__ieee754_atan2+0x42>
 800c24e:	ea52 0808 	orrs.w	r8, r2, r8
 800c252:	d106      	bne.n	800c262 <__ieee754_atan2+0x92>
 800c254:	f1bc 0f00 	cmp.w	ip, #0
 800c258:	da6b      	bge.n	800c332 <__ieee754_atan2+0x162>
 800c25a:	a13b      	add	r1, pc, #236	; (adr r1, 800c348 <__ieee754_atan2+0x178>)
 800c25c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c260:	e7d7      	b.n	800c212 <__ieee754_atan2+0x42>
 800c262:	4572      	cmp	r2, lr
 800c264:	d120      	bne.n	800c2a8 <__ieee754_atan2+0xd8>
 800c266:	4293      	cmp	r3, r2
 800c268:	d111      	bne.n	800c28e <__ieee754_atan2+0xbe>
 800c26a:	2c02      	cmp	r4, #2
 800c26c:	d007      	beq.n	800c27e <__ieee754_atan2+0xae>
 800c26e:	2c03      	cmp	r4, #3
 800c270:	d009      	beq.n	800c286 <__ieee754_atan2+0xb6>
 800c272:	2c01      	cmp	r4, #1
 800c274:	d155      	bne.n	800c322 <__ieee754_atan2+0x152>
 800c276:	a136      	add	r1, pc, #216	; (adr r1, 800c350 <__ieee754_atan2+0x180>)
 800c278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c27c:	e7c9      	b.n	800c212 <__ieee754_atan2+0x42>
 800c27e:	a136      	add	r1, pc, #216	; (adr r1, 800c358 <__ieee754_atan2+0x188>)
 800c280:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c284:	e7c5      	b.n	800c212 <__ieee754_atan2+0x42>
 800c286:	a136      	add	r1, pc, #216	; (adr r1, 800c360 <__ieee754_atan2+0x190>)
 800c288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c28c:	e7c1      	b.n	800c212 <__ieee754_atan2+0x42>
 800c28e:	2c02      	cmp	r4, #2
 800c290:	d04b      	beq.n	800c32a <__ieee754_atan2+0x15a>
 800c292:	2c03      	cmp	r4, #3
 800c294:	d0d7      	beq.n	800c246 <__ieee754_atan2+0x76>
 800c296:	2c01      	cmp	r4, #1
 800c298:	f04f 0000 	mov.w	r0, #0
 800c29c:	d102      	bne.n	800c2a4 <__ieee754_atan2+0xd4>
 800c29e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c2a2:	e7b6      	b.n	800c212 <__ieee754_atan2+0x42>
 800c2a4:	2100      	movs	r1, #0
 800c2a6:	e7b4      	b.n	800c212 <__ieee754_atan2+0x42>
 800c2a8:	4573      	cmp	r3, lr
 800c2aa:	d0d3      	beq.n	800c254 <__ieee754_atan2+0x84>
 800c2ac:	1a9b      	subs	r3, r3, r2
 800c2ae:	151b      	asrs	r3, r3, #20
 800c2b0:	2b3c      	cmp	r3, #60	; 0x3c
 800c2b2:	dc1e      	bgt.n	800c2f2 <__ieee754_atan2+0x122>
 800c2b4:	2f00      	cmp	r7, #0
 800c2b6:	da01      	bge.n	800c2bc <__ieee754_atan2+0xec>
 800c2b8:	333c      	adds	r3, #60	; 0x3c
 800c2ba:	db1e      	blt.n	800c2fa <__ieee754_atan2+0x12a>
 800c2bc:	4632      	mov	r2, r6
 800c2be:	463b      	mov	r3, r7
 800c2c0:	f7f4 fac4 	bl	800084c <__aeabi_ddiv>
 800c2c4:	ec41 0b10 	vmov	d0, r0, r1
 800c2c8:	f001 fdbe 	bl	800de48 <fabs>
 800c2cc:	f001 fc1c 	bl	800db08 <atan>
 800c2d0:	ec51 0b10 	vmov	r0, r1, d0
 800c2d4:	2c01      	cmp	r4, #1
 800c2d6:	d013      	beq.n	800c300 <__ieee754_atan2+0x130>
 800c2d8:	2c02      	cmp	r4, #2
 800c2da:	d015      	beq.n	800c308 <__ieee754_atan2+0x138>
 800c2dc:	2c00      	cmp	r4, #0
 800c2de:	d098      	beq.n	800c212 <__ieee754_atan2+0x42>
 800c2e0:	a321      	add	r3, pc, #132	; (adr r3, 800c368 <__ieee754_atan2+0x198>)
 800c2e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e6:	f7f3 ffcf 	bl	8000288 <__aeabi_dsub>
 800c2ea:	a321      	add	r3, pc, #132	; (adr r3, 800c370 <__ieee754_atan2+0x1a0>)
 800c2ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f0:	e014      	b.n	800c31c <__ieee754_atan2+0x14c>
 800c2f2:	a121      	add	r1, pc, #132	; (adr r1, 800c378 <__ieee754_atan2+0x1a8>)
 800c2f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c2f8:	e7ec      	b.n	800c2d4 <__ieee754_atan2+0x104>
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	e7e9      	b.n	800c2d4 <__ieee754_atan2+0x104>
 800c300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c304:	4619      	mov	r1, r3
 800c306:	e784      	b.n	800c212 <__ieee754_atan2+0x42>
 800c308:	a317      	add	r3, pc, #92	; (adr r3, 800c368 <__ieee754_atan2+0x198>)
 800c30a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c30e:	f7f3 ffbb 	bl	8000288 <__aeabi_dsub>
 800c312:	4602      	mov	r2, r0
 800c314:	460b      	mov	r3, r1
 800c316:	a116      	add	r1, pc, #88	; (adr r1, 800c370 <__ieee754_atan2+0x1a0>)
 800c318:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c31c:	f7f3 ffb4 	bl	8000288 <__aeabi_dsub>
 800c320:	e777      	b.n	800c212 <__ieee754_atan2+0x42>
 800c322:	a117      	add	r1, pc, #92	; (adr r1, 800c380 <__ieee754_atan2+0x1b0>)
 800c324:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c328:	e773      	b.n	800c212 <__ieee754_atan2+0x42>
 800c32a:	a111      	add	r1, pc, #68	; (adr r1, 800c370 <__ieee754_atan2+0x1a0>)
 800c32c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c330:	e76f      	b.n	800c212 <__ieee754_atan2+0x42>
 800c332:	a111      	add	r1, pc, #68	; (adr r1, 800c378 <__ieee754_atan2+0x1a8>)
 800c334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c338:	e76b      	b.n	800c212 <__ieee754_atan2+0x42>
 800c33a:	bf00      	nop
 800c33c:	f3af 8000 	nop.w
 800c340:	54442d18 	.word	0x54442d18
 800c344:	c00921fb 	.word	0xc00921fb
 800c348:	54442d18 	.word	0x54442d18
 800c34c:	bff921fb 	.word	0xbff921fb
 800c350:	54442d18 	.word	0x54442d18
 800c354:	bfe921fb 	.word	0xbfe921fb
 800c358:	7f3321d2 	.word	0x7f3321d2
 800c35c:	4002d97c 	.word	0x4002d97c
 800c360:	7f3321d2 	.word	0x7f3321d2
 800c364:	c002d97c 	.word	0xc002d97c
 800c368:	33145c07 	.word	0x33145c07
 800c36c:	3ca1a626 	.word	0x3ca1a626
 800c370:	54442d18 	.word	0x54442d18
 800c374:	400921fb 	.word	0x400921fb
 800c378:	54442d18 	.word	0x54442d18
 800c37c:	3ff921fb 	.word	0x3ff921fb
 800c380:	54442d18 	.word	0x54442d18
 800c384:	3fe921fb 	.word	0x3fe921fb
 800c388:	7ff00000 	.word	0x7ff00000
 800c38c:	00000000 	.word	0x00000000

0800c390 <__ieee754_rem_pio2>:
 800c390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c394:	ec57 6b10 	vmov	r6, r7, d0
 800c398:	4bc3      	ldr	r3, [pc, #780]	; (800c6a8 <__ieee754_rem_pio2+0x318>)
 800c39a:	b08d      	sub	sp, #52	; 0x34
 800c39c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c3a0:	4598      	cmp	r8, r3
 800c3a2:	4604      	mov	r4, r0
 800c3a4:	9704      	str	r7, [sp, #16]
 800c3a6:	dc07      	bgt.n	800c3b8 <__ieee754_rem_pio2+0x28>
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	ed84 0b00 	vstr	d0, [r4]
 800c3b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c3b4:	2500      	movs	r5, #0
 800c3b6:	e027      	b.n	800c408 <__ieee754_rem_pio2+0x78>
 800c3b8:	4bbc      	ldr	r3, [pc, #752]	; (800c6ac <__ieee754_rem_pio2+0x31c>)
 800c3ba:	4598      	cmp	r8, r3
 800c3bc:	dc75      	bgt.n	800c4aa <__ieee754_rem_pio2+0x11a>
 800c3be:	9b04      	ldr	r3, [sp, #16]
 800c3c0:	4dbb      	ldr	r5, [pc, #748]	; (800c6b0 <__ieee754_rem_pio2+0x320>)
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	ee10 0a10 	vmov	r0, s0
 800c3c8:	a3a9      	add	r3, pc, #676	; (adr r3, 800c670 <__ieee754_rem_pio2+0x2e0>)
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	4639      	mov	r1, r7
 800c3d0:	dd36      	ble.n	800c440 <__ieee754_rem_pio2+0xb0>
 800c3d2:	f7f3 ff59 	bl	8000288 <__aeabi_dsub>
 800c3d6:	45a8      	cmp	r8, r5
 800c3d8:	4606      	mov	r6, r0
 800c3da:	460f      	mov	r7, r1
 800c3dc:	d018      	beq.n	800c410 <__ieee754_rem_pio2+0x80>
 800c3de:	a3a6      	add	r3, pc, #664	; (adr r3, 800c678 <__ieee754_rem_pio2+0x2e8>)
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	f7f3 ff50 	bl	8000288 <__aeabi_dsub>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	e9c4 2300 	strd	r2, r3, [r4]
 800c3f0:	4630      	mov	r0, r6
 800c3f2:	4639      	mov	r1, r7
 800c3f4:	f7f3 ff48 	bl	8000288 <__aeabi_dsub>
 800c3f8:	a39f      	add	r3, pc, #636	; (adr r3, 800c678 <__ieee754_rem_pio2+0x2e8>)
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	f7f3 ff43 	bl	8000288 <__aeabi_dsub>
 800c402:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c406:	2501      	movs	r5, #1
 800c408:	4628      	mov	r0, r5
 800c40a:	b00d      	add	sp, #52	; 0x34
 800c40c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c410:	a39b      	add	r3, pc, #620	; (adr r3, 800c680 <__ieee754_rem_pio2+0x2f0>)
 800c412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c416:	f7f3 ff37 	bl	8000288 <__aeabi_dsub>
 800c41a:	a39b      	add	r3, pc, #620	; (adr r3, 800c688 <__ieee754_rem_pio2+0x2f8>)
 800c41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c420:	4606      	mov	r6, r0
 800c422:	460f      	mov	r7, r1
 800c424:	f7f3 ff30 	bl	8000288 <__aeabi_dsub>
 800c428:	4602      	mov	r2, r0
 800c42a:	460b      	mov	r3, r1
 800c42c:	e9c4 2300 	strd	r2, r3, [r4]
 800c430:	4630      	mov	r0, r6
 800c432:	4639      	mov	r1, r7
 800c434:	f7f3 ff28 	bl	8000288 <__aeabi_dsub>
 800c438:	a393      	add	r3, pc, #588	; (adr r3, 800c688 <__ieee754_rem_pio2+0x2f8>)
 800c43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c43e:	e7de      	b.n	800c3fe <__ieee754_rem_pio2+0x6e>
 800c440:	f7f3 ff24 	bl	800028c <__adddf3>
 800c444:	45a8      	cmp	r8, r5
 800c446:	4606      	mov	r6, r0
 800c448:	460f      	mov	r7, r1
 800c44a:	d016      	beq.n	800c47a <__ieee754_rem_pio2+0xea>
 800c44c:	a38a      	add	r3, pc, #552	; (adr r3, 800c678 <__ieee754_rem_pio2+0x2e8>)
 800c44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c452:	f7f3 ff1b 	bl	800028c <__adddf3>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	e9c4 2300 	strd	r2, r3, [r4]
 800c45e:	4630      	mov	r0, r6
 800c460:	4639      	mov	r1, r7
 800c462:	f7f3 ff11 	bl	8000288 <__aeabi_dsub>
 800c466:	a384      	add	r3, pc, #528	; (adr r3, 800c678 <__ieee754_rem_pio2+0x2e8>)
 800c468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46c:	f7f3 ff0e 	bl	800028c <__adddf3>
 800c470:	f04f 35ff 	mov.w	r5, #4294967295
 800c474:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c478:	e7c6      	b.n	800c408 <__ieee754_rem_pio2+0x78>
 800c47a:	a381      	add	r3, pc, #516	; (adr r3, 800c680 <__ieee754_rem_pio2+0x2f0>)
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	f7f3 ff04 	bl	800028c <__adddf3>
 800c484:	a380      	add	r3, pc, #512	; (adr r3, 800c688 <__ieee754_rem_pio2+0x2f8>)
 800c486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48a:	4606      	mov	r6, r0
 800c48c:	460f      	mov	r7, r1
 800c48e:	f7f3 fefd 	bl	800028c <__adddf3>
 800c492:	4602      	mov	r2, r0
 800c494:	460b      	mov	r3, r1
 800c496:	e9c4 2300 	strd	r2, r3, [r4]
 800c49a:	4630      	mov	r0, r6
 800c49c:	4639      	mov	r1, r7
 800c49e:	f7f3 fef3 	bl	8000288 <__aeabi_dsub>
 800c4a2:	a379      	add	r3, pc, #484	; (adr r3, 800c688 <__ieee754_rem_pio2+0x2f8>)
 800c4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4a8:	e7e0      	b.n	800c46c <__ieee754_rem_pio2+0xdc>
 800c4aa:	4b82      	ldr	r3, [pc, #520]	; (800c6b4 <__ieee754_rem_pio2+0x324>)
 800c4ac:	4598      	cmp	r8, r3
 800c4ae:	f300 80d0 	bgt.w	800c652 <__ieee754_rem_pio2+0x2c2>
 800c4b2:	f001 fcc9 	bl	800de48 <fabs>
 800c4b6:	ec57 6b10 	vmov	r6, r7, d0
 800c4ba:	ee10 0a10 	vmov	r0, s0
 800c4be:	a374      	add	r3, pc, #464	; (adr r3, 800c690 <__ieee754_rem_pio2+0x300>)
 800c4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4c4:	4639      	mov	r1, r7
 800c4c6:	f7f4 f897 	bl	80005f8 <__aeabi_dmul>
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	4b7a      	ldr	r3, [pc, #488]	; (800c6b8 <__ieee754_rem_pio2+0x328>)
 800c4ce:	f7f3 fedd 	bl	800028c <__adddf3>
 800c4d2:	f7f4 fb41 	bl	8000b58 <__aeabi_d2iz>
 800c4d6:	4605      	mov	r5, r0
 800c4d8:	f7f4 f824 	bl	8000524 <__aeabi_i2d>
 800c4dc:	a364      	add	r3, pc, #400	; (adr r3, 800c670 <__ieee754_rem_pio2+0x2e0>)
 800c4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4e6:	f7f4 f887 	bl	80005f8 <__aeabi_dmul>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	4630      	mov	r0, r6
 800c4f0:	4639      	mov	r1, r7
 800c4f2:	f7f3 fec9 	bl	8000288 <__aeabi_dsub>
 800c4f6:	a360      	add	r3, pc, #384	; (adr r3, 800c678 <__ieee754_rem_pio2+0x2e8>)
 800c4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4fc:	4682      	mov	sl, r0
 800c4fe:	468b      	mov	fp, r1
 800c500:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c504:	f7f4 f878 	bl	80005f8 <__aeabi_dmul>
 800c508:	2d1f      	cmp	r5, #31
 800c50a:	4606      	mov	r6, r0
 800c50c:	460f      	mov	r7, r1
 800c50e:	dc0c      	bgt.n	800c52a <__ieee754_rem_pio2+0x19a>
 800c510:	1e6a      	subs	r2, r5, #1
 800c512:	4b6a      	ldr	r3, [pc, #424]	; (800c6bc <__ieee754_rem_pio2+0x32c>)
 800c514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c518:	4543      	cmp	r3, r8
 800c51a:	d006      	beq.n	800c52a <__ieee754_rem_pio2+0x19a>
 800c51c:	4632      	mov	r2, r6
 800c51e:	463b      	mov	r3, r7
 800c520:	4650      	mov	r0, sl
 800c522:	4659      	mov	r1, fp
 800c524:	f7f3 feb0 	bl	8000288 <__aeabi_dsub>
 800c528:	e00e      	b.n	800c548 <__ieee754_rem_pio2+0x1b8>
 800c52a:	4632      	mov	r2, r6
 800c52c:	463b      	mov	r3, r7
 800c52e:	4650      	mov	r0, sl
 800c530:	4659      	mov	r1, fp
 800c532:	f7f3 fea9 	bl	8000288 <__aeabi_dsub>
 800c536:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c53a:	9305      	str	r3, [sp, #20]
 800c53c:	9a05      	ldr	r2, [sp, #20]
 800c53e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	2b10      	cmp	r3, #16
 800c546:	dc02      	bgt.n	800c54e <__ieee754_rem_pio2+0x1be>
 800c548:	e9c4 0100 	strd	r0, r1, [r4]
 800c54c:	e039      	b.n	800c5c2 <__ieee754_rem_pio2+0x232>
 800c54e:	a34c      	add	r3, pc, #304	; (adr r3, 800c680 <__ieee754_rem_pio2+0x2f0>)
 800c550:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c558:	f7f4 f84e 	bl	80005f8 <__aeabi_dmul>
 800c55c:	4606      	mov	r6, r0
 800c55e:	460f      	mov	r7, r1
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	4650      	mov	r0, sl
 800c566:	4659      	mov	r1, fp
 800c568:	f7f3 fe8e 	bl	8000288 <__aeabi_dsub>
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	4680      	mov	r8, r0
 800c572:	4689      	mov	r9, r1
 800c574:	4650      	mov	r0, sl
 800c576:	4659      	mov	r1, fp
 800c578:	f7f3 fe86 	bl	8000288 <__aeabi_dsub>
 800c57c:	4632      	mov	r2, r6
 800c57e:	463b      	mov	r3, r7
 800c580:	f7f3 fe82 	bl	8000288 <__aeabi_dsub>
 800c584:	a340      	add	r3, pc, #256	; (adr r3, 800c688 <__ieee754_rem_pio2+0x2f8>)
 800c586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c58a:	4606      	mov	r6, r0
 800c58c:	460f      	mov	r7, r1
 800c58e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c592:	f7f4 f831 	bl	80005f8 <__aeabi_dmul>
 800c596:	4632      	mov	r2, r6
 800c598:	463b      	mov	r3, r7
 800c59a:	f7f3 fe75 	bl	8000288 <__aeabi_dsub>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	460b      	mov	r3, r1
 800c5a2:	4606      	mov	r6, r0
 800c5a4:	460f      	mov	r7, r1
 800c5a6:	4640      	mov	r0, r8
 800c5a8:	4649      	mov	r1, r9
 800c5aa:	f7f3 fe6d 	bl	8000288 <__aeabi_dsub>
 800c5ae:	9a05      	ldr	r2, [sp, #20]
 800c5b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c5b4:	1ad3      	subs	r3, r2, r3
 800c5b6:	2b31      	cmp	r3, #49	; 0x31
 800c5b8:	dc20      	bgt.n	800c5fc <__ieee754_rem_pio2+0x26c>
 800c5ba:	e9c4 0100 	strd	r0, r1, [r4]
 800c5be:	46c2      	mov	sl, r8
 800c5c0:	46cb      	mov	fp, r9
 800c5c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c5c6:	4650      	mov	r0, sl
 800c5c8:	4642      	mov	r2, r8
 800c5ca:	464b      	mov	r3, r9
 800c5cc:	4659      	mov	r1, fp
 800c5ce:	f7f3 fe5b 	bl	8000288 <__aeabi_dsub>
 800c5d2:	463b      	mov	r3, r7
 800c5d4:	4632      	mov	r2, r6
 800c5d6:	f7f3 fe57 	bl	8000288 <__aeabi_dsub>
 800c5da:	9b04      	ldr	r3, [sp, #16]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c5e2:	f6bf af11 	bge.w	800c408 <__ieee754_rem_pio2+0x78>
 800c5e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c5ea:	6063      	str	r3, [r4, #4]
 800c5ec:	f8c4 8000 	str.w	r8, [r4]
 800c5f0:	60a0      	str	r0, [r4, #8]
 800c5f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5f6:	60e3      	str	r3, [r4, #12]
 800c5f8:	426d      	negs	r5, r5
 800c5fa:	e705      	b.n	800c408 <__ieee754_rem_pio2+0x78>
 800c5fc:	a326      	add	r3, pc, #152	; (adr r3, 800c698 <__ieee754_rem_pio2+0x308>)
 800c5fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c606:	f7f3 fff7 	bl	80005f8 <__aeabi_dmul>
 800c60a:	4606      	mov	r6, r0
 800c60c:	460f      	mov	r7, r1
 800c60e:	4602      	mov	r2, r0
 800c610:	460b      	mov	r3, r1
 800c612:	4640      	mov	r0, r8
 800c614:	4649      	mov	r1, r9
 800c616:	f7f3 fe37 	bl	8000288 <__aeabi_dsub>
 800c61a:	4602      	mov	r2, r0
 800c61c:	460b      	mov	r3, r1
 800c61e:	4682      	mov	sl, r0
 800c620:	468b      	mov	fp, r1
 800c622:	4640      	mov	r0, r8
 800c624:	4649      	mov	r1, r9
 800c626:	f7f3 fe2f 	bl	8000288 <__aeabi_dsub>
 800c62a:	4632      	mov	r2, r6
 800c62c:	463b      	mov	r3, r7
 800c62e:	f7f3 fe2b 	bl	8000288 <__aeabi_dsub>
 800c632:	a31b      	add	r3, pc, #108	; (adr r3, 800c6a0 <__ieee754_rem_pio2+0x310>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	4606      	mov	r6, r0
 800c63a:	460f      	mov	r7, r1
 800c63c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c640:	f7f3 ffda 	bl	80005f8 <__aeabi_dmul>
 800c644:	4632      	mov	r2, r6
 800c646:	463b      	mov	r3, r7
 800c648:	f7f3 fe1e 	bl	8000288 <__aeabi_dsub>
 800c64c:	4606      	mov	r6, r0
 800c64e:	460f      	mov	r7, r1
 800c650:	e764      	b.n	800c51c <__ieee754_rem_pio2+0x18c>
 800c652:	4b1b      	ldr	r3, [pc, #108]	; (800c6c0 <__ieee754_rem_pio2+0x330>)
 800c654:	4598      	cmp	r8, r3
 800c656:	dd35      	ble.n	800c6c4 <__ieee754_rem_pio2+0x334>
 800c658:	ee10 2a10 	vmov	r2, s0
 800c65c:	463b      	mov	r3, r7
 800c65e:	4630      	mov	r0, r6
 800c660:	4639      	mov	r1, r7
 800c662:	f7f3 fe11 	bl	8000288 <__aeabi_dsub>
 800c666:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c66a:	e9c4 0100 	strd	r0, r1, [r4]
 800c66e:	e6a1      	b.n	800c3b4 <__ieee754_rem_pio2+0x24>
 800c670:	54400000 	.word	0x54400000
 800c674:	3ff921fb 	.word	0x3ff921fb
 800c678:	1a626331 	.word	0x1a626331
 800c67c:	3dd0b461 	.word	0x3dd0b461
 800c680:	1a600000 	.word	0x1a600000
 800c684:	3dd0b461 	.word	0x3dd0b461
 800c688:	2e037073 	.word	0x2e037073
 800c68c:	3ba3198a 	.word	0x3ba3198a
 800c690:	6dc9c883 	.word	0x6dc9c883
 800c694:	3fe45f30 	.word	0x3fe45f30
 800c698:	2e000000 	.word	0x2e000000
 800c69c:	3ba3198a 	.word	0x3ba3198a
 800c6a0:	252049c1 	.word	0x252049c1
 800c6a4:	397b839a 	.word	0x397b839a
 800c6a8:	3fe921fb 	.word	0x3fe921fb
 800c6ac:	4002d97b 	.word	0x4002d97b
 800c6b0:	3ff921fb 	.word	0x3ff921fb
 800c6b4:	413921fb 	.word	0x413921fb
 800c6b8:	3fe00000 	.word	0x3fe00000
 800c6bc:	08012698 	.word	0x08012698
 800c6c0:	7fefffff 	.word	0x7fefffff
 800c6c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c6c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c6cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c6d0:	4630      	mov	r0, r6
 800c6d2:	460f      	mov	r7, r1
 800c6d4:	f7f4 fa40 	bl	8000b58 <__aeabi_d2iz>
 800c6d8:	f7f3 ff24 	bl	8000524 <__aeabi_i2d>
 800c6dc:	4602      	mov	r2, r0
 800c6de:	460b      	mov	r3, r1
 800c6e0:	4630      	mov	r0, r6
 800c6e2:	4639      	mov	r1, r7
 800c6e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c6e8:	f7f3 fdce 	bl	8000288 <__aeabi_dsub>
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	4b1f      	ldr	r3, [pc, #124]	; (800c76c <__ieee754_rem_pio2+0x3dc>)
 800c6f0:	f7f3 ff82 	bl	80005f8 <__aeabi_dmul>
 800c6f4:	460f      	mov	r7, r1
 800c6f6:	4606      	mov	r6, r0
 800c6f8:	f7f4 fa2e 	bl	8000b58 <__aeabi_d2iz>
 800c6fc:	f7f3 ff12 	bl	8000524 <__aeabi_i2d>
 800c700:	4602      	mov	r2, r0
 800c702:	460b      	mov	r3, r1
 800c704:	4630      	mov	r0, r6
 800c706:	4639      	mov	r1, r7
 800c708:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c70c:	f7f3 fdbc 	bl	8000288 <__aeabi_dsub>
 800c710:	2200      	movs	r2, #0
 800c712:	4b16      	ldr	r3, [pc, #88]	; (800c76c <__ieee754_rem_pio2+0x3dc>)
 800c714:	f7f3 ff70 	bl	80005f8 <__aeabi_dmul>
 800c718:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c71c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c720:	f04f 0803 	mov.w	r8, #3
 800c724:	2600      	movs	r6, #0
 800c726:	2700      	movs	r7, #0
 800c728:	4632      	mov	r2, r6
 800c72a:	463b      	mov	r3, r7
 800c72c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c730:	f108 3aff 	add.w	sl, r8, #4294967295
 800c734:	f7f4 f9c8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c738:	b9b0      	cbnz	r0, 800c768 <__ieee754_rem_pio2+0x3d8>
 800c73a:	4b0d      	ldr	r3, [pc, #52]	; (800c770 <__ieee754_rem_pio2+0x3e0>)
 800c73c:	9301      	str	r3, [sp, #4]
 800c73e:	2302      	movs	r3, #2
 800c740:	9300      	str	r3, [sp, #0]
 800c742:	462a      	mov	r2, r5
 800c744:	4643      	mov	r3, r8
 800c746:	4621      	mov	r1, r4
 800c748:	a806      	add	r0, sp, #24
 800c74a:	f000 fab9 	bl	800ccc0 <__kernel_rem_pio2>
 800c74e:	9b04      	ldr	r3, [sp, #16]
 800c750:	2b00      	cmp	r3, #0
 800c752:	4605      	mov	r5, r0
 800c754:	f6bf ae58 	bge.w	800c408 <__ieee754_rem_pio2+0x78>
 800c758:	6863      	ldr	r3, [r4, #4]
 800c75a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c75e:	6063      	str	r3, [r4, #4]
 800c760:	68e3      	ldr	r3, [r4, #12]
 800c762:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c766:	e746      	b.n	800c5f6 <__ieee754_rem_pio2+0x266>
 800c768:	46d0      	mov	r8, sl
 800c76a:	e7dd      	b.n	800c728 <__ieee754_rem_pio2+0x398>
 800c76c:	41700000 	.word	0x41700000
 800c770:	08012718 	.word	0x08012718

0800c774 <__ieee754_sqrt>:
 800c774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c778:	4955      	ldr	r1, [pc, #340]	; (800c8d0 <__ieee754_sqrt+0x15c>)
 800c77a:	ec55 4b10 	vmov	r4, r5, d0
 800c77e:	43a9      	bics	r1, r5
 800c780:	462b      	mov	r3, r5
 800c782:	462a      	mov	r2, r5
 800c784:	d112      	bne.n	800c7ac <__ieee754_sqrt+0x38>
 800c786:	ee10 2a10 	vmov	r2, s0
 800c78a:	ee10 0a10 	vmov	r0, s0
 800c78e:	4629      	mov	r1, r5
 800c790:	f7f3 ff32 	bl	80005f8 <__aeabi_dmul>
 800c794:	4602      	mov	r2, r0
 800c796:	460b      	mov	r3, r1
 800c798:	4620      	mov	r0, r4
 800c79a:	4629      	mov	r1, r5
 800c79c:	f7f3 fd76 	bl	800028c <__adddf3>
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	460d      	mov	r5, r1
 800c7a4:	ec45 4b10 	vmov	d0, r4, r5
 800c7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7ac:	2d00      	cmp	r5, #0
 800c7ae:	ee10 0a10 	vmov	r0, s0
 800c7b2:	4621      	mov	r1, r4
 800c7b4:	dc0f      	bgt.n	800c7d6 <__ieee754_sqrt+0x62>
 800c7b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c7ba:	4330      	orrs	r0, r6
 800c7bc:	d0f2      	beq.n	800c7a4 <__ieee754_sqrt+0x30>
 800c7be:	b155      	cbz	r5, 800c7d6 <__ieee754_sqrt+0x62>
 800c7c0:	ee10 2a10 	vmov	r2, s0
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	4629      	mov	r1, r5
 800c7c8:	f7f3 fd5e 	bl	8000288 <__aeabi_dsub>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	f7f4 f83c 	bl	800084c <__aeabi_ddiv>
 800c7d4:	e7e4      	b.n	800c7a0 <__ieee754_sqrt+0x2c>
 800c7d6:	151b      	asrs	r3, r3, #20
 800c7d8:	d073      	beq.n	800c8c2 <__ieee754_sqrt+0x14e>
 800c7da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c7de:	07dd      	lsls	r5, r3, #31
 800c7e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c7e4:	bf48      	it	mi
 800c7e6:	0fc8      	lsrmi	r0, r1, #31
 800c7e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c7ec:	bf44      	itt	mi
 800c7ee:	0049      	lslmi	r1, r1, #1
 800c7f0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c7f4:	2500      	movs	r5, #0
 800c7f6:	1058      	asrs	r0, r3, #1
 800c7f8:	0fcb      	lsrs	r3, r1, #31
 800c7fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c7fe:	0049      	lsls	r1, r1, #1
 800c800:	2316      	movs	r3, #22
 800c802:	462c      	mov	r4, r5
 800c804:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c808:	19a7      	adds	r7, r4, r6
 800c80a:	4297      	cmp	r7, r2
 800c80c:	bfde      	ittt	le
 800c80e:	19bc      	addle	r4, r7, r6
 800c810:	1bd2      	suble	r2, r2, r7
 800c812:	19ad      	addle	r5, r5, r6
 800c814:	0fcf      	lsrs	r7, r1, #31
 800c816:	3b01      	subs	r3, #1
 800c818:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c81c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c820:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c824:	d1f0      	bne.n	800c808 <__ieee754_sqrt+0x94>
 800c826:	f04f 0c20 	mov.w	ip, #32
 800c82a:	469e      	mov	lr, r3
 800c82c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c830:	42a2      	cmp	r2, r4
 800c832:	eb06 070e 	add.w	r7, r6, lr
 800c836:	dc02      	bgt.n	800c83e <__ieee754_sqrt+0xca>
 800c838:	d112      	bne.n	800c860 <__ieee754_sqrt+0xec>
 800c83a:	428f      	cmp	r7, r1
 800c83c:	d810      	bhi.n	800c860 <__ieee754_sqrt+0xec>
 800c83e:	2f00      	cmp	r7, #0
 800c840:	eb07 0e06 	add.w	lr, r7, r6
 800c844:	da42      	bge.n	800c8cc <__ieee754_sqrt+0x158>
 800c846:	f1be 0f00 	cmp.w	lr, #0
 800c84a:	db3f      	blt.n	800c8cc <__ieee754_sqrt+0x158>
 800c84c:	f104 0801 	add.w	r8, r4, #1
 800c850:	1b12      	subs	r2, r2, r4
 800c852:	428f      	cmp	r7, r1
 800c854:	bf88      	it	hi
 800c856:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800c85a:	1bc9      	subs	r1, r1, r7
 800c85c:	4433      	add	r3, r6
 800c85e:	4644      	mov	r4, r8
 800c860:	0052      	lsls	r2, r2, #1
 800c862:	f1bc 0c01 	subs.w	ip, ip, #1
 800c866:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c86a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c86e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c872:	d1dd      	bne.n	800c830 <__ieee754_sqrt+0xbc>
 800c874:	430a      	orrs	r2, r1
 800c876:	d006      	beq.n	800c886 <__ieee754_sqrt+0x112>
 800c878:	1c5c      	adds	r4, r3, #1
 800c87a:	bf13      	iteet	ne
 800c87c:	3301      	addne	r3, #1
 800c87e:	3501      	addeq	r5, #1
 800c880:	4663      	moveq	r3, ip
 800c882:	f023 0301 	bicne.w	r3, r3, #1
 800c886:	106a      	asrs	r2, r5, #1
 800c888:	085b      	lsrs	r3, r3, #1
 800c88a:	07e9      	lsls	r1, r5, #31
 800c88c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c890:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c894:	bf48      	it	mi
 800c896:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c89a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c89e:	461c      	mov	r4, r3
 800c8a0:	e780      	b.n	800c7a4 <__ieee754_sqrt+0x30>
 800c8a2:	0aca      	lsrs	r2, r1, #11
 800c8a4:	3815      	subs	r0, #21
 800c8a6:	0549      	lsls	r1, r1, #21
 800c8a8:	2a00      	cmp	r2, #0
 800c8aa:	d0fa      	beq.n	800c8a2 <__ieee754_sqrt+0x12e>
 800c8ac:	02d6      	lsls	r6, r2, #11
 800c8ae:	d50a      	bpl.n	800c8c6 <__ieee754_sqrt+0x152>
 800c8b0:	f1c3 0420 	rsb	r4, r3, #32
 800c8b4:	fa21 f404 	lsr.w	r4, r1, r4
 800c8b8:	1e5d      	subs	r5, r3, #1
 800c8ba:	4099      	lsls	r1, r3
 800c8bc:	4322      	orrs	r2, r4
 800c8be:	1b43      	subs	r3, r0, r5
 800c8c0:	e78b      	b.n	800c7da <__ieee754_sqrt+0x66>
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	e7f0      	b.n	800c8a8 <__ieee754_sqrt+0x134>
 800c8c6:	0052      	lsls	r2, r2, #1
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	e7ef      	b.n	800c8ac <__ieee754_sqrt+0x138>
 800c8cc:	46a0      	mov	r8, r4
 800c8ce:	e7bf      	b.n	800c850 <__ieee754_sqrt+0xdc>
 800c8d0:	7ff00000 	.word	0x7ff00000

0800c8d4 <__ieee754_rem_pio2f>:
 800c8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8d6:	ee10 6a10 	vmov	r6, s0
 800c8da:	4b86      	ldr	r3, [pc, #536]	; (800caf4 <__ieee754_rem_pio2f+0x220>)
 800c8dc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800c8e0:	429c      	cmp	r4, r3
 800c8e2:	b087      	sub	sp, #28
 800c8e4:	4605      	mov	r5, r0
 800c8e6:	dc05      	bgt.n	800c8f4 <__ieee754_rem_pio2f+0x20>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	ed85 0a00 	vstr	s0, [r5]
 800c8ee:	6043      	str	r3, [r0, #4]
 800c8f0:	2000      	movs	r0, #0
 800c8f2:	e020      	b.n	800c936 <__ieee754_rem_pio2f+0x62>
 800c8f4:	4b80      	ldr	r3, [pc, #512]	; (800caf8 <__ieee754_rem_pio2f+0x224>)
 800c8f6:	429c      	cmp	r4, r3
 800c8f8:	dc38      	bgt.n	800c96c <__ieee754_rem_pio2f+0x98>
 800c8fa:	2e00      	cmp	r6, #0
 800c8fc:	f024 040f 	bic.w	r4, r4, #15
 800c900:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800cafc <__ieee754_rem_pio2f+0x228>
 800c904:	4b7e      	ldr	r3, [pc, #504]	; (800cb00 <__ieee754_rem_pio2f+0x22c>)
 800c906:	dd18      	ble.n	800c93a <__ieee754_rem_pio2f+0x66>
 800c908:	429c      	cmp	r4, r3
 800c90a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c90e:	bf09      	itett	eq
 800c910:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800cb04 <__ieee754_rem_pio2f+0x230>
 800c914:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800cb08 <__ieee754_rem_pio2f+0x234>
 800c918:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c91c:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800cb0c <__ieee754_rem_pio2f+0x238>
 800c920:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c924:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c928:	edc0 6a00 	vstr	s13, [r0]
 800c92c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c930:	edc0 7a01 	vstr	s15, [r0, #4]
 800c934:	2001      	movs	r0, #1
 800c936:	b007      	add	sp, #28
 800c938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c93a:	429c      	cmp	r4, r3
 800c93c:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c940:	bf09      	itett	eq
 800c942:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800cb04 <__ieee754_rem_pio2f+0x230>
 800c946:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800cb08 <__ieee754_rem_pio2f+0x234>
 800c94a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c94e:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800cb0c <__ieee754_rem_pio2f+0x238>
 800c952:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c956:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c95a:	edc0 6a00 	vstr	s13, [r0]
 800c95e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c962:	edc0 7a01 	vstr	s15, [r0, #4]
 800c966:	f04f 30ff 	mov.w	r0, #4294967295
 800c96a:	e7e4      	b.n	800c936 <__ieee754_rem_pio2f+0x62>
 800c96c:	4b68      	ldr	r3, [pc, #416]	; (800cb10 <__ieee754_rem_pio2f+0x23c>)
 800c96e:	429c      	cmp	r4, r3
 800c970:	dc71      	bgt.n	800ca56 <__ieee754_rem_pio2f+0x182>
 800c972:	f001 fb73 	bl	800e05c <fabsf>
 800c976:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800cb14 <__ieee754_rem_pio2f+0x240>
 800c97a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c97e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c986:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800c98a:	ee17 0a90 	vmov	r0, s15
 800c98e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800cafc <__ieee754_rem_pio2f+0x228>
 800c992:	eeb1 7a46 	vneg.f32	s14, s12
 800c996:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c99a:	281f      	cmp	r0, #31
 800c99c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800cb08 <__ieee754_rem_pio2f+0x234>
 800c9a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 800c9a4:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c9a8:	ee16 3a90 	vmov	r3, s13
 800c9ac:	dc1c      	bgt.n	800c9e8 <__ieee754_rem_pio2f+0x114>
 800c9ae:	1e47      	subs	r7, r0, #1
 800c9b0:	4959      	ldr	r1, [pc, #356]	; (800cb18 <__ieee754_rem_pio2f+0x244>)
 800c9b2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c9b6:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800c9ba:	428a      	cmp	r2, r1
 800c9bc:	d014      	beq.n	800c9e8 <__ieee754_rem_pio2f+0x114>
 800c9be:	602b      	str	r3, [r5, #0]
 800c9c0:	ed95 7a00 	vldr	s14, [r5]
 800c9c4:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c9c8:	2e00      	cmp	r6, #0
 800c9ca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c9ce:	ed85 0a01 	vstr	s0, [r5, #4]
 800c9d2:	dab0      	bge.n	800c936 <__ieee754_rem_pio2f+0x62>
 800c9d4:	eeb1 7a47 	vneg.f32	s14, s14
 800c9d8:	eeb1 0a40 	vneg.f32	s0, s0
 800c9dc:	ed85 7a00 	vstr	s14, [r5]
 800c9e0:	ed85 0a01 	vstr	s0, [r5, #4]
 800c9e4:	4240      	negs	r0, r0
 800c9e6:	e7a6      	b.n	800c936 <__ieee754_rem_pio2f+0x62>
 800c9e8:	15e4      	asrs	r4, r4, #23
 800c9ea:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c9ee:	1aa2      	subs	r2, r4, r2
 800c9f0:	2a08      	cmp	r2, #8
 800c9f2:	dde4      	ble.n	800c9be <__ieee754_rem_pio2f+0xea>
 800c9f4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800cb04 <__ieee754_rem_pio2f+0x230>
 800c9f8:	eef0 6a40 	vmov.f32	s13, s0
 800c9fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ca00:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ca04:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ca08:	eddf 7a40 	vldr	s15, [pc, #256]	; 800cb0c <__ieee754_rem_pio2f+0x238>
 800ca0c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800ca10:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800ca14:	eef0 7a40 	vmov.f32	s15, s0
 800ca18:	ee15 3a90 	vmov	r3, s11
 800ca1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ca20:	1aa4      	subs	r4, r4, r2
 800ca22:	2c19      	cmp	r4, #25
 800ca24:	dc04      	bgt.n	800ca30 <__ieee754_rem_pio2f+0x15c>
 800ca26:	edc5 5a00 	vstr	s11, [r5]
 800ca2a:	eeb0 0a66 	vmov.f32	s0, s13
 800ca2e:	e7c7      	b.n	800c9c0 <__ieee754_rem_pio2f+0xec>
 800ca30:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800cb1c <__ieee754_rem_pio2f+0x248>
 800ca34:	eeb0 0a66 	vmov.f32	s0, s13
 800ca38:	eea7 0a25 	vfma.f32	s0, s14, s11
 800ca3c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ca40:	eee7 7a25 	vfma.f32	s15, s14, s11
 800ca44:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cb20 <__ieee754_rem_pio2f+0x24c>
 800ca48:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800ca4c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ca50:	ed85 7a00 	vstr	s14, [r5]
 800ca54:	e7b4      	b.n	800c9c0 <__ieee754_rem_pio2f+0xec>
 800ca56:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ca5a:	db06      	blt.n	800ca6a <__ieee754_rem_pio2f+0x196>
 800ca5c:	ee70 7a40 	vsub.f32	s15, s0, s0
 800ca60:	edc0 7a01 	vstr	s15, [r0, #4]
 800ca64:	edc0 7a00 	vstr	s15, [r0]
 800ca68:	e742      	b.n	800c8f0 <__ieee754_rem_pio2f+0x1c>
 800ca6a:	15e2      	asrs	r2, r4, #23
 800ca6c:	3a86      	subs	r2, #134	; 0x86
 800ca6e:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800ca72:	ee07 3a90 	vmov	s15, r3
 800ca76:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ca7a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800cb24 <__ieee754_rem_pio2f+0x250>
 800ca7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ca82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca86:	ed8d 7a03 	vstr	s14, [sp, #12]
 800ca8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ca8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800ca92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800ca96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ca9a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800ca9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800caa2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800caa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caaa:	edcd 7a05 	vstr	s15, [sp, #20]
 800caae:	d11e      	bne.n	800caee <__ieee754_rem_pio2f+0x21a>
 800cab0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab8:	bf0c      	ite	eq
 800caba:	2301      	moveq	r3, #1
 800cabc:	2302      	movne	r3, #2
 800cabe:	491a      	ldr	r1, [pc, #104]	; (800cb28 <__ieee754_rem_pio2f+0x254>)
 800cac0:	9101      	str	r1, [sp, #4]
 800cac2:	2102      	movs	r1, #2
 800cac4:	9100      	str	r1, [sp, #0]
 800cac6:	a803      	add	r0, sp, #12
 800cac8:	4629      	mov	r1, r5
 800caca:	f000 fd51 	bl	800d570 <__kernel_rem_pio2f>
 800cace:	2e00      	cmp	r6, #0
 800cad0:	f6bf af31 	bge.w	800c936 <__ieee754_rem_pio2f+0x62>
 800cad4:	edd5 7a00 	vldr	s15, [r5]
 800cad8:	eef1 7a67 	vneg.f32	s15, s15
 800cadc:	edc5 7a00 	vstr	s15, [r5]
 800cae0:	edd5 7a01 	vldr	s15, [r5, #4]
 800cae4:	eef1 7a67 	vneg.f32	s15, s15
 800cae8:	edc5 7a01 	vstr	s15, [r5, #4]
 800caec:	e77a      	b.n	800c9e4 <__ieee754_rem_pio2f+0x110>
 800caee:	2303      	movs	r3, #3
 800caf0:	e7e5      	b.n	800cabe <__ieee754_rem_pio2f+0x1ea>
 800caf2:	bf00      	nop
 800caf4:	3f490fd8 	.word	0x3f490fd8
 800caf8:	4016cbe3 	.word	0x4016cbe3
 800cafc:	3fc90f80 	.word	0x3fc90f80
 800cb00:	3fc90fd0 	.word	0x3fc90fd0
 800cb04:	37354400 	.word	0x37354400
 800cb08:	37354443 	.word	0x37354443
 800cb0c:	2e85a308 	.word	0x2e85a308
 800cb10:	43490f80 	.word	0x43490f80
 800cb14:	3f22f984 	.word	0x3f22f984
 800cb18:	08012820 	.word	0x08012820
 800cb1c:	2e85a300 	.word	0x2e85a300
 800cb20:	248d3132 	.word	0x248d3132
 800cb24:	43800000 	.word	0x43800000
 800cb28:	080128a0 	.word	0x080128a0
 800cb2c:	00000000 	.word	0x00000000

0800cb30 <__kernel_cos>:
 800cb30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	ec59 8b10 	vmov	r8, r9, d0
 800cb38:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800cb3c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800cb40:	ed2d 8b02 	vpush	{d8}
 800cb44:	eeb0 8a41 	vmov.f32	s16, s2
 800cb48:	eef0 8a61 	vmov.f32	s17, s3
 800cb4c:	da07      	bge.n	800cb5e <__kernel_cos+0x2e>
 800cb4e:	ee10 0a10 	vmov	r0, s0
 800cb52:	4649      	mov	r1, r9
 800cb54:	f7f4 f800 	bl	8000b58 <__aeabi_d2iz>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	f000 8089 	beq.w	800cc70 <__kernel_cos+0x140>
 800cb5e:	4642      	mov	r2, r8
 800cb60:	464b      	mov	r3, r9
 800cb62:	4640      	mov	r0, r8
 800cb64:	4649      	mov	r1, r9
 800cb66:	f7f3 fd47 	bl	80005f8 <__aeabi_dmul>
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	4b4e      	ldr	r3, [pc, #312]	; (800cca8 <__kernel_cos+0x178>)
 800cb6e:	4604      	mov	r4, r0
 800cb70:	460d      	mov	r5, r1
 800cb72:	f7f3 fd41 	bl	80005f8 <__aeabi_dmul>
 800cb76:	a340      	add	r3, pc, #256	; (adr r3, 800cc78 <__kernel_cos+0x148>)
 800cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7c:	4682      	mov	sl, r0
 800cb7e:	468b      	mov	fp, r1
 800cb80:	4620      	mov	r0, r4
 800cb82:	4629      	mov	r1, r5
 800cb84:	f7f3 fd38 	bl	80005f8 <__aeabi_dmul>
 800cb88:	a33d      	add	r3, pc, #244	; (adr r3, 800cc80 <__kernel_cos+0x150>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	f7f3 fb7d 	bl	800028c <__adddf3>
 800cb92:	4622      	mov	r2, r4
 800cb94:	462b      	mov	r3, r5
 800cb96:	f7f3 fd2f 	bl	80005f8 <__aeabi_dmul>
 800cb9a:	a33b      	add	r3, pc, #236	; (adr r3, 800cc88 <__kernel_cos+0x158>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	f7f3 fb72 	bl	8000288 <__aeabi_dsub>
 800cba4:	4622      	mov	r2, r4
 800cba6:	462b      	mov	r3, r5
 800cba8:	f7f3 fd26 	bl	80005f8 <__aeabi_dmul>
 800cbac:	a338      	add	r3, pc, #224	; (adr r3, 800cc90 <__kernel_cos+0x160>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fb6b 	bl	800028c <__adddf3>
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	462b      	mov	r3, r5
 800cbba:	f7f3 fd1d 	bl	80005f8 <__aeabi_dmul>
 800cbbe:	a336      	add	r3, pc, #216	; (adr r3, 800cc98 <__kernel_cos+0x168>)
 800cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc4:	f7f3 fb60 	bl	8000288 <__aeabi_dsub>
 800cbc8:	4622      	mov	r2, r4
 800cbca:	462b      	mov	r3, r5
 800cbcc:	f7f3 fd14 	bl	80005f8 <__aeabi_dmul>
 800cbd0:	a333      	add	r3, pc, #204	; (adr r3, 800cca0 <__kernel_cos+0x170>)
 800cbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd6:	f7f3 fb59 	bl	800028c <__adddf3>
 800cbda:	4622      	mov	r2, r4
 800cbdc:	462b      	mov	r3, r5
 800cbde:	f7f3 fd0b 	bl	80005f8 <__aeabi_dmul>
 800cbe2:	4622      	mov	r2, r4
 800cbe4:	462b      	mov	r3, r5
 800cbe6:	f7f3 fd07 	bl	80005f8 <__aeabi_dmul>
 800cbea:	ec53 2b18 	vmov	r2, r3, d8
 800cbee:	4604      	mov	r4, r0
 800cbf0:	460d      	mov	r5, r1
 800cbf2:	4640      	mov	r0, r8
 800cbf4:	4649      	mov	r1, r9
 800cbf6:	f7f3 fcff 	bl	80005f8 <__aeabi_dmul>
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	4629      	mov	r1, r5
 800cc00:	4620      	mov	r0, r4
 800cc02:	f7f3 fb41 	bl	8000288 <__aeabi_dsub>
 800cc06:	4b29      	ldr	r3, [pc, #164]	; (800ccac <__kernel_cos+0x17c>)
 800cc08:	429e      	cmp	r6, r3
 800cc0a:	4680      	mov	r8, r0
 800cc0c:	4689      	mov	r9, r1
 800cc0e:	dc11      	bgt.n	800cc34 <__kernel_cos+0x104>
 800cc10:	4602      	mov	r2, r0
 800cc12:	460b      	mov	r3, r1
 800cc14:	4650      	mov	r0, sl
 800cc16:	4659      	mov	r1, fp
 800cc18:	f7f3 fb36 	bl	8000288 <__aeabi_dsub>
 800cc1c:	460b      	mov	r3, r1
 800cc1e:	4924      	ldr	r1, [pc, #144]	; (800ccb0 <__kernel_cos+0x180>)
 800cc20:	4602      	mov	r2, r0
 800cc22:	2000      	movs	r0, #0
 800cc24:	f7f3 fb30 	bl	8000288 <__aeabi_dsub>
 800cc28:	ecbd 8b02 	vpop	{d8}
 800cc2c:	ec41 0b10 	vmov	d0, r0, r1
 800cc30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc34:	4b1f      	ldr	r3, [pc, #124]	; (800ccb4 <__kernel_cos+0x184>)
 800cc36:	491e      	ldr	r1, [pc, #120]	; (800ccb0 <__kernel_cos+0x180>)
 800cc38:	429e      	cmp	r6, r3
 800cc3a:	bfcc      	ite	gt
 800cc3c:	4d1e      	ldrgt	r5, [pc, #120]	; (800ccb8 <__kernel_cos+0x188>)
 800cc3e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800cc42:	2400      	movs	r4, #0
 800cc44:	4622      	mov	r2, r4
 800cc46:	462b      	mov	r3, r5
 800cc48:	2000      	movs	r0, #0
 800cc4a:	f7f3 fb1d 	bl	8000288 <__aeabi_dsub>
 800cc4e:	4622      	mov	r2, r4
 800cc50:	4606      	mov	r6, r0
 800cc52:	460f      	mov	r7, r1
 800cc54:	462b      	mov	r3, r5
 800cc56:	4650      	mov	r0, sl
 800cc58:	4659      	mov	r1, fp
 800cc5a:	f7f3 fb15 	bl	8000288 <__aeabi_dsub>
 800cc5e:	4642      	mov	r2, r8
 800cc60:	464b      	mov	r3, r9
 800cc62:	f7f3 fb11 	bl	8000288 <__aeabi_dsub>
 800cc66:	4602      	mov	r2, r0
 800cc68:	460b      	mov	r3, r1
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	4639      	mov	r1, r7
 800cc6e:	e7d9      	b.n	800cc24 <__kernel_cos+0xf4>
 800cc70:	2000      	movs	r0, #0
 800cc72:	490f      	ldr	r1, [pc, #60]	; (800ccb0 <__kernel_cos+0x180>)
 800cc74:	e7d8      	b.n	800cc28 <__kernel_cos+0xf8>
 800cc76:	bf00      	nop
 800cc78:	be8838d4 	.word	0xbe8838d4
 800cc7c:	bda8fae9 	.word	0xbda8fae9
 800cc80:	bdb4b1c4 	.word	0xbdb4b1c4
 800cc84:	3e21ee9e 	.word	0x3e21ee9e
 800cc88:	809c52ad 	.word	0x809c52ad
 800cc8c:	3e927e4f 	.word	0x3e927e4f
 800cc90:	19cb1590 	.word	0x19cb1590
 800cc94:	3efa01a0 	.word	0x3efa01a0
 800cc98:	16c15177 	.word	0x16c15177
 800cc9c:	3f56c16c 	.word	0x3f56c16c
 800cca0:	5555554c 	.word	0x5555554c
 800cca4:	3fa55555 	.word	0x3fa55555
 800cca8:	3fe00000 	.word	0x3fe00000
 800ccac:	3fd33332 	.word	0x3fd33332
 800ccb0:	3ff00000 	.word	0x3ff00000
 800ccb4:	3fe90000 	.word	0x3fe90000
 800ccb8:	3fd20000 	.word	0x3fd20000
 800ccbc:	00000000 	.word	0x00000000

0800ccc0 <__kernel_rem_pio2>:
 800ccc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccc4:	ed2d 8b02 	vpush	{d8}
 800ccc8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800cccc:	1ed4      	subs	r4, r2, #3
 800ccce:	9308      	str	r3, [sp, #32]
 800ccd0:	9101      	str	r1, [sp, #4]
 800ccd2:	4bc5      	ldr	r3, [pc, #788]	; (800cfe8 <__kernel_rem_pio2+0x328>)
 800ccd4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800ccd6:	9009      	str	r0, [sp, #36]	; 0x24
 800ccd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccdc:	9304      	str	r3, [sp, #16]
 800ccde:	9b08      	ldr	r3, [sp, #32]
 800cce0:	3b01      	subs	r3, #1
 800cce2:	9307      	str	r3, [sp, #28]
 800cce4:	2318      	movs	r3, #24
 800cce6:	fb94 f4f3 	sdiv	r4, r4, r3
 800ccea:	f06f 0317 	mvn.w	r3, #23
 800ccee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ccf2:	fb04 3303 	mla	r3, r4, r3, r3
 800ccf6:	eb03 0a02 	add.w	sl, r3, r2
 800ccfa:	9b04      	ldr	r3, [sp, #16]
 800ccfc:	9a07      	ldr	r2, [sp, #28]
 800ccfe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800cfd8 <__kernel_rem_pio2+0x318>
 800cd02:	eb03 0802 	add.w	r8, r3, r2
 800cd06:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cd08:	1aa7      	subs	r7, r4, r2
 800cd0a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800cd0e:	ae22      	add	r6, sp, #136	; 0x88
 800cd10:	2500      	movs	r5, #0
 800cd12:	4545      	cmp	r5, r8
 800cd14:	dd13      	ble.n	800cd3e <__kernel_rem_pio2+0x7e>
 800cd16:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800cfd8 <__kernel_rem_pio2+0x318>
 800cd1a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800cd1e:	2600      	movs	r6, #0
 800cd20:	9b04      	ldr	r3, [sp, #16]
 800cd22:	429e      	cmp	r6, r3
 800cd24:	dc32      	bgt.n	800cd8c <__kernel_rem_pio2+0xcc>
 800cd26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd28:	9302      	str	r3, [sp, #8]
 800cd2a:	9b08      	ldr	r3, [sp, #32]
 800cd2c:	199d      	adds	r5, r3, r6
 800cd2e:	ab22      	add	r3, sp, #136	; 0x88
 800cd30:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cd34:	9306      	str	r3, [sp, #24]
 800cd36:	ec59 8b18 	vmov	r8, r9, d8
 800cd3a:	2700      	movs	r7, #0
 800cd3c:	e01f      	b.n	800cd7e <__kernel_rem_pio2+0xbe>
 800cd3e:	42ef      	cmn	r7, r5
 800cd40:	d407      	bmi.n	800cd52 <__kernel_rem_pio2+0x92>
 800cd42:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800cd46:	f7f3 fbed 	bl	8000524 <__aeabi_i2d>
 800cd4a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800cd4e:	3501      	adds	r5, #1
 800cd50:	e7df      	b.n	800cd12 <__kernel_rem_pio2+0x52>
 800cd52:	ec51 0b18 	vmov	r0, r1, d8
 800cd56:	e7f8      	b.n	800cd4a <__kernel_rem_pio2+0x8a>
 800cd58:	9906      	ldr	r1, [sp, #24]
 800cd5a:	9d02      	ldr	r5, [sp, #8]
 800cd5c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800cd60:	9106      	str	r1, [sp, #24]
 800cd62:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800cd66:	9502      	str	r5, [sp, #8]
 800cd68:	f7f3 fc46 	bl	80005f8 <__aeabi_dmul>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	460b      	mov	r3, r1
 800cd70:	4640      	mov	r0, r8
 800cd72:	4649      	mov	r1, r9
 800cd74:	f7f3 fa8a 	bl	800028c <__adddf3>
 800cd78:	3701      	adds	r7, #1
 800cd7a:	4680      	mov	r8, r0
 800cd7c:	4689      	mov	r9, r1
 800cd7e:	9b07      	ldr	r3, [sp, #28]
 800cd80:	429f      	cmp	r7, r3
 800cd82:	dde9      	ble.n	800cd58 <__kernel_rem_pio2+0x98>
 800cd84:	e8eb 8902 	strd	r8, r9, [fp], #8
 800cd88:	3601      	adds	r6, #1
 800cd8a:	e7c9      	b.n	800cd20 <__kernel_rem_pio2+0x60>
 800cd8c:	9b04      	ldr	r3, [sp, #16]
 800cd8e:	aa0e      	add	r2, sp, #56	; 0x38
 800cd90:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cd94:	930c      	str	r3, [sp, #48]	; 0x30
 800cd96:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800cd98:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800cd9c:	9c04      	ldr	r4, [sp, #16]
 800cd9e:	930b      	str	r3, [sp, #44]	; 0x2c
 800cda0:	ab9a      	add	r3, sp, #616	; 0x268
 800cda2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800cda6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cdaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cdae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800cdb2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800cdb6:	ab9a      	add	r3, sp, #616	; 0x268
 800cdb8:	445b      	add	r3, fp
 800cdba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800cdbe:	2500      	movs	r5, #0
 800cdc0:	1b63      	subs	r3, r4, r5
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	dc78      	bgt.n	800ceb8 <__kernel_rem_pio2+0x1f8>
 800cdc6:	4650      	mov	r0, sl
 800cdc8:	ec49 8b10 	vmov	d0, r8, r9
 800cdcc:	f001 f8d0 	bl	800df70 <scalbn>
 800cdd0:	ec57 6b10 	vmov	r6, r7, d0
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800cdda:	ee10 0a10 	vmov	r0, s0
 800cdde:	4639      	mov	r1, r7
 800cde0:	f7f3 fc0a 	bl	80005f8 <__aeabi_dmul>
 800cde4:	ec41 0b10 	vmov	d0, r0, r1
 800cde8:	f001 f83a 	bl	800de60 <floor>
 800cdec:	2200      	movs	r2, #0
 800cdee:	ec51 0b10 	vmov	r0, r1, d0
 800cdf2:	4b7e      	ldr	r3, [pc, #504]	; (800cfec <__kernel_rem_pio2+0x32c>)
 800cdf4:	f7f3 fc00 	bl	80005f8 <__aeabi_dmul>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	460b      	mov	r3, r1
 800cdfc:	4630      	mov	r0, r6
 800cdfe:	4639      	mov	r1, r7
 800ce00:	f7f3 fa42 	bl	8000288 <__aeabi_dsub>
 800ce04:	460f      	mov	r7, r1
 800ce06:	4606      	mov	r6, r0
 800ce08:	f7f3 fea6 	bl	8000b58 <__aeabi_d2iz>
 800ce0c:	9006      	str	r0, [sp, #24]
 800ce0e:	f7f3 fb89 	bl	8000524 <__aeabi_i2d>
 800ce12:	4602      	mov	r2, r0
 800ce14:	460b      	mov	r3, r1
 800ce16:	4630      	mov	r0, r6
 800ce18:	4639      	mov	r1, r7
 800ce1a:	f7f3 fa35 	bl	8000288 <__aeabi_dsub>
 800ce1e:	f1ba 0f00 	cmp.w	sl, #0
 800ce22:	4606      	mov	r6, r0
 800ce24:	460f      	mov	r7, r1
 800ce26:	dd6c      	ble.n	800cf02 <__kernel_rem_pio2+0x242>
 800ce28:	1e62      	subs	r2, r4, #1
 800ce2a:	ab0e      	add	r3, sp, #56	; 0x38
 800ce2c:	f1ca 0118 	rsb	r1, sl, #24
 800ce30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ce34:	9d06      	ldr	r5, [sp, #24]
 800ce36:	fa40 f301 	asr.w	r3, r0, r1
 800ce3a:	441d      	add	r5, r3
 800ce3c:	408b      	lsls	r3, r1
 800ce3e:	1ac0      	subs	r0, r0, r3
 800ce40:	ab0e      	add	r3, sp, #56	; 0x38
 800ce42:	9506      	str	r5, [sp, #24]
 800ce44:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ce48:	f1ca 0317 	rsb	r3, sl, #23
 800ce4c:	fa40 f303 	asr.w	r3, r0, r3
 800ce50:	9302      	str	r3, [sp, #8]
 800ce52:	9b02      	ldr	r3, [sp, #8]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	dd62      	ble.n	800cf1e <__kernel_rem_pio2+0x25e>
 800ce58:	9b06      	ldr	r3, [sp, #24]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	3301      	adds	r3, #1
 800ce5e:	9306      	str	r3, [sp, #24]
 800ce60:	4615      	mov	r5, r2
 800ce62:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ce66:	4294      	cmp	r4, r2
 800ce68:	f300 8095 	bgt.w	800cf96 <__kernel_rem_pio2+0x2d6>
 800ce6c:	f1ba 0f00 	cmp.w	sl, #0
 800ce70:	dd07      	ble.n	800ce82 <__kernel_rem_pio2+0x1c2>
 800ce72:	f1ba 0f01 	cmp.w	sl, #1
 800ce76:	f000 80a2 	beq.w	800cfbe <__kernel_rem_pio2+0x2fe>
 800ce7a:	f1ba 0f02 	cmp.w	sl, #2
 800ce7e:	f000 80c1 	beq.w	800d004 <__kernel_rem_pio2+0x344>
 800ce82:	9b02      	ldr	r3, [sp, #8]
 800ce84:	2b02      	cmp	r3, #2
 800ce86:	d14a      	bne.n	800cf1e <__kernel_rem_pio2+0x25e>
 800ce88:	4632      	mov	r2, r6
 800ce8a:	463b      	mov	r3, r7
 800ce8c:	2000      	movs	r0, #0
 800ce8e:	4958      	ldr	r1, [pc, #352]	; (800cff0 <__kernel_rem_pio2+0x330>)
 800ce90:	f7f3 f9fa 	bl	8000288 <__aeabi_dsub>
 800ce94:	4606      	mov	r6, r0
 800ce96:	460f      	mov	r7, r1
 800ce98:	2d00      	cmp	r5, #0
 800ce9a:	d040      	beq.n	800cf1e <__kernel_rem_pio2+0x25e>
 800ce9c:	4650      	mov	r0, sl
 800ce9e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800cfe0 <__kernel_rem_pio2+0x320>
 800cea2:	f001 f865 	bl	800df70 <scalbn>
 800cea6:	4630      	mov	r0, r6
 800cea8:	4639      	mov	r1, r7
 800ceaa:	ec53 2b10 	vmov	r2, r3, d0
 800ceae:	f7f3 f9eb 	bl	8000288 <__aeabi_dsub>
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	460f      	mov	r7, r1
 800ceb6:	e032      	b.n	800cf1e <__kernel_rem_pio2+0x25e>
 800ceb8:	2200      	movs	r2, #0
 800ceba:	4b4e      	ldr	r3, [pc, #312]	; (800cff4 <__kernel_rem_pio2+0x334>)
 800cebc:	4640      	mov	r0, r8
 800cebe:	4649      	mov	r1, r9
 800cec0:	f7f3 fb9a 	bl	80005f8 <__aeabi_dmul>
 800cec4:	f7f3 fe48 	bl	8000b58 <__aeabi_d2iz>
 800cec8:	f7f3 fb2c 	bl	8000524 <__aeabi_i2d>
 800cecc:	2200      	movs	r2, #0
 800cece:	4b4a      	ldr	r3, [pc, #296]	; (800cff8 <__kernel_rem_pio2+0x338>)
 800ced0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ced4:	f7f3 fb90 	bl	80005f8 <__aeabi_dmul>
 800ced8:	4602      	mov	r2, r0
 800ceda:	460b      	mov	r3, r1
 800cedc:	4640      	mov	r0, r8
 800cede:	4649      	mov	r1, r9
 800cee0:	f7f3 f9d2 	bl	8000288 <__aeabi_dsub>
 800cee4:	f7f3 fe38 	bl	8000b58 <__aeabi_d2iz>
 800cee8:	ab0e      	add	r3, sp, #56	; 0x38
 800ceea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800ceee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800cef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cef6:	f7f3 f9c9 	bl	800028c <__adddf3>
 800cefa:	3501      	adds	r5, #1
 800cefc:	4680      	mov	r8, r0
 800cefe:	4689      	mov	r9, r1
 800cf00:	e75e      	b.n	800cdc0 <__kernel_rem_pio2+0x100>
 800cf02:	d105      	bne.n	800cf10 <__kernel_rem_pio2+0x250>
 800cf04:	1e63      	subs	r3, r4, #1
 800cf06:	aa0e      	add	r2, sp, #56	; 0x38
 800cf08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800cf0c:	15c3      	asrs	r3, r0, #23
 800cf0e:	e79f      	b.n	800ce50 <__kernel_rem_pio2+0x190>
 800cf10:	2200      	movs	r2, #0
 800cf12:	4b3a      	ldr	r3, [pc, #232]	; (800cffc <__kernel_rem_pio2+0x33c>)
 800cf14:	f7f3 fdf6 	bl	8000b04 <__aeabi_dcmpge>
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d139      	bne.n	800cf90 <__kernel_rem_pio2+0x2d0>
 800cf1c:	9002      	str	r0, [sp, #8]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	2300      	movs	r3, #0
 800cf22:	4630      	mov	r0, r6
 800cf24:	4639      	mov	r1, r7
 800cf26:	f7f3 fdcf 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf2a:	2800      	cmp	r0, #0
 800cf2c:	f000 80c7 	beq.w	800d0be <__kernel_rem_pio2+0x3fe>
 800cf30:	1e65      	subs	r5, r4, #1
 800cf32:	462b      	mov	r3, r5
 800cf34:	2200      	movs	r2, #0
 800cf36:	9904      	ldr	r1, [sp, #16]
 800cf38:	428b      	cmp	r3, r1
 800cf3a:	da6a      	bge.n	800d012 <__kernel_rem_pio2+0x352>
 800cf3c:	2a00      	cmp	r2, #0
 800cf3e:	f000 8088 	beq.w	800d052 <__kernel_rem_pio2+0x392>
 800cf42:	ab0e      	add	r3, sp, #56	; 0x38
 800cf44:	f1aa 0a18 	sub.w	sl, sl, #24
 800cf48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	f000 80b4 	beq.w	800d0ba <__kernel_rem_pio2+0x3fa>
 800cf52:	4650      	mov	r0, sl
 800cf54:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800cfe0 <__kernel_rem_pio2+0x320>
 800cf58:	f001 f80a 	bl	800df70 <scalbn>
 800cf5c:	00ec      	lsls	r4, r5, #3
 800cf5e:	ab72      	add	r3, sp, #456	; 0x1c8
 800cf60:	191e      	adds	r6, r3, r4
 800cf62:	ec59 8b10 	vmov	r8, r9, d0
 800cf66:	f106 0a08 	add.w	sl, r6, #8
 800cf6a:	462f      	mov	r7, r5
 800cf6c:	2f00      	cmp	r7, #0
 800cf6e:	f280 80df 	bge.w	800d130 <__kernel_rem_pio2+0x470>
 800cf72:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800cfd8 <__kernel_rem_pio2+0x318>
 800cf76:	f04f 0a00 	mov.w	sl, #0
 800cf7a:	eba5 030a 	sub.w	r3, r5, sl
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f2c0 810a 	blt.w	800d198 <__kernel_rem_pio2+0x4d8>
 800cf84:	f8df b078 	ldr.w	fp, [pc, #120]	; 800d000 <__kernel_rem_pio2+0x340>
 800cf88:	ec59 8b18 	vmov	r8, r9, d8
 800cf8c:	2700      	movs	r7, #0
 800cf8e:	e0f5      	b.n	800d17c <__kernel_rem_pio2+0x4bc>
 800cf90:	2302      	movs	r3, #2
 800cf92:	9302      	str	r3, [sp, #8]
 800cf94:	e760      	b.n	800ce58 <__kernel_rem_pio2+0x198>
 800cf96:	ab0e      	add	r3, sp, #56	; 0x38
 800cf98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf9c:	b94d      	cbnz	r5, 800cfb2 <__kernel_rem_pio2+0x2f2>
 800cf9e:	b12b      	cbz	r3, 800cfac <__kernel_rem_pio2+0x2ec>
 800cfa0:	a80e      	add	r0, sp, #56	; 0x38
 800cfa2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cfa6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cfaa:	2301      	movs	r3, #1
 800cfac:	3201      	adds	r2, #1
 800cfae:	461d      	mov	r5, r3
 800cfb0:	e759      	b.n	800ce66 <__kernel_rem_pio2+0x1a6>
 800cfb2:	a80e      	add	r0, sp, #56	; 0x38
 800cfb4:	1acb      	subs	r3, r1, r3
 800cfb6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cfba:	462b      	mov	r3, r5
 800cfbc:	e7f6      	b.n	800cfac <__kernel_rem_pio2+0x2ec>
 800cfbe:	1e62      	subs	r2, r4, #1
 800cfc0:	ab0e      	add	r3, sp, #56	; 0x38
 800cfc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfc6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cfca:	a90e      	add	r1, sp, #56	; 0x38
 800cfcc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cfd0:	e757      	b.n	800ce82 <__kernel_rem_pio2+0x1c2>
 800cfd2:	bf00      	nop
 800cfd4:	f3af 8000 	nop.w
	...
 800cfe4:	3ff00000 	.word	0x3ff00000
 800cfe8:	08012bf8 	.word	0x08012bf8
 800cfec:	40200000 	.word	0x40200000
 800cff0:	3ff00000 	.word	0x3ff00000
 800cff4:	3e700000 	.word	0x3e700000
 800cff8:	41700000 	.word	0x41700000
 800cffc:	3fe00000 	.word	0x3fe00000
 800d000:	08012bb8 	.word	0x08012bb8
 800d004:	1e62      	subs	r2, r4, #1
 800d006:	ab0e      	add	r3, sp, #56	; 0x38
 800d008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d00c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800d010:	e7db      	b.n	800cfca <__kernel_rem_pio2+0x30a>
 800d012:	a90e      	add	r1, sp, #56	; 0x38
 800d014:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d018:	3b01      	subs	r3, #1
 800d01a:	430a      	orrs	r2, r1
 800d01c:	e78b      	b.n	800cf36 <__kernel_rem_pio2+0x276>
 800d01e:	3301      	adds	r3, #1
 800d020:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d024:	2900      	cmp	r1, #0
 800d026:	d0fa      	beq.n	800d01e <__kernel_rem_pio2+0x35e>
 800d028:	9a08      	ldr	r2, [sp, #32]
 800d02a:	4422      	add	r2, r4
 800d02c:	00d2      	lsls	r2, r2, #3
 800d02e:	a922      	add	r1, sp, #136	; 0x88
 800d030:	18e3      	adds	r3, r4, r3
 800d032:	9206      	str	r2, [sp, #24]
 800d034:	440a      	add	r2, r1
 800d036:	9302      	str	r3, [sp, #8]
 800d038:	f10b 0108 	add.w	r1, fp, #8
 800d03c:	f102 0308 	add.w	r3, r2, #8
 800d040:	1c66      	adds	r6, r4, #1
 800d042:	910a      	str	r1, [sp, #40]	; 0x28
 800d044:	2500      	movs	r5, #0
 800d046:	930d      	str	r3, [sp, #52]	; 0x34
 800d048:	9b02      	ldr	r3, [sp, #8]
 800d04a:	42b3      	cmp	r3, r6
 800d04c:	da04      	bge.n	800d058 <__kernel_rem_pio2+0x398>
 800d04e:	461c      	mov	r4, r3
 800d050:	e6a6      	b.n	800cda0 <__kernel_rem_pio2+0xe0>
 800d052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d054:	2301      	movs	r3, #1
 800d056:	e7e3      	b.n	800d020 <__kernel_rem_pio2+0x360>
 800d058:	9b06      	ldr	r3, [sp, #24]
 800d05a:	18ef      	adds	r7, r5, r3
 800d05c:	ab22      	add	r3, sp, #136	; 0x88
 800d05e:	441f      	add	r7, r3
 800d060:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d062:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d066:	f7f3 fa5d 	bl	8000524 <__aeabi_i2d>
 800d06a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d06c:	461c      	mov	r4, r3
 800d06e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d070:	e9c7 0100 	strd	r0, r1, [r7]
 800d074:	eb03 0b05 	add.w	fp, r3, r5
 800d078:	2700      	movs	r7, #0
 800d07a:	f04f 0800 	mov.w	r8, #0
 800d07e:	f04f 0900 	mov.w	r9, #0
 800d082:	9b07      	ldr	r3, [sp, #28]
 800d084:	429f      	cmp	r7, r3
 800d086:	dd08      	ble.n	800d09a <__kernel_rem_pio2+0x3da>
 800d088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d08a:	aa72      	add	r2, sp, #456	; 0x1c8
 800d08c:	18eb      	adds	r3, r5, r3
 800d08e:	4413      	add	r3, r2
 800d090:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800d094:	3601      	adds	r6, #1
 800d096:	3508      	adds	r5, #8
 800d098:	e7d6      	b.n	800d048 <__kernel_rem_pio2+0x388>
 800d09a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800d09e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800d0a2:	f7f3 faa9 	bl	80005f8 <__aeabi_dmul>
 800d0a6:	4602      	mov	r2, r0
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	4640      	mov	r0, r8
 800d0ac:	4649      	mov	r1, r9
 800d0ae:	f7f3 f8ed 	bl	800028c <__adddf3>
 800d0b2:	3701      	adds	r7, #1
 800d0b4:	4680      	mov	r8, r0
 800d0b6:	4689      	mov	r9, r1
 800d0b8:	e7e3      	b.n	800d082 <__kernel_rem_pio2+0x3c2>
 800d0ba:	3d01      	subs	r5, #1
 800d0bc:	e741      	b.n	800cf42 <__kernel_rem_pio2+0x282>
 800d0be:	f1ca 0000 	rsb	r0, sl, #0
 800d0c2:	ec47 6b10 	vmov	d0, r6, r7
 800d0c6:	f000 ff53 	bl	800df70 <scalbn>
 800d0ca:	ec57 6b10 	vmov	r6, r7, d0
 800d0ce:	2200      	movs	r2, #0
 800d0d0:	4b99      	ldr	r3, [pc, #612]	; (800d338 <__kernel_rem_pio2+0x678>)
 800d0d2:	ee10 0a10 	vmov	r0, s0
 800d0d6:	4639      	mov	r1, r7
 800d0d8:	f7f3 fd14 	bl	8000b04 <__aeabi_dcmpge>
 800d0dc:	b1f8      	cbz	r0, 800d11e <__kernel_rem_pio2+0x45e>
 800d0de:	2200      	movs	r2, #0
 800d0e0:	4b96      	ldr	r3, [pc, #600]	; (800d33c <__kernel_rem_pio2+0x67c>)
 800d0e2:	4630      	mov	r0, r6
 800d0e4:	4639      	mov	r1, r7
 800d0e6:	f7f3 fa87 	bl	80005f8 <__aeabi_dmul>
 800d0ea:	f7f3 fd35 	bl	8000b58 <__aeabi_d2iz>
 800d0ee:	4680      	mov	r8, r0
 800d0f0:	f7f3 fa18 	bl	8000524 <__aeabi_i2d>
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	4b90      	ldr	r3, [pc, #576]	; (800d338 <__kernel_rem_pio2+0x678>)
 800d0f8:	f7f3 fa7e 	bl	80005f8 <__aeabi_dmul>
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	4602      	mov	r2, r0
 800d100:	4639      	mov	r1, r7
 800d102:	4630      	mov	r0, r6
 800d104:	f7f3 f8c0 	bl	8000288 <__aeabi_dsub>
 800d108:	f7f3 fd26 	bl	8000b58 <__aeabi_d2iz>
 800d10c:	1c65      	adds	r5, r4, #1
 800d10e:	ab0e      	add	r3, sp, #56	; 0x38
 800d110:	f10a 0a18 	add.w	sl, sl, #24
 800d114:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d118:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800d11c:	e719      	b.n	800cf52 <__kernel_rem_pio2+0x292>
 800d11e:	4630      	mov	r0, r6
 800d120:	4639      	mov	r1, r7
 800d122:	f7f3 fd19 	bl	8000b58 <__aeabi_d2iz>
 800d126:	ab0e      	add	r3, sp, #56	; 0x38
 800d128:	4625      	mov	r5, r4
 800d12a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d12e:	e710      	b.n	800cf52 <__kernel_rem_pio2+0x292>
 800d130:	ab0e      	add	r3, sp, #56	; 0x38
 800d132:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800d136:	f7f3 f9f5 	bl	8000524 <__aeabi_i2d>
 800d13a:	4642      	mov	r2, r8
 800d13c:	464b      	mov	r3, r9
 800d13e:	f7f3 fa5b 	bl	80005f8 <__aeabi_dmul>
 800d142:	2200      	movs	r2, #0
 800d144:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800d148:	4b7c      	ldr	r3, [pc, #496]	; (800d33c <__kernel_rem_pio2+0x67c>)
 800d14a:	4640      	mov	r0, r8
 800d14c:	4649      	mov	r1, r9
 800d14e:	f7f3 fa53 	bl	80005f8 <__aeabi_dmul>
 800d152:	3f01      	subs	r7, #1
 800d154:	4680      	mov	r8, r0
 800d156:	4689      	mov	r9, r1
 800d158:	e708      	b.n	800cf6c <__kernel_rem_pio2+0x2ac>
 800d15a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800d15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d162:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800d166:	f7f3 fa47 	bl	80005f8 <__aeabi_dmul>
 800d16a:	4602      	mov	r2, r0
 800d16c:	460b      	mov	r3, r1
 800d16e:	4640      	mov	r0, r8
 800d170:	4649      	mov	r1, r9
 800d172:	f7f3 f88b 	bl	800028c <__adddf3>
 800d176:	3701      	adds	r7, #1
 800d178:	4680      	mov	r8, r0
 800d17a:	4689      	mov	r9, r1
 800d17c:	9b04      	ldr	r3, [sp, #16]
 800d17e:	429f      	cmp	r7, r3
 800d180:	dc01      	bgt.n	800d186 <__kernel_rem_pio2+0x4c6>
 800d182:	45ba      	cmp	sl, r7
 800d184:	dae9      	bge.n	800d15a <__kernel_rem_pio2+0x49a>
 800d186:	ab4a      	add	r3, sp, #296	; 0x128
 800d188:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d18c:	e9c3 8900 	strd	r8, r9, [r3]
 800d190:	f10a 0a01 	add.w	sl, sl, #1
 800d194:	3e08      	subs	r6, #8
 800d196:	e6f0      	b.n	800cf7a <__kernel_rem_pio2+0x2ba>
 800d198:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800d19a:	2b03      	cmp	r3, #3
 800d19c:	d85b      	bhi.n	800d256 <__kernel_rem_pio2+0x596>
 800d19e:	e8df f003 	tbb	[pc, r3]
 800d1a2:	264a      	.short	0x264a
 800d1a4:	0226      	.short	0x0226
 800d1a6:	ab9a      	add	r3, sp, #616	; 0x268
 800d1a8:	441c      	add	r4, r3
 800d1aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d1ae:	46a2      	mov	sl, r4
 800d1b0:	46ab      	mov	fp, r5
 800d1b2:	f1bb 0f00 	cmp.w	fp, #0
 800d1b6:	dc6c      	bgt.n	800d292 <__kernel_rem_pio2+0x5d2>
 800d1b8:	46a2      	mov	sl, r4
 800d1ba:	46ab      	mov	fp, r5
 800d1bc:	f1bb 0f01 	cmp.w	fp, #1
 800d1c0:	f300 8086 	bgt.w	800d2d0 <__kernel_rem_pio2+0x610>
 800d1c4:	2000      	movs	r0, #0
 800d1c6:	2100      	movs	r1, #0
 800d1c8:	2d01      	cmp	r5, #1
 800d1ca:	f300 80a0 	bgt.w	800d30e <__kernel_rem_pio2+0x64e>
 800d1ce:	9b02      	ldr	r3, [sp, #8]
 800d1d0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800d1d4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f040 809e 	bne.w	800d31a <__kernel_rem_pio2+0x65a>
 800d1de:	9b01      	ldr	r3, [sp, #4]
 800d1e0:	e9c3 7800 	strd	r7, r8, [r3]
 800d1e4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800d1e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800d1ec:	e033      	b.n	800d256 <__kernel_rem_pio2+0x596>
 800d1ee:	3408      	adds	r4, #8
 800d1f0:	ab4a      	add	r3, sp, #296	; 0x128
 800d1f2:	441c      	add	r4, r3
 800d1f4:	462e      	mov	r6, r5
 800d1f6:	2000      	movs	r0, #0
 800d1f8:	2100      	movs	r1, #0
 800d1fa:	2e00      	cmp	r6, #0
 800d1fc:	da3a      	bge.n	800d274 <__kernel_rem_pio2+0x5b4>
 800d1fe:	9b02      	ldr	r3, [sp, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d03d      	beq.n	800d280 <__kernel_rem_pio2+0x5c0>
 800d204:	4602      	mov	r2, r0
 800d206:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d20a:	9c01      	ldr	r4, [sp, #4]
 800d20c:	e9c4 2300 	strd	r2, r3, [r4]
 800d210:	4602      	mov	r2, r0
 800d212:	460b      	mov	r3, r1
 800d214:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800d218:	f7f3 f836 	bl	8000288 <__aeabi_dsub>
 800d21c:	ae4c      	add	r6, sp, #304	; 0x130
 800d21e:	2401      	movs	r4, #1
 800d220:	42a5      	cmp	r5, r4
 800d222:	da30      	bge.n	800d286 <__kernel_rem_pio2+0x5c6>
 800d224:	9b02      	ldr	r3, [sp, #8]
 800d226:	b113      	cbz	r3, 800d22e <__kernel_rem_pio2+0x56e>
 800d228:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d22c:	4619      	mov	r1, r3
 800d22e:	9b01      	ldr	r3, [sp, #4]
 800d230:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800d234:	e00f      	b.n	800d256 <__kernel_rem_pio2+0x596>
 800d236:	ab9a      	add	r3, sp, #616	; 0x268
 800d238:	441c      	add	r4, r3
 800d23a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800d23e:	2000      	movs	r0, #0
 800d240:	2100      	movs	r1, #0
 800d242:	2d00      	cmp	r5, #0
 800d244:	da10      	bge.n	800d268 <__kernel_rem_pio2+0x5a8>
 800d246:	9b02      	ldr	r3, [sp, #8]
 800d248:	b113      	cbz	r3, 800d250 <__kernel_rem_pio2+0x590>
 800d24a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d24e:	4619      	mov	r1, r3
 800d250:	9b01      	ldr	r3, [sp, #4]
 800d252:	e9c3 0100 	strd	r0, r1, [r3]
 800d256:	9b06      	ldr	r3, [sp, #24]
 800d258:	f003 0007 	and.w	r0, r3, #7
 800d25c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800d260:	ecbd 8b02 	vpop	{d8}
 800d264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d268:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d26c:	f7f3 f80e 	bl	800028c <__adddf3>
 800d270:	3d01      	subs	r5, #1
 800d272:	e7e6      	b.n	800d242 <__kernel_rem_pio2+0x582>
 800d274:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d278:	f7f3 f808 	bl	800028c <__adddf3>
 800d27c:	3e01      	subs	r6, #1
 800d27e:	e7bc      	b.n	800d1fa <__kernel_rem_pio2+0x53a>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	e7c1      	b.n	800d20a <__kernel_rem_pio2+0x54a>
 800d286:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800d28a:	f7f2 ffff 	bl	800028c <__adddf3>
 800d28e:	3401      	adds	r4, #1
 800d290:	e7c6      	b.n	800d220 <__kernel_rem_pio2+0x560>
 800d292:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800d296:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d29a:	4640      	mov	r0, r8
 800d29c:	ec53 2b17 	vmov	r2, r3, d7
 800d2a0:	4649      	mov	r1, r9
 800d2a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d2a6:	f7f2 fff1 	bl	800028c <__adddf3>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	4606      	mov	r6, r0
 800d2b0:	460f      	mov	r7, r1
 800d2b2:	4640      	mov	r0, r8
 800d2b4:	4649      	mov	r1, r9
 800d2b6:	f7f2 ffe7 	bl	8000288 <__aeabi_dsub>
 800d2ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2be:	f7f2 ffe5 	bl	800028c <__adddf3>
 800d2c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d2c6:	e9ca 0100 	strd	r0, r1, [sl]
 800d2ca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800d2ce:	e770      	b.n	800d1b2 <__kernel_rem_pio2+0x4f2>
 800d2d0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800d2d4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800d2d8:	4630      	mov	r0, r6
 800d2da:	ec53 2b17 	vmov	r2, r3, d7
 800d2de:	4639      	mov	r1, r7
 800d2e0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800d2e4:	f7f2 ffd2 	bl	800028c <__adddf3>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	460b      	mov	r3, r1
 800d2ec:	4680      	mov	r8, r0
 800d2ee:	4689      	mov	r9, r1
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	f7f2 ffc8 	bl	8000288 <__aeabi_dsub>
 800d2f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d2fc:	f7f2 ffc6 	bl	800028c <__adddf3>
 800d300:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d304:	e9ca 0100 	strd	r0, r1, [sl]
 800d308:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800d30c:	e756      	b.n	800d1bc <__kernel_rem_pio2+0x4fc>
 800d30e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800d312:	f7f2 ffbb 	bl	800028c <__adddf3>
 800d316:	3d01      	subs	r5, #1
 800d318:	e756      	b.n	800d1c8 <__kernel_rem_pio2+0x508>
 800d31a:	9b01      	ldr	r3, [sp, #4]
 800d31c:	9a01      	ldr	r2, [sp, #4]
 800d31e:	601f      	str	r7, [r3, #0]
 800d320:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800d324:	605c      	str	r4, [r3, #4]
 800d326:	609d      	str	r5, [r3, #8]
 800d328:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d32c:	60d3      	str	r3, [r2, #12]
 800d32e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d332:	6110      	str	r0, [r2, #16]
 800d334:	6153      	str	r3, [r2, #20]
 800d336:	e78e      	b.n	800d256 <__kernel_rem_pio2+0x596>
 800d338:	41700000 	.word	0x41700000
 800d33c:	3e700000 	.word	0x3e700000

0800d340 <__kernel_sin>:
 800d340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d344:	ec55 4b10 	vmov	r4, r5, d0
 800d348:	b085      	sub	sp, #20
 800d34a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d34e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800d352:	ed8d 1b00 	vstr	d1, [sp]
 800d356:	9002      	str	r0, [sp, #8]
 800d358:	da06      	bge.n	800d368 <__kernel_sin+0x28>
 800d35a:	ee10 0a10 	vmov	r0, s0
 800d35e:	4629      	mov	r1, r5
 800d360:	f7f3 fbfa 	bl	8000b58 <__aeabi_d2iz>
 800d364:	2800      	cmp	r0, #0
 800d366:	d051      	beq.n	800d40c <__kernel_sin+0xcc>
 800d368:	4622      	mov	r2, r4
 800d36a:	462b      	mov	r3, r5
 800d36c:	4620      	mov	r0, r4
 800d36e:	4629      	mov	r1, r5
 800d370:	f7f3 f942 	bl	80005f8 <__aeabi_dmul>
 800d374:	4682      	mov	sl, r0
 800d376:	468b      	mov	fp, r1
 800d378:	4602      	mov	r2, r0
 800d37a:	460b      	mov	r3, r1
 800d37c:	4620      	mov	r0, r4
 800d37e:	4629      	mov	r1, r5
 800d380:	f7f3 f93a 	bl	80005f8 <__aeabi_dmul>
 800d384:	a341      	add	r3, pc, #260	; (adr r3, 800d48c <__kernel_sin+0x14c>)
 800d386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38a:	4680      	mov	r8, r0
 800d38c:	4689      	mov	r9, r1
 800d38e:	4650      	mov	r0, sl
 800d390:	4659      	mov	r1, fp
 800d392:	f7f3 f931 	bl	80005f8 <__aeabi_dmul>
 800d396:	a33f      	add	r3, pc, #252	; (adr r3, 800d494 <__kernel_sin+0x154>)
 800d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d39c:	f7f2 ff74 	bl	8000288 <__aeabi_dsub>
 800d3a0:	4652      	mov	r2, sl
 800d3a2:	465b      	mov	r3, fp
 800d3a4:	f7f3 f928 	bl	80005f8 <__aeabi_dmul>
 800d3a8:	a33c      	add	r3, pc, #240	; (adr r3, 800d49c <__kernel_sin+0x15c>)
 800d3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ae:	f7f2 ff6d 	bl	800028c <__adddf3>
 800d3b2:	4652      	mov	r2, sl
 800d3b4:	465b      	mov	r3, fp
 800d3b6:	f7f3 f91f 	bl	80005f8 <__aeabi_dmul>
 800d3ba:	a33a      	add	r3, pc, #232	; (adr r3, 800d4a4 <__kernel_sin+0x164>)
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	f7f2 ff62 	bl	8000288 <__aeabi_dsub>
 800d3c4:	4652      	mov	r2, sl
 800d3c6:	465b      	mov	r3, fp
 800d3c8:	f7f3 f916 	bl	80005f8 <__aeabi_dmul>
 800d3cc:	a337      	add	r3, pc, #220	; (adr r3, 800d4ac <__kernel_sin+0x16c>)
 800d3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d2:	f7f2 ff5b 	bl	800028c <__adddf3>
 800d3d6:	9b02      	ldr	r3, [sp, #8]
 800d3d8:	4606      	mov	r6, r0
 800d3da:	460f      	mov	r7, r1
 800d3dc:	b9db      	cbnz	r3, 800d416 <__kernel_sin+0xd6>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	4650      	mov	r0, sl
 800d3e4:	4659      	mov	r1, fp
 800d3e6:	f7f3 f907 	bl	80005f8 <__aeabi_dmul>
 800d3ea:	a325      	add	r3, pc, #148	; (adr r3, 800d480 <__kernel_sin+0x140>)
 800d3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f0:	f7f2 ff4a 	bl	8000288 <__aeabi_dsub>
 800d3f4:	4642      	mov	r2, r8
 800d3f6:	464b      	mov	r3, r9
 800d3f8:	f7f3 f8fe 	bl	80005f8 <__aeabi_dmul>
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	460b      	mov	r3, r1
 800d400:	4620      	mov	r0, r4
 800d402:	4629      	mov	r1, r5
 800d404:	f7f2 ff42 	bl	800028c <__adddf3>
 800d408:	4604      	mov	r4, r0
 800d40a:	460d      	mov	r5, r1
 800d40c:	ec45 4b10 	vmov	d0, r4, r5
 800d410:	b005      	add	sp, #20
 800d412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d416:	2200      	movs	r2, #0
 800d418:	4b1b      	ldr	r3, [pc, #108]	; (800d488 <__kernel_sin+0x148>)
 800d41a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d41e:	f7f3 f8eb 	bl	80005f8 <__aeabi_dmul>
 800d422:	4632      	mov	r2, r6
 800d424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d428:	463b      	mov	r3, r7
 800d42a:	4640      	mov	r0, r8
 800d42c:	4649      	mov	r1, r9
 800d42e:	f7f3 f8e3 	bl	80005f8 <__aeabi_dmul>
 800d432:	4602      	mov	r2, r0
 800d434:	460b      	mov	r3, r1
 800d436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d43a:	f7f2 ff25 	bl	8000288 <__aeabi_dsub>
 800d43e:	4652      	mov	r2, sl
 800d440:	465b      	mov	r3, fp
 800d442:	f7f3 f8d9 	bl	80005f8 <__aeabi_dmul>
 800d446:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d44a:	f7f2 ff1d 	bl	8000288 <__aeabi_dsub>
 800d44e:	a30c      	add	r3, pc, #48	; (adr r3, 800d480 <__kernel_sin+0x140>)
 800d450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d454:	4606      	mov	r6, r0
 800d456:	460f      	mov	r7, r1
 800d458:	4640      	mov	r0, r8
 800d45a:	4649      	mov	r1, r9
 800d45c:	f7f3 f8cc 	bl	80005f8 <__aeabi_dmul>
 800d460:	4602      	mov	r2, r0
 800d462:	460b      	mov	r3, r1
 800d464:	4630      	mov	r0, r6
 800d466:	4639      	mov	r1, r7
 800d468:	f7f2 ff10 	bl	800028c <__adddf3>
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	4620      	mov	r0, r4
 800d472:	4629      	mov	r1, r5
 800d474:	f7f2 ff08 	bl	8000288 <__aeabi_dsub>
 800d478:	e7c6      	b.n	800d408 <__kernel_sin+0xc8>
 800d47a:	bf00      	nop
 800d47c:	f3af 8000 	nop.w
 800d480:	55555549 	.word	0x55555549
 800d484:	3fc55555 	.word	0x3fc55555
 800d488:	3fe00000 	.word	0x3fe00000
 800d48c:	5acfd57c 	.word	0x5acfd57c
 800d490:	3de5d93a 	.word	0x3de5d93a
 800d494:	8a2b9ceb 	.word	0x8a2b9ceb
 800d498:	3e5ae5e6 	.word	0x3e5ae5e6
 800d49c:	57b1fe7d 	.word	0x57b1fe7d
 800d4a0:	3ec71de3 	.word	0x3ec71de3
 800d4a4:	19c161d5 	.word	0x19c161d5
 800d4a8:	3f2a01a0 	.word	0x3f2a01a0
 800d4ac:	1110f8a6 	.word	0x1110f8a6
 800d4b0:	3f811111 	.word	0x3f811111

0800d4b4 <__kernel_cosf>:
 800d4b4:	ee10 3a10 	vmov	r3, s0
 800d4b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4bc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d4c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4c4:	da05      	bge.n	800d4d2 <__kernel_cosf+0x1e>
 800d4c6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d4ca:	ee17 2a90 	vmov	r2, s15
 800d4ce:	2a00      	cmp	r2, #0
 800d4d0:	d03b      	beq.n	800d54a <__kernel_cosf+0x96>
 800d4d2:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d4d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d4da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d550 <__kernel_cosf+0x9c>
 800d4de:	4a1d      	ldr	r2, [pc, #116]	; (800d554 <__kernel_cosf+0xa0>)
 800d4e0:	ee66 7a07 	vmul.f32	s15, s12, s14
 800d4e4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d558 <__kernel_cosf+0xa4>
 800d4e8:	eea6 7a25 	vfma.f32	s14, s12, s11
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800d55c <__kernel_cosf+0xa8>
 800d4f2:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d4f6:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d560 <__kernel_cosf+0xac>
 800d4fa:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d4fe:	eddf 5a19 	vldr	s11, [pc, #100]	; 800d564 <__kernel_cosf+0xb0>
 800d502:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d506:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800d568 <__kernel_cosf+0xb4>
 800d50a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d50e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800d512:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d516:	eee6 0a07 	vfma.f32	s1, s12, s14
 800d51a:	dc04      	bgt.n	800d526 <__kernel_cosf+0x72>
 800d51c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800d520:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800d524:	4770      	bx	lr
 800d526:	4a11      	ldr	r2, [pc, #68]	; (800d56c <__kernel_cosf+0xb8>)
 800d528:	4293      	cmp	r3, r2
 800d52a:	bfda      	itte	le
 800d52c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d530:	ee07 3a10 	vmovle	s14, r3
 800d534:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800d538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d53c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800d540:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d544:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d548:	4770      	bx	lr
 800d54a:	eeb0 0a66 	vmov.f32	s0, s13
 800d54e:	4770      	bx	lr
 800d550:	ad47d74e 	.word	0xad47d74e
 800d554:	3e999999 	.word	0x3e999999
 800d558:	310f74f6 	.word	0x310f74f6
 800d55c:	b493f27c 	.word	0xb493f27c
 800d560:	37d00d01 	.word	0x37d00d01
 800d564:	bab60b61 	.word	0xbab60b61
 800d568:	3d2aaaab 	.word	0x3d2aaaab
 800d56c:	3f480000 	.word	0x3f480000

0800d570 <__kernel_rem_pio2f>:
 800d570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d574:	ed2d 8b04 	vpush	{d8-d9}
 800d578:	b0d7      	sub	sp, #348	; 0x15c
 800d57a:	469b      	mov	fp, r3
 800d57c:	460e      	mov	r6, r1
 800d57e:	4bbe      	ldr	r3, [pc, #760]	; (800d878 <__kernel_rem_pio2f+0x308>)
 800d580:	9964      	ldr	r1, [sp, #400]	; 0x190
 800d582:	9002      	str	r0, [sp, #8]
 800d584:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d588:	9865      	ldr	r0, [sp, #404]	; 0x194
 800d58a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800d888 <__kernel_rem_pio2f+0x318>
 800d58e:	1ed1      	subs	r1, r2, #3
 800d590:	2308      	movs	r3, #8
 800d592:	fb91 f1f3 	sdiv	r1, r1, r3
 800d596:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d59a:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d59e:	1c4c      	adds	r4, r1, #1
 800d5a0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800d5a4:	eba1 050a 	sub.w	r5, r1, sl
 800d5a8:	aa1a      	add	r2, sp, #104	; 0x68
 800d5aa:	eb09 070a 	add.w	r7, r9, sl
 800d5ae:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d5b2:	4696      	mov	lr, r2
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	42bb      	cmp	r3, r7
 800d5b8:	dd0f      	ble.n	800d5da <__kernel_rem_pio2f+0x6a>
 800d5ba:	af42      	add	r7, sp, #264	; 0x108
 800d5bc:	2200      	movs	r2, #0
 800d5be:	454a      	cmp	r2, r9
 800d5c0:	dc27      	bgt.n	800d612 <__kernel_rem_pio2f+0xa2>
 800d5c2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d5c6:	eb0b 0302 	add.w	r3, fp, r2
 800d5ca:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d5ce:	9d02      	ldr	r5, [sp, #8]
 800d5d0:	eddf 7aad 	vldr	s15, [pc, #692]	; 800d888 <__kernel_rem_pio2f+0x318>
 800d5d4:	f04f 0c00 	mov.w	ip, #0
 800d5d8:	e015      	b.n	800d606 <__kernel_rem_pio2f+0x96>
 800d5da:	42dd      	cmn	r5, r3
 800d5dc:	bf5d      	ittte	pl
 800d5de:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800d5e2:	ee07 2a90 	vmovpl	s15, r2
 800d5e6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d5ea:	eef0 7a47 	vmovmi.f32	s15, s14
 800d5ee:	ecee 7a01 	vstmia	lr!, {s15}
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	e7df      	b.n	800d5b6 <__kernel_rem_pio2f+0x46>
 800d5f6:	ecf5 6a01 	vldmia	r5!, {s13}
 800d5fa:	ed33 7a01 	vldmdb	r3!, {s14}
 800d5fe:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d602:	f10c 0c01 	add.w	ip, ip, #1
 800d606:	45d4      	cmp	ip, sl
 800d608:	ddf5      	ble.n	800d5f6 <__kernel_rem_pio2f+0x86>
 800d60a:	ece7 7a01 	vstmia	r7!, {s15}
 800d60e:	3201      	adds	r2, #1
 800d610:	e7d5      	b.n	800d5be <__kernel_rem_pio2f+0x4e>
 800d612:	ab06      	add	r3, sp, #24
 800d614:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d618:	9304      	str	r3, [sp, #16]
 800d61a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800d884 <__kernel_rem_pio2f+0x314>
 800d61e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800d880 <__kernel_rem_pio2f+0x310>
 800d622:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d626:	9303      	str	r3, [sp, #12]
 800d628:	464d      	mov	r5, r9
 800d62a:	ab56      	add	r3, sp, #344	; 0x158
 800d62c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800d630:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800d634:	3f01      	subs	r7, #1
 800d636:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800d63a:	00bf      	lsls	r7, r7, #2
 800d63c:	ab56      	add	r3, sp, #344	; 0x158
 800d63e:	19da      	adds	r2, r3, r7
 800d640:	3a4c      	subs	r2, #76	; 0x4c
 800d642:	2300      	movs	r3, #0
 800d644:	1ae9      	subs	r1, r5, r3
 800d646:	2900      	cmp	r1, #0
 800d648:	dc4c      	bgt.n	800d6e4 <__kernel_rem_pio2f+0x174>
 800d64a:	4620      	mov	r0, r4
 800d64c:	f000 fd50 	bl	800e0f0 <scalbnf>
 800d650:	eeb0 8a40 	vmov.f32	s16, s0
 800d654:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d658:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d65c:	f000 fd06 	bl	800e06c <floorf>
 800d660:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d664:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d668:	2c00      	cmp	r4, #0
 800d66a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d66e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d676:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d67a:	dd48      	ble.n	800d70e <__kernel_rem_pio2f+0x19e>
 800d67c:	1e69      	subs	r1, r5, #1
 800d67e:	ab06      	add	r3, sp, #24
 800d680:	f1c4 0008 	rsb	r0, r4, #8
 800d684:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d688:	9a01      	ldr	r2, [sp, #4]
 800d68a:	fa4c f300 	asr.w	r3, ip, r0
 800d68e:	441a      	add	r2, r3
 800d690:	4083      	lsls	r3, r0
 800d692:	9201      	str	r2, [sp, #4]
 800d694:	ebac 0203 	sub.w	r2, ip, r3
 800d698:	ab06      	add	r3, sp, #24
 800d69a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d69e:	f1c4 0307 	rsb	r3, r4, #7
 800d6a2:	fa42 f803 	asr.w	r8, r2, r3
 800d6a6:	f1b8 0f00 	cmp.w	r8, #0
 800d6aa:	dd41      	ble.n	800d730 <__kernel_rem_pio2f+0x1c0>
 800d6ac:	9b01      	ldr	r3, [sp, #4]
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	3301      	adds	r3, #1
 800d6b2:	9301      	str	r3, [sp, #4]
 800d6b4:	4601      	mov	r1, r0
 800d6b6:	4285      	cmp	r5, r0
 800d6b8:	dc6d      	bgt.n	800d796 <__kernel_rem_pio2f+0x226>
 800d6ba:	2c00      	cmp	r4, #0
 800d6bc:	dd04      	ble.n	800d6c8 <__kernel_rem_pio2f+0x158>
 800d6be:	2c01      	cmp	r4, #1
 800d6c0:	d07e      	beq.n	800d7c0 <__kernel_rem_pio2f+0x250>
 800d6c2:	2c02      	cmp	r4, #2
 800d6c4:	f000 8086 	beq.w	800d7d4 <__kernel_rem_pio2f+0x264>
 800d6c8:	f1b8 0f02 	cmp.w	r8, #2
 800d6cc:	d130      	bne.n	800d730 <__kernel_rem_pio2f+0x1c0>
 800d6ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d6d2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d6d6:	b359      	cbz	r1, 800d730 <__kernel_rem_pio2f+0x1c0>
 800d6d8:	4620      	mov	r0, r4
 800d6da:	f000 fd09 	bl	800e0f0 <scalbnf>
 800d6de:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d6e2:	e025      	b.n	800d730 <__kernel_rem_pio2f+0x1c0>
 800d6e4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d6e8:	a806      	add	r0, sp, #24
 800d6ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6f2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d6f6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d6fa:	ee10 1a10 	vmov	r1, s0
 800d6fe:	ed32 0a01 	vldmdb	r2!, {s0}
 800d702:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d706:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d70a:	3301      	adds	r3, #1
 800d70c:	e79a      	b.n	800d644 <__kernel_rem_pio2f+0xd4>
 800d70e:	d106      	bne.n	800d71e <__kernel_rem_pio2f+0x1ae>
 800d710:	1e6b      	subs	r3, r5, #1
 800d712:	aa06      	add	r2, sp, #24
 800d714:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d718:	ea4f 2822 	mov.w	r8, r2, asr #8
 800d71c:	e7c3      	b.n	800d6a6 <__kernel_rem_pio2f+0x136>
 800d71e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d722:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72a:	da31      	bge.n	800d790 <__kernel_rem_pio2f+0x220>
 800d72c:	f04f 0800 	mov.w	r8, #0
 800d730:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d738:	f040 80a8 	bne.w	800d88c <__kernel_rem_pio2f+0x31c>
 800d73c:	1e6b      	subs	r3, r5, #1
 800d73e:	4618      	mov	r0, r3
 800d740:	2200      	movs	r2, #0
 800d742:	4548      	cmp	r0, r9
 800d744:	da4d      	bge.n	800d7e2 <__kernel_rem_pio2f+0x272>
 800d746:	2a00      	cmp	r2, #0
 800d748:	f000 8087 	beq.w	800d85a <__kernel_rem_pio2f+0x2ea>
 800d74c:	aa06      	add	r2, sp, #24
 800d74e:	3c08      	subs	r4, #8
 800d750:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d754:	2900      	cmp	r1, #0
 800d756:	f000 808d 	beq.w	800d874 <__kernel_rem_pio2f+0x304>
 800d75a:	4620      	mov	r0, r4
 800d75c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d760:	9302      	str	r3, [sp, #8]
 800d762:	f000 fcc5 	bl	800e0f0 <scalbnf>
 800d766:	9b02      	ldr	r3, [sp, #8]
 800d768:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800d884 <__kernel_rem_pio2f+0x314>
 800d76c:	0099      	lsls	r1, r3, #2
 800d76e:	aa42      	add	r2, sp, #264	; 0x108
 800d770:	1850      	adds	r0, r2, r1
 800d772:	1d05      	adds	r5, r0, #4
 800d774:	461c      	mov	r4, r3
 800d776:	2c00      	cmp	r4, #0
 800d778:	f280 80b8 	bge.w	800d8ec <__kernel_rem_pio2f+0x37c>
 800d77c:	2500      	movs	r5, #0
 800d77e:	1b5c      	subs	r4, r3, r5
 800d780:	2c00      	cmp	r4, #0
 800d782:	f2c0 80d8 	blt.w	800d936 <__kernel_rem_pio2f+0x3c6>
 800d786:	4f3d      	ldr	r7, [pc, #244]	; (800d87c <__kernel_rem_pio2f+0x30c>)
 800d788:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800d888 <__kernel_rem_pio2f+0x318>
 800d78c:	2400      	movs	r4, #0
 800d78e:	e0c6      	b.n	800d91e <__kernel_rem_pio2f+0x3ae>
 800d790:	f04f 0802 	mov.w	r8, #2
 800d794:	e78a      	b.n	800d6ac <__kernel_rem_pio2f+0x13c>
 800d796:	ab06      	add	r3, sp, #24
 800d798:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d79c:	b949      	cbnz	r1, 800d7b2 <__kernel_rem_pio2f+0x242>
 800d79e:	b12b      	cbz	r3, 800d7ac <__kernel_rem_pio2f+0x23c>
 800d7a0:	aa06      	add	r2, sp, #24
 800d7a2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d7a6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	3001      	adds	r0, #1
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	e781      	b.n	800d6b6 <__kernel_rem_pio2f+0x146>
 800d7b2:	aa06      	add	r2, sp, #24
 800d7b4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800d7b8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	e7f5      	b.n	800d7ac <__kernel_rem_pio2f+0x23c>
 800d7c0:	1e68      	subs	r0, r5, #1
 800d7c2:	ab06      	add	r3, sp, #24
 800d7c4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7cc:	aa06      	add	r2, sp, #24
 800d7ce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d7d2:	e779      	b.n	800d6c8 <__kernel_rem_pio2f+0x158>
 800d7d4:	1e68      	subs	r0, r5, #1
 800d7d6:	ab06      	add	r3, sp, #24
 800d7d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d7dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7e0:	e7f4      	b.n	800d7cc <__kernel_rem_pio2f+0x25c>
 800d7e2:	a906      	add	r1, sp, #24
 800d7e4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800d7e8:	3801      	subs	r0, #1
 800d7ea:	430a      	orrs	r2, r1
 800d7ec:	e7a9      	b.n	800d742 <__kernel_rem_pio2f+0x1d2>
 800d7ee:	f10c 0c01 	add.w	ip, ip, #1
 800d7f2:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d7f6:	2a00      	cmp	r2, #0
 800d7f8:	d0f9      	beq.n	800d7ee <__kernel_rem_pio2f+0x27e>
 800d7fa:	eb0b 0305 	add.w	r3, fp, r5
 800d7fe:	aa1a      	add	r2, sp, #104	; 0x68
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	1898      	adds	r0, r3, r2
 800d804:	3004      	adds	r0, #4
 800d806:	1c69      	adds	r1, r5, #1
 800d808:	3704      	adds	r7, #4
 800d80a:	2200      	movs	r2, #0
 800d80c:	4465      	add	r5, ip
 800d80e:	9005      	str	r0, [sp, #20]
 800d810:	428d      	cmp	r5, r1
 800d812:	f6ff af0a 	blt.w	800d62a <__kernel_rem_pio2f+0xba>
 800d816:	a81a      	add	r0, sp, #104	; 0x68
 800d818:	eb02 0c03 	add.w	ip, r2, r3
 800d81c:	4484      	add	ip, r0
 800d81e:	9803      	ldr	r0, [sp, #12]
 800d820:	f8dd e008 	ldr.w	lr, [sp, #8]
 800d824:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800d828:	9001      	str	r0, [sp, #4]
 800d82a:	ee07 0a90 	vmov	s15, r0
 800d82e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d832:	9805      	ldr	r0, [sp, #20]
 800d834:	edcc 7a00 	vstr	s15, [ip]
 800d838:	eddf 7a13 	vldr	s15, [pc, #76]	; 800d888 <__kernel_rem_pio2f+0x318>
 800d83c:	eb00 0802 	add.w	r8, r0, r2
 800d840:	f04f 0c00 	mov.w	ip, #0
 800d844:	45d4      	cmp	ip, sl
 800d846:	dd0c      	ble.n	800d862 <__kernel_rem_pio2f+0x2f2>
 800d848:	eb02 0c07 	add.w	ip, r2, r7
 800d84c:	a842      	add	r0, sp, #264	; 0x108
 800d84e:	4484      	add	ip, r0
 800d850:	edcc 7a01 	vstr	s15, [ip, #4]
 800d854:	3101      	adds	r1, #1
 800d856:	3204      	adds	r2, #4
 800d858:	e7da      	b.n	800d810 <__kernel_rem_pio2f+0x2a0>
 800d85a:	9b04      	ldr	r3, [sp, #16]
 800d85c:	f04f 0c01 	mov.w	ip, #1
 800d860:	e7c7      	b.n	800d7f2 <__kernel_rem_pio2f+0x282>
 800d862:	ecfe 6a01 	vldmia	lr!, {s13}
 800d866:	ed38 7a01 	vldmdb	r8!, {s14}
 800d86a:	f10c 0c01 	add.w	ip, ip, #1
 800d86e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d872:	e7e7      	b.n	800d844 <__kernel_rem_pio2f+0x2d4>
 800d874:	3b01      	subs	r3, #1
 800d876:	e769      	b.n	800d74c <__kernel_rem_pio2f+0x1dc>
 800d878:	08012c34 	.word	0x08012c34
 800d87c:	08012c08 	.word	0x08012c08
 800d880:	43800000 	.word	0x43800000
 800d884:	3b800000 	.word	0x3b800000
 800d888:	00000000 	.word	0x00000000
 800d88c:	4260      	negs	r0, r4
 800d88e:	eeb0 0a48 	vmov.f32	s0, s16
 800d892:	f000 fc2d 	bl	800e0f0 <scalbnf>
 800d896:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800d880 <__kernel_rem_pio2f+0x310>
 800d89a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d89e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a2:	db1a      	blt.n	800d8da <__kernel_rem_pio2f+0x36a>
 800d8a4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800d884 <__kernel_rem_pio2f+0x314>
 800d8a8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800d8ac:	aa06      	add	r2, sp, #24
 800d8ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8b2:	a906      	add	r1, sp, #24
 800d8b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8b8:	3408      	adds	r4, #8
 800d8ba:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d8be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d8c2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d8c6:	ee10 3a10 	vmov	r3, s0
 800d8ca:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d8ce:	1c6b      	adds	r3, r5, #1
 800d8d0:	ee17 2a90 	vmov	r2, s15
 800d8d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d8d8:	e73f      	b.n	800d75a <__kernel_rem_pio2f+0x1ea>
 800d8da:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d8de:	aa06      	add	r2, sp, #24
 800d8e0:	ee10 3a10 	vmov	r3, s0
 800d8e4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800d8e8:	462b      	mov	r3, r5
 800d8ea:	e736      	b.n	800d75a <__kernel_rem_pio2f+0x1ea>
 800d8ec:	aa06      	add	r2, sp, #24
 800d8ee:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800d8f2:	9202      	str	r2, [sp, #8]
 800d8f4:	ee07 2a90 	vmov	s15, r2
 800d8f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8fc:	3c01      	subs	r4, #1
 800d8fe:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d902:	ee20 0a07 	vmul.f32	s0, s0, s14
 800d906:	ed65 7a01 	vstmdb	r5!, {s15}
 800d90a:	e734      	b.n	800d776 <__kernel_rem_pio2f+0x206>
 800d90c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800d910:	ecf7 6a01 	vldmia	r7!, {s13}
 800d914:	ed9c 7a00 	vldr	s14, [ip]
 800d918:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d91c:	3401      	adds	r4, #1
 800d91e:	454c      	cmp	r4, r9
 800d920:	dc01      	bgt.n	800d926 <__kernel_rem_pio2f+0x3b6>
 800d922:	42a5      	cmp	r5, r4
 800d924:	daf2      	bge.n	800d90c <__kernel_rem_pio2f+0x39c>
 800d926:	aa56      	add	r2, sp, #344	; 0x158
 800d928:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800d92c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800d930:	3501      	adds	r5, #1
 800d932:	3804      	subs	r0, #4
 800d934:	e723      	b.n	800d77e <__kernel_rem_pio2f+0x20e>
 800d936:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800d938:	2a03      	cmp	r2, #3
 800d93a:	d84d      	bhi.n	800d9d8 <__kernel_rem_pio2f+0x468>
 800d93c:	e8df f002 	tbb	[pc, r2]
 800d940:	021f1f3e 	.word	0x021f1f3e
 800d944:	aa56      	add	r2, sp, #344	; 0x158
 800d946:	4411      	add	r1, r2
 800d948:	399c      	subs	r1, #156	; 0x9c
 800d94a:	4608      	mov	r0, r1
 800d94c:	461c      	mov	r4, r3
 800d94e:	2c00      	cmp	r4, #0
 800d950:	dc5f      	bgt.n	800da12 <__kernel_rem_pio2f+0x4a2>
 800d952:	4608      	mov	r0, r1
 800d954:	461c      	mov	r4, r3
 800d956:	2c01      	cmp	r4, #1
 800d958:	dc6b      	bgt.n	800da32 <__kernel_rem_pio2f+0x4c2>
 800d95a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800d888 <__kernel_rem_pio2f+0x318>
 800d95e:	2b01      	cmp	r3, #1
 800d960:	dc77      	bgt.n	800da52 <__kernel_rem_pio2f+0x4e2>
 800d962:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800d966:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800d96a:	f1b8 0f00 	cmp.w	r8, #0
 800d96e:	d176      	bne.n	800da5e <__kernel_rem_pio2f+0x4ee>
 800d970:	edc6 6a00 	vstr	s13, [r6]
 800d974:	ed86 7a01 	vstr	s14, [r6, #4]
 800d978:	edc6 7a02 	vstr	s15, [r6, #8]
 800d97c:	e02c      	b.n	800d9d8 <__kernel_rem_pio2f+0x468>
 800d97e:	aa56      	add	r2, sp, #344	; 0x158
 800d980:	4411      	add	r1, r2
 800d982:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800d888 <__kernel_rem_pio2f+0x318>
 800d986:	399c      	subs	r1, #156	; 0x9c
 800d988:	4618      	mov	r0, r3
 800d98a:	2800      	cmp	r0, #0
 800d98c:	da32      	bge.n	800d9f4 <__kernel_rem_pio2f+0x484>
 800d98e:	f1b8 0f00 	cmp.w	r8, #0
 800d992:	d035      	beq.n	800da00 <__kernel_rem_pio2f+0x490>
 800d994:	eef1 7a47 	vneg.f32	s15, s14
 800d998:	edc6 7a00 	vstr	s15, [r6]
 800d99c:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800d9a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d9a4:	a82f      	add	r0, sp, #188	; 0xbc
 800d9a6:	2101      	movs	r1, #1
 800d9a8:	428b      	cmp	r3, r1
 800d9aa:	da2c      	bge.n	800da06 <__kernel_rem_pio2f+0x496>
 800d9ac:	f1b8 0f00 	cmp.w	r8, #0
 800d9b0:	d001      	beq.n	800d9b6 <__kernel_rem_pio2f+0x446>
 800d9b2:	eef1 7a67 	vneg.f32	s15, s15
 800d9b6:	edc6 7a01 	vstr	s15, [r6, #4]
 800d9ba:	e00d      	b.n	800d9d8 <__kernel_rem_pio2f+0x468>
 800d9bc:	aa56      	add	r2, sp, #344	; 0x158
 800d9be:	4411      	add	r1, r2
 800d9c0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800d888 <__kernel_rem_pio2f+0x318>
 800d9c4:	399c      	subs	r1, #156	; 0x9c
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	da0e      	bge.n	800d9e8 <__kernel_rem_pio2f+0x478>
 800d9ca:	f1b8 0f00 	cmp.w	r8, #0
 800d9ce:	d001      	beq.n	800d9d4 <__kernel_rem_pio2f+0x464>
 800d9d0:	eef1 7a67 	vneg.f32	s15, s15
 800d9d4:	edc6 7a00 	vstr	s15, [r6]
 800d9d8:	9b01      	ldr	r3, [sp, #4]
 800d9da:	f003 0007 	and.w	r0, r3, #7
 800d9de:	b057      	add	sp, #348	; 0x15c
 800d9e0:	ecbd 8b04 	vpop	{d8-d9}
 800d9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e8:	ed31 7a01 	vldmdb	r1!, {s14}
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d9f2:	e7e8      	b.n	800d9c6 <__kernel_rem_pio2f+0x456>
 800d9f4:	ed71 7a01 	vldmdb	r1!, {s15}
 800d9f8:	3801      	subs	r0, #1
 800d9fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d9fe:	e7c4      	b.n	800d98a <__kernel_rem_pio2f+0x41a>
 800da00:	eef0 7a47 	vmov.f32	s15, s14
 800da04:	e7c8      	b.n	800d998 <__kernel_rem_pio2f+0x428>
 800da06:	ecb0 7a01 	vldmia	r0!, {s14}
 800da0a:	3101      	adds	r1, #1
 800da0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da10:	e7ca      	b.n	800d9a8 <__kernel_rem_pio2f+0x438>
 800da12:	ed50 7a02 	vldr	s15, [r0, #-8]
 800da16:	ed70 6a01 	vldmdb	r0!, {s13}
 800da1a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800da1e:	3c01      	subs	r4, #1
 800da20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da24:	ed00 7a01 	vstr	s14, [r0, #-4]
 800da28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da2c:	edc0 7a00 	vstr	s15, [r0]
 800da30:	e78d      	b.n	800d94e <__kernel_rem_pio2f+0x3de>
 800da32:	ed50 7a02 	vldr	s15, [r0, #-8]
 800da36:	ed70 6a01 	vldmdb	r0!, {s13}
 800da3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800da3e:	3c01      	subs	r4, #1
 800da40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da44:	ed00 7a01 	vstr	s14, [r0, #-4]
 800da48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da4c:	edc0 7a00 	vstr	s15, [r0]
 800da50:	e781      	b.n	800d956 <__kernel_rem_pio2f+0x3e6>
 800da52:	ed31 7a01 	vldmdb	r1!, {s14}
 800da56:	3b01      	subs	r3, #1
 800da58:	ee77 7a87 	vadd.f32	s15, s15, s14
 800da5c:	e77f      	b.n	800d95e <__kernel_rem_pio2f+0x3ee>
 800da5e:	eef1 6a66 	vneg.f32	s13, s13
 800da62:	eeb1 7a47 	vneg.f32	s14, s14
 800da66:	edc6 6a00 	vstr	s13, [r6]
 800da6a:	ed86 7a01 	vstr	s14, [r6, #4]
 800da6e:	eef1 7a67 	vneg.f32	s15, s15
 800da72:	e781      	b.n	800d978 <__kernel_rem_pio2f+0x408>

0800da74 <__kernel_sinf>:
 800da74:	ee10 3a10 	vmov	r3, s0
 800da78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da7c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800da80:	da04      	bge.n	800da8c <__kernel_sinf+0x18>
 800da82:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800da86:	ee17 3a90 	vmov	r3, s15
 800da8a:	b35b      	cbz	r3, 800dae4 <__kernel_sinf+0x70>
 800da8c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800da90:	eddf 7a15 	vldr	s15, [pc, #84]	; 800dae8 <__kernel_sinf+0x74>
 800da94:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800daec <__kernel_sinf+0x78>
 800da98:	eea7 6a27 	vfma.f32	s12, s14, s15
 800da9c:	eddf 7a14 	vldr	s15, [pc, #80]	; 800daf0 <__kernel_sinf+0x7c>
 800daa0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800daa4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800daf4 <__kernel_sinf+0x80>
 800daa8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800daac:	eddf 7a12 	vldr	s15, [pc, #72]	; 800daf8 <__kernel_sinf+0x84>
 800dab0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800dab4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dab8:	b930      	cbnz	r0, 800dac8 <__kernel_sinf+0x54>
 800daba:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800dafc <__kernel_sinf+0x88>
 800dabe:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dac2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800dac6:	4770      	bx	lr
 800dac8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dacc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800dad0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800dad4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800dad8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800db00 <__kernel_sinf+0x8c>
 800dadc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800dae0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	2f2ec9d3 	.word	0x2f2ec9d3
 800daec:	b2d72f34 	.word	0xb2d72f34
 800daf0:	3638ef1b 	.word	0x3638ef1b
 800daf4:	b9500d01 	.word	0xb9500d01
 800daf8:	3c088889 	.word	0x3c088889
 800dafc:	be2aaaab 	.word	0xbe2aaaab
 800db00:	3e2aaaab 	.word	0x3e2aaaab
 800db04:	00000000 	.word	0x00000000

0800db08 <atan>:
 800db08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0c:	ec55 4b10 	vmov	r4, r5, d0
 800db10:	4bc3      	ldr	r3, [pc, #780]	; (800de20 <atan+0x318>)
 800db12:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800db16:	429e      	cmp	r6, r3
 800db18:	46ab      	mov	fp, r5
 800db1a:	dd18      	ble.n	800db4e <atan+0x46>
 800db1c:	4bc1      	ldr	r3, [pc, #772]	; (800de24 <atan+0x31c>)
 800db1e:	429e      	cmp	r6, r3
 800db20:	dc01      	bgt.n	800db26 <atan+0x1e>
 800db22:	d109      	bne.n	800db38 <atan+0x30>
 800db24:	b144      	cbz	r4, 800db38 <atan+0x30>
 800db26:	4622      	mov	r2, r4
 800db28:	462b      	mov	r3, r5
 800db2a:	4620      	mov	r0, r4
 800db2c:	4629      	mov	r1, r5
 800db2e:	f7f2 fbad 	bl	800028c <__adddf3>
 800db32:	4604      	mov	r4, r0
 800db34:	460d      	mov	r5, r1
 800db36:	e006      	b.n	800db46 <atan+0x3e>
 800db38:	f1bb 0f00 	cmp.w	fp, #0
 800db3c:	f340 8131 	ble.w	800dda2 <atan+0x29a>
 800db40:	a59b      	add	r5, pc, #620	; (adr r5, 800ddb0 <atan+0x2a8>)
 800db42:	e9d5 4500 	ldrd	r4, r5, [r5]
 800db46:	ec45 4b10 	vmov	d0, r4, r5
 800db4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db4e:	4bb6      	ldr	r3, [pc, #728]	; (800de28 <atan+0x320>)
 800db50:	429e      	cmp	r6, r3
 800db52:	dc14      	bgt.n	800db7e <atan+0x76>
 800db54:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800db58:	429e      	cmp	r6, r3
 800db5a:	dc0d      	bgt.n	800db78 <atan+0x70>
 800db5c:	a396      	add	r3, pc, #600	; (adr r3, 800ddb8 <atan+0x2b0>)
 800db5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db62:	ee10 0a10 	vmov	r0, s0
 800db66:	4629      	mov	r1, r5
 800db68:	f7f2 fb90 	bl	800028c <__adddf3>
 800db6c:	2200      	movs	r2, #0
 800db6e:	4baf      	ldr	r3, [pc, #700]	; (800de2c <atan+0x324>)
 800db70:	f7f2 ffd2 	bl	8000b18 <__aeabi_dcmpgt>
 800db74:	2800      	cmp	r0, #0
 800db76:	d1e6      	bne.n	800db46 <atan+0x3e>
 800db78:	f04f 3aff 	mov.w	sl, #4294967295
 800db7c:	e02b      	b.n	800dbd6 <atan+0xce>
 800db7e:	f000 f963 	bl	800de48 <fabs>
 800db82:	4bab      	ldr	r3, [pc, #684]	; (800de30 <atan+0x328>)
 800db84:	429e      	cmp	r6, r3
 800db86:	ec55 4b10 	vmov	r4, r5, d0
 800db8a:	f300 80bf 	bgt.w	800dd0c <atan+0x204>
 800db8e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800db92:	429e      	cmp	r6, r3
 800db94:	f300 80a0 	bgt.w	800dcd8 <atan+0x1d0>
 800db98:	ee10 2a10 	vmov	r2, s0
 800db9c:	ee10 0a10 	vmov	r0, s0
 800dba0:	462b      	mov	r3, r5
 800dba2:	4629      	mov	r1, r5
 800dba4:	f7f2 fb72 	bl	800028c <__adddf3>
 800dba8:	2200      	movs	r2, #0
 800dbaa:	4ba0      	ldr	r3, [pc, #640]	; (800de2c <atan+0x324>)
 800dbac:	f7f2 fb6c 	bl	8000288 <__aeabi_dsub>
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	4606      	mov	r6, r0
 800dbb4:	460f      	mov	r7, r1
 800dbb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dbba:	4620      	mov	r0, r4
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	f7f2 fb65 	bl	800028c <__adddf3>
 800dbc2:	4602      	mov	r2, r0
 800dbc4:	460b      	mov	r3, r1
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	4639      	mov	r1, r7
 800dbca:	f7f2 fe3f 	bl	800084c <__aeabi_ddiv>
 800dbce:	f04f 0a00 	mov.w	sl, #0
 800dbd2:	4604      	mov	r4, r0
 800dbd4:	460d      	mov	r5, r1
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	462b      	mov	r3, r5
 800dbda:	4620      	mov	r0, r4
 800dbdc:	4629      	mov	r1, r5
 800dbde:	f7f2 fd0b 	bl	80005f8 <__aeabi_dmul>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	4680      	mov	r8, r0
 800dbe8:	4689      	mov	r9, r1
 800dbea:	f7f2 fd05 	bl	80005f8 <__aeabi_dmul>
 800dbee:	a374      	add	r3, pc, #464	; (adr r3, 800ddc0 <atan+0x2b8>)
 800dbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbf4:	4606      	mov	r6, r0
 800dbf6:	460f      	mov	r7, r1
 800dbf8:	f7f2 fcfe 	bl	80005f8 <__aeabi_dmul>
 800dbfc:	a372      	add	r3, pc, #456	; (adr r3, 800ddc8 <atan+0x2c0>)
 800dbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc02:	f7f2 fb43 	bl	800028c <__adddf3>
 800dc06:	4632      	mov	r2, r6
 800dc08:	463b      	mov	r3, r7
 800dc0a:	f7f2 fcf5 	bl	80005f8 <__aeabi_dmul>
 800dc0e:	a370      	add	r3, pc, #448	; (adr r3, 800ddd0 <atan+0x2c8>)
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	f7f2 fb3a 	bl	800028c <__adddf3>
 800dc18:	4632      	mov	r2, r6
 800dc1a:	463b      	mov	r3, r7
 800dc1c:	f7f2 fcec 	bl	80005f8 <__aeabi_dmul>
 800dc20:	a36d      	add	r3, pc, #436	; (adr r3, 800ddd8 <atan+0x2d0>)
 800dc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc26:	f7f2 fb31 	bl	800028c <__adddf3>
 800dc2a:	4632      	mov	r2, r6
 800dc2c:	463b      	mov	r3, r7
 800dc2e:	f7f2 fce3 	bl	80005f8 <__aeabi_dmul>
 800dc32:	a36b      	add	r3, pc, #428	; (adr r3, 800dde0 <atan+0x2d8>)
 800dc34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc38:	f7f2 fb28 	bl	800028c <__adddf3>
 800dc3c:	4632      	mov	r2, r6
 800dc3e:	463b      	mov	r3, r7
 800dc40:	f7f2 fcda 	bl	80005f8 <__aeabi_dmul>
 800dc44:	a368      	add	r3, pc, #416	; (adr r3, 800dde8 <atan+0x2e0>)
 800dc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4a:	f7f2 fb1f 	bl	800028c <__adddf3>
 800dc4e:	4642      	mov	r2, r8
 800dc50:	464b      	mov	r3, r9
 800dc52:	f7f2 fcd1 	bl	80005f8 <__aeabi_dmul>
 800dc56:	a366      	add	r3, pc, #408	; (adr r3, 800ddf0 <atan+0x2e8>)
 800dc58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc5c:	4680      	mov	r8, r0
 800dc5e:	4689      	mov	r9, r1
 800dc60:	4630      	mov	r0, r6
 800dc62:	4639      	mov	r1, r7
 800dc64:	f7f2 fcc8 	bl	80005f8 <__aeabi_dmul>
 800dc68:	a363      	add	r3, pc, #396	; (adr r3, 800ddf8 <atan+0x2f0>)
 800dc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc6e:	f7f2 fb0b 	bl	8000288 <__aeabi_dsub>
 800dc72:	4632      	mov	r2, r6
 800dc74:	463b      	mov	r3, r7
 800dc76:	f7f2 fcbf 	bl	80005f8 <__aeabi_dmul>
 800dc7a:	a361      	add	r3, pc, #388	; (adr r3, 800de00 <atan+0x2f8>)
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	f7f2 fb02 	bl	8000288 <__aeabi_dsub>
 800dc84:	4632      	mov	r2, r6
 800dc86:	463b      	mov	r3, r7
 800dc88:	f7f2 fcb6 	bl	80005f8 <__aeabi_dmul>
 800dc8c:	a35e      	add	r3, pc, #376	; (adr r3, 800de08 <atan+0x300>)
 800dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc92:	f7f2 faf9 	bl	8000288 <__aeabi_dsub>
 800dc96:	4632      	mov	r2, r6
 800dc98:	463b      	mov	r3, r7
 800dc9a:	f7f2 fcad 	bl	80005f8 <__aeabi_dmul>
 800dc9e:	a35c      	add	r3, pc, #368	; (adr r3, 800de10 <atan+0x308>)
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	f7f2 faf0 	bl	8000288 <__aeabi_dsub>
 800dca8:	4632      	mov	r2, r6
 800dcaa:	463b      	mov	r3, r7
 800dcac:	f7f2 fca4 	bl	80005f8 <__aeabi_dmul>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	4640      	mov	r0, r8
 800dcb6:	4649      	mov	r1, r9
 800dcb8:	f7f2 fae8 	bl	800028c <__adddf3>
 800dcbc:	4622      	mov	r2, r4
 800dcbe:	462b      	mov	r3, r5
 800dcc0:	f7f2 fc9a 	bl	80005f8 <__aeabi_dmul>
 800dcc4:	f1ba 3fff 	cmp.w	sl, #4294967295
 800dcc8:	4602      	mov	r2, r0
 800dcca:	460b      	mov	r3, r1
 800dccc:	d14b      	bne.n	800dd66 <atan+0x25e>
 800dcce:	4620      	mov	r0, r4
 800dcd0:	4629      	mov	r1, r5
 800dcd2:	f7f2 fad9 	bl	8000288 <__aeabi_dsub>
 800dcd6:	e72c      	b.n	800db32 <atan+0x2a>
 800dcd8:	ee10 0a10 	vmov	r0, s0
 800dcdc:	2200      	movs	r2, #0
 800dcde:	4b53      	ldr	r3, [pc, #332]	; (800de2c <atan+0x324>)
 800dce0:	4629      	mov	r1, r5
 800dce2:	f7f2 fad1 	bl	8000288 <__aeabi_dsub>
 800dce6:	2200      	movs	r2, #0
 800dce8:	4606      	mov	r6, r0
 800dcea:	460f      	mov	r7, r1
 800dcec:	4b4f      	ldr	r3, [pc, #316]	; (800de2c <atan+0x324>)
 800dcee:	4620      	mov	r0, r4
 800dcf0:	4629      	mov	r1, r5
 800dcf2:	f7f2 facb 	bl	800028c <__adddf3>
 800dcf6:	4602      	mov	r2, r0
 800dcf8:	460b      	mov	r3, r1
 800dcfa:	4630      	mov	r0, r6
 800dcfc:	4639      	mov	r1, r7
 800dcfe:	f7f2 fda5 	bl	800084c <__aeabi_ddiv>
 800dd02:	f04f 0a01 	mov.w	sl, #1
 800dd06:	4604      	mov	r4, r0
 800dd08:	460d      	mov	r5, r1
 800dd0a:	e764      	b.n	800dbd6 <atan+0xce>
 800dd0c:	4b49      	ldr	r3, [pc, #292]	; (800de34 <atan+0x32c>)
 800dd0e:	429e      	cmp	r6, r3
 800dd10:	dc1d      	bgt.n	800dd4e <atan+0x246>
 800dd12:	ee10 0a10 	vmov	r0, s0
 800dd16:	2200      	movs	r2, #0
 800dd18:	4b47      	ldr	r3, [pc, #284]	; (800de38 <atan+0x330>)
 800dd1a:	4629      	mov	r1, r5
 800dd1c:	f7f2 fab4 	bl	8000288 <__aeabi_dsub>
 800dd20:	2200      	movs	r2, #0
 800dd22:	4606      	mov	r6, r0
 800dd24:	460f      	mov	r7, r1
 800dd26:	4b44      	ldr	r3, [pc, #272]	; (800de38 <atan+0x330>)
 800dd28:	4620      	mov	r0, r4
 800dd2a:	4629      	mov	r1, r5
 800dd2c:	f7f2 fc64 	bl	80005f8 <__aeabi_dmul>
 800dd30:	2200      	movs	r2, #0
 800dd32:	4b3e      	ldr	r3, [pc, #248]	; (800de2c <atan+0x324>)
 800dd34:	f7f2 faaa 	bl	800028c <__adddf3>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	460b      	mov	r3, r1
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	4639      	mov	r1, r7
 800dd40:	f7f2 fd84 	bl	800084c <__aeabi_ddiv>
 800dd44:	f04f 0a02 	mov.w	sl, #2
 800dd48:	4604      	mov	r4, r0
 800dd4a:	460d      	mov	r5, r1
 800dd4c:	e743      	b.n	800dbd6 <atan+0xce>
 800dd4e:	462b      	mov	r3, r5
 800dd50:	ee10 2a10 	vmov	r2, s0
 800dd54:	2000      	movs	r0, #0
 800dd56:	4939      	ldr	r1, [pc, #228]	; (800de3c <atan+0x334>)
 800dd58:	f7f2 fd78 	bl	800084c <__aeabi_ddiv>
 800dd5c:	f04f 0a03 	mov.w	sl, #3
 800dd60:	4604      	mov	r4, r0
 800dd62:	460d      	mov	r5, r1
 800dd64:	e737      	b.n	800dbd6 <atan+0xce>
 800dd66:	4b36      	ldr	r3, [pc, #216]	; (800de40 <atan+0x338>)
 800dd68:	4e36      	ldr	r6, [pc, #216]	; (800de44 <atan+0x33c>)
 800dd6a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800dd6e:	4456      	add	r6, sl
 800dd70:	449a      	add	sl, r3
 800dd72:	e9da 2300 	ldrd	r2, r3, [sl]
 800dd76:	f7f2 fa87 	bl	8000288 <__aeabi_dsub>
 800dd7a:	4622      	mov	r2, r4
 800dd7c:	462b      	mov	r3, r5
 800dd7e:	f7f2 fa83 	bl	8000288 <__aeabi_dsub>
 800dd82:	4602      	mov	r2, r0
 800dd84:	460b      	mov	r3, r1
 800dd86:	e9d6 0100 	ldrd	r0, r1, [r6]
 800dd8a:	f7f2 fa7d 	bl	8000288 <__aeabi_dsub>
 800dd8e:	f1bb 0f00 	cmp.w	fp, #0
 800dd92:	4604      	mov	r4, r0
 800dd94:	460d      	mov	r5, r1
 800dd96:	f6bf aed6 	bge.w	800db46 <atan+0x3e>
 800dd9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dd9e:	461d      	mov	r5, r3
 800dda0:	e6d1      	b.n	800db46 <atan+0x3e>
 800dda2:	a51d      	add	r5, pc, #116	; (adr r5, 800de18 <atan+0x310>)
 800dda4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dda8:	e6cd      	b.n	800db46 <atan+0x3e>
 800ddaa:	bf00      	nop
 800ddac:	f3af 8000 	nop.w
 800ddb0:	54442d18 	.word	0x54442d18
 800ddb4:	3ff921fb 	.word	0x3ff921fb
 800ddb8:	8800759c 	.word	0x8800759c
 800ddbc:	7e37e43c 	.word	0x7e37e43c
 800ddc0:	e322da11 	.word	0xe322da11
 800ddc4:	3f90ad3a 	.word	0x3f90ad3a
 800ddc8:	24760deb 	.word	0x24760deb
 800ddcc:	3fa97b4b 	.word	0x3fa97b4b
 800ddd0:	a0d03d51 	.word	0xa0d03d51
 800ddd4:	3fb10d66 	.word	0x3fb10d66
 800ddd8:	c54c206e 	.word	0xc54c206e
 800dddc:	3fb745cd 	.word	0x3fb745cd
 800dde0:	920083ff 	.word	0x920083ff
 800dde4:	3fc24924 	.word	0x3fc24924
 800dde8:	5555550d 	.word	0x5555550d
 800ddec:	3fd55555 	.word	0x3fd55555
 800ddf0:	2c6a6c2f 	.word	0x2c6a6c2f
 800ddf4:	bfa2b444 	.word	0xbfa2b444
 800ddf8:	52defd9a 	.word	0x52defd9a
 800ddfc:	3fadde2d 	.word	0x3fadde2d
 800de00:	af749a6d 	.word	0xaf749a6d
 800de04:	3fb3b0f2 	.word	0x3fb3b0f2
 800de08:	fe231671 	.word	0xfe231671
 800de0c:	3fbc71c6 	.word	0x3fbc71c6
 800de10:	9998ebc4 	.word	0x9998ebc4
 800de14:	3fc99999 	.word	0x3fc99999
 800de18:	54442d18 	.word	0x54442d18
 800de1c:	bff921fb 	.word	0xbff921fb
 800de20:	440fffff 	.word	0x440fffff
 800de24:	7ff00000 	.word	0x7ff00000
 800de28:	3fdbffff 	.word	0x3fdbffff
 800de2c:	3ff00000 	.word	0x3ff00000
 800de30:	3ff2ffff 	.word	0x3ff2ffff
 800de34:	40037fff 	.word	0x40037fff
 800de38:	3ff80000 	.word	0x3ff80000
 800de3c:	bff00000 	.word	0xbff00000
 800de40:	08012c60 	.word	0x08012c60
 800de44:	08012c40 	.word	0x08012c40

0800de48 <fabs>:
 800de48:	ec51 0b10 	vmov	r0, r1, d0
 800de4c:	ee10 2a10 	vmov	r2, s0
 800de50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800de54:	ec43 2b10 	vmov	d0, r2, r3
 800de58:	4770      	bx	lr
 800de5a:	0000      	movs	r0, r0
 800de5c:	0000      	movs	r0, r0
	...

0800de60 <floor>:
 800de60:	ec51 0b10 	vmov	r0, r1, d0
 800de64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de68:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800de6c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800de70:	2e13      	cmp	r6, #19
 800de72:	460c      	mov	r4, r1
 800de74:	ee10 5a10 	vmov	r5, s0
 800de78:	4680      	mov	r8, r0
 800de7a:	dc34      	bgt.n	800dee6 <floor+0x86>
 800de7c:	2e00      	cmp	r6, #0
 800de7e:	da16      	bge.n	800deae <floor+0x4e>
 800de80:	a335      	add	r3, pc, #212	; (adr r3, 800df58 <floor+0xf8>)
 800de82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de86:	f7f2 fa01 	bl	800028c <__adddf3>
 800de8a:	2200      	movs	r2, #0
 800de8c:	2300      	movs	r3, #0
 800de8e:	f7f2 fe43 	bl	8000b18 <__aeabi_dcmpgt>
 800de92:	b148      	cbz	r0, 800dea8 <floor+0x48>
 800de94:	2c00      	cmp	r4, #0
 800de96:	da59      	bge.n	800df4c <floor+0xec>
 800de98:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800de9c:	4a30      	ldr	r2, [pc, #192]	; (800df60 <floor+0x100>)
 800de9e:	432b      	orrs	r3, r5
 800dea0:	2500      	movs	r5, #0
 800dea2:	42ab      	cmp	r3, r5
 800dea4:	bf18      	it	ne
 800dea6:	4614      	movne	r4, r2
 800dea8:	4621      	mov	r1, r4
 800deaa:	4628      	mov	r0, r5
 800deac:	e025      	b.n	800defa <floor+0x9a>
 800deae:	4f2d      	ldr	r7, [pc, #180]	; (800df64 <floor+0x104>)
 800deb0:	4137      	asrs	r7, r6
 800deb2:	ea01 0307 	and.w	r3, r1, r7
 800deb6:	4303      	orrs	r3, r0
 800deb8:	d01f      	beq.n	800defa <floor+0x9a>
 800deba:	a327      	add	r3, pc, #156	; (adr r3, 800df58 <floor+0xf8>)
 800debc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec0:	f7f2 f9e4 	bl	800028c <__adddf3>
 800dec4:	2200      	movs	r2, #0
 800dec6:	2300      	movs	r3, #0
 800dec8:	f7f2 fe26 	bl	8000b18 <__aeabi_dcmpgt>
 800decc:	2800      	cmp	r0, #0
 800dece:	d0eb      	beq.n	800dea8 <floor+0x48>
 800ded0:	2c00      	cmp	r4, #0
 800ded2:	bfbe      	ittt	lt
 800ded4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ded8:	fa43 f606 	asrlt.w	r6, r3, r6
 800dedc:	19a4      	addlt	r4, r4, r6
 800dede:	ea24 0407 	bic.w	r4, r4, r7
 800dee2:	2500      	movs	r5, #0
 800dee4:	e7e0      	b.n	800dea8 <floor+0x48>
 800dee6:	2e33      	cmp	r6, #51	; 0x33
 800dee8:	dd0b      	ble.n	800df02 <floor+0xa2>
 800deea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800deee:	d104      	bne.n	800defa <floor+0x9a>
 800def0:	ee10 2a10 	vmov	r2, s0
 800def4:	460b      	mov	r3, r1
 800def6:	f7f2 f9c9 	bl	800028c <__adddf3>
 800defa:	ec41 0b10 	vmov	d0, r0, r1
 800defe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df02:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800df06:	f04f 33ff 	mov.w	r3, #4294967295
 800df0a:	fa23 f707 	lsr.w	r7, r3, r7
 800df0e:	4207      	tst	r7, r0
 800df10:	d0f3      	beq.n	800defa <floor+0x9a>
 800df12:	a311      	add	r3, pc, #68	; (adr r3, 800df58 <floor+0xf8>)
 800df14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df18:	f7f2 f9b8 	bl	800028c <__adddf3>
 800df1c:	2200      	movs	r2, #0
 800df1e:	2300      	movs	r3, #0
 800df20:	f7f2 fdfa 	bl	8000b18 <__aeabi_dcmpgt>
 800df24:	2800      	cmp	r0, #0
 800df26:	d0bf      	beq.n	800dea8 <floor+0x48>
 800df28:	2c00      	cmp	r4, #0
 800df2a:	da02      	bge.n	800df32 <floor+0xd2>
 800df2c:	2e14      	cmp	r6, #20
 800df2e:	d103      	bne.n	800df38 <floor+0xd8>
 800df30:	3401      	adds	r4, #1
 800df32:	ea25 0507 	bic.w	r5, r5, r7
 800df36:	e7b7      	b.n	800dea8 <floor+0x48>
 800df38:	2301      	movs	r3, #1
 800df3a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800df3e:	fa03 f606 	lsl.w	r6, r3, r6
 800df42:	4435      	add	r5, r6
 800df44:	4545      	cmp	r5, r8
 800df46:	bf38      	it	cc
 800df48:	18e4      	addcc	r4, r4, r3
 800df4a:	e7f2      	b.n	800df32 <floor+0xd2>
 800df4c:	2500      	movs	r5, #0
 800df4e:	462c      	mov	r4, r5
 800df50:	e7aa      	b.n	800dea8 <floor+0x48>
 800df52:	bf00      	nop
 800df54:	f3af 8000 	nop.w
 800df58:	8800759c 	.word	0x8800759c
 800df5c:	7e37e43c 	.word	0x7e37e43c
 800df60:	bff00000 	.word	0xbff00000
 800df64:	000fffff 	.word	0x000fffff

0800df68 <matherr>:
 800df68:	2000      	movs	r0, #0
 800df6a:	4770      	bx	lr
 800df6c:	0000      	movs	r0, r0
	...

0800df70 <scalbn>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	ec55 4b10 	vmov	r4, r5, d0
 800df76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800df7a:	4606      	mov	r6, r0
 800df7c:	462b      	mov	r3, r5
 800df7e:	b9aa      	cbnz	r2, 800dfac <scalbn+0x3c>
 800df80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df84:	4323      	orrs	r3, r4
 800df86:	d03b      	beq.n	800e000 <scalbn+0x90>
 800df88:	4b31      	ldr	r3, [pc, #196]	; (800e050 <scalbn+0xe0>)
 800df8a:	4629      	mov	r1, r5
 800df8c:	2200      	movs	r2, #0
 800df8e:	ee10 0a10 	vmov	r0, s0
 800df92:	f7f2 fb31 	bl	80005f8 <__aeabi_dmul>
 800df96:	4b2f      	ldr	r3, [pc, #188]	; (800e054 <scalbn+0xe4>)
 800df98:	429e      	cmp	r6, r3
 800df9a:	4604      	mov	r4, r0
 800df9c:	460d      	mov	r5, r1
 800df9e:	da12      	bge.n	800dfc6 <scalbn+0x56>
 800dfa0:	a327      	add	r3, pc, #156	; (adr r3, 800e040 <scalbn+0xd0>)
 800dfa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa6:	f7f2 fb27 	bl	80005f8 <__aeabi_dmul>
 800dfaa:	e009      	b.n	800dfc0 <scalbn+0x50>
 800dfac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800dfb0:	428a      	cmp	r2, r1
 800dfb2:	d10c      	bne.n	800dfce <scalbn+0x5e>
 800dfb4:	ee10 2a10 	vmov	r2, s0
 800dfb8:	4620      	mov	r0, r4
 800dfba:	4629      	mov	r1, r5
 800dfbc:	f7f2 f966 	bl	800028c <__adddf3>
 800dfc0:	4604      	mov	r4, r0
 800dfc2:	460d      	mov	r5, r1
 800dfc4:	e01c      	b.n	800e000 <scalbn+0x90>
 800dfc6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dfca:	460b      	mov	r3, r1
 800dfcc:	3a36      	subs	r2, #54	; 0x36
 800dfce:	4432      	add	r2, r6
 800dfd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dfd4:	428a      	cmp	r2, r1
 800dfd6:	dd0b      	ble.n	800dff0 <scalbn+0x80>
 800dfd8:	ec45 4b11 	vmov	d1, r4, r5
 800dfdc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800e048 <scalbn+0xd8>
 800dfe0:	f000 f8e6 	bl	800e1b0 <copysign>
 800dfe4:	a318      	add	r3, pc, #96	; (adr r3, 800e048 <scalbn+0xd8>)
 800dfe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfea:	ec51 0b10 	vmov	r0, r1, d0
 800dfee:	e7da      	b.n	800dfa6 <scalbn+0x36>
 800dff0:	2a00      	cmp	r2, #0
 800dff2:	dd08      	ble.n	800e006 <scalbn+0x96>
 800dff4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dff8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dffc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e000:	ec45 4b10 	vmov	d0, r4, r5
 800e004:	bd70      	pop	{r4, r5, r6, pc}
 800e006:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e00a:	da0d      	bge.n	800e028 <scalbn+0xb8>
 800e00c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e010:	429e      	cmp	r6, r3
 800e012:	ec45 4b11 	vmov	d1, r4, r5
 800e016:	dce1      	bgt.n	800dfdc <scalbn+0x6c>
 800e018:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800e040 <scalbn+0xd0>
 800e01c:	f000 f8c8 	bl	800e1b0 <copysign>
 800e020:	a307      	add	r3, pc, #28	; (adr r3, 800e040 <scalbn+0xd0>)
 800e022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e026:	e7e0      	b.n	800dfea <scalbn+0x7a>
 800e028:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e02c:	3236      	adds	r2, #54	; 0x36
 800e02e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e032:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e036:	4620      	mov	r0, r4
 800e038:	4629      	mov	r1, r5
 800e03a:	2200      	movs	r2, #0
 800e03c:	4b06      	ldr	r3, [pc, #24]	; (800e058 <scalbn+0xe8>)
 800e03e:	e7b2      	b.n	800dfa6 <scalbn+0x36>
 800e040:	c2f8f359 	.word	0xc2f8f359
 800e044:	01a56e1f 	.word	0x01a56e1f
 800e048:	8800759c 	.word	0x8800759c
 800e04c:	7e37e43c 	.word	0x7e37e43c
 800e050:	43500000 	.word	0x43500000
 800e054:	ffff3cb0 	.word	0xffff3cb0
 800e058:	3c900000 	.word	0x3c900000

0800e05c <fabsf>:
 800e05c:	ee10 3a10 	vmov	r3, s0
 800e060:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e064:	ee00 3a10 	vmov	s0, r3
 800e068:	4770      	bx	lr
	...

0800e06c <floorf>:
 800e06c:	ee10 3a10 	vmov	r3, s0
 800e070:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e074:	0dca      	lsrs	r2, r1, #23
 800e076:	3a7f      	subs	r2, #127	; 0x7f
 800e078:	2a16      	cmp	r2, #22
 800e07a:	dc2a      	bgt.n	800e0d2 <floorf+0x66>
 800e07c:	2a00      	cmp	r2, #0
 800e07e:	da11      	bge.n	800e0a4 <floorf+0x38>
 800e080:	eddf 7a18 	vldr	s15, [pc, #96]	; 800e0e4 <floorf+0x78>
 800e084:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e088:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e08c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e090:	dd05      	ble.n	800e09e <floorf+0x32>
 800e092:	2b00      	cmp	r3, #0
 800e094:	da23      	bge.n	800e0de <floorf+0x72>
 800e096:	4a14      	ldr	r2, [pc, #80]	; (800e0e8 <floorf+0x7c>)
 800e098:	2900      	cmp	r1, #0
 800e09a:	bf18      	it	ne
 800e09c:	4613      	movne	r3, r2
 800e09e:	ee00 3a10 	vmov	s0, r3
 800e0a2:	4770      	bx	lr
 800e0a4:	4911      	ldr	r1, [pc, #68]	; (800e0ec <floorf+0x80>)
 800e0a6:	4111      	asrs	r1, r2
 800e0a8:	420b      	tst	r3, r1
 800e0aa:	d0fa      	beq.n	800e0a2 <floorf+0x36>
 800e0ac:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e0e4 <floorf+0x78>
 800e0b0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e0b4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0bc:	ddef      	ble.n	800e09e <floorf+0x32>
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	bfbe      	ittt	lt
 800e0c2:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800e0c6:	fa40 f202 	asrlt.w	r2, r0, r2
 800e0ca:	189b      	addlt	r3, r3, r2
 800e0cc:	ea23 0301 	bic.w	r3, r3, r1
 800e0d0:	e7e5      	b.n	800e09e <floorf+0x32>
 800e0d2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e0d6:	d3e4      	bcc.n	800e0a2 <floorf+0x36>
 800e0d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e0dc:	4770      	bx	lr
 800e0de:	2300      	movs	r3, #0
 800e0e0:	e7dd      	b.n	800e09e <floorf+0x32>
 800e0e2:	bf00      	nop
 800e0e4:	7149f2ca 	.word	0x7149f2ca
 800e0e8:	bf800000 	.word	0xbf800000
 800e0ec:	007fffff 	.word	0x007fffff

0800e0f0 <scalbnf>:
 800e0f0:	b508      	push	{r3, lr}
 800e0f2:	ee10 2a10 	vmov	r2, s0
 800e0f6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800e0fa:	ed2d 8b02 	vpush	{d8}
 800e0fe:	eef0 0a40 	vmov.f32	s1, s0
 800e102:	d004      	beq.n	800e10e <scalbnf+0x1e>
 800e104:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e108:	d306      	bcc.n	800e118 <scalbnf+0x28>
 800e10a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800e10e:	ecbd 8b02 	vpop	{d8}
 800e112:	eeb0 0a60 	vmov.f32	s0, s1
 800e116:	bd08      	pop	{r3, pc}
 800e118:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e11c:	d21c      	bcs.n	800e158 <scalbnf+0x68>
 800e11e:	4b1f      	ldr	r3, [pc, #124]	; (800e19c <scalbnf+0xac>)
 800e120:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e1a0 <scalbnf+0xb0>
 800e124:	4298      	cmp	r0, r3
 800e126:	ee60 0a27 	vmul.f32	s1, s0, s15
 800e12a:	db10      	blt.n	800e14e <scalbnf+0x5e>
 800e12c:	ee10 2a90 	vmov	r2, s1
 800e130:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800e134:	3b19      	subs	r3, #25
 800e136:	4403      	add	r3, r0
 800e138:	2bfe      	cmp	r3, #254	; 0xfe
 800e13a:	dd0f      	ble.n	800e15c <scalbnf+0x6c>
 800e13c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800e1a4 <scalbnf+0xb4>
 800e140:	eeb0 0a48 	vmov.f32	s0, s16
 800e144:	f000 f843 	bl	800e1ce <copysignf>
 800e148:	ee60 0a08 	vmul.f32	s1, s0, s16
 800e14c:	e7df      	b.n	800e10e <scalbnf+0x1e>
 800e14e:	eddf 7a16 	vldr	s15, [pc, #88]	; 800e1a8 <scalbnf+0xb8>
 800e152:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e156:	e7da      	b.n	800e10e <scalbnf+0x1e>
 800e158:	0ddb      	lsrs	r3, r3, #23
 800e15a:	e7ec      	b.n	800e136 <scalbnf+0x46>
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	dd06      	ble.n	800e16e <scalbnf+0x7e>
 800e160:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e164:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e168:	ee00 3a90 	vmov	s1, r3
 800e16c:	e7cf      	b.n	800e10e <scalbnf+0x1e>
 800e16e:	f113 0f16 	cmn.w	r3, #22
 800e172:	da06      	bge.n	800e182 <scalbnf+0x92>
 800e174:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e178:	4298      	cmp	r0, r3
 800e17a:	dcdf      	bgt.n	800e13c <scalbnf+0x4c>
 800e17c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800e1a8 <scalbnf+0xb8>
 800e180:	e7de      	b.n	800e140 <scalbnf+0x50>
 800e182:	3319      	adds	r3, #25
 800e184:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e188:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e18c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e1ac <scalbnf+0xbc>
 800e190:	ee07 3a10 	vmov	s14, r3
 800e194:	ee67 0a27 	vmul.f32	s1, s14, s15
 800e198:	e7b9      	b.n	800e10e <scalbnf+0x1e>
 800e19a:	bf00      	nop
 800e19c:	ffff3cb0 	.word	0xffff3cb0
 800e1a0:	4c000000 	.word	0x4c000000
 800e1a4:	7149f2ca 	.word	0x7149f2ca
 800e1a8:	0da24260 	.word	0x0da24260
 800e1ac:	33000000 	.word	0x33000000

0800e1b0 <copysign>:
 800e1b0:	ec51 0b10 	vmov	r0, r1, d0
 800e1b4:	ee11 0a90 	vmov	r0, s3
 800e1b8:	ee10 2a10 	vmov	r2, s0
 800e1bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e1c0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e1c4:	ea41 0300 	orr.w	r3, r1, r0
 800e1c8:	ec43 2b10 	vmov	d0, r2, r3
 800e1cc:	4770      	bx	lr

0800e1ce <copysignf>:
 800e1ce:	ee10 3a10 	vmov	r3, s0
 800e1d2:	ee10 2a90 	vmov	r2, s1
 800e1d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	ee00 3a10 	vmov	s0, r3
 800e1e4:	4770      	bx	lr
	...

0800e1e8 <__errno>:
 800e1e8:	4b01      	ldr	r3, [pc, #4]	; (800e1f0 <__errno+0x8>)
 800e1ea:	6818      	ldr	r0, [r3, #0]
 800e1ec:	4770      	bx	lr
 800e1ee:	bf00      	nop
 800e1f0:	20000048 	.word	0x20000048

0800e1f4 <__libc_init_array>:
 800e1f4:	b570      	push	{r4, r5, r6, lr}
 800e1f6:	4e0d      	ldr	r6, [pc, #52]	; (800e22c <__libc_init_array+0x38>)
 800e1f8:	4c0d      	ldr	r4, [pc, #52]	; (800e230 <__libc_init_array+0x3c>)
 800e1fa:	1ba4      	subs	r4, r4, r6
 800e1fc:	10a4      	asrs	r4, r4, #2
 800e1fe:	2500      	movs	r5, #0
 800e200:	42a5      	cmp	r5, r4
 800e202:	d109      	bne.n	800e218 <__libc_init_array+0x24>
 800e204:	4e0b      	ldr	r6, [pc, #44]	; (800e234 <__libc_init_array+0x40>)
 800e206:	4c0c      	ldr	r4, [pc, #48]	; (800e238 <__libc_init_array+0x44>)
 800e208:	f004 f9fe 	bl	8012608 <_init>
 800e20c:	1ba4      	subs	r4, r4, r6
 800e20e:	10a4      	asrs	r4, r4, #2
 800e210:	2500      	movs	r5, #0
 800e212:	42a5      	cmp	r5, r4
 800e214:	d105      	bne.n	800e222 <__libc_init_array+0x2e>
 800e216:	bd70      	pop	{r4, r5, r6, pc}
 800e218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e21c:	4798      	blx	r3
 800e21e:	3501      	adds	r5, #1
 800e220:	e7ee      	b.n	800e200 <__libc_init_array+0xc>
 800e222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e226:	4798      	blx	r3
 800e228:	3501      	adds	r5, #1
 800e22a:	e7f2      	b.n	800e212 <__libc_init_array+0x1e>
 800e22c:	08012fa8 	.word	0x08012fa8
 800e230:	08012fa8 	.word	0x08012fa8
 800e234:	08012fa8 	.word	0x08012fa8
 800e238:	08012fac 	.word	0x08012fac

0800e23c <memcpy>:
 800e23c:	b510      	push	{r4, lr}
 800e23e:	1e43      	subs	r3, r0, #1
 800e240:	440a      	add	r2, r1
 800e242:	4291      	cmp	r1, r2
 800e244:	d100      	bne.n	800e248 <memcpy+0xc>
 800e246:	bd10      	pop	{r4, pc}
 800e248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e24c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e250:	e7f7      	b.n	800e242 <memcpy+0x6>

0800e252 <memset>:
 800e252:	4402      	add	r2, r0
 800e254:	4603      	mov	r3, r0
 800e256:	4293      	cmp	r3, r2
 800e258:	d100      	bne.n	800e25c <memset+0xa>
 800e25a:	4770      	bx	lr
 800e25c:	f803 1b01 	strb.w	r1, [r3], #1
 800e260:	e7f9      	b.n	800e256 <memset+0x4>

0800e262 <__cvt>:
 800e262:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e266:	ec55 4b10 	vmov	r4, r5, d0
 800e26a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e26c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e270:	2d00      	cmp	r5, #0
 800e272:	460e      	mov	r6, r1
 800e274:	4691      	mov	r9, r2
 800e276:	4619      	mov	r1, r3
 800e278:	bfb8      	it	lt
 800e27a:	4622      	movlt	r2, r4
 800e27c:	462b      	mov	r3, r5
 800e27e:	f027 0720 	bic.w	r7, r7, #32
 800e282:	bfbb      	ittet	lt
 800e284:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e288:	461d      	movlt	r5, r3
 800e28a:	2300      	movge	r3, #0
 800e28c:	232d      	movlt	r3, #45	; 0x2d
 800e28e:	bfb8      	it	lt
 800e290:	4614      	movlt	r4, r2
 800e292:	2f46      	cmp	r7, #70	; 0x46
 800e294:	700b      	strb	r3, [r1, #0]
 800e296:	d004      	beq.n	800e2a2 <__cvt+0x40>
 800e298:	2f45      	cmp	r7, #69	; 0x45
 800e29a:	d100      	bne.n	800e29e <__cvt+0x3c>
 800e29c:	3601      	adds	r6, #1
 800e29e:	2102      	movs	r1, #2
 800e2a0:	e000      	b.n	800e2a4 <__cvt+0x42>
 800e2a2:	2103      	movs	r1, #3
 800e2a4:	ab03      	add	r3, sp, #12
 800e2a6:	9301      	str	r3, [sp, #4]
 800e2a8:	ab02      	add	r3, sp, #8
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	4632      	mov	r2, r6
 800e2ae:	4653      	mov	r3, sl
 800e2b0:	ec45 4b10 	vmov	d0, r4, r5
 800e2b4:	f001 fd90 	bl	800fdd8 <_dtoa_r>
 800e2b8:	2f47      	cmp	r7, #71	; 0x47
 800e2ba:	4680      	mov	r8, r0
 800e2bc:	d102      	bne.n	800e2c4 <__cvt+0x62>
 800e2be:	f019 0f01 	tst.w	r9, #1
 800e2c2:	d026      	beq.n	800e312 <__cvt+0xb0>
 800e2c4:	2f46      	cmp	r7, #70	; 0x46
 800e2c6:	eb08 0906 	add.w	r9, r8, r6
 800e2ca:	d111      	bne.n	800e2f0 <__cvt+0x8e>
 800e2cc:	f898 3000 	ldrb.w	r3, [r8]
 800e2d0:	2b30      	cmp	r3, #48	; 0x30
 800e2d2:	d10a      	bne.n	800e2ea <__cvt+0x88>
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	4620      	mov	r0, r4
 800e2da:	4629      	mov	r1, r5
 800e2dc:	f7f2 fbf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2e0:	b918      	cbnz	r0, 800e2ea <__cvt+0x88>
 800e2e2:	f1c6 0601 	rsb	r6, r6, #1
 800e2e6:	f8ca 6000 	str.w	r6, [sl]
 800e2ea:	f8da 3000 	ldr.w	r3, [sl]
 800e2ee:	4499      	add	r9, r3
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	f7f2 fbe6 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2fc:	b938      	cbnz	r0, 800e30e <__cvt+0xac>
 800e2fe:	2230      	movs	r2, #48	; 0x30
 800e300:	9b03      	ldr	r3, [sp, #12]
 800e302:	454b      	cmp	r3, r9
 800e304:	d205      	bcs.n	800e312 <__cvt+0xb0>
 800e306:	1c59      	adds	r1, r3, #1
 800e308:	9103      	str	r1, [sp, #12]
 800e30a:	701a      	strb	r2, [r3, #0]
 800e30c:	e7f8      	b.n	800e300 <__cvt+0x9e>
 800e30e:	f8cd 900c 	str.w	r9, [sp, #12]
 800e312:	9b03      	ldr	r3, [sp, #12]
 800e314:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e316:	eba3 0308 	sub.w	r3, r3, r8
 800e31a:	4640      	mov	r0, r8
 800e31c:	6013      	str	r3, [r2, #0]
 800e31e:	b004      	add	sp, #16
 800e320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e324 <__exponent>:
 800e324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e326:	2900      	cmp	r1, #0
 800e328:	4604      	mov	r4, r0
 800e32a:	bfba      	itte	lt
 800e32c:	4249      	neglt	r1, r1
 800e32e:	232d      	movlt	r3, #45	; 0x2d
 800e330:	232b      	movge	r3, #43	; 0x2b
 800e332:	2909      	cmp	r1, #9
 800e334:	f804 2b02 	strb.w	r2, [r4], #2
 800e338:	7043      	strb	r3, [r0, #1]
 800e33a:	dd20      	ble.n	800e37e <__exponent+0x5a>
 800e33c:	f10d 0307 	add.w	r3, sp, #7
 800e340:	461f      	mov	r7, r3
 800e342:	260a      	movs	r6, #10
 800e344:	fb91 f5f6 	sdiv	r5, r1, r6
 800e348:	fb06 1115 	mls	r1, r6, r5, r1
 800e34c:	3130      	adds	r1, #48	; 0x30
 800e34e:	2d09      	cmp	r5, #9
 800e350:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e354:	f103 32ff 	add.w	r2, r3, #4294967295
 800e358:	4629      	mov	r1, r5
 800e35a:	dc09      	bgt.n	800e370 <__exponent+0x4c>
 800e35c:	3130      	adds	r1, #48	; 0x30
 800e35e:	3b02      	subs	r3, #2
 800e360:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e364:	42bb      	cmp	r3, r7
 800e366:	4622      	mov	r2, r4
 800e368:	d304      	bcc.n	800e374 <__exponent+0x50>
 800e36a:	1a10      	subs	r0, r2, r0
 800e36c:	b003      	add	sp, #12
 800e36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e370:	4613      	mov	r3, r2
 800e372:	e7e7      	b.n	800e344 <__exponent+0x20>
 800e374:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e378:	f804 2b01 	strb.w	r2, [r4], #1
 800e37c:	e7f2      	b.n	800e364 <__exponent+0x40>
 800e37e:	2330      	movs	r3, #48	; 0x30
 800e380:	4419      	add	r1, r3
 800e382:	7083      	strb	r3, [r0, #2]
 800e384:	1d02      	adds	r2, r0, #4
 800e386:	70c1      	strb	r1, [r0, #3]
 800e388:	e7ef      	b.n	800e36a <__exponent+0x46>
	...

0800e38c <_printf_float>:
 800e38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e390:	b08d      	sub	sp, #52	; 0x34
 800e392:	460c      	mov	r4, r1
 800e394:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e398:	4616      	mov	r6, r2
 800e39a:	461f      	mov	r7, r3
 800e39c:	4605      	mov	r5, r0
 800e39e:	f002 fec9 	bl	8011134 <_localeconv_r>
 800e3a2:	6803      	ldr	r3, [r0, #0]
 800e3a4:	9304      	str	r3, [sp, #16]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f7f1 ff12 	bl	80001d0 <strlen>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	930a      	str	r3, [sp, #40]	; 0x28
 800e3b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e3b4:	9005      	str	r0, [sp, #20]
 800e3b6:	3307      	adds	r3, #7
 800e3b8:	f023 0307 	bic.w	r3, r3, #7
 800e3bc:	f103 0208 	add.w	r2, r3, #8
 800e3c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e3c4:	f8d4 b000 	ldr.w	fp, [r4]
 800e3c8:	f8c8 2000 	str.w	r2, [r8]
 800e3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e3d4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e3d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e3dc:	9307      	str	r3, [sp, #28]
 800e3de:	f8cd 8018 	str.w	r8, [sp, #24]
 800e3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3e6:	4ba7      	ldr	r3, [pc, #668]	; (800e684 <_printf_float+0x2f8>)
 800e3e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3ec:	f7f2 fb9e 	bl	8000b2c <__aeabi_dcmpun>
 800e3f0:	bb70      	cbnz	r0, 800e450 <_printf_float+0xc4>
 800e3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3f6:	4ba3      	ldr	r3, [pc, #652]	; (800e684 <_printf_float+0x2f8>)
 800e3f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e3fc:	f7f2 fb78 	bl	8000af0 <__aeabi_dcmple>
 800e400:	bb30      	cbnz	r0, 800e450 <_printf_float+0xc4>
 800e402:	2200      	movs	r2, #0
 800e404:	2300      	movs	r3, #0
 800e406:	4640      	mov	r0, r8
 800e408:	4649      	mov	r1, r9
 800e40a:	f7f2 fb67 	bl	8000adc <__aeabi_dcmplt>
 800e40e:	b110      	cbz	r0, 800e416 <_printf_float+0x8a>
 800e410:	232d      	movs	r3, #45	; 0x2d
 800e412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e416:	4a9c      	ldr	r2, [pc, #624]	; (800e688 <_printf_float+0x2fc>)
 800e418:	4b9c      	ldr	r3, [pc, #624]	; (800e68c <_printf_float+0x300>)
 800e41a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e41e:	bf8c      	ite	hi
 800e420:	4690      	movhi	r8, r2
 800e422:	4698      	movls	r8, r3
 800e424:	2303      	movs	r3, #3
 800e426:	f02b 0204 	bic.w	r2, fp, #4
 800e42a:	6123      	str	r3, [r4, #16]
 800e42c:	6022      	str	r2, [r4, #0]
 800e42e:	f04f 0900 	mov.w	r9, #0
 800e432:	9700      	str	r7, [sp, #0]
 800e434:	4633      	mov	r3, r6
 800e436:	aa0b      	add	r2, sp, #44	; 0x2c
 800e438:	4621      	mov	r1, r4
 800e43a:	4628      	mov	r0, r5
 800e43c:	f000 f9e6 	bl	800e80c <_printf_common>
 800e440:	3001      	adds	r0, #1
 800e442:	f040 808d 	bne.w	800e560 <_printf_float+0x1d4>
 800e446:	f04f 30ff 	mov.w	r0, #4294967295
 800e44a:	b00d      	add	sp, #52	; 0x34
 800e44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e450:	4642      	mov	r2, r8
 800e452:	464b      	mov	r3, r9
 800e454:	4640      	mov	r0, r8
 800e456:	4649      	mov	r1, r9
 800e458:	f7f2 fb68 	bl	8000b2c <__aeabi_dcmpun>
 800e45c:	b110      	cbz	r0, 800e464 <_printf_float+0xd8>
 800e45e:	4a8c      	ldr	r2, [pc, #560]	; (800e690 <_printf_float+0x304>)
 800e460:	4b8c      	ldr	r3, [pc, #560]	; (800e694 <_printf_float+0x308>)
 800e462:	e7da      	b.n	800e41a <_printf_float+0x8e>
 800e464:	6861      	ldr	r1, [r4, #4]
 800e466:	1c4b      	adds	r3, r1, #1
 800e468:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e46c:	a80a      	add	r0, sp, #40	; 0x28
 800e46e:	d13e      	bne.n	800e4ee <_printf_float+0x162>
 800e470:	2306      	movs	r3, #6
 800e472:	6063      	str	r3, [r4, #4]
 800e474:	2300      	movs	r3, #0
 800e476:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e47a:	ab09      	add	r3, sp, #36	; 0x24
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	ec49 8b10 	vmov	d0, r8, r9
 800e482:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e486:	6022      	str	r2, [r4, #0]
 800e488:	f8cd a004 	str.w	sl, [sp, #4]
 800e48c:	6861      	ldr	r1, [r4, #4]
 800e48e:	4628      	mov	r0, r5
 800e490:	f7ff fee7 	bl	800e262 <__cvt>
 800e494:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e498:	2b47      	cmp	r3, #71	; 0x47
 800e49a:	4680      	mov	r8, r0
 800e49c:	d109      	bne.n	800e4b2 <_printf_float+0x126>
 800e49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4a0:	1cd8      	adds	r0, r3, #3
 800e4a2:	db02      	blt.n	800e4aa <_printf_float+0x11e>
 800e4a4:	6862      	ldr	r2, [r4, #4]
 800e4a6:	4293      	cmp	r3, r2
 800e4a8:	dd47      	ble.n	800e53a <_printf_float+0x1ae>
 800e4aa:	f1aa 0a02 	sub.w	sl, sl, #2
 800e4ae:	fa5f fa8a 	uxtb.w	sl, sl
 800e4b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e4b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4b8:	d824      	bhi.n	800e504 <_printf_float+0x178>
 800e4ba:	3901      	subs	r1, #1
 800e4bc:	4652      	mov	r2, sl
 800e4be:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e4c2:	9109      	str	r1, [sp, #36]	; 0x24
 800e4c4:	f7ff ff2e 	bl	800e324 <__exponent>
 800e4c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e4ca:	1813      	adds	r3, r2, r0
 800e4cc:	2a01      	cmp	r2, #1
 800e4ce:	4681      	mov	r9, r0
 800e4d0:	6123      	str	r3, [r4, #16]
 800e4d2:	dc02      	bgt.n	800e4da <_printf_float+0x14e>
 800e4d4:	6822      	ldr	r2, [r4, #0]
 800e4d6:	07d1      	lsls	r1, r2, #31
 800e4d8:	d501      	bpl.n	800e4de <_printf_float+0x152>
 800e4da:	3301      	adds	r3, #1
 800e4dc:	6123      	str	r3, [r4, #16]
 800e4de:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d0a5      	beq.n	800e432 <_printf_float+0xa6>
 800e4e6:	232d      	movs	r3, #45	; 0x2d
 800e4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e4ec:	e7a1      	b.n	800e432 <_printf_float+0xa6>
 800e4ee:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e4f2:	f000 8177 	beq.w	800e7e4 <_printf_float+0x458>
 800e4f6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e4fa:	d1bb      	bne.n	800e474 <_printf_float+0xe8>
 800e4fc:	2900      	cmp	r1, #0
 800e4fe:	d1b9      	bne.n	800e474 <_printf_float+0xe8>
 800e500:	2301      	movs	r3, #1
 800e502:	e7b6      	b.n	800e472 <_printf_float+0xe6>
 800e504:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e508:	d119      	bne.n	800e53e <_printf_float+0x1b2>
 800e50a:	2900      	cmp	r1, #0
 800e50c:	6863      	ldr	r3, [r4, #4]
 800e50e:	dd0c      	ble.n	800e52a <_printf_float+0x19e>
 800e510:	6121      	str	r1, [r4, #16]
 800e512:	b913      	cbnz	r3, 800e51a <_printf_float+0x18e>
 800e514:	6822      	ldr	r2, [r4, #0]
 800e516:	07d2      	lsls	r2, r2, #31
 800e518:	d502      	bpl.n	800e520 <_printf_float+0x194>
 800e51a:	3301      	adds	r3, #1
 800e51c:	440b      	add	r3, r1
 800e51e:	6123      	str	r3, [r4, #16]
 800e520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e522:	65a3      	str	r3, [r4, #88]	; 0x58
 800e524:	f04f 0900 	mov.w	r9, #0
 800e528:	e7d9      	b.n	800e4de <_printf_float+0x152>
 800e52a:	b913      	cbnz	r3, 800e532 <_printf_float+0x1a6>
 800e52c:	6822      	ldr	r2, [r4, #0]
 800e52e:	07d0      	lsls	r0, r2, #31
 800e530:	d501      	bpl.n	800e536 <_printf_float+0x1aa>
 800e532:	3302      	adds	r3, #2
 800e534:	e7f3      	b.n	800e51e <_printf_float+0x192>
 800e536:	2301      	movs	r3, #1
 800e538:	e7f1      	b.n	800e51e <_printf_float+0x192>
 800e53a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e53e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e542:	4293      	cmp	r3, r2
 800e544:	db05      	blt.n	800e552 <_printf_float+0x1c6>
 800e546:	6822      	ldr	r2, [r4, #0]
 800e548:	6123      	str	r3, [r4, #16]
 800e54a:	07d1      	lsls	r1, r2, #31
 800e54c:	d5e8      	bpl.n	800e520 <_printf_float+0x194>
 800e54e:	3301      	adds	r3, #1
 800e550:	e7e5      	b.n	800e51e <_printf_float+0x192>
 800e552:	2b00      	cmp	r3, #0
 800e554:	bfd4      	ite	le
 800e556:	f1c3 0302 	rsble	r3, r3, #2
 800e55a:	2301      	movgt	r3, #1
 800e55c:	4413      	add	r3, r2
 800e55e:	e7de      	b.n	800e51e <_printf_float+0x192>
 800e560:	6823      	ldr	r3, [r4, #0]
 800e562:	055a      	lsls	r2, r3, #21
 800e564:	d407      	bmi.n	800e576 <_printf_float+0x1ea>
 800e566:	6923      	ldr	r3, [r4, #16]
 800e568:	4642      	mov	r2, r8
 800e56a:	4631      	mov	r1, r6
 800e56c:	4628      	mov	r0, r5
 800e56e:	47b8      	blx	r7
 800e570:	3001      	adds	r0, #1
 800e572:	d12b      	bne.n	800e5cc <_printf_float+0x240>
 800e574:	e767      	b.n	800e446 <_printf_float+0xba>
 800e576:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e57a:	f240 80dc 	bls.w	800e736 <_printf_float+0x3aa>
 800e57e:	2200      	movs	r2, #0
 800e580:	2300      	movs	r3, #0
 800e582:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e586:	f7f2 fa9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e58a:	2800      	cmp	r0, #0
 800e58c:	d033      	beq.n	800e5f6 <_printf_float+0x26a>
 800e58e:	2301      	movs	r3, #1
 800e590:	4a41      	ldr	r2, [pc, #260]	; (800e698 <_printf_float+0x30c>)
 800e592:	4631      	mov	r1, r6
 800e594:	4628      	mov	r0, r5
 800e596:	47b8      	blx	r7
 800e598:	3001      	adds	r0, #1
 800e59a:	f43f af54 	beq.w	800e446 <_printf_float+0xba>
 800e59e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e5a2:	429a      	cmp	r2, r3
 800e5a4:	db02      	blt.n	800e5ac <_printf_float+0x220>
 800e5a6:	6823      	ldr	r3, [r4, #0]
 800e5a8:	07d8      	lsls	r0, r3, #31
 800e5aa:	d50f      	bpl.n	800e5cc <_printf_float+0x240>
 800e5ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e5b0:	4631      	mov	r1, r6
 800e5b2:	4628      	mov	r0, r5
 800e5b4:	47b8      	blx	r7
 800e5b6:	3001      	adds	r0, #1
 800e5b8:	f43f af45 	beq.w	800e446 <_printf_float+0xba>
 800e5bc:	f04f 0800 	mov.w	r8, #0
 800e5c0:	f104 091a 	add.w	r9, r4, #26
 800e5c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e5c6:	3b01      	subs	r3, #1
 800e5c8:	4543      	cmp	r3, r8
 800e5ca:	dc09      	bgt.n	800e5e0 <_printf_float+0x254>
 800e5cc:	6823      	ldr	r3, [r4, #0]
 800e5ce:	079b      	lsls	r3, r3, #30
 800e5d0:	f100 8103 	bmi.w	800e7da <_printf_float+0x44e>
 800e5d4:	68e0      	ldr	r0, [r4, #12]
 800e5d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5d8:	4298      	cmp	r0, r3
 800e5da:	bfb8      	it	lt
 800e5dc:	4618      	movlt	r0, r3
 800e5de:	e734      	b.n	800e44a <_printf_float+0xbe>
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	464a      	mov	r2, r9
 800e5e4:	4631      	mov	r1, r6
 800e5e6:	4628      	mov	r0, r5
 800e5e8:	47b8      	blx	r7
 800e5ea:	3001      	adds	r0, #1
 800e5ec:	f43f af2b 	beq.w	800e446 <_printf_float+0xba>
 800e5f0:	f108 0801 	add.w	r8, r8, #1
 800e5f4:	e7e6      	b.n	800e5c4 <_printf_float+0x238>
 800e5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	dc2b      	bgt.n	800e654 <_printf_float+0x2c8>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	4a26      	ldr	r2, [pc, #152]	; (800e698 <_printf_float+0x30c>)
 800e600:	4631      	mov	r1, r6
 800e602:	4628      	mov	r0, r5
 800e604:	47b8      	blx	r7
 800e606:	3001      	adds	r0, #1
 800e608:	f43f af1d 	beq.w	800e446 <_printf_float+0xba>
 800e60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e60e:	b923      	cbnz	r3, 800e61a <_printf_float+0x28e>
 800e610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e612:	b913      	cbnz	r3, 800e61a <_printf_float+0x28e>
 800e614:	6823      	ldr	r3, [r4, #0]
 800e616:	07d9      	lsls	r1, r3, #31
 800e618:	d5d8      	bpl.n	800e5cc <_printf_float+0x240>
 800e61a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e61e:	4631      	mov	r1, r6
 800e620:	4628      	mov	r0, r5
 800e622:	47b8      	blx	r7
 800e624:	3001      	adds	r0, #1
 800e626:	f43f af0e 	beq.w	800e446 <_printf_float+0xba>
 800e62a:	f04f 0900 	mov.w	r9, #0
 800e62e:	f104 0a1a 	add.w	sl, r4, #26
 800e632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e634:	425b      	negs	r3, r3
 800e636:	454b      	cmp	r3, r9
 800e638:	dc01      	bgt.n	800e63e <_printf_float+0x2b2>
 800e63a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e63c:	e794      	b.n	800e568 <_printf_float+0x1dc>
 800e63e:	2301      	movs	r3, #1
 800e640:	4652      	mov	r2, sl
 800e642:	4631      	mov	r1, r6
 800e644:	4628      	mov	r0, r5
 800e646:	47b8      	blx	r7
 800e648:	3001      	adds	r0, #1
 800e64a:	f43f aefc 	beq.w	800e446 <_printf_float+0xba>
 800e64e:	f109 0901 	add.w	r9, r9, #1
 800e652:	e7ee      	b.n	800e632 <_printf_float+0x2a6>
 800e654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e658:	429a      	cmp	r2, r3
 800e65a:	bfa8      	it	ge
 800e65c:	461a      	movge	r2, r3
 800e65e:	2a00      	cmp	r2, #0
 800e660:	4691      	mov	r9, r2
 800e662:	dd07      	ble.n	800e674 <_printf_float+0x2e8>
 800e664:	4613      	mov	r3, r2
 800e666:	4631      	mov	r1, r6
 800e668:	4642      	mov	r2, r8
 800e66a:	4628      	mov	r0, r5
 800e66c:	47b8      	blx	r7
 800e66e:	3001      	adds	r0, #1
 800e670:	f43f aee9 	beq.w	800e446 <_printf_float+0xba>
 800e674:	f104 031a 	add.w	r3, r4, #26
 800e678:	f04f 0b00 	mov.w	fp, #0
 800e67c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e680:	9306      	str	r3, [sp, #24]
 800e682:	e015      	b.n	800e6b0 <_printf_float+0x324>
 800e684:	7fefffff 	.word	0x7fefffff
 800e688:	08012c88 	.word	0x08012c88
 800e68c:	08012c84 	.word	0x08012c84
 800e690:	08012c90 	.word	0x08012c90
 800e694:	08012c8c 	.word	0x08012c8c
 800e698:	08012c94 	.word	0x08012c94
 800e69c:	2301      	movs	r3, #1
 800e69e:	9a06      	ldr	r2, [sp, #24]
 800e6a0:	4631      	mov	r1, r6
 800e6a2:	4628      	mov	r0, r5
 800e6a4:	47b8      	blx	r7
 800e6a6:	3001      	adds	r0, #1
 800e6a8:	f43f aecd 	beq.w	800e446 <_printf_float+0xba>
 800e6ac:	f10b 0b01 	add.w	fp, fp, #1
 800e6b0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e6b4:	ebaa 0309 	sub.w	r3, sl, r9
 800e6b8:	455b      	cmp	r3, fp
 800e6ba:	dcef      	bgt.n	800e69c <_printf_float+0x310>
 800e6bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6c0:	429a      	cmp	r2, r3
 800e6c2:	44d0      	add	r8, sl
 800e6c4:	db15      	blt.n	800e6f2 <_printf_float+0x366>
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	07da      	lsls	r2, r3, #31
 800e6ca:	d412      	bmi.n	800e6f2 <_printf_float+0x366>
 800e6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e6d0:	eba3 020a 	sub.w	r2, r3, sl
 800e6d4:	eba3 0a01 	sub.w	sl, r3, r1
 800e6d8:	4592      	cmp	sl, r2
 800e6da:	bfa8      	it	ge
 800e6dc:	4692      	movge	sl, r2
 800e6de:	f1ba 0f00 	cmp.w	sl, #0
 800e6e2:	dc0e      	bgt.n	800e702 <_printf_float+0x376>
 800e6e4:	f04f 0800 	mov.w	r8, #0
 800e6e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e6ec:	f104 091a 	add.w	r9, r4, #26
 800e6f0:	e019      	b.n	800e726 <_printf_float+0x39a>
 800e6f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6f6:	4631      	mov	r1, r6
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	47b8      	blx	r7
 800e6fc:	3001      	adds	r0, #1
 800e6fe:	d1e5      	bne.n	800e6cc <_printf_float+0x340>
 800e700:	e6a1      	b.n	800e446 <_printf_float+0xba>
 800e702:	4653      	mov	r3, sl
 800e704:	4642      	mov	r2, r8
 800e706:	4631      	mov	r1, r6
 800e708:	4628      	mov	r0, r5
 800e70a:	47b8      	blx	r7
 800e70c:	3001      	adds	r0, #1
 800e70e:	d1e9      	bne.n	800e6e4 <_printf_float+0x358>
 800e710:	e699      	b.n	800e446 <_printf_float+0xba>
 800e712:	2301      	movs	r3, #1
 800e714:	464a      	mov	r2, r9
 800e716:	4631      	mov	r1, r6
 800e718:	4628      	mov	r0, r5
 800e71a:	47b8      	blx	r7
 800e71c:	3001      	adds	r0, #1
 800e71e:	f43f ae92 	beq.w	800e446 <_printf_float+0xba>
 800e722:	f108 0801 	add.w	r8, r8, #1
 800e726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e72a:	1a9b      	subs	r3, r3, r2
 800e72c:	eba3 030a 	sub.w	r3, r3, sl
 800e730:	4543      	cmp	r3, r8
 800e732:	dcee      	bgt.n	800e712 <_printf_float+0x386>
 800e734:	e74a      	b.n	800e5cc <_printf_float+0x240>
 800e736:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e738:	2a01      	cmp	r2, #1
 800e73a:	dc01      	bgt.n	800e740 <_printf_float+0x3b4>
 800e73c:	07db      	lsls	r3, r3, #31
 800e73e:	d53a      	bpl.n	800e7b6 <_printf_float+0x42a>
 800e740:	2301      	movs	r3, #1
 800e742:	4642      	mov	r2, r8
 800e744:	4631      	mov	r1, r6
 800e746:	4628      	mov	r0, r5
 800e748:	47b8      	blx	r7
 800e74a:	3001      	adds	r0, #1
 800e74c:	f43f ae7b 	beq.w	800e446 <_printf_float+0xba>
 800e750:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e754:	4631      	mov	r1, r6
 800e756:	4628      	mov	r0, r5
 800e758:	47b8      	blx	r7
 800e75a:	3001      	adds	r0, #1
 800e75c:	f108 0801 	add.w	r8, r8, #1
 800e760:	f43f ae71 	beq.w	800e446 <_printf_float+0xba>
 800e764:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e766:	2200      	movs	r2, #0
 800e768:	f103 3aff 	add.w	sl, r3, #4294967295
 800e76c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e770:	2300      	movs	r3, #0
 800e772:	f7f2 f9a9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e776:	b9c8      	cbnz	r0, 800e7ac <_printf_float+0x420>
 800e778:	4653      	mov	r3, sl
 800e77a:	4642      	mov	r2, r8
 800e77c:	4631      	mov	r1, r6
 800e77e:	4628      	mov	r0, r5
 800e780:	47b8      	blx	r7
 800e782:	3001      	adds	r0, #1
 800e784:	d10e      	bne.n	800e7a4 <_printf_float+0x418>
 800e786:	e65e      	b.n	800e446 <_printf_float+0xba>
 800e788:	2301      	movs	r3, #1
 800e78a:	4652      	mov	r2, sl
 800e78c:	4631      	mov	r1, r6
 800e78e:	4628      	mov	r0, r5
 800e790:	47b8      	blx	r7
 800e792:	3001      	adds	r0, #1
 800e794:	f43f ae57 	beq.w	800e446 <_printf_float+0xba>
 800e798:	f108 0801 	add.w	r8, r8, #1
 800e79c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	4543      	cmp	r3, r8
 800e7a2:	dcf1      	bgt.n	800e788 <_printf_float+0x3fc>
 800e7a4:	464b      	mov	r3, r9
 800e7a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e7aa:	e6de      	b.n	800e56a <_printf_float+0x1de>
 800e7ac:	f04f 0800 	mov.w	r8, #0
 800e7b0:	f104 0a1a 	add.w	sl, r4, #26
 800e7b4:	e7f2      	b.n	800e79c <_printf_float+0x410>
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	e7df      	b.n	800e77a <_printf_float+0x3ee>
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	464a      	mov	r2, r9
 800e7be:	4631      	mov	r1, r6
 800e7c0:	4628      	mov	r0, r5
 800e7c2:	47b8      	blx	r7
 800e7c4:	3001      	adds	r0, #1
 800e7c6:	f43f ae3e 	beq.w	800e446 <_printf_float+0xba>
 800e7ca:	f108 0801 	add.w	r8, r8, #1
 800e7ce:	68e3      	ldr	r3, [r4, #12]
 800e7d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e7d2:	1a9b      	subs	r3, r3, r2
 800e7d4:	4543      	cmp	r3, r8
 800e7d6:	dcf0      	bgt.n	800e7ba <_printf_float+0x42e>
 800e7d8:	e6fc      	b.n	800e5d4 <_printf_float+0x248>
 800e7da:	f04f 0800 	mov.w	r8, #0
 800e7de:	f104 0919 	add.w	r9, r4, #25
 800e7e2:	e7f4      	b.n	800e7ce <_printf_float+0x442>
 800e7e4:	2900      	cmp	r1, #0
 800e7e6:	f43f ae8b 	beq.w	800e500 <_printf_float+0x174>
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e7f0:	ab09      	add	r3, sp, #36	; 0x24
 800e7f2:	9300      	str	r3, [sp, #0]
 800e7f4:	ec49 8b10 	vmov	d0, r8, r9
 800e7f8:	6022      	str	r2, [r4, #0]
 800e7fa:	f8cd a004 	str.w	sl, [sp, #4]
 800e7fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e802:	4628      	mov	r0, r5
 800e804:	f7ff fd2d 	bl	800e262 <__cvt>
 800e808:	4680      	mov	r8, r0
 800e80a:	e648      	b.n	800e49e <_printf_float+0x112>

0800e80c <_printf_common>:
 800e80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e810:	4691      	mov	r9, r2
 800e812:	461f      	mov	r7, r3
 800e814:	688a      	ldr	r2, [r1, #8]
 800e816:	690b      	ldr	r3, [r1, #16]
 800e818:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e81c:	4293      	cmp	r3, r2
 800e81e:	bfb8      	it	lt
 800e820:	4613      	movlt	r3, r2
 800e822:	f8c9 3000 	str.w	r3, [r9]
 800e826:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e82a:	4606      	mov	r6, r0
 800e82c:	460c      	mov	r4, r1
 800e82e:	b112      	cbz	r2, 800e836 <_printf_common+0x2a>
 800e830:	3301      	adds	r3, #1
 800e832:	f8c9 3000 	str.w	r3, [r9]
 800e836:	6823      	ldr	r3, [r4, #0]
 800e838:	0699      	lsls	r1, r3, #26
 800e83a:	bf42      	ittt	mi
 800e83c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e840:	3302      	addmi	r3, #2
 800e842:	f8c9 3000 	strmi.w	r3, [r9]
 800e846:	6825      	ldr	r5, [r4, #0]
 800e848:	f015 0506 	ands.w	r5, r5, #6
 800e84c:	d107      	bne.n	800e85e <_printf_common+0x52>
 800e84e:	f104 0a19 	add.w	sl, r4, #25
 800e852:	68e3      	ldr	r3, [r4, #12]
 800e854:	f8d9 2000 	ldr.w	r2, [r9]
 800e858:	1a9b      	subs	r3, r3, r2
 800e85a:	42ab      	cmp	r3, r5
 800e85c:	dc28      	bgt.n	800e8b0 <_printf_common+0xa4>
 800e85e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e862:	6822      	ldr	r2, [r4, #0]
 800e864:	3300      	adds	r3, #0
 800e866:	bf18      	it	ne
 800e868:	2301      	movne	r3, #1
 800e86a:	0692      	lsls	r2, r2, #26
 800e86c:	d42d      	bmi.n	800e8ca <_printf_common+0xbe>
 800e86e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e872:	4639      	mov	r1, r7
 800e874:	4630      	mov	r0, r6
 800e876:	47c0      	blx	r8
 800e878:	3001      	adds	r0, #1
 800e87a:	d020      	beq.n	800e8be <_printf_common+0xb2>
 800e87c:	6823      	ldr	r3, [r4, #0]
 800e87e:	68e5      	ldr	r5, [r4, #12]
 800e880:	f8d9 2000 	ldr.w	r2, [r9]
 800e884:	f003 0306 	and.w	r3, r3, #6
 800e888:	2b04      	cmp	r3, #4
 800e88a:	bf08      	it	eq
 800e88c:	1aad      	subeq	r5, r5, r2
 800e88e:	68a3      	ldr	r3, [r4, #8]
 800e890:	6922      	ldr	r2, [r4, #16]
 800e892:	bf0c      	ite	eq
 800e894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e898:	2500      	movne	r5, #0
 800e89a:	4293      	cmp	r3, r2
 800e89c:	bfc4      	itt	gt
 800e89e:	1a9b      	subgt	r3, r3, r2
 800e8a0:	18ed      	addgt	r5, r5, r3
 800e8a2:	f04f 0900 	mov.w	r9, #0
 800e8a6:	341a      	adds	r4, #26
 800e8a8:	454d      	cmp	r5, r9
 800e8aa:	d11a      	bne.n	800e8e2 <_printf_common+0xd6>
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	e008      	b.n	800e8c2 <_printf_common+0xb6>
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	4652      	mov	r2, sl
 800e8b4:	4639      	mov	r1, r7
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	47c0      	blx	r8
 800e8ba:	3001      	adds	r0, #1
 800e8bc:	d103      	bne.n	800e8c6 <_printf_common+0xba>
 800e8be:	f04f 30ff 	mov.w	r0, #4294967295
 800e8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8c6:	3501      	adds	r5, #1
 800e8c8:	e7c3      	b.n	800e852 <_printf_common+0x46>
 800e8ca:	18e1      	adds	r1, r4, r3
 800e8cc:	1c5a      	adds	r2, r3, #1
 800e8ce:	2030      	movs	r0, #48	; 0x30
 800e8d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e8d4:	4422      	add	r2, r4
 800e8d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e8da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e8de:	3302      	adds	r3, #2
 800e8e0:	e7c5      	b.n	800e86e <_printf_common+0x62>
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	4622      	mov	r2, r4
 800e8e6:	4639      	mov	r1, r7
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	47c0      	blx	r8
 800e8ec:	3001      	adds	r0, #1
 800e8ee:	d0e6      	beq.n	800e8be <_printf_common+0xb2>
 800e8f0:	f109 0901 	add.w	r9, r9, #1
 800e8f4:	e7d8      	b.n	800e8a8 <_printf_common+0x9c>
	...

0800e8f8 <_printf_i>:
 800e8f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e8fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e900:	460c      	mov	r4, r1
 800e902:	7e09      	ldrb	r1, [r1, #24]
 800e904:	b085      	sub	sp, #20
 800e906:	296e      	cmp	r1, #110	; 0x6e
 800e908:	4617      	mov	r7, r2
 800e90a:	4606      	mov	r6, r0
 800e90c:	4698      	mov	r8, r3
 800e90e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e910:	f000 80b3 	beq.w	800ea7a <_printf_i+0x182>
 800e914:	d822      	bhi.n	800e95c <_printf_i+0x64>
 800e916:	2963      	cmp	r1, #99	; 0x63
 800e918:	d036      	beq.n	800e988 <_printf_i+0x90>
 800e91a:	d80a      	bhi.n	800e932 <_printf_i+0x3a>
 800e91c:	2900      	cmp	r1, #0
 800e91e:	f000 80b9 	beq.w	800ea94 <_printf_i+0x19c>
 800e922:	2958      	cmp	r1, #88	; 0x58
 800e924:	f000 8083 	beq.w	800ea2e <_printf_i+0x136>
 800e928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e92c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e930:	e032      	b.n	800e998 <_printf_i+0xa0>
 800e932:	2964      	cmp	r1, #100	; 0x64
 800e934:	d001      	beq.n	800e93a <_printf_i+0x42>
 800e936:	2969      	cmp	r1, #105	; 0x69
 800e938:	d1f6      	bne.n	800e928 <_printf_i+0x30>
 800e93a:	6820      	ldr	r0, [r4, #0]
 800e93c:	6813      	ldr	r3, [r2, #0]
 800e93e:	0605      	lsls	r5, r0, #24
 800e940:	f103 0104 	add.w	r1, r3, #4
 800e944:	d52a      	bpl.n	800e99c <_printf_i+0xa4>
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	6011      	str	r1, [r2, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	da03      	bge.n	800e956 <_printf_i+0x5e>
 800e94e:	222d      	movs	r2, #45	; 0x2d
 800e950:	425b      	negs	r3, r3
 800e952:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e956:	486f      	ldr	r0, [pc, #444]	; (800eb14 <_printf_i+0x21c>)
 800e958:	220a      	movs	r2, #10
 800e95a:	e039      	b.n	800e9d0 <_printf_i+0xd8>
 800e95c:	2973      	cmp	r1, #115	; 0x73
 800e95e:	f000 809d 	beq.w	800ea9c <_printf_i+0x1a4>
 800e962:	d808      	bhi.n	800e976 <_printf_i+0x7e>
 800e964:	296f      	cmp	r1, #111	; 0x6f
 800e966:	d020      	beq.n	800e9aa <_printf_i+0xb2>
 800e968:	2970      	cmp	r1, #112	; 0x70
 800e96a:	d1dd      	bne.n	800e928 <_printf_i+0x30>
 800e96c:	6823      	ldr	r3, [r4, #0]
 800e96e:	f043 0320 	orr.w	r3, r3, #32
 800e972:	6023      	str	r3, [r4, #0]
 800e974:	e003      	b.n	800e97e <_printf_i+0x86>
 800e976:	2975      	cmp	r1, #117	; 0x75
 800e978:	d017      	beq.n	800e9aa <_printf_i+0xb2>
 800e97a:	2978      	cmp	r1, #120	; 0x78
 800e97c:	d1d4      	bne.n	800e928 <_printf_i+0x30>
 800e97e:	2378      	movs	r3, #120	; 0x78
 800e980:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e984:	4864      	ldr	r0, [pc, #400]	; (800eb18 <_printf_i+0x220>)
 800e986:	e055      	b.n	800ea34 <_printf_i+0x13c>
 800e988:	6813      	ldr	r3, [r2, #0]
 800e98a:	1d19      	adds	r1, r3, #4
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	6011      	str	r1, [r2, #0]
 800e990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e998:	2301      	movs	r3, #1
 800e99a:	e08c      	b.n	800eab6 <_printf_i+0x1be>
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	6011      	str	r1, [r2, #0]
 800e9a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e9a4:	bf18      	it	ne
 800e9a6:	b21b      	sxthne	r3, r3
 800e9a8:	e7cf      	b.n	800e94a <_printf_i+0x52>
 800e9aa:	6813      	ldr	r3, [r2, #0]
 800e9ac:	6825      	ldr	r5, [r4, #0]
 800e9ae:	1d18      	adds	r0, r3, #4
 800e9b0:	6010      	str	r0, [r2, #0]
 800e9b2:	0628      	lsls	r0, r5, #24
 800e9b4:	d501      	bpl.n	800e9ba <_printf_i+0xc2>
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	e002      	b.n	800e9c0 <_printf_i+0xc8>
 800e9ba:	0668      	lsls	r0, r5, #25
 800e9bc:	d5fb      	bpl.n	800e9b6 <_printf_i+0xbe>
 800e9be:	881b      	ldrh	r3, [r3, #0]
 800e9c0:	4854      	ldr	r0, [pc, #336]	; (800eb14 <_printf_i+0x21c>)
 800e9c2:	296f      	cmp	r1, #111	; 0x6f
 800e9c4:	bf14      	ite	ne
 800e9c6:	220a      	movne	r2, #10
 800e9c8:	2208      	moveq	r2, #8
 800e9ca:	2100      	movs	r1, #0
 800e9cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e9d0:	6865      	ldr	r5, [r4, #4]
 800e9d2:	60a5      	str	r5, [r4, #8]
 800e9d4:	2d00      	cmp	r5, #0
 800e9d6:	f2c0 8095 	blt.w	800eb04 <_printf_i+0x20c>
 800e9da:	6821      	ldr	r1, [r4, #0]
 800e9dc:	f021 0104 	bic.w	r1, r1, #4
 800e9e0:	6021      	str	r1, [r4, #0]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d13d      	bne.n	800ea62 <_printf_i+0x16a>
 800e9e6:	2d00      	cmp	r5, #0
 800e9e8:	f040 808e 	bne.w	800eb08 <_printf_i+0x210>
 800e9ec:	4665      	mov	r5, ip
 800e9ee:	2a08      	cmp	r2, #8
 800e9f0:	d10b      	bne.n	800ea0a <_printf_i+0x112>
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	07db      	lsls	r3, r3, #31
 800e9f6:	d508      	bpl.n	800ea0a <_printf_i+0x112>
 800e9f8:	6923      	ldr	r3, [r4, #16]
 800e9fa:	6862      	ldr	r2, [r4, #4]
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	bfde      	ittt	le
 800ea00:	2330      	movle	r3, #48	; 0x30
 800ea02:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ea06:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ea0a:	ebac 0305 	sub.w	r3, ip, r5
 800ea0e:	6123      	str	r3, [r4, #16]
 800ea10:	f8cd 8000 	str.w	r8, [sp]
 800ea14:	463b      	mov	r3, r7
 800ea16:	aa03      	add	r2, sp, #12
 800ea18:	4621      	mov	r1, r4
 800ea1a:	4630      	mov	r0, r6
 800ea1c:	f7ff fef6 	bl	800e80c <_printf_common>
 800ea20:	3001      	adds	r0, #1
 800ea22:	d14d      	bne.n	800eac0 <_printf_i+0x1c8>
 800ea24:	f04f 30ff 	mov.w	r0, #4294967295
 800ea28:	b005      	add	sp, #20
 800ea2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ea2e:	4839      	ldr	r0, [pc, #228]	; (800eb14 <_printf_i+0x21c>)
 800ea30:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ea34:	6813      	ldr	r3, [r2, #0]
 800ea36:	6821      	ldr	r1, [r4, #0]
 800ea38:	1d1d      	adds	r5, r3, #4
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	6015      	str	r5, [r2, #0]
 800ea3e:	060a      	lsls	r2, r1, #24
 800ea40:	d50b      	bpl.n	800ea5a <_printf_i+0x162>
 800ea42:	07ca      	lsls	r2, r1, #31
 800ea44:	bf44      	itt	mi
 800ea46:	f041 0120 	orrmi.w	r1, r1, #32
 800ea4a:	6021      	strmi	r1, [r4, #0]
 800ea4c:	b91b      	cbnz	r3, 800ea56 <_printf_i+0x15e>
 800ea4e:	6822      	ldr	r2, [r4, #0]
 800ea50:	f022 0220 	bic.w	r2, r2, #32
 800ea54:	6022      	str	r2, [r4, #0]
 800ea56:	2210      	movs	r2, #16
 800ea58:	e7b7      	b.n	800e9ca <_printf_i+0xd2>
 800ea5a:	064d      	lsls	r5, r1, #25
 800ea5c:	bf48      	it	mi
 800ea5e:	b29b      	uxthmi	r3, r3
 800ea60:	e7ef      	b.n	800ea42 <_printf_i+0x14a>
 800ea62:	4665      	mov	r5, ip
 800ea64:	fbb3 f1f2 	udiv	r1, r3, r2
 800ea68:	fb02 3311 	mls	r3, r2, r1, r3
 800ea6c:	5cc3      	ldrb	r3, [r0, r3]
 800ea6e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ea72:	460b      	mov	r3, r1
 800ea74:	2900      	cmp	r1, #0
 800ea76:	d1f5      	bne.n	800ea64 <_printf_i+0x16c>
 800ea78:	e7b9      	b.n	800e9ee <_printf_i+0xf6>
 800ea7a:	6813      	ldr	r3, [r2, #0]
 800ea7c:	6825      	ldr	r5, [r4, #0]
 800ea7e:	6961      	ldr	r1, [r4, #20]
 800ea80:	1d18      	adds	r0, r3, #4
 800ea82:	6010      	str	r0, [r2, #0]
 800ea84:	0628      	lsls	r0, r5, #24
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	d501      	bpl.n	800ea8e <_printf_i+0x196>
 800ea8a:	6019      	str	r1, [r3, #0]
 800ea8c:	e002      	b.n	800ea94 <_printf_i+0x19c>
 800ea8e:	066a      	lsls	r2, r5, #25
 800ea90:	d5fb      	bpl.n	800ea8a <_printf_i+0x192>
 800ea92:	8019      	strh	r1, [r3, #0]
 800ea94:	2300      	movs	r3, #0
 800ea96:	6123      	str	r3, [r4, #16]
 800ea98:	4665      	mov	r5, ip
 800ea9a:	e7b9      	b.n	800ea10 <_printf_i+0x118>
 800ea9c:	6813      	ldr	r3, [r2, #0]
 800ea9e:	1d19      	adds	r1, r3, #4
 800eaa0:	6011      	str	r1, [r2, #0]
 800eaa2:	681d      	ldr	r5, [r3, #0]
 800eaa4:	6862      	ldr	r2, [r4, #4]
 800eaa6:	2100      	movs	r1, #0
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	f7f1 fb99 	bl	80001e0 <memchr>
 800eaae:	b108      	cbz	r0, 800eab4 <_printf_i+0x1bc>
 800eab0:	1b40      	subs	r0, r0, r5
 800eab2:	6060      	str	r0, [r4, #4]
 800eab4:	6863      	ldr	r3, [r4, #4]
 800eab6:	6123      	str	r3, [r4, #16]
 800eab8:	2300      	movs	r3, #0
 800eaba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eabe:	e7a7      	b.n	800ea10 <_printf_i+0x118>
 800eac0:	6923      	ldr	r3, [r4, #16]
 800eac2:	462a      	mov	r2, r5
 800eac4:	4639      	mov	r1, r7
 800eac6:	4630      	mov	r0, r6
 800eac8:	47c0      	blx	r8
 800eaca:	3001      	adds	r0, #1
 800eacc:	d0aa      	beq.n	800ea24 <_printf_i+0x12c>
 800eace:	6823      	ldr	r3, [r4, #0]
 800ead0:	079b      	lsls	r3, r3, #30
 800ead2:	d413      	bmi.n	800eafc <_printf_i+0x204>
 800ead4:	68e0      	ldr	r0, [r4, #12]
 800ead6:	9b03      	ldr	r3, [sp, #12]
 800ead8:	4298      	cmp	r0, r3
 800eada:	bfb8      	it	lt
 800eadc:	4618      	movlt	r0, r3
 800eade:	e7a3      	b.n	800ea28 <_printf_i+0x130>
 800eae0:	2301      	movs	r3, #1
 800eae2:	464a      	mov	r2, r9
 800eae4:	4639      	mov	r1, r7
 800eae6:	4630      	mov	r0, r6
 800eae8:	47c0      	blx	r8
 800eaea:	3001      	adds	r0, #1
 800eaec:	d09a      	beq.n	800ea24 <_printf_i+0x12c>
 800eaee:	3501      	adds	r5, #1
 800eaf0:	68e3      	ldr	r3, [r4, #12]
 800eaf2:	9a03      	ldr	r2, [sp, #12]
 800eaf4:	1a9b      	subs	r3, r3, r2
 800eaf6:	42ab      	cmp	r3, r5
 800eaf8:	dcf2      	bgt.n	800eae0 <_printf_i+0x1e8>
 800eafa:	e7eb      	b.n	800ead4 <_printf_i+0x1dc>
 800eafc:	2500      	movs	r5, #0
 800eafe:	f104 0919 	add.w	r9, r4, #25
 800eb02:	e7f5      	b.n	800eaf0 <_printf_i+0x1f8>
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d1ac      	bne.n	800ea62 <_printf_i+0x16a>
 800eb08:	7803      	ldrb	r3, [r0, #0]
 800eb0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eb0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eb12:	e76c      	b.n	800e9ee <_printf_i+0xf6>
 800eb14:	08012c96 	.word	0x08012c96
 800eb18:	08012ca7 	.word	0x08012ca7

0800eb1c <_scanf_float>:
 800eb1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb20:	469a      	mov	sl, r3
 800eb22:	688b      	ldr	r3, [r1, #8]
 800eb24:	4616      	mov	r6, r2
 800eb26:	1e5a      	subs	r2, r3, #1
 800eb28:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800eb2c:	b087      	sub	sp, #28
 800eb2e:	bf83      	ittte	hi
 800eb30:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800eb34:	189b      	addhi	r3, r3, r2
 800eb36:	9301      	strhi	r3, [sp, #4]
 800eb38:	2300      	movls	r3, #0
 800eb3a:	bf86      	itte	hi
 800eb3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800eb40:	608b      	strhi	r3, [r1, #8]
 800eb42:	9301      	strls	r3, [sp, #4]
 800eb44:	680b      	ldr	r3, [r1, #0]
 800eb46:	4688      	mov	r8, r1
 800eb48:	f04f 0b00 	mov.w	fp, #0
 800eb4c:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800eb50:	f848 3b1c 	str.w	r3, [r8], #28
 800eb54:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800eb58:	4607      	mov	r7, r0
 800eb5a:	460c      	mov	r4, r1
 800eb5c:	4645      	mov	r5, r8
 800eb5e:	465a      	mov	r2, fp
 800eb60:	46d9      	mov	r9, fp
 800eb62:	f8cd b008 	str.w	fp, [sp, #8]
 800eb66:	68a1      	ldr	r1, [r4, #8]
 800eb68:	b181      	cbz	r1, 800eb8c <_scanf_float+0x70>
 800eb6a:	6833      	ldr	r3, [r6, #0]
 800eb6c:	781b      	ldrb	r3, [r3, #0]
 800eb6e:	2b49      	cmp	r3, #73	; 0x49
 800eb70:	d071      	beq.n	800ec56 <_scanf_float+0x13a>
 800eb72:	d84d      	bhi.n	800ec10 <_scanf_float+0xf4>
 800eb74:	2b39      	cmp	r3, #57	; 0x39
 800eb76:	d840      	bhi.n	800ebfa <_scanf_float+0xde>
 800eb78:	2b31      	cmp	r3, #49	; 0x31
 800eb7a:	f080 8088 	bcs.w	800ec8e <_scanf_float+0x172>
 800eb7e:	2b2d      	cmp	r3, #45	; 0x2d
 800eb80:	f000 8090 	beq.w	800eca4 <_scanf_float+0x188>
 800eb84:	d815      	bhi.n	800ebb2 <_scanf_float+0x96>
 800eb86:	2b2b      	cmp	r3, #43	; 0x2b
 800eb88:	f000 808c 	beq.w	800eca4 <_scanf_float+0x188>
 800eb8c:	f1b9 0f00 	cmp.w	r9, #0
 800eb90:	d003      	beq.n	800eb9a <_scanf_float+0x7e>
 800eb92:	6823      	ldr	r3, [r4, #0]
 800eb94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eb98:	6023      	str	r3, [r4, #0]
 800eb9a:	3a01      	subs	r2, #1
 800eb9c:	2a01      	cmp	r2, #1
 800eb9e:	f200 80ea 	bhi.w	800ed76 <_scanf_float+0x25a>
 800eba2:	4545      	cmp	r5, r8
 800eba4:	f200 80dc 	bhi.w	800ed60 <_scanf_float+0x244>
 800eba8:	2601      	movs	r6, #1
 800ebaa:	4630      	mov	r0, r6
 800ebac:	b007      	add	sp, #28
 800ebae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebb2:	2b2e      	cmp	r3, #46	; 0x2e
 800ebb4:	f000 809f 	beq.w	800ecf6 <_scanf_float+0x1da>
 800ebb8:	2b30      	cmp	r3, #48	; 0x30
 800ebba:	d1e7      	bne.n	800eb8c <_scanf_float+0x70>
 800ebbc:	6820      	ldr	r0, [r4, #0]
 800ebbe:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ebc2:	d064      	beq.n	800ec8e <_scanf_float+0x172>
 800ebc4:	9b01      	ldr	r3, [sp, #4]
 800ebc6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ebca:	6020      	str	r0, [r4, #0]
 800ebcc:	f109 0901 	add.w	r9, r9, #1
 800ebd0:	b11b      	cbz	r3, 800ebda <_scanf_float+0xbe>
 800ebd2:	3b01      	subs	r3, #1
 800ebd4:	3101      	adds	r1, #1
 800ebd6:	9301      	str	r3, [sp, #4]
 800ebd8:	60a1      	str	r1, [r4, #8]
 800ebda:	68a3      	ldr	r3, [r4, #8]
 800ebdc:	3b01      	subs	r3, #1
 800ebde:	60a3      	str	r3, [r4, #8]
 800ebe0:	6923      	ldr	r3, [r4, #16]
 800ebe2:	3301      	adds	r3, #1
 800ebe4:	6123      	str	r3, [r4, #16]
 800ebe6:	6873      	ldr	r3, [r6, #4]
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	6073      	str	r3, [r6, #4]
 800ebee:	f340 80ac 	ble.w	800ed4a <_scanf_float+0x22e>
 800ebf2:	6833      	ldr	r3, [r6, #0]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	6033      	str	r3, [r6, #0]
 800ebf8:	e7b5      	b.n	800eb66 <_scanf_float+0x4a>
 800ebfa:	2b45      	cmp	r3, #69	; 0x45
 800ebfc:	f000 8085 	beq.w	800ed0a <_scanf_float+0x1ee>
 800ec00:	2b46      	cmp	r3, #70	; 0x46
 800ec02:	d06a      	beq.n	800ecda <_scanf_float+0x1be>
 800ec04:	2b41      	cmp	r3, #65	; 0x41
 800ec06:	d1c1      	bne.n	800eb8c <_scanf_float+0x70>
 800ec08:	2a01      	cmp	r2, #1
 800ec0a:	d1bf      	bne.n	800eb8c <_scanf_float+0x70>
 800ec0c:	2202      	movs	r2, #2
 800ec0e:	e046      	b.n	800ec9e <_scanf_float+0x182>
 800ec10:	2b65      	cmp	r3, #101	; 0x65
 800ec12:	d07a      	beq.n	800ed0a <_scanf_float+0x1ee>
 800ec14:	d818      	bhi.n	800ec48 <_scanf_float+0x12c>
 800ec16:	2b54      	cmp	r3, #84	; 0x54
 800ec18:	d066      	beq.n	800ece8 <_scanf_float+0x1cc>
 800ec1a:	d811      	bhi.n	800ec40 <_scanf_float+0x124>
 800ec1c:	2b4e      	cmp	r3, #78	; 0x4e
 800ec1e:	d1b5      	bne.n	800eb8c <_scanf_float+0x70>
 800ec20:	2a00      	cmp	r2, #0
 800ec22:	d146      	bne.n	800ecb2 <_scanf_float+0x196>
 800ec24:	f1b9 0f00 	cmp.w	r9, #0
 800ec28:	d145      	bne.n	800ecb6 <_scanf_float+0x19a>
 800ec2a:	6821      	ldr	r1, [r4, #0]
 800ec2c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ec30:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ec34:	d13f      	bne.n	800ecb6 <_scanf_float+0x19a>
 800ec36:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ec3a:	6021      	str	r1, [r4, #0]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	e02e      	b.n	800ec9e <_scanf_float+0x182>
 800ec40:	2b59      	cmp	r3, #89	; 0x59
 800ec42:	d01e      	beq.n	800ec82 <_scanf_float+0x166>
 800ec44:	2b61      	cmp	r3, #97	; 0x61
 800ec46:	e7de      	b.n	800ec06 <_scanf_float+0xea>
 800ec48:	2b6e      	cmp	r3, #110	; 0x6e
 800ec4a:	d0e9      	beq.n	800ec20 <_scanf_float+0x104>
 800ec4c:	d815      	bhi.n	800ec7a <_scanf_float+0x15e>
 800ec4e:	2b66      	cmp	r3, #102	; 0x66
 800ec50:	d043      	beq.n	800ecda <_scanf_float+0x1be>
 800ec52:	2b69      	cmp	r3, #105	; 0x69
 800ec54:	d19a      	bne.n	800eb8c <_scanf_float+0x70>
 800ec56:	f1bb 0f00 	cmp.w	fp, #0
 800ec5a:	d138      	bne.n	800ecce <_scanf_float+0x1b2>
 800ec5c:	f1b9 0f00 	cmp.w	r9, #0
 800ec60:	d197      	bne.n	800eb92 <_scanf_float+0x76>
 800ec62:	6821      	ldr	r1, [r4, #0]
 800ec64:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ec68:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ec6c:	d195      	bne.n	800eb9a <_scanf_float+0x7e>
 800ec6e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ec72:	6021      	str	r1, [r4, #0]
 800ec74:	f04f 0b01 	mov.w	fp, #1
 800ec78:	e011      	b.n	800ec9e <_scanf_float+0x182>
 800ec7a:	2b74      	cmp	r3, #116	; 0x74
 800ec7c:	d034      	beq.n	800ece8 <_scanf_float+0x1cc>
 800ec7e:	2b79      	cmp	r3, #121	; 0x79
 800ec80:	d184      	bne.n	800eb8c <_scanf_float+0x70>
 800ec82:	f1bb 0f07 	cmp.w	fp, #7
 800ec86:	d181      	bne.n	800eb8c <_scanf_float+0x70>
 800ec88:	f04f 0b08 	mov.w	fp, #8
 800ec8c:	e007      	b.n	800ec9e <_scanf_float+0x182>
 800ec8e:	eb12 0f0b 	cmn.w	r2, fp
 800ec92:	f47f af7b 	bne.w	800eb8c <_scanf_float+0x70>
 800ec96:	6821      	ldr	r1, [r4, #0]
 800ec98:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ec9c:	6021      	str	r1, [r4, #0]
 800ec9e:	702b      	strb	r3, [r5, #0]
 800eca0:	3501      	adds	r5, #1
 800eca2:	e79a      	b.n	800ebda <_scanf_float+0xbe>
 800eca4:	6821      	ldr	r1, [r4, #0]
 800eca6:	0608      	lsls	r0, r1, #24
 800eca8:	f57f af70 	bpl.w	800eb8c <_scanf_float+0x70>
 800ecac:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ecb0:	e7f4      	b.n	800ec9c <_scanf_float+0x180>
 800ecb2:	2a02      	cmp	r2, #2
 800ecb4:	d047      	beq.n	800ed46 <_scanf_float+0x22a>
 800ecb6:	f1bb 0f01 	cmp.w	fp, #1
 800ecba:	d003      	beq.n	800ecc4 <_scanf_float+0x1a8>
 800ecbc:	f1bb 0f04 	cmp.w	fp, #4
 800ecc0:	f47f af64 	bne.w	800eb8c <_scanf_float+0x70>
 800ecc4:	f10b 0b01 	add.w	fp, fp, #1
 800ecc8:	fa5f fb8b 	uxtb.w	fp, fp
 800eccc:	e7e7      	b.n	800ec9e <_scanf_float+0x182>
 800ecce:	f1bb 0f03 	cmp.w	fp, #3
 800ecd2:	d0f7      	beq.n	800ecc4 <_scanf_float+0x1a8>
 800ecd4:	f1bb 0f05 	cmp.w	fp, #5
 800ecd8:	e7f2      	b.n	800ecc0 <_scanf_float+0x1a4>
 800ecda:	f1bb 0f02 	cmp.w	fp, #2
 800ecde:	f47f af55 	bne.w	800eb8c <_scanf_float+0x70>
 800ece2:	f04f 0b03 	mov.w	fp, #3
 800ece6:	e7da      	b.n	800ec9e <_scanf_float+0x182>
 800ece8:	f1bb 0f06 	cmp.w	fp, #6
 800ecec:	f47f af4e 	bne.w	800eb8c <_scanf_float+0x70>
 800ecf0:	f04f 0b07 	mov.w	fp, #7
 800ecf4:	e7d3      	b.n	800ec9e <_scanf_float+0x182>
 800ecf6:	6821      	ldr	r1, [r4, #0]
 800ecf8:	0588      	lsls	r0, r1, #22
 800ecfa:	f57f af47 	bpl.w	800eb8c <_scanf_float+0x70>
 800ecfe:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ed02:	6021      	str	r1, [r4, #0]
 800ed04:	f8cd 9008 	str.w	r9, [sp, #8]
 800ed08:	e7c9      	b.n	800ec9e <_scanf_float+0x182>
 800ed0a:	6821      	ldr	r1, [r4, #0]
 800ed0c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ed10:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ed14:	d006      	beq.n	800ed24 <_scanf_float+0x208>
 800ed16:	0548      	lsls	r0, r1, #21
 800ed18:	f57f af38 	bpl.w	800eb8c <_scanf_float+0x70>
 800ed1c:	f1b9 0f00 	cmp.w	r9, #0
 800ed20:	f43f af3b 	beq.w	800eb9a <_scanf_float+0x7e>
 800ed24:	0588      	lsls	r0, r1, #22
 800ed26:	bf58      	it	pl
 800ed28:	9802      	ldrpl	r0, [sp, #8]
 800ed2a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ed2e:	bf58      	it	pl
 800ed30:	eba9 0000 	subpl.w	r0, r9, r0
 800ed34:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ed38:	bf58      	it	pl
 800ed3a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ed3e:	6021      	str	r1, [r4, #0]
 800ed40:	f04f 0900 	mov.w	r9, #0
 800ed44:	e7ab      	b.n	800ec9e <_scanf_float+0x182>
 800ed46:	2203      	movs	r2, #3
 800ed48:	e7a9      	b.n	800ec9e <_scanf_float+0x182>
 800ed4a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ed4e:	9205      	str	r2, [sp, #20]
 800ed50:	4631      	mov	r1, r6
 800ed52:	4638      	mov	r0, r7
 800ed54:	4798      	blx	r3
 800ed56:	9a05      	ldr	r2, [sp, #20]
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	f43f af04 	beq.w	800eb66 <_scanf_float+0x4a>
 800ed5e:	e715      	b.n	800eb8c <_scanf_float+0x70>
 800ed60:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ed64:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ed68:	4632      	mov	r2, r6
 800ed6a:	4638      	mov	r0, r7
 800ed6c:	4798      	blx	r3
 800ed6e:	6923      	ldr	r3, [r4, #16]
 800ed70:	3b01      	subs	r3, #1
 800ed72:	6123      	str	r3, [r4, #16]
 800ed74:	e715      	b.n	800eba2 <_scanf_float+0x86>
 800ed76:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ed7a:	2b06      	cmp	r3, #6
 800ed7c:	d80a      	bhi.n	800ed94 <_scanf_float+0x278>
 800ed7e:	f1bb 0f02 	cmp.w	fp, #2
 800ed82:	d968      	bls.n	800ee56 <_scanf_float+0x33a>
 800ed84:	f1ab 0b03 	sub.w	fp, fp, #3
 800ed88:	fa5f fb8b 	uxtb.w	fp, fp
 800ed8c:	eba5 0b0b 	sub.w	fp, r5, fp
 800ed90:	455d      	cmp	r5, fp
 800ed92:	d14b      	bne.n	800ee2c <_scanf_float+0x310>
 800ed94:	6823      	ldr	r3, [r4, #0]
 800ed96:	05da      	lsls	r2, r3, #23
 800ed98:	d51f      	bpl.n	800edda <_scanf_float+0x2be>
 800ed9a:	055b      	lsls	r3, r3, #21
 800ed9c:	d468      	bmi.n	800ee70 <_scanf_float+0x354>
 800ed9e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800eda2:	6923      	ldr	r3, [r4, #16]
 800eda4:	2965      	cmp	r1, #101	; 0x65
 800eda6:	f103 33ff 	add.w	r3, r3, #4294967295
 800edaa:	f105 3bff 	add.w	fp, r5, #4294967295
 800edae:	6123      	str	r3, [r4, #16]
 800edb0:	d00d      	beq.n	800edce <_scanf_float+0x2b2>
 800edb2:	2945      	cmp	r1, #69	; 0x45
 800edb4:	d00b      	beq.n	800edce <_scanf_float+0x2b2>
 800edb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800edba:	4632      	mov	r2, r6
 800edbc:	4638      	mov	r0, r7
 800edbe:	4798      	blx	r3
 800edc0:	6923      	ldr	r3, [r4, #16]
 800edc2:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800edc6:	3b01      	subs	r3, #1
 800edc8:	f1a5 0b02 	sub.w	fp, r5, #2
 800edcc:	6123      	str	r3, [r4, #16]
 800edce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800edd2:	4632      	mov	r2, r6
 800edd4:	4638      	mov	r0, r7
 800edd6:	4798      	blx	r3
 800edd8:	465d      	mov	r5, fp
 800edda:	6826      	ldr	r6, [r4, #0]
 800eddc:	f016 0610 	ands.w	r6, r6, #16
 800ede0:	d17a      	bne.n	800eed8 <_scanf_float+0x3bc>
 800ede2:	702e      	strb	r6, [r5, #0]
 800ede4:	6823      	ldr	r3, [r4, #0]
 800ede6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800edea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800edee:	d142      	bne.n	800ee76 <_scanf_float+0x35a>
 800edf0:	9b02      	ldr	r3, [sp, #8]
 800edf2:	eba9 0303 	sub.w	r3, r9, r3
 800edf6:	425a      	negs	r2, r3
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d149      	bne.n	800ee90 <_scanf_float+0x374>
 800edfc:	2200      	movs	r2, #0
 800edfe:	4641      	mov	r1, r8
 800ee00:	4638      	mov	r0, r7
 800ee02:	f000 febd 	bl	800fb80 <_strtod_r>
 800ee06:	6825      	ldr	r5, [r4, #0]
 800ee08:	f8da 3000 	ldr.w	r3, [sl]
 800ee0c:	f015 0f02 	tst.w	r5, #2
 800ee10:	f103 0204 	add.w	r2, r3, #4
 800ee14:	ec59 8b10 	vmov	r8, r9, d0
 800ee18:	f8ca 2000 	str.w	r2, [sl]
 800ee1c:	d043      	beq.n	800eea6 <_scanf_float+0x38a>
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	e9c3 8900 	strd	r8, r9, [r3]
 800ee24:	68e3      	ldr	r3, [r4, #12]
 800ee26:	3301      	adds	r3, #1
 800ee28:	60e3      	str	r3, [r4, #12]
 800ee2a:	e6be      	b.n	800ebaa <_scanf_float+0x8e>
 800ee2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee30:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ee34:	4632      	mov	r2, r6
 800ee36:	4638      	mov	r0, r7
 800ee38:	4798      	blx	r3
 800ee3a:	6923      	ldr	r3, [r4, #16]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	6123      	str	r3, [r4, #16]
 800ee40:	e7a6      	b.n	800ed90 <_scanf_float+0x274>
 800ee42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee46:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ee4a:	4632      	mov	r2, r6
 800ee4c:	4638      	mov	r0, r7
 800ee4e:	4798      	blx	r3
 800ee50:	6923      	ldr	r3, [r4, #16]
 800ee52:	3b01      	subs	r3, #1
 800ee54:	6123      	str	r3, [r4, #16]
 800ee56:	4545      	cmp	r5, r8
 800ee58:	d8f3      	bhi.n	800ee42 <_scanf_float+0x326>
 800ee5a:	e6a5      	b.n	800eba8 <_scanf_float+0x8c>
 800ee5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ee60:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ee64:	4632      	mov	r2, r6
 800ee66:	4638      	mov	r0, r7
 800ee68:	4798      	blx	r3
 800ee6a:	6923      	ldr	r3, [r4, #16]
 800ee6c:	3b01      	subs	r3, #1
 800ee6e:	6123      	str	r3, [r4, #16]
 800ee70:	4545      	cmp	r5, r8
 800ee72:	d8f3      	bhi.n	800ee5c <_scanf_float+0x340>
 800ee74:	e698      	b.n	800eba8 <_scanf_float+0x8c>
 800ee76:	9b03      	ldr	r3, [sp, #12]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d0bf      	beq.n	800edfc <_scanf_float+0x2e0>
 800ee7c:	9904      	ldr	r1, [sp, #16]
 800ee7e:	230a      	movs	r3, #10
 800ee80:	4632      	mov	r2, r6
 800ee82:	3101      	adds	r1, #1
 800ee84:	4638      	mov	r0, r7
 800ee86:	f000 ff07 	bl	800fc98 <_strtol_r>
 800ee8a:	9b03      	ldr	r3, [sp, #12]
 800ee8c:	9d04      	ldr	r5, [sp, #16]
 800ee8e:	1ac2      	subs	r2, r0, r3
 800ee90:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ee94:	429d      	cmp	r5, r3
 800ee96:	bf28      	it	cs
 800ee98:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800ee9c:	490f      	ldr	r1, [pc, #60]	; (800eedc <_scanf_float+0x3c0>)
 800ee9e:	4628      	mov	r0, r5
 800eea0:	f000 f83c 	bl	800ef1c <siprintf>
 800eea4:	e7aa      	b.n	800edfc <_scanf_float+0x2e0>
 800eea6:	f015 0504 	ands.w	r5, r5, #4
 800eeaa:	d1b8      	bne.n	800ee1e <_scanf_float+0x302>
 800eeac:	681f      	ldr	r7, [r3, #0]
 800eeae:	ee10 2a10 	vmov	r2, s0
 800eeb2:	464b      	mov	r3, r9
 800eeb4:	ee10 0a10 	vmov	r0, s0
 800eeb8:	4649      	mov	r1, r9
 800eeba:	f7f1 fe37 	bl	8000b2c <__aeabi_dcmpun>
 800eebe:	b128      	cbz	r0, 800eecc <_scanf_float+0x3b0>
 800eec0:	4628      	mov	r0, r5
 800eec2:	f000 f825 	bl	800ef10 <nanf>
 800eec6:	ed87 0a00 	vstr	s0, [r7]
 800eeca:	e7ab      	b.n	800ee24 <_scanf_float+0x308>
 800eecc:	4640      	mov	r0, r8
 800eece:	4649      	mov	r1, r9
 800eed0:	f7f1 fe8a 	bl	8000be8 <__aeabi_d2f>
 800eed4:	6038      	str	r0, [r7, #0]
 800eed6:	e7a5      	b.n	800ee24 <_scanf_float+0x308>
 800eed8:	2600      	movs	r6, #0
 800eeda:	e666      	b.n	800ebaa <_scanf_float+0x8e>
 800eedc:	08012cb8 	.word	0x08012cb8

0800eee0 <iprintf>:
 800eee0:	b40f      	push	{r0, r1, r2, r3}
 800eee2:	4b0a      	ldr	r3, [pc, #40]	; (800ef0c <iprintf+0x2c>)
 800eee4:	b513      	push	{r0, r1, r4, lr}
 800eee6:	681c      	ldr	r4, [r3, #0]
 800eee8:	b124      	cbz	r4, 800eef4 <iprintf+0x14>
 800eeea:	69a3      	ldr	r3, [r4, #24]
 800eeec:	b913      	cbnz	r3, 800eef4 <iprintf+0x14>
 800eeee:	4620      	mov	r0, r4
 800eef0:	f001 fd6a 	bl	80109c8 <__sinit>
 800eef4:	ab05      	add	r3, sp, #20
 800eef6:	9a04      	ldr	r2, [sp, #16]
 800eef8:	68a1      	ldr	r1, [r4, #8]
 800eefa:	9301      	str	r3, [sp, #4]
 800eefc:	4620      	mov	r0, r4
 800eefe:	f002 ff73 	bl	8011de8 <_vfiprintf_r>
 800ef02:	b002      	add	sp, #8
 800ef04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ef08:	b004      	add	sp, #16
 800ef0a:	4770      	bx	lr
 800ef0c:	20000048 	.word	0x20000048

0800ef10 <nanf>:
 800ef10:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ef18 <nanf+0x8>
 800ef14:	4770      	bx	lr
 800ef16:	bf00      	nop
 800ef18:	7fc00000 	.word	0x7fc00000

0800ef1c <siprintf>:
 800ef1c:	b40e      	push	{r1, r2, r3}
 800ef1e:	b500      	push	{lr}
 800ef20:	b09c      	sub	sp, #112	; 0x70
 800ef22:	ab1d      	add	r3, sp, #116	; 0x74
 800ef24:	9002      	str	r0, [sp, #8]
 800ef26:	9006      	str	r0, [sp, #24]
 800ef28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef2c:	4809      	ldr	r0, [pc, #36]	; (800ef54 <siprintf+0x38>)
 800ef2e:	9107      	str	r1, [sp, #28]
 800ef30:	9104      	str	r1, [sp, #16]
 800ef32:	4909      	ldr	r1, [pc, #36]	; (800ef58 <siprintf+0x3c>)
 800ef34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef38:	9105      	str	r1, [sp, #20]
 800ef3a:	6800      	ldr	r0, [r0, #0]
 800ef3c:	9301      	str	r3, [sp, #4]
 800ef3e:	a902      	add	r1, sp, #8
 800ef40:	f002 fe30 	bl	8011ba4 <_svfiprintf_r>
 800ef44:	9b02      	ldr	r3, [sp, #8]
 800ef46:	2200      	movs	r2, #0
 800ef48:	701a      	strb	r2, [r3, #0]
 800ef4a:	b01c      	add	sp, #112	; 0x70
 800ef4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef50:	b003      	add	sp, #12
 800ef52:	4770      	bx	lr
 800ef54:	20000048 	.word	0x20000048
 800ef58:	ffff0208 	.word	0xffff0208

0800ef5c <sulp>:
 800ef5c:	b570      	push	{r4, r5, r6, lr}
 800ef5e:	4604      	mov	r4, r0
 800ef60:	460d      	mov	r5, r1
 800ef62:	ec45 4b10 	vmov	d0, r4, r5
 800ef66:	4616      	mov	r6, r2
 800ef68:	f002 fbd8 	bl	801171c <__ulp>
 800ef6c:	ec51 0b10 	vmov	r0, r1, d0
 800ef70:	b17e      	cbz	r6, 800ef92 <sulp+0x36>
 800ef72:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ef76:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	dd09      	ble.n	800ef92 <sulp+0x36>
 800ef7e:	051b      	lsls	r3, r3, #20
 800ef80:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ef84:	2400      	movs	r4, #0
 800ef86:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ef8a:	4622      	mov	r2, r4
 800ef8c:	462b      	mov	r3, r5
 800ef8e:	f7f1 fb33 	bl	80005f8 <__aeabi_dmul>
 800ef92:	bd70      	pop	{r4, r5, r6, pc}
 800ef94:	0000      	movs	r0, r0
	...

0800ef98 <_strtod_l>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	461f      	mov	r7, r3
 800ef9e:	b0a1      	sub	sp, #132	; 0x84
 800efa0:	2300      	movs	r3, #0
 800efa2:	4681      	mov	r9, r0
 800efa4:	4638      	mov	r0, r7
 800efa6:	460e      	mov	r6, r1
 800efa8:	9217      	str	r2, [sp, #92]	; 0x5c
 800efaa:	931c      	str	r3, [sp, #112]	; 0x70
 800efac:	f002 f8bf 	bl	801112e <__localeconv_l>
 800efb0:	4680      	mov	r8, r0
 800efb2:	6800      	ldr	r0, [r0, #0]
 800efb4:	f7f1 f90c 	bl	80001d0 <strlen>
 800efb8:	f04f 0a00 	mov.w	sl, #0
 800efbc:	4604      	mov	r4, r0
 800efbe:	f04f 0b00 	mov.w	fp, #0
 800efc2:	961b      	str	r6, [sp, #108]	; 0x6c
 800efc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800efc6:	781a      	ldrb	r2, [r3, #0]
 800efc8:	2a0d      	cmp	r2, #13
 800efca:	d832      	bhi.n	800f032 <_strtod_l+0x9a>
 800efcc:	2a09      	cmp	r2, #9
 800efce:	d236      	bcs.n	800f03e <_strtod_l+0xa6>
 800efd0:	2a00      	cmp	r2, #0
 800efd2:	d03e      	beq.n	800f052 <_strtod_l+0xba>
 800efd4:	2300      	movs	r3, #0
 800efd6:	930d      	str	r3, [sp, #52]	; 0x34
 800efd8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800efda:	782b      	ldrb	r3, [r5, #0]
 800efdc:	2b30      	cmp	r3, #48	; 0x30
 800efde:	f040 80ac 	bne.w	800f13a <_strtod_l+0x1a2>
 800efe2:	786b      	ldrb	r3, [r5, #1]
 800efe4:	2b58      	cmp	r3, #88	; 0x58
 800efe6:	d001      	beq.n	800efec <_strtod_l+0x54>
 800efe8:	2b78      	cmp	r3, #120	; 0x78
 800efea:	d167      	bne.n	800f0bc <_strtod_l+0x124>
 800efec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efee:	9301      	str	r3, [sp, #4]
 800eff0:	ab1c      	add	r3, sp, #112	; 0x70
 800eff2:	9300      	str	r3, [sp, #0]
 800eff4:	9702      	str	r7, [sp, #8]
 800eff6:	ab1d      	add	r3, sp, #116	; 0x74
 800eff8:	4a88      	ldr	r2, [pc, #544]	; (800f21c <_strtod_l+0x284>)
 800effa:	a91b      	add	r1, sp, #108	; 0x6c
 800effc:	4648      	mov	r0, r9
 800effe:	f001 fdbc 	bl	8010b7a <__gethex>
 800f002:	f010 0407 	ands.w	r4, r0, #7
 800f006:	4606      	mov	r6, r0
 800f008:	d005      	beq.n	800f016 <_strtod_l+0x7e>
 800f00a:	2c06      	cmp	r4, #6
 800f00c:	d12b      	bne.n	800f066 <_strtod_l+0xce>
 800f00e:	3501      	adds	r5, #1
 800f010:	2300      	movs	r3, #0
 800f012:	951b      	str	r5, [sp, #108]	; 0x6c
 800f014:	930d      	str	r3, [sp, #52]	; 0x34
 800f016:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f018:	2b00      	cmp	r3, #0
 800f01a:	f040 859a 	bne.w	800fb52 <_strtod_l+0xbba>
 800f01e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f020:	b1e3      	cbz	r3, 800f05c <_strtod_l+0xc4>
 800f022:	4652      	mov	r2, sl
 800f024:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f028:	ec43 2b10 	vmov	d0, r2, r3
 800f02c:	b021      	add	sp, #132	; 0x84
 800f02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f032:	2a2b      	cmp	r2, #43	; 0x2b
 800f034:	d015      	beq.n	800f062 <_strtod_l+0xca>
 800f036:	2a2d      	cmp	r2, #45	; 0x2d
 800f038:	d004      	beq.n	800f044 <_strtod_l+0xac>
 800f03a:	2a20      	cmp	r2, #32
 800f03c:	d1ca      	bne.n	800efd4 <_strtod_l+0x3c>
 800f03e:	3301      	adds	r3, #1
 800f040:	931b      	str	r3, [sp, #108]	; 0x6c
 800f042:	e7bf      	b.n	800efc4 <_strtod_l+0x2c>
 800f044:	2201      	movs	r2, #1
 800f046:	920d      	str	r2, [sp, #52]	; 0x34
 800f048:	1c5a      	adds	r2, r3, #1
 800f04a:	921b      	str	r2, [sp, #108]	; 0x6c
 800f04c:	785b      	ldrb	r3, [r3, #1]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d1c2      	bne.n	800efd8 <_strtod_l+0x40>
 800f052:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f054:	961b      	str	r6, [sp, #108]	; 0x6c
 800f056:	2b00      	cmp	r3, #0
 800f058:	f040 8579 	bne.w	800fb4e <_strtod_l+0xbb6>
 800f05c:	4652      	mov	r2, sl
 800f05e:	465b      	mov	r3, fp
 800f060:	e7e2      	b.n	800f028 <_strtod_l+0x90>
 800f062:	2200      	movs	r2, #0
 800f064:	e7ef      	b.n	800f046 <_strtod_l+0xae>
 800f066:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f068:	b13a      	cbz	r2, 800f07a <_strtod_l+0xe2>
 800f06a:	2135      	movs	r1, #53	; 0x35
 800f06c:	a81e      	add	r0, sp, #120	; 0x78
 800f06e:	f002 fc4d 	bl	801190c <__copybits>
 800f072:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f074:	4648      	mov	r0, r9
 800f076:	f002 f8b9 	bl	80111ec <_Bfree>
 800f07a:	3c01      	subs	r4, #1
 800f07c:	2c04      	cmp	r4, #4
 800f07e:	d806      	bhi.n	800f08e <_strtod_l+0xf6>
 800f080:	e8df f004 	tbb	[pc, r4]
 800f084:	1714030a 	.word	0x1714030a
 800f088:	0a          	.byte	0x0a
 800f089:	00          	.byte	0x00
 800f08a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800f08e:	0730      	lsls	r0, r6, #28
 800f090:	d5c1      	bpl.n	800f016 <_strtod_l+0x7e>
 800f092:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800f096:	e7be      	b.n	800f016 <_strtod_l+0x7e>
 800f098:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800f09c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f09e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800f0a2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f0a6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800f0aa:	e7f0      	b.n	800f08e <_strtod_l+0xf6>
 800f0ac:	f8df b170 	ldr.w	fp, [pc, #368]	; 800f220 <_strtod_l+0x288>
 800f0b0:	e7ed      	b.n	800f08e <_strtod_l+0xf6>
 800f0b2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800f0b6:	f04f 3aff 	mov.w	sl, #4294967295
 800f0ba:	e7e8      	b.n	800f08e <_strtod_l+0xf6>
 800f0bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f0be:	1c5a      	adds	r2, r3, #1
 800f0c0:	921b      	str	r2, [sp, #108]	; 0x6c
 800f0c2:	785b      	ldrb	r3, [r3, #1]
 800f0c4:	2b30      	cmp	r3, #48	; 0x30
 800f0c6:	d0f9      	beq.n	800f0bc <_strtod_l+0x124>
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d0a4      	beq.n	800f016 <_strtod_l+0x7e>
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	2500      	movs	r5, #0
 800f0d0:	9306      	str	r3, [sp, #24]
 800f0d2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f0d4:	9308      	str	r3, [sp, #32]
 800f0d6:	9507      	str	r5, [sp, #28]
 800f0d8:	9505      	str	r5, [sp, #20]
 800f0da:	220a      	movs	r2, #10
 800f0dc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800f0de:	7807      	ldrb	r7, [r0, #0]
 800f0e0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800f0e4:	b2d9      	uxtb	r1, r3
 800f0e6:	2909      	cmp	r1, #9
 800f0e8:	d929      	bls.n	800f13e <_strtod_l+0x1a6>
 800f0ea:	4622      	mov	r2, r4
 800f0ec:	f8d8 1000 	ldr.w	r1, [r8]
 800f0f0:	f002 ffe3 	bl	80120ba <strncmp>
 800f0f4:	2800      	cmp	r0, #0
 800f0f6:	d031      	beq.n	800f15c <_strtod_l+0x1c4>
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	9c05      	ldr	r4, [sp, #20]
 800f0fc:	9004      	str	r0, [sp, #16]
 800f0fe:	463b      	mov	r3, r7
 800f100:	4602      	mov	r2, r0
 800f102:	2b65      	cmp	r3, #101	; 0x65
 800f104:	d001      	beq.n	800f10a <_strtod_l+0x172>
 800f106:	2b45      	cmp	r3, #69	; 0x45
 800f108:	d114      	bne.n	800f134 <_strtod_l+0x19c>
 800f10a:	b924      	cbnz	r4, 800f116 <_strtod_l+0x17e>
 800f10c:	b910      	cbnz	r0, 800f114 <_strtod_l+0x17c>
 800f10e:	9b06      	ldr	r3, [sp, #24]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d09e      	beq.n	800f052 <_strtod_l+0xba>
 800f114:	2400      	movs	r4, #0
 800f116:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800f118:	1c73      	adds	r3, r6, #1
 800f11a:	931b      	str	r3, [sp, #108]	; 0x6c
 800f11c:	7873      	ldrb	r3, [r6, #1]
 800f11e:	2b2b      	cmp	r3, #43	; 0x2b
 800f120:	d078      	beq.n	800f214 <_strtod_l+0x27c>
 800f122:	2b2d      	cmp	r3, #45	; 0x2d
 800f124:	d070      	beq.n	800f208 <_strtod_l+0x270>
 800f126:	f04f 0c00 	mov.w	ip, #0
 800f12a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800f12e:	2f09      	cmp	r7, #9
 800f130:	d97c      	bls.n	800f22c <_strtod_l+0x294>
 800f132:	961b      	str	r6, [sp, #108]	; 0x6c
 800f134:	f04f 0e00 	mov.w	lr, #0
 800f138:	e09a      	b.n	800f270 <_strtod_l+0x2d8>
 800f13a:	2300      	movs	r3, #0
 800f13c:	e7c7      	b.n	800f0ce <_strtod_l+0x136>
 800f13e:	9905      	ldr	r1, [sp, #20]
 800f140:	2908      	cmp	r1, #8
 800f142:	bfdd      	ittte	le
 800f144:	9907      	ldrle	r1, [sp, #28]
 800f146:	fb02 3301 	mlale	r3, r2, r1, r3
 800f14a:	9307      	strle	r3, [sp, #28]
 800f14c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800f150:	9b05      	ldr	r3, [sp, #20]
 800f152:	3001      	adds	r0, #1
 800f154:	3301      	adds	r3, #1
 800f156:	9305      	str	r3, [sp, #20]
 800f158:	901b      	str	r0, [sp, #108]	; 0x6c
 800f15a:	e7bf      	b.n	800f0dc <_strtod_l+0x144>
 800f15c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f15e:	191a      	adds	r2, r3, r4
 800f160:	921b      	str	r2, [sp, #108]	; 0x6c
 800f162:	9a05      	ldr	r2, [sp, #20]
 800f164:	5d1b      	ldrb	r3, [r3, r4]
 800f166:	2a00      	cmp	r2, #0
 800f168:	d037      	beq.n	800f1da <_strtod_l+0x242>
 800f16a:	9c05      	ldr	r4, [sp, #20]
 800f16c:	4602      	mov	r2, r0
 800f16e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f172:	2909      	cmp	r1, #9
 800f174:	d913      	bls.n	800f19e <_strtod_l+0x206>
 800f176:	2101      	movs	r1, #1
 800f178:	9104      	str	r1, [sp, #16]
 800f17a:	e7c2      	b.n	800f102 <_strtod_l+0x16a>
 800f17c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f17e:	1c5a      	adds	r2, r3, #1
 800f180:	921b      	str	r2, [sp, #108]	; 0x6c
 800f182:	785b      	ldrb	r3, [r3, #1]
 800f184:	3001      	adds	r0, #1
 800f186:	2b30      	cmp	r3, #48	; 0x30
 800f188:	d0f8      	beq.n	800f17c <_strtod_l+0x1e4>
 800f18a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800f18e:	2a08      	cmp	r2, #8
 800f190:	f200 84e4 	bhi.w	800fb5c <_strtod_l+0xbc4>
 800f194:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800f196:	9208      	str	r2, [sp, #32]
 800f198:	4602      	mov	r2, r0
 800f19a:	2000      	movs	r0, #0
 800f19c:	4604      	mov	r4, r0
 800f19e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800f1a2:	f100 0101 	add.w	r1, r0, #1
 800f1a6:	d012      	beq.n	800f1ce <_strtod_l+0x236>
 800f1a8:	440a      	add	r2, r1
 800f1aa:	eb00 0c04 	add.w	ip, r0, r4
 800f1ae:	4621      	mov	r1, r4
 800f1b0:	270a      	movs	r7, #10
 800f1b2:	458c      	cmp	ip, r1
 800f1b4:	d113      	bne.n	800f1de <_strtod_l+0x246>
 800f1b6:	1821      	adds	r1, r4, r0
 800f1b8:	2908      	cmp	r1, #8
 800f1ba:	f104 0401 	add.w	r4, r4, #1
 800f1be:	4404      	add	r4, r0
 800f1c0:	dc19      	bgt.n	800f1f6 <_strtod_l+0x25e>
 800f1c2:	9b07      	ldr	r3, [sp, #28]
 800f1c4:	210a      	movs	r1, #10
 800f1c6:	fb01 e303 	mla	r3, r1, r3, lr
 800f1ca:	9307      	str	r3, [sp, #28]
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f1d0:	1c58      	adds	r0, r3, #1
 800f1d2:	901b      	str	r0, [sp, #108]	; 0x6c
 800f1d4:	785b      	ldrb	r3, [r3, #1]
 800f1d6:	4608      	mov	r0, r1
 800f1d8:	e7c9      	b.n	800f16e <_strtod_l+0x1d6>
 800f1da:	9805      	ldr	r0, [sp, #20]
 800f1dc:	e7d3      	b.n	800f186 <_strtod_l+0x1ee>
 800f1de:	2908      	cmp	r1, #8
 800f1e0:	f101 0101 	add.w	r1, r1, #1
 800f1e4:	dc03      	bgt.n	800f1ee <_strtod_l+0x256>
 800f1e6:	9b07      	ldr	r3, [sp, #28]
 800f1e8:	437b      	muls	r3, r7
 800f1ea:	9307      	str	r3, [sp, #28]
 800f1ec:	e7e1      	b.n	800f1b2 <_strtod_l+0x21a>
 800f1ee:	2910      	cmp	r1, #16
 800f1f0:	bfd8      	it	le
 800f1f2:	437d      	mulle	r5, r7
 800f1f4:	e7dd      	b.n	800f1b2 <_strtod_l+0x21a>
 800f1f6:	2c10      	cmp	r4, #16
 800f1f8:	bfdc      	itt	le
 800f1fa:	210a      	movle	r1, #10
 800f1fc:	fb01 e505 	mlale	r5, r1, r5, lr
 800f200:	e7e4      	b.n	800f1cc <_strtod_l+0x234>
 800f202:	2301      	movs	r3, #1
 800f204:	9304      	str	r3, [sp, #16]
 800f206:	e781      	b.n	800f10c <_strtod_l+0x174>
 800f208:	f04f 0c01 	mov.w	ip, #1
 800f20c:	1cb3      	adds	r3, r6, #2
 800f20e:	931b      	str	r3, [sp, #108]	; 0x6c
 800f210:	78b3      	ldrb	r3, [r6, #2]
 800f212:	e78a      	b.n	800f12a <_strtod_l+0x192>
 800f214:	f04f 0c00 	mov.w	ip, #0
 800f218:	e7f8      	b.n	800f20c <_strtod_l+0x274>
 800f21a:	bf00      	nop
 800f21c:	08012cc0 	.word	0x08012cc0
 800f220:	7ff00000 	.word	0x7ff00000
 800f224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f226:	1c5f      	adds	r7, r3, #1
 800f228:	971b      	str	r7, [sp, #108]	; 0x6c
 800f22a:	785b      	ldrb	r3, [r3, #1]
 800f22c:	2b30      	cmp	r3, #48	; 0x30
 800f22e:	d0f9      	beq.n	800f224 <_strtod_l+0x28c>
 800f230:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800f234:	2f08      	cmp	r7, #8
 800f236:	f63f af7d 	bhi.w	800f134 <_strtod_l+0x19c>
 800f23a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800f23e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f240:	930a      	str	r3, [sp, #40]	; 0x28
 800f242:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f244:	1c5f      	adds	r7, r3, #1
 800f246:	971b      	str	r7, [sp, #108]	; 0x6c
 800f248:	785b      	ldrb	r3, [r3, #1]
 800f24a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800f24e:	f1b8 0f09 	cmp.w	r8, #9
 800f252:	d937      	bls.n	800f2c4 <_strtod_l+0x32c>
 800f254:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f256:	1a7f      	subs	r7, r7, r1
 800f258:	2f08      	cmp	r7, #8
 800f25a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800f25e:	dc37      	bgt.n	800f2d0 <_strtod_l+0x338>
 800f260:	45be      	cmp	lr, r7
 800f262:	bfa8      	it	ge
 800f264:	46be      	movge	lr, r7
 800f266:	f1bc 0f00 	cmp.w	ip, #0
 800f26a:	d001      	beq.n	800f270 <_strtod_l+0x2d8>
 800f26c:	f1ce 0e00 	rsb	lr, lr, #0
 800f270:	2c00      	cmp	r4, #0
 800f272:	d151      	bne.n	800f318 <_strtod_l+0x380>
 800f274:	2800      	cmp	r0, #0
 800f276:	f47f aece 	bne.w	800f016 <_strtod_l+0x7e>
 800f27a:	9a06      	ldr	r2, [sp, #24]
 800f27c:	2a00      	cmp	r2, #0
 800f27e:	f47f aeca 	bne.w	800f016 <_strtod_l+0x7e>
 800f282:	9a04      	ldr	r2, [sp, #16]
 800f284:	2a00      	cmp	r2, #0
 800f286:	f47f aee4 	bne.w	800f052 <_strtod_l+0xba>
 800f28a:	2b4e      	cmp	r3, #78	; 0x4e
 800f28c:	d027      	beq.n	800f2de <_strtod_l+0x346>
 800f28e:	dc21      	bgt.n	800f2d4 <_strtod_l+0x33c>
 800f290:	2b49      	cmp	r3, #73	; 0x49
 800f292:	f47f aede 	bne.w	800f052 <_strtod_l+0xba>
 800f296:	49a0      	ldr	r1, [pc, #640]	; (800f518 <_strtod_l+0x580>)
 800f298:	a81b      	add	r0, sp, #108	; 0x6c
 800f29a:	f001 fea1 	bl	8010fe0 <__match>
 800f29e:	2800      	cmp	r0, #0
 800f2a0:	f43f aed7 	beq.w	800f052 <_strtod_l+0xba>
 800f2a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f2a6:	499d      	ldr	r1, [pc, #628]	; (800f51c <_strtod_l+0x584>)
 800f2a8:	3b01      	subs	r3, #1
 800f2aa:	a81b      	add	r0, sp, #108	; 0x6c
 800f2ac:	931b      	str	r3, [sp, #108]	; 0x6c
 800f2ae:	f001 fe97 	bl	8010fe0 <__match>
 800f2b2:	b910      	cbnz	r0, 800f2ba <_strtod_l+0x322>
 800f2b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f2b6:	3301      	adds	r3, #1
 800f2b8:	931b      	str	r3, [sp, #108]	; 0x6c
 800f2ba:	f8df b274 	ldr.w	fp, [pc, #628]	; 800f530 <_strtod_l+0x598>
 800f2be:	f04f 0a00 	mov.w	sl, #0
 800f2c2:	e6a8      	b.n	800f016 <_strtod_l+0x7e>
 800f2c4:	210a      	movs	r1, #10
 800f2c6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800f2ca:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f2ce:	e7b8      	b.n	800f242 <_strtod_l+0x2aa>
 800f2d0:	46be      	mov	lr, r7
 800f2d2:	e7c8      	b.n	800f266 <_strtod_l+0x2ce>
 800f2d4:	2b69      	cmp	r3, #105	; 0x69
 800f2d6:	d0de      	beq.n	800f296 <_strtod_l+0x2fe>
 800f2d8:	2b6e      	cmp	r3, #110	; 0x6e
 800f2da:	f47f aeba 	bne.w	800f052 <_strtod_l+0xba>
 800f2de:	4990      	ldr	r1, [pc, #576]	; (800f520 <_strtod_l+0x588>)
 800f2e0:	a81b      	add	r0, sp, #108	; 0x6c
 800f2e2:	f001 fe7d 	bl	8010fe0 <__match>
 800f2e6:	2800      	cmp	r0, #0
 800f2e8:	f43f aeb3 	beq.w	800f052 <_strtod_l+0xba>
 800f2ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f2ee:	781b      	ldrb	r3, [r3, #0]
 800f2f0:	2b28      	cmp	r3, #40	; 0x28
 800f2f2:	d10e      	bne.n	800f312 <_strtod_l+0x37a>
 800f2f4:	aa1e      	add	r2, sp, #120	; 0x78
 800f2f6:	498b      	ldr	r1, [pc, #556]	; (800f524 <_strtod_l+0x58c>)
 800f2f8:	a81b      	add	r0, sp, #108	; 0x6c
 800f2fa:	f001 fe85 	bl	8011008 <__hexnan>
 800f2fe:	2805      	cmp	r0, #5
 800f300:	d107      	bne.n	800f312 <_strtod_l+0x37a>
 800f302:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f304:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800f308:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f30c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f310:	e681      	b.n	800f016 <_strtod_l+0x7e>
 800f312:	f8df b224 	ldr.w	fp, [pc, #548]	; 800f538 <_strtod_l+0x5a0>
 800f316:	e7d2      	b.n	800f2be <_strtod_l+0x326>
 800f318:	ebae 0302 	sub.w	r3, lr, r2
 800f31c:	9306      	str	r3, [sp, #24]
 800f31e:	9b05      	ldr	r3, [sp, #20]
 800f320:	9807      	ldr	r0, [sp, #28]
 800f322:	2b00      	cmp	r3, #0
 800f324:	bf08      	it	eq
 800f326:	4623      	moveq	r3, r4
 800f328:	2c10      	cmp	r4, #16
 800f32a:	9305      	str	r3, [sp, #20]
 800f32c:	46a0      	mov	r8, r4
 800f32e:	bfa8      	it	ge
 800f330:	f04f 0810 	movge.w	r8, #16
 800f334:	f7f1 f8e6 	bl	8000504 <__aeabi_ui2d>
 800f338:	2c09      	cmp	r4, #9
 800f33a:	4682      	mov	sl, r0
 800f33c:	468b      	mov	fp, r1
 800f33e:	dc13      	bgt.n	800f368 <_strtod_l+0x3d0>
 800f340:	9b06      	ldr	r3, [sp, #24]
 800f342:	2b00      	cmp	r3, #0
 800f344:	f43f ae67 	beq.w	800f016 <_strtod_l+0x7e>
 800f348:	9b06      	ldr	r3, [sp, #24]
 800f34a:	dd7a      	ble.n	800f442 <_strtod_l+0x4aa>
 800f34c:	2b16      	cmp	r3, #22
 800f34e:	dc61      	bgt.n	800f414 <_strtod_l+0x47c>
 800f350:	4a75      	ldr	r2, [pc, #468]	; (800f528 <_strtod_l+0x590>)
 800f352:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800f356:	e9de 0100 	ldrd	r0, r1, [lr]
 800f35a:	4652      	mov	r2, sl
 800f35c:	465b      	mov	r3, fp
 800f35e:	f7f1 f94b 	bl	80005f8 <__aeabi_dmul>
 800f362:	4682      	mov	sl, r0
 800f364:	468b      	mov	fp, r1
 800f366:	e656      	b.n	800f016 <_strtod_l+0x7e>
 800f368:	4b6f      	ldr	r3, [pc, #444]	; (800f528 <_strtod_l+0x590>)
 800f36a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f36e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f372:	f7f1 f941 	bl	80005f8 <__aeabi_dmul>
 800f376:	4606      	mov	r6, r0
 800f378:	4628      	mov	r0, r5
 800f37a:	460f      	mov	r7, r1
 800f37c:	f7f1 f8c2 	bl	8000504 <__aeabi_ui2d>
 800f380:	4602      	mov	r2, r0
 800f382:	460b      	mov	r3, r1
 800f384:	4630      	mov	r0, r6
 800f386:	4639      	mov	r1, r7
 800f388:	f7f0 ff80 	bl	800028c <__adddf3>
 800f38c:	2c0f      	cmp	r4, #15
 800f38e:	4682      	mov	sl, r0
 800f390:	468b      	mov	fp, r1
 800f392:	ddd5      	ble.n	800f340 <_strtod_l+0x3a8>
 800f394:	9b06      	ldr	r3, [sp, #24]
 800f396:	eba4 0808 	sub.w	r8, r4, r8
 800f39a:	4498      	add	r8, r3
 800f39c:	f1b8 0f00 	cmp.w	r8, #0
 800f3a0:	f340 8096 	ble.w	800f4d0 <_strtod_l+0x538>
 800f3a4:	f018 030f 	ands.w	r3, r8, #15
 800f3a8:	d00a      	beq.n	800f3c0 <_strtod_l+0x428>
 800f3aa:	495f      	ldr	r1, [pc, #380]	; (800f528 <_strtod_l+0x590>)
 800f3ac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f3b0:	4652      	mov	r2, sl
 800f3b2:	465b      	mov	r3, fp
 800f3b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3b8:	f7f1 f91e 	bl	80005f8 <__aeabi_dmul>
 800f3bc:	4682      	mov	sl, r0
 800f3be:	468b      	mov	fp, r1
 800f3c0:	f038 080f 	bics.w	r8, r8, #15
 800f3c4:	d073      	beq.n	800f4ae <_strtod_l+0x516>
 800f3c6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f3ca:	dd47      	ble.n	800f45c <_strtod_l+0x4c4>
 800f3cc:	2400      	movs	r4, #0
 800f3ce:	46a0      	mov	r8, r4
 800f3d0:	9407      	str	r4, [sp, #28]
 800f3d2:	9405      	str	r4, [sp, #20]
 800f3d4:	2322      	movs	r3, #34	; 0x22
 800f3d6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800f530 <_strtod_l+0x598>
 800f3da:	f8c9 3000 	str.w	r3, [r9]
 800f3de:	f04f 0a00 	mov.w	sl, #0
 800f3e2:	9b07      	ldr	r3, [sp, #28]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	f43f ae16 	beq.w	800f016 <_strtod_l+0x7e>
 800f3ea:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f3ec:	4648      	mov	r0, r9
 800f3ee:	f001 fefd 	bl	80111ec <_Bfree>
 800f3f2:	9905      	ldr	r1, [sp, #20]
 800f3f4:	4648      	mov	r0, r9
 800f3f6:	f001 fef9 	bl	80111ec <_Bfree>
 800f3fa:	4641      	mov	r1, r8
 800f3fc:	4648      	mov	r0, r9
 800f3fe:	f001 fef5 	bl	80111ec <_Bfree>
 800f402:	9907      	ldr	r1, [sp, #28]
 800f404:	4648      	mov	r0, r9
 800f406:	f001 fef1 	bl	80111ec <_Bfree>
 800f40a:	4621      	mov	r1, r4
 800f40c:	4648      	mov	r0, r9
 800f40e:	f001 feed 	bl	80111ec <_Bfree>
 800f412:	e600      	b.n	800f016 <_strtod_l+0x7e>
 800f414:	9a06      	ldr	r2, [sp, #24]
 800f416:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800f41a:	4293      	cmp	r3, r2
 800f41c:	dbba      	blt.n	800f394 <_strtod_l+0x3fc>
 800f41e:	4d42      	ldr	r5, [pc, #264]	; (800f528 <_strtod_l+0x590>)
 800f420:	f1c4 040f 	rsb	r4, r4, #15
 800f424:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800f428:	4652      	mov	r2, sl
 800f42a:	465b      	mov	r3, fp
 800f42c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f430:	f7f1 f8e2 	bl	80005f8 <__aeabi_dmul>
 800f434:	9b06      	ldr	r3, [sp, #24]
 800f436:	1b1c      	subs	r4, r3, r4
 800f438:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800f43c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f440:	e78d      	b.n	800f35e <_strtod_l+0x3c6>
 800f442:	f113 0f16 	cmn.w	r3, #22
 800f446:	dba5      	blt.n	800f394 <_strtod_l+0x3fc>
 800f448:	4a37      	ldr	r2, [pc, #220]	; (800f528 <_strtod_l+0x590>)
 800f44a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800f44e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800f452:	4650      	mov	r0, sl
 800f454:	4659      	mov	r1, fp
 800f456:	f7f1 f9f9 	bl	800084c <__aeabi_ddiv>
 800f45a:	e782      	b.n	800f362 <_strtod_l+0x3ca>
 800f45c:	2300      	movs	r3, #0
 800f45e:	4e33      	ldr	r6, [pc, #204]	; (800f52c <_strtod_l+0x594>)
 800f460:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f464:	4650      	mov	r0, sl
 800f466:	4659      	mov	r1, fp
 800f468:	461d      	mov	r5, r3
 800f46a:	f1b8 0f01 	cmp.w	r8, #1
 800f46e:	dc21      	bgt.n	800f4b4 <_strtod_l+0x51c>
 800f470:	b10b      	cbz	r3, 800f476 <_strtod_l+0x4de>
 800f472:	4682      	mov	sl, r0
 800f474:	468b      	mov	fp, r1
 800f476:	4b2d      	ldr	r3, [pc, #180]	; (800f52c <_strtod_l+0x594>)
 800f478:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f47c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800f480:	4652      	mov	r2, sl
 800f482:	465b      	mov	r3, fp
 800f484:	e9d5 0100 	ldrd	r0, r1, [r5]
 800f488:	f7f1 f8b6 	bl	80005f8 <__aeabi_dmul>
 800f48c:	4b28      	ldr	r3, [pc, #160]	; (800f530 <_strtod_l+0x598>)
 800f48e:	460a      	mov	r2, r1
 800f490:	400b      	ands	r3, r1
 800f492:	4928      	ldr	r1, [pc, #160]	; (800f534 <_strtod_l+0x59c>)
 800f494:	428b      	cmp	r3, r1
 800f496:	4682      	mov	sl, r0
 800f498:	d898      	bhi.n	800f3cc <_strtod_l+0x434>
 800f49a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f49e:	428b      	cmp	r3, r1
 800f4a0:	bf86      	itte	hi
 800f4a2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800f53c <_strtod_l+0x5a4>
 800f4a6:	f04f 3aff 	movhi.w	sl, #4294967295
 800f4aa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	9304      	str	r3, [sp, #16]
 800f4b2:	e077      	b.n	800f5a4 <_strtod_l+0x60c>
 800f4b4:	f018 0f01 	tst.w	r8, #1
 800f4b8:	d006      	beq.n	800f4c8 <_strtod_l+0x530>
 800f4ba:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800f4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c2:	f7f1 f899 	bl	80005f8 <__aeabi_dmul>
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	3501      	adds	r5, #1
 800f4ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f4ce:	e7cc      	b.n	800f46a <_strtod_l+0x4d2>
 800f4d0:	d0ed      	beq.n	800f4ae <_strtod_l+0x516>
 800f4d2:	f1c8 0800 	rsb	r8, r8, #0
 800f4d6:	f018 020f 	ands.w	r2, r8, #15
 800f4da:	d00a      	beq.n	800f4f2 <_strtod_l+0x55a>
 800f4dc:	4b12      	ldr	r3, [pc, #72]	; (800f528 <_strtod_l+0x590>)
 800f4de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4e2:	4650      	mov	r0, sl
 800f4e4:	4659      	mov	r1, fp
 800f4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ea:	f7f1 f9af 	bl	800084c <__aeabi_ddiv>
 800f4ee:	4682      	mov	sl, r0
 800f4f0:	468b      	mov	fp, r1
 800f4f2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f4f6:	d0da      	beq.n	800f4ae <_strtod_l+0x516>
 800f4f8:	f1b8 0f1f 	cmp.w	r8, #31
 800f4fc:	dd20      	ble.n	800f540 <_strtod_l+0x5a8>
 800f4fe:	2400      	movs	r4, #0
 800f500:	46a0      	mov	r8, r4
 800f502:	9407      	str	r4, [sp, #28]
 800f504:	9405      	str	r4, [sp, #20]
 800f506:	2322      	movs	r3, #34	; 0x22
 800f508:	f04f 0a00 	mov.w	sl, #0
 800f50c:	f04f 0b00 	mov.w	fp, #0
 800f510:	f8c9 3000 	str.w	r3, [r9]
 800f514:	e765      	b.n	800f3e2 <_strtod_l+0x44a>
 800f516:	bf00      	nop
 800f518:	08012c89 	.word	0x08012c89
 800f51c:	08012d13 	.word	0x08012d13
 800f520:	08012c91 	.word	0x08012c91
 800f524:	08012cd4 	.word	0x08012cd4
 800f528:	08012db8 	.word	0x08012db8
 800f52c:	08012d90 	.word	0x08012d90
 800f530:	7ff00000 	.word	0x7ff00000
 800f534:	7ca00000 	.word	0x7ca00000
 800f538:	fff80000 	.word	0xfff80000
 800f53c:	7fefffff 	.word	0x7fefffff
 800f540:	f018 0310 	ands.w	r3, r8, #16
 800f544:	bf18      	it	ne
 800f546:	236a      	movne	r3, #106	; 0x6a
 800f548:	4da0      	ldr	r5, [pc, #640]	; (800f7cc <_strtod_l+0x834>)
 800f54a:	9304      	str	r3, [sp, #16]
 800f54c:	4650      	mov	r0, sl
 800f54e:	4659      	mov	r1, fp
 800f550:	2300      	movs	r3, #0
 800f552:	f1b8 0f00 	cmp.w	r8, #0
 800f556:	f300 810a 	bgt.w	800f76e <_strtod_l+0x7d6>
 800f55a:	b10b      	cbz	r3, 800f560 <_strtod_l+0x5c8>
 800f55c:	4682      	mov	sl, r0
 800f55e:	468b      	mov	fp, r1
 800f560:	9b04      	ldr	r3, [sp, #16]
 800f562:	b1bb      	cbz	r3, 800f594 <_strtod_l+0x5fc>
 800f564:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800f568:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	4659      	mov	r1, fp
 800f570:	dd10      	ble.n	800f594 <_strtod_l+0x5fc>
 800f572:	2b1f      	cmp	r3, #31
 800f574:	f340 8107 	ble.w	800f786 <_strtod_l+0x7ee>
 800f578:	2b34      	cmp	r3, #52	; 0x34
 800f57a:	bfde      	ittt	le
 800f57c:	3b20      	suble	r3, #32
 800f57e:	f04f 32ff 	movle.w	r2, #4294967295
 800f582:	fa02 f303 	lslle.w	r3, r2, r3
 800f586:	f04f 0a00 	mov.w	sl, #0
 800f58a:	bfcc      	ite	gt
 800f58c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f590:	ea03 0b01 	andle.w	fp, r3, r1
 800f594:	2200      	movs	r2, #0
 800f596:	2300      	movs	r3, #0
 800f598:	4650      	mov	r0, sl
 800f59a:	4659      	mov	r1, fp
 800f59c:	f7f1 fa94 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	d1ac      	bne.n	800f4fe <_strtod_l+0x566>
 800f5a4:	9b07      	ldr	r3, [sp, #28]
 800f5a6:	9300      	str	r3, [sp, #0]
 800f5a8:	9a05      	ldr	r2, [sp, #20]
 800f5aa:	9908      	ldr	r1, [sp, #32]
 800f5ac:	4623      	mov	r3, r4
 800f5ae:	4648      	mov	r0, r9
 800f5b0:	f001 fe6e 	bl	8011290 <__s2b>
 800f5b4:	9007      	str	r0, [sp, #28]
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	f43f af08 	beq.w	800f3cc <_strtod_l+0x434>
 800f5bc:	9a06      	ldr	r2, [sp, #24]
 800f5be:	9b06      	ldr	r3, [sp, #24]
 800f5c0:	2a00      	cmp	r2, #0
 800f5c2:	f1c3 0300 	rsb	r3, r3, #0
 800f5c6:	bfa8      	it	ge
 800f5c8:	2300      	movge	r3, #0
 800f5ca:	930e      	str	r3, [sp, #56]	; 0x38
 800f5cc:	2400      	movs	r4, #0
 800f5ce:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800f5d2:	9316      	str	r3, [sp, #88]	; 0x58
 800f5d4:	46a0      	mov	r8, r4
 800f5d6:	9b07      	ldr	r3, [sp, #28]
 800f5d8:	4648      	mov	r0, r9
 800f5da:	6859      	ldr	r1, [r3, #4]
 800f5dc:	f001 fdd2 	bl	8011184 <_Balloc>
 800f5e0:	9005      	str	r0, [sp, #20]
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	f43f aef6 	beq.w	800f3d4 <_strtod_l+0x43c>
 800f5e8:	9b07      	ldr	r3, [sp, #28]
 800f5ea:	691a      	ldr	r2, [r3, #16]
 800f5ec:	3202      	adds	r2, #2
 800f5ee:	f103 010c 	add.w	r1, r3, #12
 800f5f2:	0092      	lsls	r2, r2, #2
 800f5f4:	300c      	adds	r0, #12
 800f5f6:	f7fe fe21 	bl	800e23c <memcpy>
 800f5fa:	aa1e      	add	r2, sp, #120	; 0x78
 800f5fc:	a91d      	add	r1, sp, #116	; 0x74
 800f5fe:	ec4b ab10 	vmov	d0, sl, fp
 800f602:	4648      	mov	r0, r9
 800f604:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800f608:	f002 f8fe 	bl	8011808 <__d2b>
 800f60c:	901c      	str	r0, [sp, #112]	; 0x70
 800f60e:	2800      	cmp	r0, #0
 800f610:	f43f aee0 	beq.w	800f3d4 <_strtod_l+0x43c>
 800f614:	2101      	movs	r1, #1
 800f616:	4648      	mov	r0, r9
 800f618:	f001 fec6 	bl	80113a8 <__i2b>
 800f61c:	4680      	mov	r8, r0
 800f61e:	2800      	cmp	r0, #0
 800f620:	f43f aed8 	beq.w	800f3d4 <_strtod_l+0x43c>
 800f624:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800f626:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f628:	2e00      	cmp	r6, #0
 800f62a:	bfab      	itete	ge
 800f62c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800f62e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800f630:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800f632:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800f634:	bfac      	ite	ge
 800f636:	18f7      	addge	r7, r6, r3
 800f638:	1b9d      	sublt	r5, r3, r6
 800f63a:	9b04      	ldr	r3, [sp, #16]
 800f63c:	1af6      	subs	r6, r6, r3
 800f63e:	4416      	add	r6, r2
 800f640:	4b63      	ldr	r3, [pc, #396]	; (800f7d0 <_strtod_l+0x838>)
 800f642:	3e01      	subs	r6, #1
 800f644:	429e      	cmp	r6, r3
 800f646:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f64a:	f280 80af 	bge.w	800f7ac <_strtod_l+0x814>
 800f64e:	1b9b      	subs	r3, r3, r6
 800f650:	2b1f      	cmp	r3, #31
 800f652:	eba2 0203 	sub.w	r2, r2, r3
 800f656:	f04f 0101 	mov.w	r1, #1
 800f65a:	f300 809b 	bgt.w	800f794 <_strtod_l+0x7fc>
 800f65e:	fa01 f303 	lsl.w	r3, r1, r3
 800f662:	930f      	str	r3, [sp, #60]	; 0x3c
 800f664:	2300      	movs	r3, #0
 800f666:	930a      	str	r3, [sp, #40]	; 0x28
 800f668:	18be      	adds	r6, r7, r2
 800f66a:	9b04      	ldr	r3, [sp, #16]
 800f66c:	42b7      	cmp	r7, r6
 800f66e:	4415      	add	r5, r2
 800f670:	441d      	add	r5, r3
 800f672:	463b      	mov	r3, r7
 800f674:	bfa8      	it	ge
 800f676:	4633      	movge	r3, r6
 800f678:	42ab      	cmp	r3, r5
 800f67a:	bfa8      	it	ge
 800f67c:	462b      	movge	r3, r5
 800f67e:	2b00      	cmp	r3, #0
 800f680:	bfc2      	ittt	gt
 800f682:	1af6      	subgt	r6, r6, r3
 800f684:	1aed      	subgt	r5, r5, r3
 800f686:	1aff      	subgt	r7, r7, r3
 800f688:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f68a:	b1bb      	cbz	r3, 800f6bc <_strtod_l+0x724>
 800f68c:	4641      	mov	r1, r8
 800f68e:	461a      	mov	r2, r3
 800f690:	4648      	mov	r0, r9
 800f692:	f001 ff29 	bl	80114e8 <__pow5mult>
 800f696:	4680      	mov	r8, r0
 800f698:	2800      	cmp	r0, #0
 800f69a:	f43f ae9b 	beq.w	800f3d4 <_strtod_l+0x43c>
 800f69e:	4601      	mov	r1, r0
 800f6a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f6a2:	4648      	mov	r0, r9
 800f6a4:	f001 fe89 	bl	80113ba <__multiply>
 800f6a8:	900c      	str	r0, [sp, #48]	; 0x30
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	f43f ae92 	beq.w	800f3d4 <_strtod_l+0x43c>
 800f6b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f6b2:	4648      	mov	r0, r9
 800f6b4:	f001 fd9a 	bl	80111ec <_Bfree>
 800f6b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6ba:	931c      	str	r3, [sp, #112]	; 0x70
 800f6bc:	2e00      	cmp	r6, #0
 800f6be:	dc7a      	bgt.n	800f7b6 <_strtod_l+0x81e>
 800f6c0:	9b06      	ldr	r3, [sp, #24]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	dd08      	ble.n	800f6d8 <_strtod_l+0x740>
 800f6c6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800f6c8:	9905      	ldr	r1, [sp, #20]
 800f6ca:	4648      	mov	r0, r9
 800f6cc:	f001 ff0c 	bl	80114e8 <__pow5mult>
 800f6d0:	9005      	str	r0, [sp, #20]
 800f6d2:	2800      	cmp	r0, #0
 800f6d4:	f43f ae7e 	beq.w	800f3d4 <_strtod_l+0x43c>
 800f6d8:	2d00      	cmp	r5, #0
 800f6da:	dd08      	ble.n	800f6ee <_strtod_l+0x756>
 800f6dc:	462a      	mov	r2, r5
 800f6de:	9905      	ldr	r1, [sp, #20]
 800f6e0:	4648      	mov	r0, r9
 800f6e2:	f001 ff4f 	bl	8011584 <__lshift>
 800f6e6:	9005      	str	r0, [sp, #20]
 800f6e8:	2800      	cmp	r0, #0
 800f6ea:	f43f ae73 	beq.w	800f3d4 <_strtod_l+0x43c>
 800f6ee:	2f00      	cmp	r7, #0
 800f6f0:	dd08      	ble.n	800f704 <_strtod_l+0x76c>
 800f6f2:	4641      	mov	r1, r8
 800f6f4:	463a      	mov	r2, r7
 800f6f6:	4648      	mov	r0, r9
 800f6f8:	f001 ff44 	bl	8011584 <__lshift>
 800f6fc:	4680      	mov	r8, r0
 800f6fe:	2800      	cmp	r0, #0
 800f700:	f43f ae68 	beq.w	800f3d4 <_strtod_l+0x43c>
 800f704:	9a05      	ldr	r2, [sp, #20]
 800f706:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f708:	4648      	mov	r0, r9
 800f70a:	f001 ffa9 	bl	8011660 <__mdiff>
 800f70e:	4604      	mov	r4, r0
 800f710:	2800      	cmp	r0, #0
 800f712:	f43f ae5f 	beq.w	800f3d4 <_strtod_l+0x43c>
 800f716:	68c3      	ldr	r3, [r0, #12]
 800f718:	930c      	str	r3, [sp, #48]	; 0x30
 800f71a:	2300      	movs	r3, #0
 800f71c:	60c3      	str	r3, [r0, #12]
 800f71e:	4641      	mov	r1, r8
 800f720:	f001 ff84 	bl	801162c <__mcmp>
 800f724:	2800      	cmp	r0, #0
 800f726:	da55      	bge.n	800f7d4 <_strtod_l+0x83c>
 800f728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f72a:	b9e3      	cbnz	r3, 800f766 <_strtod_l+0x7ce>
 800f72c:	f1ba 0f00 	cmp.w	sl, #0
 800f730:	d119      	bne.n	800f766 <_strtod_l+0x7ce>
 800f732:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f736:	b9b3      	cbnz	r3, 800f766 <_strtod_l+0x7ce>
 800f738:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f73c:	0d1b      	lsrs	r3, r3, #20
 800f73e:	051b      	lsls	r3, r3, #20
 800f740:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f744:	d90f      	bls.n	800f766 <_strtod_l+0x7ce>
 800f746:	6963      	ldr	r3, [r4, #20]
 800f748:	b913      	cbnz	r3, 800f750 <_strtod_l+0x7b8>
 800f74a:	6923      	ldr	r3, [r4, #16]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	dd0a      	ble.n	800f766 <_strtod_l+0x7ce>
 800f750:	4621      	mov	r1, r4
 800f752:	2201      	movs	r2, #1
 800f754:	4648      	mov	r0, r9
 800f756:	f001 ff15 	bl	8011584 <__lshift>
 800f75a:	4641      	mov	r1, r8
 800f75c:	4604      	mov	r4, r0
 800f75e:	f001 ff65 	bl	801162c <__mcmp>
 800f762:	2800      	cmp	r0, #0
 800f764:	dc67      	bgt.n	800f836 <_strtod_l+0x89e>
 800f766:	9b04      	ldr	r3, [sp, #16]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d171      	bne.n	800f850 <_strtod_l+0x8b8>
 800f76c:	e63d      	b.n	800f3ea <_strtod_l+0x452>
 800f76e:	f018 0f01 	tst.w	r8, #1
 800f772:	d004      	beq.n	800f77e <_strtod_l+0x7e6>
 800f774:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f778:	f7f0 ff3e 	bl	80005f8 <__aeabi_dmul>
 800f77c:	2301      	movs	r3, #1
 800f77e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f782:	3508      	adds	r5, #8
 800f784:	e6e5      	b.n	800f552 <_strtod_l+0x5ba>
 800f786:	f04f 32ff 	mov.w	r2, #4294967295
 800f78a:	fa02 f303 	lsl.w	r3, r2, r3
 800f78e:	ea03 0a0a 	and.w	sl, r3, sl
 800f792:	e6ff      	b.n	800f594 <_strtod_l+0x5fc>
 800f794:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800f798:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800f79c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800f7a0:	36e2      	adds	r6, #226	; 0xe2
 800f7a2:	fa01 f306 	lsl.w	r3, r1, r6
 800f7a6:	930a      	str	r3, [sp, #40]	; 0x28
 800f7a8:	910f      	str	r1, [sp, #60]	; 0x3c
 800f7aa:	e75d      	b.n	800f668 <_strtod_l+0x6d0>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	930a      	str	r3, [sp, #40]	; 0x28
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	930f      	str	r3, [sp, #60]	; 0x3c
 800f7b4:	e758      	b.n	800f668 <_strtod_l+0x6d0>
 800f7b6:	4632      	mov	r2, r6
 800f7b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f7ba:	4648      	mov	r0, r9
 800f7bc:	f001 fee2 	bl	8011584 <__lshift>
 800f7c0:	901c      	str	r0, [sp, #112]	; 0x70
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	f47f af7c 	bne.w	800f6c0 <_strtod_l+0x728>
 800f7c8:	e604      	b.n	800f3d4 <_strtod_l+0x43c>
 800f7ca:	bf00      	nop
 800f7cc:	08012ce8 	.word	0x08012ce8
 800f7d0:	fffffc02 	.word	0xfffffc02
 800f7d4:	465d      	mov	r5, fp
 800f7d6:	f040 8086 	bne.w	800f8e6 <_strtod_l+0x94e>
 800f7da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f7dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f7e0:	b32a      	cbz	r2, 800f82e <_strtod_l+0x896>
 800f7e2:	4aaf      	ldr	r2, [pc, #700]	; (800faa0 <_strtod_l+0xb08>)
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	d153      	bne.n	800f890 <_strtod_l+0x8f8>
 800f7e8:	9b04      	ldr	r3, [sp, #16]
 800f7ea:	4650      	mov	r0, sl
 800f7ec:	b1d3      	cbz	r3, 800f824 <_strtod_l+0x88c>
 800f7ee:	4aad      	ldr	r2, [pc, #692]	; (800faa4 <_strtod_l+0xb0c>)
 800f7f0:	402a      	ands	r2, r5
 800f7f2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f7f6:	f04f 31ff 	mov.w	r1, #4294967295
 800f7fa:	d816      	bhi.n	800f82a <_strtod_l+0x892>
 800f7fc:	0d12      	lsrs	r2, r2, #20
 800f7fe:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f802:	fa01 f303 	lsl.w	r3, r1, r3
 800f806:	4298      	cmp	r0, r3
 800f808:	d142      	bne.n	800f890 <_strtod_l+0x8f8>
 800f80a:	4ba7      	ldr	r3, [pc, #668]	; (800faa8 <_strtod_l+0xb10>)
 800f80c:	429d      	cmp	r5, r3
 800f80e:	d102      	bne.n	800f816 <_strtod_l+0x87e>
 800f810:	3001      	adds	r0, #1
 800f812:	f43f addf 	beq.w	800f3d4 <_strtod_l+0x43c>
 800f816:	4ba3      	ldr	r3, [pc, #652]	; (800faa4 <_strtod_l+0xb0c>)
 800f818:	402b      	ands	r3, r5
 800f81a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f81e:	f04f 0a00 	mov.w	sl, #0
 800f822:	e7a0      	b.n	800f766 <_strtod_l+0x7ce>
 800f824:	f04f 33ff 	mov.w	r3, #4294967295
 800f828:	e7ed      	b.n	800f806 <_strtod_l+0x86e>
 800f82a:	460b      	mov	r3, r1
 800f82c:	e7eb      	b.n	800f806 <_strtod_l+0x86e>
 800f82e:	bb7b      	cbnz	r3, 800f890 <_strtod_l+0x8f8>
 800f830:	f1ba 0f00 	cmp.w	sl, #0
 800f834:	d12c      	bne.n	800f890 <_strtod_l+0x8f8>
 800f836:	9904      	ldr	r1, [sp, #16]
 800f838:	4a9a      	ldr	r2, [pc, #616]	; (800faa4 <_strtod_l+0xb0c>)
 800f83a:	465b      	mov	r3, fp
 800f83c:	b1f1      	cbz	r1, 800f87c <_strtod_l+0x8e4>
 800f83e:	ea02 010b 	and.w	r1, r2, fp
 800f842:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f846:	dc19      	bgt.n	800f87c <_strtod_l+0x8e4>
 800f848:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f84c:	f77f ae5b 	ble.w	800f506 <_strtod_l+0x56e>
 800f850:	4a96      	ldr	r2, [pc, #600]	; (800faac <_strtod_l+0xb14>)
 800f852:	2300      	movs	r3, #0
 800f854:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800f858:	4650      	mov	r0, sl
 800f85a:	4659      	mov	r1, fp
 800f85c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f860:	f7f0 feca 	bl	80005f8 <__aeabi_dmul>
 800f864:	4682      	mov	sl, r0
 800f866:	468b      	mov	fp, r1
 800f868:	2900      	cmp	r1, #0
 800f86a:	f47f adbe 	bne.w	800f3ea <_strtod_l+0x452>
 800f86e:	2800      	cmp	r0, #0
 800f870:	f47f adbb 	bne.w	800f3ea <_strtod_l+0x452>
 800f874:	2322      	movs	r3, #34	; 0x22
 800f876:	f8c9 3000 	str.w	r3, [r9]
 800f87a:	e5b6      	b.n	800f3ea <_strtod_l+0x452>
 800f87c:	4013      	ands	r3, r2
 800f87e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f882:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f886:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f88a:	f04f 3aff 	mov.w	sl, #4294967295
 800f88e:	e76a      	b.n	800f766 <_strtod_l+0x7ce>
 800f890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f892:	b193      	cbz	r3, 800f8ba <_strtod_l+0x922>
 800f894:	422b      	tst	r3, r5
 800f896:	f43f af66 	beq.w	800f766 <_strtod_l+0x7ce>
 800f89a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f89c:	9a04      	ldr	r2, [sp, #16]
 800f89e:	4650      	mov	r0, sl
 800f8a0:	4659      	mov	r1, fp
 800f8a2:	b173      	cbz	r3, 800f8c2 <_strtod_l+0x92a>
 800f8a4:	f7ff fb5a 	bl	800ef5c <sulp>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f8b0:	f7f0 fcec 	bl	800028c <__adddf3>
 800f8b4:	4682      	mov	sl, r0
 800f8b6:	468b      	mov	fp, r1
 800f8b8:	e755      	b.n	800f766 <_strtod_l+0x7ce>
 800f8ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f8bc:	ea13 0f0a 	tst.w	r3, sl
 800f8c0:	e7e9      	b.n	800f896 <_strtod_l+0x8fe>
 800f8c2:	f7ff fb4b 	bl	800ef5c <sulp>
 800f8c6:	4602      	mov	r2, r0
 800f8c8:	460b      	mov	r3, r1
 800f8ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f8ce:	f7f0 fcdb 	bl	8000288 <__aeabi_dsub>
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	4682      	mov	sl, r0
 800f8d8:	468b      	mov	fp, r1
 800f8da:	f7f1 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8de:	2800      	cmp	r0, #0
 800f8e0:	f47f ae11 	bne.w	800f506 <_strtod_l+0x56e>
 800f8e4:	e73f      	b.n	800f766 <_strtod_l+0x7ce>
 800f8e6:	4641      	mov	r1, r8
 800f8e8:	4620      	mov	r0, r4
 800f8ea:	f001 ffdc 	bl	80118a6 <__ratio>
 800f8ee:	ec57 6b10 	vmov	r6, r7, d0
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f8f8:	ee10 0a10 	vmov	r0, s0
 800f8fc:	4639      	mov	r1, r7
 800f8fe:	f7f1 f8f7 	bl	8000af0 <__aeabi_dcmple>
 800f902:	2800      	cmp	r0, #0
 800f904:	d077      	beq.n	800f9f6 <_strtod_l+0xa5e>
 800f906:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d04a      	beq.n	800f9a2 <_strtod_l+0xa0a>
 800f90c:	4b68      	ldr	r3, [pc, #416]	; (800fab0 <_strtod_l+0xb18>)
 800f90e:	2200      	movs	r2, #0
 800f910:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f914:	4f66      	ldr	r7, [pc, #408]	; (800fab0 <_strtod_l+0xb18>)
 800f916:	2600      	movs	r6, #0
 800f918:	4b62      	ldr	r3, [pc, #392]	; (800faa4 <_strtod_l+0xb0c>)
 800f91a:	402b      	ands	r3, r5
 800f91c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f91e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f920:	4b64      	ldr	r3, [pc, #400]	; (800fab4 <_strtod_l+0xb1c>)
 800f922:	429a      	cmp	r2, r3
 800f924:	f040 80ce 	bne.w	800fac4 <_strtod_l+0xb2c>
 800f928:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f92c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f930:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800f934:	ec4b ab10 	vmov	d0, sl, fp
 800f938:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800f93c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800f940:	f001 feec 	bl	801171c <__ulp>
 800f944:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f948:	ec53 2b10 	vmov	r2, r3, d0
 800f94c:	f7f0 fe54 	bl	80005f8 <__aeabi_dmul>
 800f950:	4652      	mov	r2, sl
 800f952:	465b      	mov	r3, fp
 800f954:	f7f0 fc9a 	bl	800028c <__adddf3>
 800f958:	460b      	mov	r3, r1
 800f95a:	4952      	ldr	r1, [pc, #328]	; (800faa4 <_strtod_l+0xb0c>)
 800f95c:	4a56      	ldr	r2, [pc, #344]	; (800fab8 <_strtod_l+0xb20>)
 800f95e:	4019      	ands	r1, r3
 800f960:	4291      	cmp	r1, r2
 800f962:	4682      	mov	sl, r0
 800f964:	d95b      	bls.n	800fa1e <_strtod_l+0xa86>
 800f966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f968:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d103      	bne.n	800f978 <_strtod_l+0x9e0>
 800f970:	9b08      	ldr	r3, [sp, #32]
 800f972:	3301      	adds	r3, #1
 800f974:	f43f ad2e 	beq.w	800f3d4 <_strtod_l+0x43c>
 800f978:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800faa8 <_strtod_l+0xb10>
 800f97c:	f04f 3aff 	mov.w	sl, #4294967295
 800f980:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f982:	4648      	mov	r0, r9
 800f984:	f001 fc32 	bl	80111ec <_Bfree>
 800f988:	9905      	ldr	r1, [sp, #20]
 800f98a:	4648      	mov	r0, r9
 800f98c:	f001 fc2e 	bl	80111ec <_Bfree>
 800f990:	4641      	mov	r1, r8
 800f992:	4648      	mov	r0, r9
 800f994:	f001 fc2a 	bl	80111ec <_Bfree>
 800f998:	4621      	mov	r1, r4
 800f99a:	4648      	mov	r0, r9
 800f99c:	f001 fc26 	bl	80111ec <_Bfree>
 800f9a0:	e619      	b.n	800f5d6 <_strtod_l+0x63e>
 800f9a2:	f1ba 0f00 	cmp.w	sl, #0
 800f9a6:	d11a      	bne.n	800f9de <_strtod_l+0xa46>
 800f9a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f9ac:	b9eb      	cbnz	r3, 800f9ea <_strtod_l+0xa52>
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	4b3f      	ldr	r3, [pc, #252]	; (800fab0 <_strtod_l+0xb18>)
 800f9b2:	4630      	mov	r0, r6
 800f9b4:	4639      	mov	r1, r7
 800f9b6:	f7f1 f891 	bl	8000adc <__aeabi_dcmplt>
 800f9ba:	b9c8      	cbnz	r0, 800f9f0 <_strtod_l+0xa58>
 800f9bc:	4630      	mov	r0, r6
 800f9be:	4639      	mov	r1, r7
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	4b3e      	ldr	r3, [pc, #248]	; (800fabc <_strtod_l+0xb24>)
 800f9c4:	f7f0 fe18 	bl	80005f8 <__aeabi_dmul>
 800f9c8:	4606      	mov	r6, r0
 800f9ca:	460f      	mov	r7, r1
 800f9cc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800f9d0:	9618      	str	r6, [sp, #96]	; 0x60
 800f9d2:	9319      	str	r3, [sp, #100]	; 0x64
 800f9d4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800f9d8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f9dc:	e79c      	b.n	800f918 <_strtod_l+0x980>
 800f9de:	f1ba 0f01 	cmp.w	sl, #1
 800f9e2:	d102      	bne.n	800f9ea <_strtod_l+0xa52>
 800f9e4:	2d00      	cmp	r5, #0
 800f9e6:	f43f ad8e 	beq.w	800f506 <_strtod_l+0x56e>
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	4b34      	ldr	r3, [pc, #208]	; (800fac0 <_strtod_l+0xb28>)
 800f9ee:	e78f      	b.n	800f910 <_strtod_l+0x978>
 800f9f0:	2600      	movs	r6, #0
 800f9f2:	4f32      	ldr	r7, [pc, #200]	; (800fabc <_strtod_l+0xb24>)
 800f9f4:	e7ea      	b.n	800f9cc <_strtod_l+0xa34>
 800f9f6:	4b31      	ldr	r3, [pc, #196]	; (800fabc <_strtod_l+0xb24>)
 800f9f8:	4630      	mov	r0, r6
 800f9fa:	4639      	mov	r1, r7
 800f9fc:	2200      	movs	r2, #0
 800f9fe:	f7f0 fdfb 	bl	80005f8 <__aeabi_dmul>
 800fa02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa04:	4606      	mov	r6, r0
 800fa06:	460f      	mov	r7, r1
 800fa08:	b933      	cbnz	r3, 800fa18 <_strtod_l+0xa80>
 800fa0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fa0e:	9010      	str	r0, [sp, #64]	; 0x40
 800fa10:	9311      	str	r3, [sp, #68]	; 0x44
 800fa12:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fa16:	e7df      	b.n	800f9d8 <_strtod_l+0xa40>
 800fa18:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800fa1c:	e7f9      	b.n	800fa12 <_strtod_l+0xa7a>
 800fa1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800fa22:	9b04      	ldr	r3, [sp, #16]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d1ab      	bne.n	800f980 <_strtod_l+0x9e8>
 800fa28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800fa2c:	0d1b      	lsrs	r3, r3, #20
 800fa2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa30:	051b      	lsls	r3, r3, #20
 800fa32:	429a      	cmp	r2, r3
 800fa34:	465d      	mov	r5, fp
 800fa36:	d1a3      	bne.n	800f980 <_strtod_l+0x9e8>
 800fa38:	4639      	mov	r1, r7
 800fa3a:	4630      	mov	r0, r6
 800fa3c:	f7f1 f88c 	bl	8000b58 <__aeabi_d2iz>
 800fa40:	f7f0 fd70 	bl	8000524 <__aeabi_i2d>
 800fa44:	460b      	mov	r3, r1
 800fa46:	4602      	mov	r2, r0
 800fa48:	4639      	mov	r1, r7
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	f7f0 fc1c 	bl	8000288 <__aeabi_dsub>
 800fa50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fa52:	4606      	mov	r6, r0
 800fa54:	460f      	mov	r7, r1
 800fa56:	b933      	cbnz	r3, 800fa66 <_strtod_l+0xace>
 800fa58:	f1ba 0f00 	cmp.w	sl, #0
 800fa5c:	d103      	bne.n	800fa66 <_strtod_l+0xace>
 800fa5e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800fa62:	2d00      	cmp	r5, #0
 800fa64:	d06d      	beq.n	800fb42 <_strtod_l+0xbaa>
 800fa66:	a30a      	add	r3, pc, #40	; (adr r3, 800fa90 <_strtod_l+0xaf8>)
 800fa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	4639      	mov	r1, r7
 800fa70:	f7f1 f834 	bl	8000adc <__aeabi_dcmplt>
 800fa74:	2800      	cmp	r0, #0
 800fa76:	f47f acb8 	bne.w	800f3ea <_strtod_l+0x452>
 800fa7a:	a307      	add	r3, pc, #28	; (adr r3, 800fa98 <_strtod_l+0xb00>)
 800fa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa80:	4630      	mov	r0, r6
 800fa82:	4639      	mov	r1, r7
 800fa84:	f7f1 f848 	bl	8000b18 <__aeabi_dcmpgt>
 800fa88:	2800      	cmp	r0, #0
 800fa8a:	f43f af79 	beq.w	800f980 <_strtod_l+0x9e8>
 800fa8e:	e4ac      	b.n	800f3ea <_strtod_l+0x452>
 800fa90:	94a03595 	.word	0x94a03595
 800fa94:	3fdfffff 	.word	0x3fdfffff
 800fa98:	35afe535 	.word	0x35afe535
 800fa9c:	3fe00000 	.word	0x3fe00000
 800faa0:	000fffff 	.word	0x000fffff
 800faa4:	7ff00000 	.word	0x7ff00000
 800faa8:	7fefffff 	.word	0x7fefffff
 800faac:	39500000 	.word	0x39500000
 800fab0:	3ff00000 	.word	0x3ff00000
 800fab4:	7fe00000 	.word	0x7fe00000
 800fab8:	7c9fffff 	.word	0x7c9fffff
 800fabc:	3fe00000 	.word	0x3fe00000
 800fac0:	bff00000 	.word	0xbff00000
 800fac4:	9b04      	ldr	r3, [sp, #16]
 800fac6:	b333      	cbz	r3, 800fb16 <_strtod_l+0xb7e>
 800fac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800faca:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800face:	d822      	bhi.n	800fb16 <_strtod_l+0xb7e>
 800fad0:	a327      	add	r3, pc, #156	; (adr r3, 800fb70 <_strtod_l+0xbd8>)
 800fad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fad6:	4630      	mov	r0, r6
 800fad8:	4639      	mov	r1, r7
 800fada:	f7f1 f809 	bl	8000af0 <__aeabi_dcmple>
 800fade:	b1a0      	cbz	r0, 800fb0a <_strtod_l+0xb72>
 800fae0:	4639      	mov	r1, r7
 800fae2:	4630      	mov	r0, r6
 800fae4:	f7f1 f860 	bl	8000ba8 <__aeabi_d2uiz>
 800fae8:	2800      	cmp	r0, #0
 800faea:	bf08      	it	eq
 800faec:	2001      	moveq	r0, #1
 800faee:	f7f0 fd09 	bl	8000504 <__aeabi_ui2d>
 800faf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800faf4:	4606      	mov	r6, r0
 800faf6:	460f      	mov	r7, r1
 800faf8:	bb03      	cbnz	r3, 800fb3c <_strtod_l+0xba4>
 800fafa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fafe:	9012      	str	r0, [sp, #72]	; 0x48
 800fb00:	9313      	str	r3, [sp, #76]	; 0x4c
 800fb02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800fb06:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800fb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fb0e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800fb12:	1a9b      	subs	r3, r3, r2
 800fb14:	930b      	str	r3, [sp, #44]	; 0x2c
 800fb16:	ed9d 0b08 	vldr	d0, [sp, #32]
 800fb1a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800fb1e:	f001 fdfd 	bl	801171c <__ulp>
 800fb22:	4650      	mov	r0, sl
 800fb24:	ec53 2b10 	vmov	r2, r3, d0
 800fb28:	4659      	mov	r1, fp
 800fb2a:	f7f0 fd65 	bl	80005f8 <__aeabi_dmul>
 800fb2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fb32:	f7f0 fbab 	bl	800028c <__adddf3>
 800fb36:	4682      	mov	sl, r0
 800fb38:	468b      	mov	fp, r1
 800fb3a:	e772      	b.n	800fa22 <_strtod_l+0xa8a>
 800fb3c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800fb40:	e7df      	b.n	800fb02 <_strtod_l+0xb6a>
 800fb42:	a30d      	add	r3, pc, #52	; (adr r3, 800fb78 <_strtod_l+0xbe0>)
 800fb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb48:	f7f0 ffc8 	bl	8000adc <__aeabi_dcmplt>
 800fb4c:	e79c      	b.n	800fa88 <_strtod_l+0xaf0>
 800fb4e:	2300      	movs	r3, #0
 800fb50:	930d      	str	r3, [sp, #52]	; 0x34
 800fb52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fb54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb56:	6013      	str	r3, [r2, #0]
 800fb58:	f7ff ba61 	b.w	800f01e <_strtod_l+0x86>
 800fb5c:	2b65      	cmp	r3, #101	; 0x65
 800fb5e:	f04f 0200 	mov.w	r2, #0
 800fb62:	f43f ab4e 	beq.w	800f202 <_strtod_l+0x26a>
 800fb66:	2101      	movs	r1, #1
 800fb68:	4614      	mov	r4, r2
 800fb6a:	9104      	str	r1, [sp, #16]
 800fb6c:	f7ff bacb 	b.w	800f106 <_strtod_l+0x16e>
 800fb70:	ffc00000 	.word	0xffc00000
 800fb74:	41dfffff 	.word	0x41dfffff
 800fb78:	94a03595 	.word	0x94a03595
 800fb7c:	3fcfffff 	.word	0x3fcfffff

0800fb80 <_strtod_r>:
 800fb80:	4b05      	ldr	r3, [pc, #20]	; (800fb98 <_strtod_r+0x18>)
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	b410      	push	{r4}
 800fb86:	6a1b      	ldr	r3, [r3, #32]
 800fb88:	4c04      	ldr	r4, [pc, #16]	; (800fb9c <_strtod_r+0x1c>)
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	bf08      	it	eq
 800fb8e:	4623      	moveq	r3, r4
 800fb90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fb94:	f7ff ba00 	b.w	800ef98 <_strtod_l>
 800fb98:	20000048 	.word	0x20000048
 800fb9c:	200000ac 	.word	0x200000ac

0800fba0 <_strtol_l.isra.0>:
 800fba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fba4:	4680      	mov	r8, r0
 800fba6:	4689      	mov	r9, r1
 800fba8:	4692      	mov	sl, r2
 800fbaa:	461e      	mov	r6, r3
 800fbac:	460f      	mov	r7, r1
 800fbae:	463d      	mov	r5, r7
 800fbb0:	9808      	ldr	r0, [sp, #32]
 800fbb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fbb6:	f001 fab7 	bl	8011128 <__locale_ctype_ptr_l>
 800fbba:	4420      	add	r0, r4
 800fbbc:	7843      	ldrb	r3, [r0, #1]
 800fbbe:	f013 0308 	ands.w	r3, r3, #8
 800fbc2:	d132      	bne.n	800fc2a <_strtol_l.isra.0+0x8a>
 800fbc4:	2c2d      	cmp	r4, #45	; 0x2d
 800fbc6:	d132      	bne.n	800fc2e <_strtol_l.isra.0+0x8e>
 800fbc8:	787c      	ldrb	r4, [r7, #1]
 800fbca:	1cbd      	adds	r5, r7, #2
 800fbcc:	2201      	movs	r2, #1
 800fbce:	2e00      	cmp	r6, #0
 800fbd0:	d05d      	beq.n	800fc8e <_strtol_l.isra.0+0xee>
 800fbd2:	2e10      	cmp	r6, #16
 800fbd4:	d109      	bne.n	800fbea <_strtol_l.isra.0+0x4a>
 800fbd6:	2c30      	cmp	r4, #48	; 0x30
 800fbd8:	d107      	bne.n	800fbea <_strtol_l.isra.0+0x4a>
 800fbda:	782b      	ldrb	r3, [r5, #0]
 800fbdc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fbe0:	2b58      	cmp	r3, #88	; 0x58
 800fbe2:	d14f      	bne.n	800fc84 <_strtol_l.isra.0+0xe4>
 800fbe4:	786c      	ldrb	r4, [r5, #1]
 800fbe6:	2610      	movs	r6, #16
 800fbe8:	3502      	adds	r5, #2
 800fbea:	2a00      	cmp	r2, #0
 800fbec:	bf14      	ite	ne
 800fbee:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800fbf2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800fbf6:	2700      	movs	r7, #0
 800fbf8:	fbb1 fcf6 	udiv	ip, r1, r6
 800fbfc:	4638      	mov	r0, r7
 800fbfe:	fb06 1e1c 	mls	lr, r6, ip, r1
 800fc02:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800fc06:	2b09      	cmp	r3, #9
 800fc08:	d817      	bhi.n	800fc3a <_strtol_l.isra.0+0x9a>
 800fc0a:	461c      	mov	r4, r3
 800fc0c:	42a6      	cmp	r6, r4
 800fc0e:	dd23      	ble.n	800fc58 <_strtol_l.isra.0+0xb8>
 800fc10:	1c7b      	adds	r3, r7, #1
 800fc12:	d007      	beq.n	800fc24 <_strtol_l.isra.0+0x84>
 800fc14:	4584      	cmp	ip, r0
 800fc16:	d31c      	bcc.n	800fc52 <_strtol_l.isra.0+0xb2>
 800fc18:	d101      	bne.n	800fc1e <_strtol_l.isra.0+0x7e>
 800fc1a:	45a6      	cmp	lr, r4
 800fc1c:	db19      	blt.n	800fc52 <_strtol_l.isra.0+0xb2>
 800fc1e:	fb00 4006 	mla	r0, r0, r6, r4
 800fc22:	2701      	movs	r7, #1
 800fc24:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fc28:	e7eb      	b.n	800fc02 <_strtol_l.isra.0+0x62>
 800fc2a:	462f      	mov	r7, r5
 800fc2c:	e7bf      	b.n	800fbae <_strtol_l.isra.0+0xe>
 800fc2e:	2c2b      	cmp	r4, #43	; 0x2b
 800fc30:	bf04      	itt	eq
 800fc32:	1cbd      	addeq	r5, r7, #2
 800fc34:	787c      	ldrbeq	r4, [r7, #1]
 800fc36:	461a      	mov	r2, r3
 800fc38:	e7c9      	b.n	800fbce <_strtol_l.isra.0+0x2e>
 800fc3a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800fc3e:	2b19      	cmp	r3, #25
 800fc40:	d801      	bhi.n	800fc46 <_strtol_l.isra.0+0xa6>
 800fc42:	3c37      	subs	r4, #55	; 0x37
 800fc44:	e7e2      	b.n	800fc0c <_strtol_l.isra.0+0x6c>
 800fc46:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800fc4a:	2b19      	cmp	r3, #25
 800fc4c:	d804      	bhi.n	800fc58 <_strtol_l.isra.0+0xb8>
 800fc4e:	3c57      	subs	r4, #87	; 0x57
 800fc50:	e7dc      	b.n	800fc0c <_strtol_l.isra.0+0x6c>
 800fc52:	f04f 37ff 	mov.w	r7, #4294967295
 800fc56:	e7e5      	b.n	800fc24 <_strtol_l.isra.0+0x84>
 800fc58:	1c7b      	adds	r3, r7, #1
 800fc5a:	d108      	bne.n	800fc6e <_strtol_l.isra.0+0xce>
 800fc5c:	2322      	movs	r3, #34	; 0x22
 800fc5e:	f8c8 3000 	str.w	r3, [r8]
 800fc62:	4608      	mov	r0, r1
 800fc64:	f1ba 0f00 	cmp.w	sl, #0
 800fc68:	d107      	bne.n	800fc7a <_strtol_l.isra.0+0xda>
 800fc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc6e:	b102      	cbz	r2, 800fc72 <_strtol_l.isra.0+0xd2>
 800fc70:	4240      	negs	r0, r0
 800fc72:	f1ba 0f00 	cmp.w	sl, #0
 800fc76:	d0f8      	beq.n	800fc6a <_strtol_l.isra.0+0xca>
 800fc78:	b10f      	cbz	r7, 800fc7e <_strtol_l.isra.0+0xde>
 800fc7a:	f105 39ff 	add.w	r9, r5, #4294967295
 800fc7e:	f8ca 9000 	str.w	r9, [sl]
 800fc82:	e7f2      	b.n	800fc6a <_strtol_l.isra.0+0xca>
 800fc84:	2430      	movs	r4, #48	; 0x30
 800fc86:	2e00      	cmp	r6, #0
 800fc88:	d1af      	bne.n	800fbea <_strtol_l.isra.0+0x4a>
 800fc8a:	2608      	movs	r6, #8
 800fc8c:	e7ad      	b.n	800fbea <_strtol_l.isra.0+0x4a>
 800fc8e:	2c30      	cmp	r4, #48	; 0x30
 800fc90:	d0a3      	beq.n	800fbda <_strtol_l.isra.0+0x3a>
 800fc92:	260a      	movs	r6, #10
 800fc94:	e7a9      	b.n	800fbea <_strtol_l.isra.0+0x4a>
	...

0800fc98 <_strtol_r>:
 800fc98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc9a:	4c06      	ldr	r4, [pc, #24]	; (800fcb4 <_strtol_r+0x1c>)
 800fc9c:	4d06      	ldr	r5, [pc, #24]	; (800fcb8 <_strtol_r+0x20>)
 800fc9e:	6824      	ldr	r4, [r4, #0]
 800fca0:	6a24      	ldr	r4, [r4, #32]
 800fca2:	2c00      	cmp	r4, #0
 800fca4:	bf08      	it	eq
 800fca6:	462c      	moveq	r4, r5
 800fca8:	9400      	str	r4, [sp, #0]
 800fcaa:	f7ff ff79 	bl	800fba0 <_strtol_l.isra.0>
 800fcae:	b003      	add	sp, #12
 800fcb0:	bd30      	pop	{r4, r5, pc}
 800fcb2:	bf00      	nop
 800fcb4:	20000048 	.word	0x20000048
 800fcb8:	200000ac 	.word	0x200000ac

0800fcbc <quorem>:
 800fcbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc0:	6903      	ldr	r3, [r0, #16]
 800fcc2:	690c      	ldr	r4, [r1, #16]
 800fcc4:	42a3      	cmp	r3, r4
 800fcc6:	4680      	mov	r8, r0
 800fcc8:	f2c0 8082 	blt.w	800fdd0 <quorem+0x114>
 800fccc:	3c01      	subs	r4, #1
 800fcce:	f101 0714 	add.w	r7, r1, #20
 800fcd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800fcd6:	f100 0614 	add.w	r6, r0, #20
 800fcda:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800fcde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800fce2:	eb06 030c 	add.w	r3, r6, ip
 800fce6:	3501      	adds	r5, #1
 800fce8:	eb07 090c 	add.w	r9, r7, ip
 800fcec:	9301      	str	r3, [sp, #4]
 800fcee:	fbb0 f5f5 	udiv	r5, r0, r5
 800fcf2:	b395      	cbz	r5, 800fd5a <quorem+0x9e>
 800fcf4:	f04f 0a00 	mov.w	sl, #0
 800fcf8:	4638      	mov	r0, r7
 800fcfa:	46b6      	mov	lr, r6
 800fcfc:	46d3      	mov	fp, sl
 800fcfe:	f850 2b04 	ldr.w	r2, [r0], #4
 800fd02:	b293      	uxth	r3, r2
 800fd04:	fb05 a303 	mla	r3, r5, r3, sl
 800fd08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	ebab 0303 	sub.w	r3, fp, r3
 800fd12:	0c12      	lsrs	r2, r2, #16
 800fd14:	f8de b000 	ldr.w	fp, [lr]
 800fd18:	fb05 a202 	mla	r2, r5, r2, sl
 800fd1c:	fa13 f38b 	uxtah	r3, r3, fp
 800fd20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800fd24:	fa1f fb82 	uxth.w	fp, r2
 800fd28:	f8de 2000 	ldr.w	r2, [lr]
 800fd2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800fd30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd3a:	4581      	cmp	r9, r0
 800fd3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800fd40:	f84e 3b04 	str.w	r3, [lr], #4
 800fd44:	d2db      	bcs.n	800fcfe <quorem+0x42>
 800fd46:	f856 300c 	ldr.w	r3, [r6, ip]
 800fd4a:	b933      	cbnz	r3, 800fd5a <quorem+0x9e>
 800fd4c:	9b01      	ldr	r3, [sp, #4]
 800fd4e:	3b04      	subs	r3, #4
 800fd50:	429e      	cmp	r6, r3
 800fd52:	461a      	mov	r2, r3
 800fd54:	d330      	bcc.n	800fdb8 <quorem+0xfc>
 800fd56:	f8c8 4010 	str.w	r4, [r8, #16]
 800fd5a:	4640      	mov	r0, r8
 800fd5c:	f001 fc66 	bl	801162c <__mcmp>
 800fd60:	2800      	cmp	r0, #0
 800fd62:	db25      	blt.n	800fdb0 <quorem+0xf4>
 800fd64:	3501      	adds	r5, #1
 800fd66:	4630      	mov	r0, r6
 800fd68:	f04f 0c00 	mov.w	ip, #0
 800fd6c:	f857 2b04 	ldr.w	r2, [r7], #4
 800fd70:	f8d0 e000 	ldr.w	lr, [r0]
 800fd74:	b293      	uxth	r3, r2
 800fd76:	ebac 0303 	sub.w	r3, ip, r3
 800fd7a:	0c12      	lsrs	r2, r2, #16
 800fd7c:	fa13 f38e 	uxtah	r3, r3, lr
 800fd80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fd84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fd8e:	45b9      	cmp	r9, r7
 800fd90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fd94:	f840 3b04 	str.w	r3, [r0], #4
 800fd98:	d2e8      	bcs.n	800fd6c <quorem+0xb0>
 800fd9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fd9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fda2:	b92a      	cbnz	r2, 800fdb0 <quorem+0xf4>
 800fda4:	3b04      	subs	r3, #4
 800fda6:	429e      	cmp	r6, r3
 800fda8:	461a      	mov	r2, r3
 800fdaa:	d30b      	bcc.n	800fdc4 <quorem+0x108>
 800fdac:	f8c8 4010 	str.w	r4, [r8, #16]
 800fdb0:	4628      	mov	r0, r5
 800fdb2:	b003      	add	sp, #12
 800fdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdb8:	6812      	ldr	r2, [r2, #0]
 800fdba:	3b04      	subs	r3, #4
 800fdbc:	2a00      	cmp	r2, #0
 800fdbe:	d1ca      	bne.n	800fd56 <quorem+0x9a>
 800fdc0:	3c01      	subs	r4, #1
 800fdc2:	e7c5      	b.n	800fd50 <quorem+0x94>
 800fdc4:	6812      	ldr	r2, [r2, #0]
 800fdc6:	3b04      	subs	r3, #4
 800fdc8:	2a00      	cmp	r2, #0
 800fdca:	d1ef      	bne.n	800fdac <quorem+0xf0>
 800fdcc:	3c01      	subs	r4, #1
 800fdce:	e7ea      	b.n	800fda6 <quorem+0xea>
 800fdd0:	2000      	movs	r0, #0
 800fdd2:	e7ee      	b.n	800fdb2 <quorem+0xf6>
 800fdd4:	0000      	movs	r0, r0
	...

0800fdd8 <_dtoa_r>:
 800fdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fddc:	ec57 6b10 	vmov	r6, r7, d0
 800fde0:	b097      	sub	sp, #92	; 0x5c
 800fde2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fde4:	9106      	str	r1, [sp, #24]
 800fde6:	4604      	mov	r4, r0
 800fde8:	920b      	str	r2, [sp, #44]	; 0x2c
 800fdea:	9312      	str	r3, [sp, #72]	; 0x48
 800fdec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fdf0:	e9cd 6700 	strd	r6, r7, [sp]
 800fdf4:	b93d      	cbnz	r5, 800fe06 <_dtoa_r+0x2e>
 800fdf6:	2010      	movs	r0, #16
 800fdf8:	f001 f9aa 	bl	8011150 <malloc>
 800fdfc:	6260      	str	r0, [r4, #36]	; 0x24
 800fdfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fe02:	6005      	str	r5, [r0, #0]
 800fe04:	60c5      	str	r5, [r0, #12]
 800fe06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe08:	6819      	ldr	r1, [r3, #0]
 800fe0a:	b151      	cbz	r1, 800fe22 <_dtoa_r+0x4a>
 800fe0c:	685a      	ldr	r2, [r3, #4]
 800fe0e:	604a      	str	r2, [r1, #4]
 800fe10:	2301      	movs	r3, #1
 800fe12:	4093      	lsls	r3, r2
 800fe14:	608b      	str	r3, [r1, #8]
 800fe16:	4620      	mov	r0, r4
 800fe18:	f001 f9e8 	bl	80111ec <_Bfree>
 800fe1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe1e:	2200      	movs	r2, #0
 800fe20:	601a      	str	r2, [r3, #0]
 800fe22:	1e3b      	subs	r3, r7, #0
 800fe24:	bfbb      	ittet	lt
 800fe26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fe2a:	9301      	strlt	r3, [sp, #4]
 800fe2c:	2300      	movge	r3, #0
 800fe2e:	2201      	movlt	r2, #1
 800fe30:	bfac      	ite	ge
 800fe32:	f8c8 3000 	strge.w	r3, [r8]
 800fe36:	f8c8 2000 	strlt.w	r2, [r8]
 800fe3a:	4baf      	ldr	r3, [pc, #700]	; (80100f8 <_dtoa_r+0x320>)
 800fe3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fe40:	ea33 0308 	bics.w	r3, r3, r8
 800fe44:	d114      	bne.n	800fe70 <_dtoa_r+0x98>
 800fe46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fe48:	f242 730f 	movw	r3, #9999	; 0x270f
 800fe4c:	6013      	str	r3, [r2, #0]
 800fe4e:	9b00      	ldr	r3, [sp, #0]
 800fe50:	b923      	cbnz	r3, 800fe5c <_dtoa_r+0x84>
 800fe52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800fe56:	2800      	cmp	r0, #0
 800fe58:	f000 8542 	beq.w	80108e0 <_dtoa_r+0xb08>
 800fe5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801010c <_dtoa_r+0x334>
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	f000 8544 	beq.w	80108f0 <_dtoa_r+0xb18>
 800fe68:	f10b 0303 	add.w	r3, fp, #3
 800fe6c:	f000 bd3e 	b.w	80108ec <_dtoa_r+0xb14>
 800fe70:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fe74:	2200      	movs	r2, #0
 800fe76:	2300      	movs	r3, #0
 800fe78:	4630      	mov	r0, r6
 800fe7a:	4639      	mov	r1, r7
 800fe7c:	f7f0 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 800fe80:	4681      	mov	r9, r0
 800fe82:	b168      	cbz	r0, 800fea0 <_dtoa_r+0xc8>
 800fe84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fe86:	2301      	movs	r3, #1
 800fe88:	6013      	str	r3, [r2, #0]
 800fe8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f000 8524 	beq.w	80108da <_dtoa_r+0xb02>
 800fe92:	4b9a      	ldr	r3, [pc, #616]	; (80100fc <_dtoa_r+0x324>)
 800fe94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe96:	f103 3bff 	add.w	fp, r3, #4294967295
 800fe9a:	6013      	str	r3, [r2, #0]
 800fe9c:	f000 bd28 	b.w	80108f0 <_dtoa_r+0xb18>
 800fea0:	aa14      	add	r2, sp, #80	; 0x50
 800fea2:	a915      	add	r1, sp, #84	; 0x54
 800fea4:	ec47 6b10 	vmov	d0, r6, r7
 800fea8:	4620      	mov	r0, r4
 800feaa:	f001 fcad 	bl	8011808 <__d2b>
 800feae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800feb2:	9004      	str	r0, [sp, #16]
 800feb4:	2d00      	cmp	r5, #0
 800feb6:	d07c      	beq.n	800ffb2 <_dtoa_r+0x1da>
 800feb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800febc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fec0:	46b2      	mov	sl, r6
 800fec2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fec6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800feca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fece:	2200      	movs	r2, #0
 800fed0:	4b8b      	ldr	r3, [pc, #556]	; (8010100 <_dtoa_r+0x328>)
 800fed2:	4650      	mov	r0, sl
 800fed4:	4659      	mov	r1, fp
 800fed6:	f7f0 f9d7 	bl	8000288 <__aeabi_dsub>
 800feda:	a381      	add	r3, pc, #516	; (adr r3, 80100e0 <_dtoa_r+0x308>)
 800fedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee0:	f7f0 fb8a 	bl	80005f8 <__aeabi_dmul>
 800fee4:	a380      	add	r3, pc, #512	; (adr r3, 80100e8 <_dtoa_r+0x310>)
 800fee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feea:	f7f0 f9cf 	bl	800028c <__adddf3>
 800feee:	4606      	mov	r6, r0
 800fef0:	4628      	mov	r0, r5
 800fef2:	460f      	mov	r7, r1
 800fef4:	f7f0 fb16 	bl	8000524 <__aeabi_i2d>
 800fef8:	a37d      	add	r3, pc, #500	; (adr r3, 80100f0 <_dtoa_r+0x318>)
 800fefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefe:	f7f0 fb7b 	bl	80005f8 <__aeabi_dmul>
 800ff02:	4602      	mov	r2, r0
 800ff04:	460b      	mov	r3, r1
 800ff06:	4630      	mov	r0, r6
 800ff08:	4639      	mov	r1, r7
 800ff0a:	f7f0 f9bf 	bl	800028c <__adddf3>
 800ff0e:	4606      	mov	r6, r0
 800ff10:	460f      	mov	r7, r1
 800ff12:	f7f0 fe21 	bl	8000b58 <__aeabi_d2iz>
 800ff16:	2200      	movs	r2, #0
 800ff18:	4682      	mov	sl, r0
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	4630      	mov	r0, r6
 800ff1e:	4639      	mov	r1, r7
 800ff20:	f7f0 fddc 	bl	8000adc <__aeabi_dcmplt>
 800ff24:	b148      	cbz	r0, 800ff3a <_dtoa_r+0x162>
 800ff26:	4650      	mov	r0, sl
 800ff28:	f7f0 fafc 	bl	8000524 <__aeabi_i2d>
 800ff2c:	4632      	mov	r2, r6
 800ff2e:	463b      	mov	r3, r7
 800ff30:	f7f0 fdca 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff34:	b908      	cbnz	r0, 800ff3a <_dtoa_r+0x162>
 800ff36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff3a:	f1ba 0f16 	cmp.w	sl, #22
 800ff3e:	d859      	bhi.n	800fff4 <_dtoa_r+0x21c>
 800ff40:	4970      	ldr	r1, [pc, #448]	; (8010104 <_dtoa_r+0x32c>)
 800ff42:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ff46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ff4e:	f7f0 fde3 	bl	8000b18 <__aeabi_dcmpgt>
 800ff52:	2800      	cmp	r0, #0
 800ff54:	d050      	beq.n	800fff8 <_dtoa_r+0x220>
 800ff56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ff5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff60:	1b5d      	subs	r5, r3, r5
 800ff62:	f1b5 0801 	subs.w	r8, r5, #1
 800ff66:	bf49      	itett	mi
 800ff68:	f1c5 0301 	rsbmi	r3, r5, #1
 800ff6c:	2300      	movpl	r3, #0
 800ff6e:	9305      	strmi	r3, [sp, #20]
 800ff70:	f04f 0800 	movmi.w	r8, #0
 800ff74:	bf58      	it	pl
 800ff76:	9305      	strpl	r3, [sp, #20]
 800ff78:	f1ba 0f00 	cmp.w	sl, #0
 800ff7c:	db3e      	blt.n	800fffc <_dtoa_r+0x224>
 800ff7e:	2300      	movs	r3, #0
 800ff80:	44d0      	add	r8, sl
 800ff82:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ff86:	9307      	str	r3, [sp, #28]
 800ff88:	9b06      	ldr	r3, [sp, #24]
 800ff8a:	2b09      	cmp	r3, #9
 800ff8c:	f200 8090 	bhi.w	80100b0 <_dtoa_r+0x2d8>
 800ff90:	2b05      	cmp	r3, #5
 800ff92:	bfc4      	itt	gt
 800ff94:	3b04      	subgt	r3, #4
 800ff96:	9306      	strgt	r3, [sp, #24]
 800ff98:	9b06      	ldr	r3, [sp, #24]
 800ff9a:	f1a3 0302 	sub.w	r3, r3, #2
 800ff9e:	bfcc      	ite	gt
 800ffa0:	2500      	movgt	r5, #0
 800ffa2:	2501      	movle	r5, #1
 800ffa4:	2b03      	cmp	r3, #3
 800ffa6:	f200 808f 	bhi.w	80100c8 <_dtoa_r+0x2f0>
 800ffaa:	e8df f003 	tbb	[pc, r3]
 800ffae:	7f7d      	.short	0x7f7d
 800ffb0:	7131      	.short	0x7131
 800ffb2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ffb6:	441d      	add	r5, r3
 800ffb8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ffbc:	2820      	cmp	r0, #32
 800ffbe:	dd13      	ble.n	800ffe8 <_dtoa_r+0x210>
 800ffc0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ffc4:	9b00      	ldr	r3, [sp, #0]
 800ffc6:	fa08 f800 	lsl.w	r8, r8, r0
 800ffca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ffce:	fa23 f000 	lsr.w	r0, r3, r0
 800ffd2:	ea48 0000 	orr.w	r0, r8, r0
 800ffd6:	f7f0 fa95 	bl	8000504 <__aeabi_ui2d>
 800ffda:	2301      	movs	r3, #1
 800ffdc:	4682      	mov	sl, r0
 800ffde:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ffe2:	3d01      	subs	r5, #1
 800ffe4:	9313      	str	r3, [sp, #76]	; 0x4c
 800ffe6:	e772      	b.n	800fece <_dtoa_r+0xf6>
 800ffe8:	9b00      	ldr	r3, [sp, #0]
 800ffea:	f1c0 0020 	rsb	r0, r0, #32
 800ffee:	fa03 f000 	lsl.w	r0, r3, r0
 800fff2:	e7f0      	b.n	800ffd6 <_dtoa_r+0x1fe>
 800fff4:	2301      	movs	r3, #1
 800fff6:	e7b1      	b.n	800ff5c <_dtoa_r+0x184>
 800fff8:	900f      	str	r0, [sp, #60]	; 0x3c
 800fffa:	e7b0      	b.n	800ff5e <_dtoa_r+0x186>
 800fffc:	9b05      	ldr	r3, [sp, #20]
 800fffe:	eba3 030a 	sub.w	r3, r3, sl
 8010002:	9305      	str	r3, [sp, #20]
 8010004:	f1ca 0300 	rsb	r3, sl, #0
 8010008:	9307      	str	r3, [sp, #28]
 801000a:	2300      	movs	r3, #0
 801000c:	930e      	str	r3, [sp, #56]	; 0x38
 801000e:	e7bb      	b.n	800ff88 <_dtoa_r+0x1b0>
 8010010:	2301      	movs	r3, #1
 8010012:	930a      	str	r3, [sp, #40]	; 0x28
 8010014:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010016:	2b00      	cmp	r3, #0
 8010018:	dd59      	ble.n	80100ce <_dtoa_r+0x2f6>
 801001a:	9302      	str	r3, [sp, #8]
 801001c:	4699      	mov	r9, r3
 801001e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8010020:	2200      	movs	r2, #0
 8010022:	6072      	str	r2, [r6, #4]
 8010024:	2204      	movs	r2, #4
 8010026:	f102 0014 	add.w	r0, r2, #20
 801002a:	4298      	cmp	r0, r3
 801002c:	6871      	ldr	r1, [r6, #4]
 801002e:	d953      	bls.n	80100d8 <_dtoa_r+0x300>
 8010030:	4620      	mov	r0, r4
 8010032:	f001 f8a7 	bl	8011184 <_Balloc>
 8010036:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010038:	6030      	str	r0, [r6, #0]
 801003a:	f1b9 0f0e 	cmp.w	r9, #14
 801003e:	f8d3 b000 	ldr.w	fp, [r3]
 8010042:	f200 80e6 	bhi.w	8010212 <_dtoa_r+0x43a>
 8010046:	2d00      	cmp	r5, #0
 8010048:	f000 80e3 	beq.w	8010212 <_dtoa_r+0x43a>
 801004c:	ed9d 7b00 	vldr	d7, [sp]
 8010050:	f1ba 0f00 	cmp.w	sl, #0
 8010054:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8010058:	dd74      	ble.n	8010144 <_dtoa_r+0x36c>
 801005a:	4a2a      	ldr	r2, [pc, #168]	; (8010104 <_dtoa_r+0x32c>)
 801005c:	f00a 030f 	and.w	r3, sl, #15
 8010060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8010064:	ed93 7b00 	vldr	d7, [r3]
 8010068:	ea4f 162a 	mov.w	r6, sl, asr #4
 801006c:	06f0      	lsls	r0, r6, #27
 801006e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8010072:	d565      	bpl.n	8010140 <_dtoa_r+0x368>
 8010074:	4b24      	ldr	r3, [pc, #144]	; (8010108 <_dtoa_r+0x330>)
 8010076:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801007a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801007e:	f7f0 fbe5 	bl	800084c <__aeabi_ddiv>
 8010082:	e9cd 0100 	strd	r0, r1, [sp]
 8010086:	f006 060f 	and.w	r6, r6, #15
 801008a:	2503      	movs	r5, #3
 801008c:	4f1e      	ldr	r7, [pc, #120]	; (8010108 <_dtoa_r+0x330>)
 801008e:	e04c      	b.n	801012a <_dtoa_r+0x352>
 8010090:	2301      	movs	r3, #1
 8010092:	930a      	str	r3, [sp, #40]	; 0x28
 8010094:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010096:	4453      	add	r3, sl
 8010098:	f103 0901 	add.w	r9, r3, #1
 801009c:	9302      	str	r3, [sp, #8]
 801009e:	464b      	mov	r3, r9
 80100a0:	2b01      	cmp	r3, #1
 80100a2:	bfb8      	it	lt
 80100a4:	2301      	movlt	r3, #1
 80100a6:	e7ba      	b.n	801001e <_dtoa_r+0x246>
 80100a8:	2300      	movs	r3, #0
 80100aa:	e7b2      	b.n	8010012 <_dtoa_r+0x23a>
 80100ac:	2300      	movs	r3, #0
 80100ae:	e7f0      	b.n	8010092 <_dtoa_r+0x2ba>
 80100b0:	2501      	movs	r5, #1
 80100b2:	2300      	movs	r3, #0
 80100b4:	9306      	str	r3, [sp, #24]
 80100b6:	950a      	str	r5, [sp, #40]	; 0x28
 80100b8:	f04f 33ff 	mov.w	r3, #4294967295
 80100bc:	9302      	str	r3, [sp, #8]
 80100be:	4699      	mov	r9, r3
 80100c0:	2200      	movs	r2, #0
 80100c2:	2312      	movs	r3, #18
 80100c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80100c6:	e7aa      	b.n	801001e <_dtoa_r+0x246>
 80100c8:	2301      	movs	r3, #1
 80100ca:	930a      	str	r3, [sp, #40]	; 0x28
 80100cc:	e7f4      	b.n	80100b8 <_dtoa_r+0x2e0>
 80100ce:	2301      	movs	r3, #1
 80100d0:	9302      	str	r3, [sp, #8]
 80100d2:	4699      	mov	r9, r3
 80100d4:	461a      	mov	r2, r3
 80100d6:	e7f5      	b.n	80100c4 <_dtoa_r+0x2ec>
 80100d8:	3101      	adds	r1, #1
 80100da:	6071      	str	r1, [r6, #4]
 80100dc:	0052      	lsls	r2, r2, #1
 80100de:	e7a2      	b.n	8010026 <_dtoa_r+0x24e>
 80100e0:	636f4361 	.word	0x636f4361
 80100e4:	3fd287a7 	.word	0x3fd287a7
 80100e8:	8b60c8b3 	.word	0x8b60c8b3
 80100ec:	3fc68a28 	.word	0x3fc68a28
 80100f0:	509f79fb 	.word	0x509f79fb
 80100f4:	3fd34413 	.word	0x3fd34413
 80100f8:	7ff00000 	.word	0x7ff00000
 80100fc:	08012c95 	.word	0x08012c95
 8010100:	3ff80000 	.word	0x3ff80000
 8010104:	08012db8 	.word	0x08012db8
 8010108:	08012d90 	.word	0x08012d90
 801010c:	08012d19 	.word	0x08012d19
 8010110:	07f1      	lsls	r1, r6, #31
 8010112:	d508      	bpl.n	8010126 <_dtoa_r+0x34e>
 8010114:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010118:	e9d7 2300 	ldrd	r2, r3, [r7]
 801011c:	f7f0 fa6c 	bl	80005f8 <__aeabi_dmul>
 8010120:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010124:	3501      	adds	r5, #1
 8010126:	1076      	asrs	r6, r6, #1
 8010128:	3708      	adds	r7, #8
 801012a:	2e00      	cmp	r6, #0
 801012c:	d1f0      	bne.n	8010110 <_dtoa_r+0x338>
 801012e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8010132:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010136:	f7f0 fb89 	bl	800084c <__aeabi_ddiv>
 801013a:	e9cd 0100 	strd	r0, r1, [sp]
 801013e:	e01a      	b.n	8010176 <_dtoa_r+0x39e>
 8010140:	2502      	movs	r5, #2
 8010142:	e7a3      	b.n	801008c <_dtoa_r+0x2b4>
 8010144:	f000 80a0 	beq.w	8010288 <_dtoa_r+0x4b0>
 8010148:	f1ca 0600 	rsb	r6, sl, #0
 801014c:	4b9f      	ldr	r3, [pc, #636]	; (80103cc <_dtoa_r+0x5f4>)
 801014e:	4fa0      	ldr	r7, [pc, #640]	; (80103d0 <_dtoa_r+0x5f8>)
 8010150:	f006 020f 	and.w	r2, r6, #15
 8010154:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801015c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8010160:	f7f0 fa4a 	bl	80005f8 <__aeabi_dmul>
 8010164:	e9cd 0100 	strd	r0, r1, [sp]
 8010168:	1136      	asrs	r6, r6, #4
 801016a:	2300      	movs	r3, #0
 801016c:	2502      	movs	r5, #2
 801016e:	2e00      	cmp	r6, #0
 8010170:	d17f      	bne.n	8010272 <_dtoa_r+0x49a>
 8010172:	2b00      	cmp	r3, #0
 8010174:	d1e1      	bne.n	801013a <_dtoa_r+0x362>
 8010176:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010178:	2b00      	cmp	r3, #0
 801017a:	f000 8087 	beq.w	801028c <_dtoa_r+0x4b4>
 801017e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010182:	2200      	movs	r2, #0
 8010184:	4b93      	ldr	r3, [pc, #588]	; (80103d4 <_dtoa_r+0x5fc>)
 8010186:	4630      	mov	r0, r6
 8010188:	4639      	mov	r1, r7
 801018a:	f7f0 fca7 	bl	8000adc <__aeabi_dcmplt>
 801018e:	2800      	cmp	r0, #0
 8010190:	d07c      	beq.n	801028c <_dtoa_r+0x4b4>
 8010192:	f1b9 0f00 	cmp.w	r9, #0
 8010196:	d079      	beq.n	801028c <_dtoa_r+0x4b4>
 8010198:	9b02      	ldr	r3, [sp, #8]
 801019a:	2b00      	cmp	r3, #0
 801019c:	dd35      	ble.n	801020a <_dtoa_r+0x432>
 801019e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80101a2:	9308      	str	r3, [sp, #32]
 80101a4:	4639      	mov	r1, r7
 80101a6:	2200      	movs	r2, #0
 80101a8:	4b8b      	ldr	r3, [pc, #556]	; (80103d8 <_dtoa_r+0x600>)
 80101aa:	4630      	mov	r0, r6
 80101ac:	f7f0 fa24 	bl	80005f8 <__aeabi_dmul>
 80101b0:	e9cd 0100 	strd	r0, r1, [sp]
 80101b4:	9f02      	ldr	r7, [sp, #8]
 80101b6:	3501      	adds	r5, #1
 80101b8:	4628      	mov	r0, r5
 80101ba:	f7f0 f9b3 	bl	8000524 <__aeabi_i2d>
 80101be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80101c2:	f7f0 fa19 	bl	80005f8 <__aeabi_dmul>
 80101c6:	2200      	movs	r2, #0
 80101c8:	4b84      	ldr	r3, [pc, #528]	; (80103dc <_dtoa_r+0x604>)
 80101ca:	f7f0 f85f 	bl	800028c <__adddf3>
 80101ce:	4605      	mov	r5, r0
 80101d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80101d4:	2f00      	cmp	r7, #0
 80101d6:	d15d      	bne.n	8010294 <_dtoa_r+0x4bc>
 80101d8:	2200      	movs	r2, #0
 80101da:	4b81      	ldr	r3, [pc, #516]	; (80103e0 <_dtoa_r+0x608>)
 80101dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80101e0:	f7f0 f852 	bl	8000288 <__aeabi_dsub>
 80101e4:	462a      	mov	r2, r5
 80101e6:	4633      	mov	r3, r6
 80101e8:	e9cd 0100 	strd	r0, r1, [sp]
 80101ec:	f7f0 fc94 	bl	8000b18 <__aeabi_dcmpgt>
 80101f0:	2800      	cmp	r0, #0
 80101f2:	f040 8288 	bne.w	8010706 <_dtoa_r+0x92e>
 80101f6:	462a      	mov	r2, r5
 80101f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80101fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010200:	f7f0 fc6c 	bl	8000adc <__aeabi_dcmplt>
 8010204:	2800      	cmp	r0, #0
 8010206:	f040 827c 	bne.w	8010702 <_dtoa_r+0x92a>
 801020a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801020e:	e9cd 2300 	strd	r2, r3, [sp]
 8010212:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010214:	2b00      	cmp	r3, #0
 8010216:	f2c0 8150 	blt.w	80104ba <_dtoa_r+0x6e2>
 801021a:	f1ba 0f0e 	cmp.w	sl, #14
 801021e:	f300 814c 	bgt.w	80104ba <_dtoa_r+0x6e2>
 8010222:	4b6a      	ldr	r3, [pc, #424]	; (80103cc <_dtoa_r+0x5f4>)
 8010224:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8010228:	ed93 7b00 	vldr	d7, [r3]
 801022c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801022e:	2b00      	cmp	r3, #0
 8010230:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010234:	f280 80d8 	bge.w	80103e8 <_dtoa_r+0x610>
 8010238:	f1b9 0f00 	cmp.w	r9, #0
 801023c:	f300 80d4 	bgt.w	80103e8 <_dtoa_r+0x610>
 8010240:	f040 825e 	bne.w	8010700 <_dtoa_r+0x928>
 8010244:	2200      	movs	r2, #0
 8010246:	4b66      	ldr	r3, [pc, #408]	; (80103e0 <_dtoa_r+0x608>)
 8010248:	ec51 0b17 	vmov	r0, r1, d7
 801024c:	f7f0 f9d4 	bl	80005f8 <__aeabi_dmul>
 8010250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010254:	f7f0 fc56 	bl	8000b04 <__aeabi_dcmpge>
 8010258:	464f      	mov	r7, r9
 801025a:	464e      	mov	r6, r9
 801025c:	2800      	cmp	r0, #0
 801025e:	f040 8234 	bne.w	80106ca <_dtoa_r+0x8f2>
 8010262:	2331      	movs	r3, #49	; 0x31
 8010264:	f10b 0501 	add.w	r5, fp, #1
 8010268:	f88b 3000 	strb.w	r3, [fp]
 801026c:	f10a 0a01 	add.w	sl, sl, #1
 8010270:	e22f      	b.n	80106d2 <_dtoa_r+0x8fa>
 8010272:	07f2      	lsls	r2, r6, #31
 8010274:	d505      	bpl.n	8010282 <_dtoa_r+0x4aa>
 8010276:	e9d7 2300 	ldrd	r2, r3, [r7]
 801027a:	f7f0 f9bd 	bl	80005f8 <__aeabi_dmul>
 801027e:	3501      	adds	r5, #1
 8010280:	2301      	movs	r3, #1
 8010282:	1076      	asrs	r6, r6, #1
 8010284:	3708      	adds	r7, #8
 8010286:	e772      	b.n	801016e <_dtoa_r+0x396>
 8010288:	2502      	movs	r5, #2
 801028a:	e774      	b.n	8010176 <_dtoa_r+0x39e>
 801028c:	f8cd a020 	str.w	sl, [sp, #32]
 8010290:	464f      	mov	r7, r9
 8010292:	e791      	b.n	80101b8 <_dtoa_r+0x3e0>
 8010294:	4b4d      	ldr	r3, [pc, #308]	; (80103cc <_dtoa_r+0x5f4>)
 8010296:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801029a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801029e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d047      	beq.n	8010334 <_dtoa_r+0x55c>
 80102a4:	4602      	mov	r2, r0
 80102a6:	460b      	mov	r3, r1
 80102a8:	2000      	movs	r0, #0
 80102aa:	494e      	ldr	r1, [pc, #312]	; (80103e4 <_dtoa_r+0x60c>)
 80102ac:	f7f0 face 	bl	800084c <__aeabi_ddiv>
 80102b0:	462a      	mov	r2, r5
 80102b2:	4633      	mov	r3, r6
 80102b4:	f7ef ffe8 	bl	8000288 <__aeabi_dsub>
 80102b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80102bc:	465d      	mov	r5, fp
 80102be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80102c2:	f7f0 fc49 	bl	8000b58 <__aeabi_d2iz>
 80102c6:	4606      	mov	r6, r0
 80102c8:	f7f0 f92c 	bl	8000524 <__aeabi_i2d>
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80102d4:	f7ef ffd8 	bl	8000288 <__aeabi_dsub>
 80102d8:	3630      	adds	r6, #48	; 0x30
 80102da:	f805 6b01 	strb.w	r6, [r5], #1
 80102de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80102e2:	e9cd 0100 	strd	r0, r1, [sp]
 80102e6:	f7f0 fbf9 	bl	8000adc <__aeabi_dcmplt>
 80102ea:	2800      	cmp	r0, #0
 80102ec:	d163      	bne.n	80103b6 <_dtoa_r+0x5de>
 80102ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80102f2:	2000      	movs	r0, #0
 80102f4:	4937      	ldr	r1, [pc, #220]	; (80103d4 <_dtoa_r+0x5fc>)
 80102f6:	f7ef ffc7 	bl	8000288 <__aeabi_dsub>
 80102fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80102fe:	f7f0 fbed 	bl	8000adc <__aeabi_dcmplt>
 8010302:	2800      	cmp	r0, #0
 8010304:	f040 80b7 	bne.w	8010476 <_dtoa_r+0x69e>
 8010308:	eba5 030b 	sub.w	r3, r5, fp
 801030c:	429f      	cmp	r7, r3
 801030e:	f77f af7c 	ble.w	801020a <_dtoa_r+0x432>
 8010312:	2200      	movs	r2, #0
 8010314:	4b30      	ldr	r3, [pc, #192]	; (80103d8 <_dtoa_r+0x600>)
 8010316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801031a:	f7f0 f96d 	bl	80005f8 <__aeabi_dmul>
 801031e:	2200      	movs	r2, #0
 8010320:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010324:	4b2c      	ldr	r3, [pc, #176]	; (80103d8 <_dtoa_r+0x600>)
 8010326:	e9dd 0100 	ldrd	r0, r1, [sp]
 801032a:	f7f0 f965 	bl	80005f8 <__aeabi_dmul>
 801032e:	e9cd 0100 	strd	r0, r1, [sp]
 8010332:	e7c4      	b.n	80102be <_dtoa_r+0x4e6>
 8010334:	462a      	mov	r2, r5
 8010336:	4633      	mov	r3, r6
 8010338:	f7f0 f95e 	bl	80005f8 <__aeabi_dmul>
 801033c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8010340:	eb0b 0507 	add.w	r5, fp, r7
 8010344:	465e      	mov	r6, fp
 8010346:	e9dd 0100 	ldrd	r0, r1, [sp]
 801034a:	f7f0 fc05 	bl	8000b58 <__aeabi_d2iz>
 801034e:	4607      	mov	r7, r0
 8010350:	f7f0 f8e8 	bl	8000524 <__aeabi_i2d>
 8010354:	3730      	adds	r7, #48	; 0x30
 8010356:	4602      	mov	r2, r0
 8010358:	460b      	mov	r3, r1
 801035a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801035e:	f7ef ff93 	bl	8000288 <__aeabi_dsub>
 8010362:	f806 7b01 	strb.w	r7, [r6], #1
 8010366:	42ae      	cmp	r6, r5
 8010368:	e9cd 0100 	strd	r0, r1, [sp]
 801036c:	f04f 0200 	mov.w	r2, #0
 8010370:	d126      	bne.n	80103c0 <_dtoa_r+0x5e8>
 8010372:	4b1c      	ldr	r3, [pc, #112]	; (80103e4 <_dtoa_r+0x60c>)
 8010374:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010378:	f7ef ff88 	bl	800028c <__adddf3>
 801037c:	4602      	mov	r2, r0
 801037e:	460b      	mov	r3, r1
 8010380:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010384:	f7f0 fbc8 	bl	8000b18 <__aeabi_dcmpgt>
 8010388:	2800      	cmp	r0, #0
 801038a:	d174      	bne.n	8010476 <_dtoa_r+0x69e>
 801038c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010390:	2000      	movs	r0, #0
 8010392:	4914      	ldr	r1, [pc, #80]	; (80103e4 <_dtoa_r+0x60c>)
 8010394:	f7ef ff78 	bl	8000288 <__aeabi_dsub>
 8010398:	4602      	mov	r2, r0
 801039a:	460b      	mov	r3, r1
 801039c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80103a0:	f7f0 fb9c 	bl	8000adc <__aeabi_dcmplt>
 80103a4:	2800      	cmp	r0, #0
 80103a6:	f43f af30 	beq.w	801020a <_dtoa_r+0x432>
 80103aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80103ae:	2b30      	cmp	r3, #48	; 0x30
 80103b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80103b4:	d002      	beq.n	80103bc <_dtoa_r+0x5e4>
 80103b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80103ba:	e04a      	b.n	8010452 <_dtoa_r+0x67a>
 80103bc:	4615      	mov	r5, r2
 80103be:	e7f4      	b.n	80103aa <_dtoa_r+0x5d2>
 80103c0:	4b05      	ldr	r3, [pc, #20]	; (80103d8 <_dtoa_r+0x600>)
 80103c2:	f7f0 f919 	bl	80005f8 <__aeabi_dmul>
 80103c6:	e9cd 0100 	strd	r0, r1, [sp]
 80103ca:	e7bc      	b.n	8010346 <_dtoa_r+0x56e>
 80103cc:	08012db8 	.word	0x08012db8
 80103d0:	08012d90 	.word	0x08012d90
 80103d4:	3ff00000 	.word	0x3ff00000
 80103d8:	40240000 	.word	0x40240000
 80103dc:	401c0000 	.word	0x401c0000
 80103e0:	40140000 	.word	0x40140000
 80103e4:	3fe00000 	.word	0x3fe00000
 80103e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80103ec:	465d      	mov	r5, fp
 80103ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80103f2:	4630      	mov	r0, r6
 80103f4:	4639      	mov	r1, r7
 80103f6:	f7f0 fa29 	bl	800084c <__aeabi_ddiv>
 80103fa:	f7f0 fbad 	bl	8000b58 <__aeabi_d2iz>
 80103fe:	4680      	mov	r8, r0
 8010400:	f7f0 f890 	bl	8000524 <__aeabi_i2d>
 8010404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010408:	f7f0 f8f6 	bl	80005f8 <__aeabi_dmul>
 801040c:	4602      	mov	r2, r0
 801040e:	460b      	mov	r3, r1
 8010410:	4630      	mov	r0, r6
 8010412:	4639      	mov	r1, r7
 8010414:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8010418:	f7ef ff36 	bl	8000288 <__aeabi_dsub>
 801041c:	f805 6b01 	strb.w	r6, [r5], #1
 8010420:	eba5 060b 	sub.w	r6, r5, fp
 8010424:	45b1      	cmp	r9, r6
 8010426:	4602      	mov	r2, r0
 8010428:	460b      	mov	r3, r1
 801042a:	d139      	bne.n	80104a0 <_dtoa_r+0x6c8>
 801042c:	f7ef ff2e 	bl	800028c <__adddf3>
 8010430:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010434:	4606      	mov	r6, r0
 8010436:	460f      	mov	r7, r1
 8010438:	f7f0 fb6e 	bl	8000b18 <__aeabi_dcmpgt>
 801043c:	b9c8      	cbnz	r0, 8010472 <_dtoa_r+0x69a>
 801043e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010442:	4630      	mov	r0, r6
 8010444:	4639      	mov	r1, r7
 8010446:	f7f0 fb3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801044a:	b110      	cbz	r0, 8010452 <_dtoa_r+0x67a>
 801044c:	f018 0f01 	tst.w	r8, #1
 8010450:	d10f      	bne.n	8010472 <_dtoa_r+0x69a>
 8010452:	9904      	ldr	r1, [sp, #16]
 8010454:	4620      	mov	r0, r4
 8010456:	f000 fec9 	bl	80111ec <_Bfree>
 801045a:	2300      	movs	r3, #0
 801045c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801045e:	702b      	strb	r3, [r5, #0]
 8010460:	f10a 0301 	add.w	r3, sl, #1
 8010464:	6013      	str	r3, [r2, #0]
 8010466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010468:	2b00      	cmp	r3, #0
 801046a:	f000 8241 	beq.w	80108f0 <_dtoa_r+0xb18>
 801046e:	601d      	str	r5, [r3, #0]
 8010470:	e23e      	b.n	80108f0 <_dtoa_r+0xb18>
 8010472:	f8cd a020 	str.w	sl, [sp, #32]
 8010476:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801047a:	2a39      	cmp	r2, #57	; 0x39
 801047c:	f105 33ff 	add.w	r3, r5, #4294967295
 8010480:	d108      	bne.n	8010494 <_dtoa_r+0x6bc>
 8010482:	459b      	cmp	fp, r3
 8010484:	d10a      	bne.n	801049c <_dtoa_r+0x6c4>
 8010486:	9b08      	ldr	r3, [sp, #32]
 8010488:	3301      	adds	r3, #1
 801048a:	9308      	str	r3, [sp, #32]
 801048c:	2330      	movs	r3, #48	; 0x30
 801048e:	f88b 3000 	strb.w	r3, [fp]
 8010492:	465b      	mov	r3, fp
 8010494:	781a      	ldrb	r2, [r3, #0]
 8010496:	3201      	adds	r2, #1
 8010498:	701a      	strb	r2, [r3, #0]
 801049a:	e78c      	b.n	80103b6 <_dtoa_r+0x5de>
 801049c:	461d      	mov	r5, r3
 801049e:	e7ea      	b.n	8010476 <_dtoa_r+0x69e>
 80104a0:	2200      	movs	r2, #0
 80104a2:	4b9b      	ldr	r3, [pc, #620]	; (8010710 <_dtoa_r+0x938>)
 80104a4:	f7f0 f8a8 	bl	80005f8 <__aeabi_dmul>
 80104a8:	2200      	movs	r2, #0
 80104aa:	2300      	movs	r3, #0
 80104ac:	4606      	mov	r6, r0
 80104ae:	460f      	mov	r7, r1
 80104b0:	f7f0 fb0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80104b4:	2800      	cmp	r0, #0
 80104b6:	d09a      	beq.n	80103ee <_dtoa_r+0x616>
 80104b8:	e7cb      	b.n	8010452 <_dtoa_r+0x67a>
 80104ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80104bc:	2a00      	cmp	r2, #0
 80104be:	f000 808b 	beq.w	80105d8 <_dtoa_r+0x800>
 80104c2:	9a06      	ldr	r2, [sp, #24]
 80104c4:	2a01      	cmp	r2, #1
 80104c6:	dc6e      	bgt.n	80105a6 <_dtoa_r+0x7ce>
 80104c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80104ca:	2a00      	cmp	r2, #0
 80104cc:	d067      	beq.n	801059e <_dtoa_r+0x7c6>
 80104ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80104d2:	9f07      	ldr	r7, [sp, #28]
 80104d4:	9d05      	ldr	r5, [sp, #20]
 80104d6:	9a05      	ldr	r2, [sp, #20]
 80104d8:	2101      	movs	r1, #1
 80104da:	441a      	add	r2, r3
 80104dc:	4620      	mov	r0, r4
 80104de:	9205      	str	r2, [sp, #20]
 80104e0:	4498      	add	r8, r3
 80104e2:	f000 ff61 	bl	80113a8 <__i2b>
 80104e6:	4606      	mov	r6, r0
 80104e8:	2d00      	cmp	r5, #0
 80104ea:	dd0c      	ble.n	8010506 <_dtoa_r+0x72e>
 80104ec:	f1b8 0f00 	cmp.w	r8, #0
 80104f0:	dd09      	ble.n	8010506 <_dtoa_r+0x72e>
 80104f2:	4545      	cmp	r5, r8
 80104f4:	9a05      	ldr	r2, [sp, #20]
 80104f6:	462b      	mov	r3, r5
 80104f8:	bfa8      	it	ge
 80104fa:	4643      	movge	r3, r8
 80104fc:	1ad2      	subs	r2, r2, r3
 80104fe:	9205      	str	r2, [sp, #20]
 8010500:	1aed      	subs	r5, r5, r3
 8010502:	eba8 0803 	sub.w	r8, r8, r3
 8010506:	9b07      	ldr	r3, [sp, #28]
 8010508:	b1eb      	cbz	r3, 8010546 <_dtoa_r+0x76e>
 801050a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801050c:	2b00      	cmp	r3, #0
 801050e:	d067      	beq.n	80105e0 <_dtoa_r+0x808>
 8010510:	b18f      	cbz	r7, 8010536 <_dtoa_r+0x75e>
 8010512:	4631      	mov	r1, r6
 8010514:	463a      	mov	r2, r7
 8010516:	4620      	mov	r0, r4
 8010518:	f000 ffe6 	bl	80114e8 <__pow5mult>
 801051c:	9a04      	ldr	r2, [sp, #16]
 801051e:	4601      	mov	r1, r0
 8010520:	4606      	mov	r6, r0
 8010522:	4620      	mov	r0, r4
 8010524:	f000 ff49 	bl	80113ba <__multiply>
 8010528:	9904      	ldr	r1, [sp, #16]
 801052a:	9008      	str	r0, [sp, #32]
 801052c:	4620      	mov	r0, r4
 801052e:	f000 fe5d 	bl	80111ec <_Bfree>
 8010532:	9b08      	ldr	r3, [sp, #32]
 8010534:	9304      	str	r3, [sp, #16]
 8010536:	9b07      	ldr	r3, [sp, #28]
 8010538:	1bda      	subs	r2, r3, r7
 801053a:	d004      	beq.n	8010546 <_dtoa_r+0x76e>
 801053c:	9904      	ldr	r1, [sp, #16]
 801053e:	4620      	mov	r0, r4
 8010540:	f000 ffd2 	bl	80114e8 <__pow5mult>
 8010544:	9004      	str	r0, [sp, #16]
 8010546:	2101      	movs	r1, #1
 8010548:	4620      	mov	r0, r4
 801054a:	f000 ff2d 	bl	80113a8 <__i2b>
 801054e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010550:	4607      	mov	r7, r0
 8010552:	2b00      	cmp	r3, #0
 8010554:	f000 81d0 	beq.w	80108f8 <_dtoa_r+0xb20>
 8010558:	461a      	mov	r2, r3
 801055a:	4601      	mov	r1, r0
 801055c:	4620      	mov	r0, r4
 801055e:	f000 ffc3 	bl	80114e8 <__pow5mult>
 8010562:	9b06      	ldr	r3, [sp, #24]
 8010564:	2b01      	cmp	r3, #1
 8010566:	4607      	mov	r7, r0
 8010568:	dc40      	bgt.n	80105ec <_dtoa_r+0x814>
 801056a:	9b00      	ldr	r3, [sp, #0]
 801056c:	2b00      	cmp	r3, #0
 801056e:	d139      	bne.n	80105e4 <_dtoa_r+0x80c>
 8010570:	9b01      	ldr	r3, [sp, #4]
 8010572:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010576:	2b00      	cmp	r3, #0
 8010578:	d136      	bne.n	80105e8 <_dtoa_r+0x810>
 801057a:	9b01      	ldr	r3, [sp, #4]
 801057c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010580:	0d1b      	lsrs	r3, r3, #20
 8010582:	051b      	lsls	r3, r3, #20
 8010584:	b12b      	cbz	r3, 8010592 <_dtoa_r+0x7ba>
 8010586:	9b05      	ldr	r3, [sp, #20]
 8010588:	3301      	adds	r3, #1
 801058a:	9305      	str	r3, [sp, #20]
 801058c:	f108 0801 	add.w	r8, r8, #1
 8010590:	2301      	movs	r3, #1
 8010592:	9307      	str	r3, [sp, #28]
 8010594:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010596:	2b00      	cmp	r3, #0
 8010598:	d12a      	bne.n	80105f0 <_dtoa_r+0x818>
 801059a:	2001      	movs	r0, #1
 801059c:	e030      	b.n	8010600 <_dtoa_r+0x828>
 801059e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80105a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80105a4:	e795      	b.n	80104d2 <_dtoa_r+0x6fa>
 80105a6:	9b07      	ldr	r3, [sp, #28]
 80105a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80105ac:	42bb      	cmp	r3, r7
 80105ae:	bfbf      	itttt	lt
 80105b0:	9b07      	ldrlt	r3, [sp, #28]
 80105b2:	9707      	strlt	r7, [sp, #28]
 80105b4:	1afa      	sublt	r2, r7, r3
 80105b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80105b8:	bfbb      	ittet	lt
 80105ba:	189b      	addlt	r3, r3, r2
 80105bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80105be:	1bdf      	subge	r7, r3, r7
 80105c0:	2700      	movlt	r7, #0
 80105c2:	f1b9 0f00 	cmp.w	r9, #0
 80105c6:	bfb5      	itete	lt
 80105c8:	9b05      	ldrlt	r3, [sp, #20]
 80105ca:	9d05      	ldrge	r5, [sp, #20]
 80105cc:	eba3 0509 	sublt.w	r5, r3, r9
 80105d0:	464b      	movge	r3, r9
 80105d2:	bfb8      	it	lt
 80105d4:	2300      	movlt	r3, #0
 80105d6:	e77e      	b.n	80104d6 <_dtoa_r+0x6fe>
 80105d8:	9f07      	ldr	r7, [sp, #28]
 80105da:	9d05      	ldr	r5, [sp, #20]
 80105dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80105de:	e783      	b.n	80104e8 <_dtoa_r+0x710>
 80105e0:	9a07      	ldr	r2, [sp, #28]
 80105e2:	e7ab      	b.n	801053c <_dtoa_r+0x764>
 80105e4:	2300      	movs	r3, #0
 80105e6:	e7d4      	b.n	8010592 <_dtoa_r+0x7ba>
 80105e8:	9b00      	ldr	r3, [sp, #0]
 80105ea:	e7d2      	b.n	8010592 <_dtoa_r+0x7ba>
 80105ec:	2300      	movs	r3, #0
 80105ee:	9307      	str	r3, [sp, #28]
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80105f6:	6918      	ldr	r0, [r3, #16]
 80105f8:	f000 fe88 	bl	801130c <__hi0bits>
 80105fc:	f1c0 0020 	rsb	r0, r0, #32
 8010600:	4440      	add	r0, r8
 8010602:	f010 001f 	ands.w	r0, r0, #31
 8010606:	d047      	beq.n	8010698 <_dtoa_r+0x8c0>
 8010608:	f1c0 0320 	rsb	r3, r0, #32
 801060c:	2b04      	cmp	r3, #4
 801060e:	dd3b      	ble.n	8010688 <_dtoa_r+0x8b0>
 8010610:	9b05      	ldr	r3, [sp, #20]
 8010612:	f1c0 001c 	rsb	r0, r0, #28
 8010616:	4403      	add	r3, r0
 8010618:	9305      	str	r3, [sp, #20]
 801061a:	4405      	add	r5, r0
 801061c:	4480      	add	r8, r0
 801061e:	9b05      	ldr	r3, [sp, #20]
 8010620:	2b00      	cmp	r3, #0
 8010622:	dd05      	ble.n	8010630 <_dtoa_r+0x858>
 8010624:	461a      	mov	r2, r3
 8010626:	9904      	ldr	r1, [sp, #16]
 8010628:	4620      	mov	r0, r4
 801062a:	f000 ffab 	bl	8011584 <__lshift>
 801062e:	9004      	str	r0, [sp, #16]
 8010630:	f1b8 0f00 	cmp.w	r8, #0
 8010634:	dd05      	ble.n	8010642 <_dtoa_r+0x86a>
 8010636:	4639      	mov	r1, r7
 8010638:	4642      	mov	r2, r8
 801063a:	4620      	mov	r0, r4
 801063c:	f000 ffa2 	bl	8011584 <__lshift>
 8010640:	4607      	mov	r7, r0
 8010642:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010644:	b353      	cbz	r3, 801069c <_dtoa_r+0x8c4>
 8010646:	4639      	mov	r1, r7
 8010648:	9804      	ldr	r0, [sp, #16]
 801064a:	f000 ffef 	bl	801162c <__mcmp>
 801064e:	2800      	cmp	r0, #0
 8010650:	da24      	bge.n	801069c <_dtoa_r+0x8c4>
 8010652:	2300      	movs	r3, #0
 8010654:	220a      	movs	r2, #10
 8010656:	9904      	ldr	r1, [sp, #16]
 8010658:	4620      	mov	r0, r4
 801065a:	f000 fdde 	bl	801121a <__multadd>
 801065e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010660:	9004      	str	r0, [sp, #16]
 8010662:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010666:	2b00      	cmp	r3, #0
 8010668:	f000 814d 	beq.w	8010906 <_dtoa_r+0xb2e>
 801066c:	2300      	movs	r3, #0
 801066e:	4631      	mov	r1, r6
 8010670:	220a      	movs	r2, #10
 8010672:	4620      	mov	r0, r4
 8010674:	f000 fdd1 	bl	801121a <__multadd>
 8010678:	9b02      	ldr	r3, [sp, #8]
 801067a:	2b00      	cmp	r3, #0
 801067c:	4606      	mov	r6, r0
 801067e:	dc4f      	bgt.n	8010720 <_dtoa_r+0x948>
 8010680:	9b06      	ldr	r3, [sp, #24]
 8010682:	2b02      	cmp	r3, #2
 8010684:	dd4c      	ble.n	8010720 <_dtoa_r+0x948>
 8010686:	e011      	b.n	80106ac <_dtoa_r+0x8d4>
 8010688:	d0c9      	beq.n	801061e <_dtoa_r+0x846>
 801068a:	9a05      	ldr	r2, [sp, #20]
 801068c:	331c      	adds	r3, #28
 801068e:	441a      	add	r2, r3
 8010690:	9205      	str	r2, [sp, #20]
 8010692:	441d      	add	r5, r3
 8010694:	4498      	add	r8, r3
 8010696:	e7c2      	b.n	801061e <_dtoa_r+0x846>
 8010698:	4603      	mov	r3, r0
 801069a:	e7f6      	b.n	801068a <_dtoa_r+0x8b2>
 801069c:	f1b9 0f00 	cmp.w	r9, #0
 80106a0:	dc38      	bgt.n	8010714 <_dtoa_r+0x93c>
 80106a2:	9b06      	ldr	r3, [sp, #24]
 80106a4:	2b02      	cmp	r3, #2
 80106a6:	dd35      	ble.n	8010714 <_dtoa_r+0x93c>
 80106a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80106ac:	9b02      	ldr	r3, [sp, #8]
 80106ae:	b963      	cbnz	r3, 80106ca <_dtoa_r+0x8f2>
 80106b0:	4639      	mov	r1, r7
 80106b2:	2205      	movs	r2, #5
 80106b4:	4620      	mov	r0, r4
 80106b6:	f000 fdb0 	bl	801121a <__multadd>
 80106ba:	4601      	mov	r1, r0
 80106bc:	4607      	mov	r7, r0
 80106be:	9804      	ldr	r0, [sp, #16]
 80106c0:	f000 ffb4 	bl	801162c <__mcmp>
 80106c4:	2800      	cmp	r0, #0
 80106c6:	f73f adcc 	bgt.w	8010262 <_dtoa_r+0x48a>
 80106ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80106cc:	465d      	mov	r5, fp
 80106ce:	ea6f 0a03 	mvn.w	sl, r3
 80106d2:	f04f 0900 	mov.w	r9, #0
 80106d6:	4639      	mov	r1, r7
 80106d8:	4620      	mov	r0, r4
 80106da:	f000 fd87 	bl	80111ec <_Bfree>
 80106de:	2e00      	cmp	r6, #0
 80106e0:	f43f aeb7 	beq.w	8010452 <_dtoa_r+0x67a>
 80106e4:	f1b9 0f00 	cmp.w	r9, #0
 80106e8:	d005      	beq.n	80106f6 <_dtoa_r+0x91e>
 80106ea:	45b1      	cmp	r9, r6
 80106ec:	d003      	beq.n	80106f6 <_dtoa_r+0x91e>
 80106ee:	4649      	mov	r1, r9
 80106f0:	4620      	mov	r0, r4
 80106f2:	f000 fd7b 	bl	80111ec <_Bfree>
 80106f6:	4631      	mov	r1, r6
 80106f8:	4620      	mov	r0, r4
 80106fa:	f000 fd77 	bl	80111ec <_Bfree>
 80106fe:	e6a8      	b.n	8010452 <_dtoa_r+0x67a>
 8010700:	2700      	movs	r7, #0
 8010702:	463e      	mov	r6, r7
 8010704:	e7e1      	b.n	80106ca <_dtoa_r+0x8f2>
 8010706:	f8dd a020 	ldr.w	sl, [sp, #32]
 801070a:	463e      	mov	r6, r7
 801070c:	e5a9      	b.n	8010262 <_dtoa_r+0x48a>
 801070e:	bf00      	nop
 8010710:	40240000 	.word	0x40240000
 8010714:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010716:	f8cd 9008 	str.w	r9, [sp, #8]
 801071a:	2b00      	cmp	r3, #0
 801071c:	f000 80fa 	beq.w	8010914 <_dtoa_r+0xb3c>
 8010720:	2d00      	cmp	r5, #0
 8010722:	dd05      	ble.n	8010730 <_dtoa_r+0x958>
 8010724:	4631      	mov	r1, r6
 8010726:	462a      	mov	r2, r5
 8010728:	4620      	mov	r0, r4
 801072a:	f000 ff2b 	bl	8011584 <__lshift>
 801072e:	4606      	mov	r6, r0
 8010730:	9b07      	ldr	r3, [sp, #28]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d04c      	beq.n	80107d0 <_dtoa_r+0x9f8>
 8010736:	6871      	ldr	r1, [r6, #4]
 8010738:	4620      	mov	r0, r4
 801073a:	f000 fd23 	bl	8011184 <_Balloc>
 801073e:	6932      	ldr	r2, [r6, #16]
 8010740:	3202      	adds	r2, #2
 8010742:	4605      	mov	r5, r0
 8010744:	0092      	lsls	r2, r2, #2
 8010746:	f106 010c 	add.w	r1, r6, #12
 801074a:	300c      	adds	r0, #12
 801074c:	f7fd fd76 	bl	800e23c <memcpy>
 8010750:	2201      	movs	r2, #1
 8010752:	4629      	mov	r1, r5
 8010754:	4620      	mov	r0, r4
 8010756:	f000 ff15 	bl	8011584 <__lshift>
 801075a:	9b00      	ldr	r3, [sp, #0]
 801075c:	f8cd b014 	str.w	fp, [sp, #20]
 8010760:	f003 0301 	and.w	r3, r3, #1
 8010764:	46b1      	mov	r9, r6
 8010766:	9307      	str	r3, [sp, #28]
 8010768:	4606      	mov	r6, r0
 801076a:	4639      	mov	r1, r7
 801076c:	9804      	ldr	r0, [sp, #16]
 801076e:	f7ff faa5 	bl	800fcbc <quorem>
 8010772:	4649      	mov	r1, r9
 8010774:	4605      	mov	r5, r0
 8010776:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801077a:	9804      	ldr	r0, [sp, #16]
 801077c:	f000 ff56 	bl	801162c <__mcmp>
 8010780:	4632      	mov	r2, r6
 8010782:	9000      	str	r0, [sp, #0]
 8010784:	4639      	mov	r1, r7
 8010786:	4620      	mov	r0, r4
 8010788:	f000 ff6a 	bl	8011660 <__mdiff>
 801078c:	68c3      	ldr	r3, [r0, #12]
 801078e:	4602      	mov	r2, r0
 8010790:	bb03      	cbnz	r3, 80107d4 <_dtoa_r+0x9fc>
 8010792:	4601      	mov	r1, r0
 8010794:	9008      	str	r0, [sp, #32]
 8010796:	9804      	ldr	r0, [sp, #16]
 8010798:	f000 ff48 	bl	801162c <__mcmp>
 801079c:	9a08      	ldr	r2, [sp, #32]
 801079e:	4603      	mov	r3, r0
 80107a0:	4611      	mov	r1, r2
 80107a2:	4620      	mov	r0, r4
 80107a4:	9308      	str	r3, [sp, #32]
 80107a6:	f000 fd21 	bl	80111ec <_Bfree>
 80107aa:	9b08      	ldr	r3, [sp, #32]
 80107ac:	b9a3      	cbnz	r3, 80107d8 <_dtoa_r+0xa00>
 80107ae:	9a06      	ldr	r2, [sp, #24]
 80107b0:	b992      	cbnz	r2, 80107d8 <_dtoa_r+0xa00>
 80107b2:	9a07      	ldr	r2, [sp, #28]
 80107b4:	b982      	cbnz	r2, 80107d8 <_dtoa_r+0xa00>
 80107b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80107ba:	d029      	beq.n	8010810 <_dtoa_r+0xa38>
 80107bc:	9b00      	ldr	r3, [sp, #0]
 80107be:	2b00      	cmp	r3, #0
 80107c0:	dd01      	ble.n	80107c6 <_dtoa_r+0x9ee>
 80107c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80107c6:	9b05      	ldr	r3, [sp, #20]
 80107c8:	1c5d      	adds	r5, r3, #1
 80107ca:	f883 8000 	strb.w	r8, [r3]
 80107ce:	e782      	b.n	80106d6 <_dtoa_r+0x8fe>
 80107d0:	4630      	mov	r0, r6
 80107d2:	e7c2      	b.n	801075a <_dtoa_r+0x982>
 80107d4:	2301      	movs	r3, #1
 80107d6:	e7e3      	b.n	80107a0 <_dtoa_r+0x9c8>
 80107d8:	9a00      	ldr	r2, [sp, #0]
 80107da:	2a00      	cmp	r2, #0
 80107dc:	db04      	blt.n	80107e8 <_dtoa_r+0xa10>
 80107de:	d125      	bne.n	801082c <_dtoa_r+0xa54>
 80107e0:	9a06      	ldr	r2, [sp, #24]
 80107e2:	bb1a      	cbnz	r2, 801082c <_dtoa_r+0xa54>
 80107e4:	9a07      	ldr	r2, [sp, #28]
 80107e6:	bb0a      	cbnz	r2, 801082c <_dtoa_r+0xa54>
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	ddec      	ble.n	80107c6 <_dtoa_r+0x9ee>
 80107ec:	2201      	movs	r2, #1
 80107ee:	9904      	ldr	r1, [sp, #16]
 80107f0:	4620      	mov	r0, r4
 80107f2:	f000 fec7 	bl	8011584 <__lshift>
 80107f6:	4639      	mov	r1, r7
 80107f8:	9004      	str	r0, [sp, #16]
 80107fa:	f000 ff17 	bl	801162c <__mcmp>
 80107fe:	2800      	cmp	r0, #0
 8010800:	dc03      	bgt.n	801080a <_dtoa_r+0xa32>
 8010802:	d1e0      	bne.n	80107c6 <_dtoa_r+0x9ee>
 8010804:	f018 0f01 	tst.w	r8, #1
 8010808:	d0dd      	beq.n	80107c6 <_dtoa_r+0x9ee>
 801080a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801080e:	d1d8      	bne.n	80107c2 <_dtoa_r+0x9ea>
 8010810:	9b05      	ldr	r3, [sp, #20]
 8010812:	9a05      	ldr	r2, [sp, #20]
 8010814:	1c5d      	adds	r5, r3, #1
 8010816:	2339      	movs	r3, #57	; 0x39
 8010818:	7013      	strb	r3, [r2, #0]
 801081a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801081e:	2b39      	cmp	r3, #57	; 0x39
 8010820:	f105 32ff 	add.w	r2, r5, #4294967295
 8010824:	d04f      	beq.n	80108c6 <_dtoa_r+0xaee>
 8010826:	3301      	adds	r3, #1
 8010828:	7013      	strb	r3, [r2, #0]
 801082a:	e754      	b.n	80106d6 <_dtoa_r+0x8fe>
 801082c:	9a05      	ldr	r2, [sp, #20]
 801082e:	2b00      	cmp	r3, #0
 8010830:	f102 0501 	add.w	r5, r2, #1
 8010834:	dd06      	ble.n	8010844 <_dtoa_r+0xa6c>
 8010836:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801083a:	d0e9      	beq.n	8010810 <_dtoa_r+0xa38>
 801083c:	f108 0801 	add.w	r8, r8, #1
 8010840:	9b05      	ldr	r3, [sp, #20]
 8010842:	e7c2      	b.n	80107ca <_dtoa_r+0x9f2>
 8010844:	9a02      	ldr	r2, [sp, #8]
 8010846:	f805 8c01 	strb.w	r8, [r5, #-1]
 801084a:	eba5 030b 	sub.w	r3, r5, fp
 801084e:	4293      	cmp	r3, r2
 8010850:	d021      	beq.n	8010896 <_dtoa_r+0xabe>
 8010852:	2300      	movs	r3, #0
 8010854:	220a      	movs	r2, #10
 8010856:	9904      	ldr	r1, [sp, #16]
 8010858:	4620      	mov	r0, r4
 801085a:	f000 fcde 	bl	801121a <__multadd>
 801085e:	45b1      	cmp	r9, r6
 8010860:	9004      	str	r0, [sp, #16]
 8010862:	f04f 0300 	mov.w	r3, #0
 8010866:	f04f 020a 	mov.w	r2, #10
 801086a:	4649      	mov	r1, r9
 801086c:	4620      	mov	r0, r4
 801086e:	d105      	bne.n	801087c <_dtoa_r+0xaa4>
 8010870:	f000 fcd3 	bl	801121a <__multadd>
 8010874:	4681      	mov	r9, r0
 8010876:	4606      	mov	r6, r0
 8010878:	9505      	str	r5, [sp, #20]
 801087a:	e776      	b.n	801076a <_dtoa_r+0x992>
 801087c:	f000 fccd 	bl	801121a <__multadd>
 8010880:	4631      	mov	r1, r6
 8010882:	4681      	mov	r9, r0
 8010884:	2300      	movs	r3, #0
 8010886:	220a      	movs	r2, #10
 8010888:	4620      	mov	r0, r4
 801088a:	f000 fcc6 	bl	801121a <__multadd>
 801088e:	4606      	mov	r6, r0
 8010890:	e7f2      	b.n	8010878 <_dtoa_r+0xaa0>
 8010892:	f04f 0900 	mov.w	r9, #0
 8010896:	2201      	movs	r2, #1
 8010898:	9904      	ldr	r1, [sp, #16]
 801089a:	4620      	mov	r0, r4
 801089c:	f000 fe72 	bl	8011584 <__lshift>
 80108a0:	4639      	mov	r1, r7
 80108a2:	9004      	str	r0, [sp, #16]
 80108a4:	f000 fec2 	bl	801162c <__mcmp>
 80108a8:	2800      	cmp	r0, #0
 80108aa:	dcb6      	bgt.n	801081a <_dtoa_r+0xa42>
 80108ac:	d102      	bne.n	80108b4 <_dtoa_r+0xadc>
 80108ae:	f018 0f01 	tst.w	r8, #1
 80108b2:	d1b2      	bne.n	801081a <_dtoa_r+0xa42>
 80108b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80108b8:	2b30      	cmp	r3, #48	; 0x30
 80108ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80108be:	f47f af0a 	bne.w	80106d6 <_dtoa_r+0x8fe>
 80108c2:	4615      	mov	r5, r2
 80108c4:	e7f6      	b.n	80108b4 <_dtoa_r+0xadc>
 80108c6:	4593      	cmp	fp, r2
 80108c8:	d105      	bne.n	80108d6 <_dtoa_r+0xafe>
 80108ca:	2331      	movs	r3, #49	; 0x31
 80108cc:	f10a 0a01 	add.w	sl, sl, #1
 80108d0:	f88b 3000 	strb.w	r3, [fp]
 80108d4:	e6ff      	b.n	80106d6 <_dtoa_r+0x8fe>
 80108d6:	4615      	mov	r5, r2
 80108d8:	e79f      	b.n	801081a <_dtoa_r+0xa42>
 80108da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8010940 <_dtoa_r+0xb68>
 80108de:	e007      	b.n	80108f0 <_dtoa_r+0xb18>
 80108e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8010944 <_dtoa_r+0xb6c>
 80108e6:	b11b      	cbz	r3, 80108f0 <_dtoa_r+0xb18>
 80108e8:	f10b 0308 	add.w	r3, fp, #8
 80108ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80108ee:	6013      	str	r3, [r2, #0]
 80108f0:	4658      	mov	r0, fp
 80108f2:	b017      	add	sp, #92	; 0x5c
 80108f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108f8:	9b06      	ldr	r3, [sp, #24]
 80108fa:	2b01      	cmp	r3, #1
 80108fc:	f77f ae35 	ble.w	801056a <_dtoa_r+0x792>
 8010900:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010902:	9307      	str	r3, [sp, #28]
 8010904:	e649      	b.n	801059a <_dtoa_r+0x7c2>
 8010906:	9b02      	ldr	r3, [sp, #8]
 8010908:	2b00      	cmp	r3, #0
 801090a:	dc03      	bgt.n	8010914 <_dtoa_r+0xb3c>
 801090c:	9b06      	ldr	r3, [sp, #24]
 801090e:	2b02      	cmp	r3, #2
 8010910:	f73f aecc 	bgt.w	80106ac <_dtoa_r+0x8d4>
 8010914:	465d      	mov	r5, fp
 8010916:	4639      	mov	r1, r7
 8010918:	9804      	ldr	r0, [sp, #16]
 801091a:	f7ff f9cf 	bl	800fcbc <quorem>
 801091e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010922:	f805 8b01 	strb.w	r8, [r5], #1
 8010926:	9a02      	ldr	r2, [sp, #8]
 8010928:	eba5 030b 	sub.w	r3, r5, fp
 801092c:	429a      	cmp	r2, r3
 801092e:	ddb0      	ble.n	8010892 <_dtoa_r+0xaba>
 8010930:	2300      	movs	r3, #0
 8010932:	220a      	movs	r2, #10
 8010934:	9904      	ldr	r1, [sp, #16]
 8010936:	4620      	mov	r0, r4
 8010938:	f000 fc6f 	bl	801121a <__multadd>
 801093c:	9004      	str	r0, [sp, #16]
 801093e:	e7ea      	b.n	8010916 <_dtoa_r+0xb3e>
 8010940:	08012c94 	.word	0x08012c94
 8010944:	08012d10 	.word	0x08012d10

08010948 <std>:
 8010948:	2300      	movs	r3, #0
 801094a:	b510      	push	{r4, lr}
 801094c:	4604      	mov	r4, r0
 801094e:	e9c0 3300 	strd	r3, r3, [r0]
 8010952:	6083      	str	r3, [r0, #8]
 8010954:	8181      	strh	r1, [r0, #12]
 8010956:	6643      	str	r3, [r0, #100]	; 0x64
 8010958:	81c2      	strh	r2, [r0, #14]
 801095a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801095e:	6183      	str	r3, [r0, #24]
 8010960:	4619      	mov	r1, r3
 8010962:	2208      	movs	r2, #8
 8010964:	305c      	adds	r0, #92	; 0x5c
 8010966:	f7fd fc74 	bl	800e252 <memset>
 801096a:	4b05      	ldr	r3, [pc, #20]	; (8010980 <std+0x38>)
 801096c:	6263      	str	r3, [r4, #36]	; 0x24
 801096e:	4b05      	ldr	r3, [pc, #20]	; (8010984 <std+0x3c>)
 8010970:	62a3      	str	r3, [r4, #40]	; 0x28
 8010972:	4b05      	ldr	r3, [pc, #20]	; (8010988 <std+0x40>)
 8010974:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010976:	4b05      	ldr	r3, [pc, #20]	; (801098c <std+0x44>)
 8010978:	6224      	str	r4, [r4, #32]
 801097a:	6323      	str	r3, [r4, #48]	; 0x30
 801097c:	bd10      	pop	{r4, pc}
 801097e:	bf00      	nop
 8010980:	08012035 	.word	0x08012035
 8010984:	08012057 	.word	0x08012057
 8010988:	0801208f 	.word	0x0801208f
 801098c:	080120b3 	.word	0x080120b3

08010990 <_cleanup_r>:
 8010990:	4901      	ldr	r1, [pc, #4]	; (8010998 <_cleanup_r+0x8>)
 8010992:	f000 b885 	b.w	8010aa0 <_fwalk_reent>
 8010996:	bf00      	nop
 8010998:	080123cd 	.word	0x080123cd

0801099c <__sfmoreglue>:
 801099c:	b570      	push	{r4, r5, r6, lr}
 801099e:	1e4a      	subs	r2, r1, #1
 80109a0:	2568      	movs	r5, #104	; 0x68
 80109a2:	4355      	muls	r5, r2
 80109a4:	460e      	mov	r6, r1
 80109a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80109aa:	f001 f847 	bl	8011a3c <_malloc_r>
 80109ae:	4604      	mov	r4, r0
 80109b0:	b140      	cbz	r0, 80109c4 <__sfmoreglue+0x28>
 80109b2:	2100      	movs	r1, #0
 80109b4:	e9c0 1600 	strd	r1, r6, [r0]
 80109b8:	300c      	adds	r0, #12
 80109ba:	60a0      	str	r0, [r4, #8]
 80109bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80109c0:	f7fd fc47 	bl	800e252 <memset>
 80109c4:	4620      	mov	r0, r4
 80109c6:	bd70      	pop	{r4, r5, r6, pc}

080109c8 <__sinit>:
 80109c8:	6983      	ldr	r3, [r0, #24]
 80109ca:	b510      	push	{r4, lr}
 80109cc:	4604      	mov	r4, r0
 80109ce:	bb33      	cbnz	r3, 8010a1e <__sinit+0x56>
 80109d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80109d4:	6503      	str	r3, [r0, #80]	; 0x50
 80109d6:	4b12      	ldr	r3, [pc, #72]	; (8010a20 <__sinit+0x58>)
 80109d8:	4a12      	ldr	r2, [pc, #72]	; (8010a24 <__sinit+0x5c>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	6282      	str	r2, [r0, #40]	; 0x28
 80109de:	4298      	cmp	r0, r3
 80109e0:	bf04      	itt	eq
 80109e2:	2301      	moveq	r3, #1
 80109e4:	6183      	streq	r3, [r0, #24]
 80109e6:	f000 f81f 	bl	8010a28 <__sfp>
 80109ea:	6060      	str	r0, [r4, #4]
 80109ec:	4620      	mov	r0, r4
 80109ee:	f000 f81b 	bl	8010a28 <__sfp>
 80109f2:	60a0      	str	r0, [r4, #8]
 80109f4:	4620      	mov	r0, r4
 80109f6:	f000 f817 	bl	8010a28 <__sfp>
 80109fa:	2200      	movs	r2, #0
 80109fc:	60e0      	str	r0, [r4, #12]
 80109fe:	2104      	movs	r1, #4
 8010a00:	6860      	ldr	r0, [r4, #4]
 8010a02:	f7ff ffa1 	bl	8010948 <std>
 8010a06:	2201      	movs	r2, #1
 8010a08:	2109      	movs	r1, #9
 8010a0a:	68a0      	ldr	r0, [r4, #8]
 8010a0c:	f7ff ff9c 	bl	8010948 <std>
 8010a10:	2202      	movs	r2, #2
 8010a12:	2112      	movs	r1, #18
 8010a14:	68e0      	ldr	r0, [r4, #12]
 8010a16:	f7ff ff97 	bl	8010948 <std>
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	61a3      	str	r3, [r4, #24]
 8010a1e:	bd10      	pop	{r4, pc}
 8010a20:	08012c80 	.word	0x08012c80
 8010a24:	08010991 	.word	0x08010991

08010a28 <__sfp>:
 8010a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a2a:	4b1b      	ldr	r3, [pc, #108]	; (8010a98 <__sfp+0x70>)
 8010a2c:	681e      	ldr	r6, [r3, #0]
 8010a2e:	69b3      	ldr	r3, [r6, #24]
 8010a30:	4607      	mov	r7, r0
 8010a32:	b913      	cbnz	r3, 8010a3a <__sfp+0x12>
 8010a34:	4630      	mov	r0, r6
 8010a36:	f7ff ffc7 	bl	80109c8 <__sinit>
 8010a3a:	3648      	adds	r6, #72	; 0x48
 8010a3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010a40:	3b01      	subs	r3, #1
 8010a42:	d503      	bpl.n	8010a4c <__sfp+0x24>
 8010a44:	6833      	ldr	r3, [r6, #0]
 8010a46:	b133      	cbz	r3, 8010a56 <__sfp+0x2e>
 8010a48:	6836      	ldr	r6, [r6, #0]
 8010a4a:	e7f7      	b.n	8010a3c <__sfp+0x14>
 8010a4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010a50:	b16d      	cbz	r5, 8010a6e <__sfp+0x46>
 8010a52:	3468      	adds	r4, #104	; 0x68
 8010a54:	e7f4      	b.n	8010a40 <__sfp+0x18>
 8010a56:	2104      	movs	r1, #4
 8010a58:	4638      	mov	r0, r7
 8010a5a:	f7ff ff9f 	bl	801099c <__sfmoreglue>
 8010a5e:	6030      	str	r0, [r6, #0]
 8010a60:	2800      	cmp	r0, #0
 8010a62:	d1f1      	bne.n	8010a48 <__sfp+0x20>
 8010a64:	230c      	movs	r3, #12
 8010a66:	603b      	str	r3, [r7, #0]
 8010a68:	4604      	mov	r4, r0
 8010a6a:	4620      	mov	r0, r4
 8010a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a6e:	4b0b      	ldr	r3, [pc, #44]	; (8010a9c <__sfp+0x74>)
 8010a70:	6665      	str	r5, [r4, #100]	; 0x64
 8010a72:	e9c4 5500 	strd	r5, r5, [r4]
 8010a76:	60a5      	str	r5, [r4, #8]
 8010a78:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010a7c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010a80:	2208      	movs	r2, #8
 8010a82:	4629      	mov	r1, r5
 8010a84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010a88:	f7fd fbe3 	bl	800e252 <memset>
 8010a8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010a90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010a94:	e7e9      	b.n	8010a6a <__sfp+0x42>
 8010a96:	bf00      	nop
 8010a98:	08012c80 	.word	0x08012c80
 8010a9c:	ffff0001 	.word	0xffff0001

08010aa0 <_fwalk_reent>:
 8010aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aa4:	4680      	mov	r8, r0
 8010aa6:	4689      	mov	r9, r1
 8010aa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010aac:	2600      	movs	r6, #0
 8010aae:	b914      	cbnz	r4, 8010ab6 <_fwalk_reent+0x16>
 8010ab0:	4630      	mov	r0, r6
 8010ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ab6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010aba:	3f01      	subs	r7, #1
 8010abc:	d501      	bpl.n	8010ac2 <_fwalk_reent+0x22>
 8010abe:	6824      	ldr	r4, [r4, #0]
 8010ac0:	e7f5      	b.n	8010aae <_fwalk_reent+0xe>
 8010ac2:	89ab      	ldrh	r3, [r5, #12]
 8010ac4:	2b01      	cmp	r3, #1
 8010ac6:	d907      	bls.n	8010ad8 <_fwalk_reent+0x38>
 8010ac8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010acc:	3301      	adds	r3, #1
 8010ace:	d003      	beq.n	8010ad8 <_fwalk_reent+0x38>
 8010ad0:	4629      	mov	r1, r5
 8010ad2:	4640      	mov	r0, r8
 8010ad4:	47c8      	blx	r9
 8010ad6:	4306      	orrs	r6, r0
 8010ad8:	3568      	adds	r5, #104	; 0x68
 8010ada:	e7ee      	b.n	8010aba <_fwalk_reent+0x1a>

08010adc <rshift>:
 8010adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ade:	6906      	ldr	r6, [r0, #16]
 8010ae0:	114b      	asrs	r3, r1, #5
 8010ae2:	429e      	cmp	r6, r3
 8010ae4:	f100 0414 	add.w	r4, r0, #20
 8010ae8:	dd30      	ble.n	8010b4c <rshift+0x70>
 8010aea:	f011 011f 	ands.w	r1, r1, #31
 8010aee:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8010af2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010af6:	d108      	bne.n	8010b0a <rshift+0x2e>
 8010af8:	4621      	mov	r1, r4
 8010afa:	42b2      	cmp	r2, r6
 8010afc:	460b      	mov	r3, r1
 8010afe:	d211      	bcs.n	8010b24 <rshift+0x48>
 8010b00:	f852 3b04 	ldr.w	r3, [r2], #4
 8010b04:	f841 3b04 	str.w	r3, [r1], #4
 8010b08:	e7f7      	b.n	8010afa <rshift+0x1e>
 8010b0a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8010b0e:	f1c1 0c20 	rsb	ip, r1, #32
 8010b12:	40cd      	lsrs	r5, r1
 8010b14:	3204      	adds	r2, #4
 8010b16:	4623      	mov	r3, r4
 8010b18:	42b2      	cmp	r2, r6
 8010b1a:	4617      	mov	r7, r2
 8010b1c:	d30c      	bcc.n	8010b38 <rshift+0x5c>
 8010b1e:	601d      	str	r5, [r3, #0]
 8010b20:	b105      	cbz	r5, 8010b24 <rshift+0x48>
 8010b22:	3304      	adds	r3, #4
 8010b24:	1b1a      	subs	r2, r3, r4
 8010b26:	42a3      	cmp	r3, r4
 8010b28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010b2c:	bf08      	it	eq
 8010b2e:	2300      	moveq	r3, #0
 8010b30:	6102      	str	r2, [r0, #16]
 8010b32:	bf08      	it	eq
 8010b34:	6143      	streq	r3, [r0, #20]
 8010b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b38:	683f      	ldr	r7, [r7, #0]
 8010b3a:	fa07 f70c 	lsl.w	r7, r7, ip
 8010b3e:	433d      	orrs	r5, r7
 8010b40:	f843 5b04 	str.w	r5, [r3], #4
 8010b44:	f852 5b04 	ldr.w	r5, [r2], #4
 8010b48:	40cd      	lsrs	r5, r1
 8010b4a:	e7e5      	b.n	8010b18 <rshift+0x3c>
 8010b4c:	4623      	mov	r3, r4
 8010b4e:	e7e9      	b.n	8010b24 <rshift+0x48>

08010b50 <__hexdig_fun>:
 8010b50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010b54:	2b09      	cmp	r3, #9
 8010b56:	d802      	bhi.n	8010b5e <__hexdig_fun+0xe>
 8010b58:	3820      	subs	r0, #32
 8010b5a:	b2c0      	uxtb	r0, r0
 8010b5c:	4770      	bx	lr
 8010b5e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010b62:	2b05      	cmp	r3, #5
 8010b64:	d801      	bhi.n	8010b6a <__hexdig_fun+0x1a>
 8010b66:	3847      	subs	r0, #71	; 0x47
 8010b68:	e7f7      	b.n	8010b5a <__hexdig_fun+0xa>
 8010b6a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010b6e:	2b05      	cmp	r3, #5
 8010b70:	d801      	bhi.n	8010b76 <__hexdig_fun+0x26>
 8010b72:	3827      	subs	r0, #39	; 0x27
 8010b74:	e7f1      	b.n	8010b5a <__hexdig_fun+0xa>
 8010b76:	2000      	movs	r0, #0
 8010b78:	4770      	bx	lr

08010b7a <__gethex>:
 8010b7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b7e:	b08b      	sub	sp, #44	; 0x2c
 8010b80:	468a      	mov	sl, r1
 8010b82:	9002      	str	r0, [sp, #8]
 8010b84:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010b86:	9306      	str	r3, [sp, #24]
 8010b88:	4690      	mov	r8, r2
 8010b8a:	f000 fad0 	bl	801112e <__localeconv_l>
 8010b8e:	6803      	ldr	r3, [r0, #0]
 8010b90:	9303      	str	r3, [sp, #12]
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7ef fb1c 	bl	80001d0 <strlen>
 8010b98:	9b03      	ldr	r3, [sp, #12]
 8010b9a:	9001      	str	r0, [sp, #4]
 8010b9c:	4403      	add	r3, r0
 8010b9e:	f04f 0b00 	mov.w	fp, #0
 8010ba2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010ba6:	9307      	str	r3, [sp, #28]
 8010ba8:	f8da 3000 	ldr.w	r3, [sl]
 8010bac:	3302      	adds	r3, #2
 8010bae:	461f      	mov	r7, r3
 8010bb0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010bb4:	2830      	cmp	r0, #48	; 0x30
 8010bb6:	d06c      	beq.n	8010c92 <__gethex+0x118>
 8010bb8:	f7ff ffca 	bl	8010b50 <__hexdig_fun>
 8010bbc:	4604      	mov	r4, r0
 8010bbe:	2800      	cmp	r0, #0
 8010bc0:	d16a      	bne.n	8010c98 <__gethex+0x11e>
 8010bc2:	9a01      	ldr	r2, [sp, #4]
 8010bc4:	9903      	ldr	r1, [sp, #12]
 8010bc6:	4638      	mov	r0, r7
 8010bc8:	f001 fa77 	bl	80120ba <strncmp>
 8010bcc:	2800      	cmp	r0, #0
 8010bce:	d166      	bne.n	8010c9e <__gethex+0x124>
 8010bd0:	9b01      	ldr	r3, [sp, #4]
 8010bd2:	5cf8      	ldrb	r0, [r7, r3]
 8010bd4:	18fe      	adds	r6, r7, r3
 8010bd6:	f7ff ffbb 	bl	8010b50 <__hexdig_fun>
 8010bda:	2800      	cmp	r0, #0
 8010bdc:	d062      	beq.n	8010ca4 <__gethex+0x12a>
 8010bde:	4633      	mov	r3, r6
 8010be0:	7818      	ldrb	r0, [r3, #0]
 8010be2:	2830      	cmp	r0, #48	; 0x30
 8010be4:	461f      	mov	r7, r3
 8010be6:	f103 0301 	add.w	r3, r3, #1
 8010bea:	d0f9      	beq.n	8010be0 <__gethex+0x66>
 8010bec:	f7ff ffb0 	bl	8010b50 <__hexdig_fun>
 8010bf0:	fab0 f580 	clz	r5, r0
 8010bf4:	096d      	lsrs	r5, r5, #5
 8010bf6:	4634      	mov	r4, r6
 8010bf8:	f04f 0b01 	mov.w	fp, #1
 8010bfc:	463a      	mov	r2, r7
 8010bfe:	4616      	mov	r6, r2
 8010c00:	3201      	adds	r2, #1
 8010c02:	7830      	ldrb	r0, [r6, #0]
 8010c04:	f7ff ffa4 	bl	8010b50 <__hexdig_fun>
 8010c08:	2800      	cmp	r0, #0
 8010c0a:	d1f8      	bne.n	8010bfe <__gethex+0x84>
 8010c0c:	9a01      	ldr	r2, [sp, #4]
 8010c0e:	9903      	ldr	r1, [sp, #12]
 8010c10:	4630      	mov	r0, r6
 8010c12:	f001 fa52 	bl	80120ba <strncmp>
 8010c16:	b950      	cbnz	r0, 8010c2e <__gethex+0xb4>
 8010c18:	b954      	cbnz	r4, 8010c30 <__gethex+0xb6>
 8010c1a:	9b01      	ldr	r3, [sp, #4]
 8010c1c:	18f4      	adds	r4, r6, r3
 8010c1e:	4622      	mov	r2, r4
 8010c20:	4616      	mov	r6, r2
 8010c22:	3201      	adds	r2, #1
 8010c24:	7830      	ldrb	r0, [r6, #0]
 8010c26:	f7ff ff93 	bl	8010b50 <__hexdig_fun>
 8010c2a:	2800      	cmp	r0, #0
 8010c2c:	d1f8      	bne.n	8010c20 <__gethex+0xa6>
 8010c2e:	b10c      	cbz	r4, 8010c34 <__gethex+0xba>
 8010c30:	1ba4      	subs	r4, r4, r6
 8010c32:	00a4      	lsls	r4, r4, #2
 8010c34:	7833      	ldrb	r3, [r6, #0]
 8010c36:	2b50      	cmp	r3, #80	; 0x50
 8010c38:	d001      	beq.n	8010c3e <__gethex+0xc4>
 8010c3a:	2b70      	cmp	r3, #112	; 0x70
 8010c3c:	d140      	bne.n	8010cc0 <__gethex+0x146>
 8010c3e:	7873      	ldrb	r3, [r6, #1]
 8010c40:	2b2b      	cmp	r3, #43	; 0x2b
 8010c42:	d031      	beq.n	8010ca8 <__gethex+0x12e>
 8010c44:	2b2d      	cmp	r3, #45	; 0x2d
 8010c46:	d033      	beq.n	8010cb0 <__gethex+0x136>
 8010c48:	1c71      	adds	r1, r6, #1
 8010c4a:	f04f 0900 	mov.w	r9, #0
 8010c4e:	7808      	ldrb	r0, [r1, #0]
 8010c50:	f7ff ff7e 	bl	8010b50 <__hexdig_fun>
 8010c54:	1e43      	subs	r3, r0, #1
 8010c56:	b2db      	uxtb	r3, r3
 8010c58:	2b18      	cmp	r3, #24
 8010c5a:	d831      	bhi.n	8010cc0 <__gethex+0x146>
 8010c5c:	f1a0 0210 	sub.w	r2, r0, #16
 8010c60:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010c64:	f7ff ff74 	bl	8010b50 <__hexdig_fun>
 8010c68:	1e43      	subs	r3, r0, #1
 8010c6a:	b2db      	uxtb	r3, r3
 8010c6c:	2b18      	cmp	r3, #24
 8010c6e:	d922      	bls.n	8010cb6 <__gethex+0x13c>
 8010c70:	f1b9 0f00 	cmp.w	r9, #0
 8010c74:	d000      	beq.n	8010c78 <__gethex+0xfe>
 8010c76:	4252      	negs	r2, r2
 8010c78:	4414      	add	r4, r2
 8010c7a:	f8ca 1000 	str.w	r1, [sl]
 8010c7e:	b30d      	cbz	r5, 8010cc4 <__gethex+0x14a>
 8010c80:	f1bb 0f00 	cmp.w	fp, #0
 8010c84:	bf0c      	ite	eq
 8010c86:	2706      	moveq	r7, #6
 8010c88:	2700      	movne	r7, #0
 8010c8a:	4638      	mov	r0, r7
 8010c8c:	b00b      	add	sp, #44	; 0x2c
 8010c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c92:	f10b 0b01 	add.w	fp, fp, #1
 8010c96:	e78a      	b.n	8010bae <__gethex+0x34>
 8010c98:	2500      	movs	r5, #0
 8010c9a:	462c      	mov	r4, r5
 8010c9c:	e7ae      	b.n	8010bfc <__gethex+0x82>
 8010c9e:	463e      	mov	r6, r7
 8010ca0:	2501      	movs	r5, #1
 8010ca2:	e7c7      	b.n	8010c34 <__gethex+0xba>
 8010ca4:	4604      	mov	r4, r0
 8010ca6:	e7fb      	b.n	8010ca0 <__gethex+0x126>
 8010ca8:	f04f 0900 	mov.w	r9, #0
 8010cac:	1cb1      	adds	r1, r6, #2
 8010cae:	e7ce      	b.n	8010c4e <__gethex+0xd4>
 8010cb0:	f04f 0901 	mov.w	r9, #1
 8010cb4:	e7fa      	b.n	8010cac <__gethex+0x132>
 8010cb6:	230a      	movs	r3, #10
 8010cb8:	fb03 0202 	mla	r2, r3, r2, r0
 8010cbc:	3a10      	subs	r2, #16
 8010cbe:	e7cf      	b.n	8010c60 <__gethex+0xe6>
 8010cc0:	4631      	mov	r1, r6
 8010cc2:	e7da      	b.n	8010c7a <__gethex+0x100>
 8010cc4:	1bf3      	subs	r3, r6, r7
 8010cc6:	3b01      	subs	r3, #1
 8010cc8:	4629      	mov	r1, r5
 8010cca:	2b07      	cmp	r3, #7
 8010ccc:	dc49      	bgt.n	8010d62 <__gethex+0x1e8>
 8010cce:	9802      	ldr	r0, [sp, #8]
 8010cd0:	f000 fa58 	bl	8011184 <_Balloc>
 8010cd4:	9b01      	ldr	r3, [sp, #4]
 8010cd6:	f100 0914 	add.w	r9, r0, #20
 8010cda:	f04f 0b00 	mov.w	fp, #0
 8010cde:	f1c3 0301 	rsb	r3, r3, #1
 8010ce2:	4605      	mov	r5, r0
 8010ce4:	f8cd 9010 	str.w	r9, [sp, #16]
 8010ce8:	46da      	mov	sl, fp
 8010cea:	9308      	str	r3, [sp, #32]
 8010cec:	42b7      	cmp	r7, r6
 8010cee:	d33b      	bcc.n	8010d68 <__gethex+0x1ee>
 8010cf0:	9804      	ldr	r0, [sp, #16]
 8010cf2:	f840 ab04 	str.w	sl, [r0], #4
 8010cf6:	eba0 0009 	sub.w	r0, r0, r9
 8010cfa:	1080      	asrs	r0, r0, #2
 8010cfc:	6128      	str	r0, [r5, #16]
 8010cfe:	0147      	lsls	r7, r0, #5
 8010d00:	4650      	mov	r0, sl
 8010d02:	f000 fb03 	bl	801130c <__hi0bits>
 8010d06:	f8d8 6000 	ldr.w	r6, [r8]
 8010d0a:	1a3f      	subs	r7, r7, r0
 8010d0c:	42b7      	cmp	r7, r6
 8010d0e:	dd64      	ble.n	8010dda <__gethex+0x260>
 8010d10:	1bbf      	subs	r7, r7, r6
 8010d12:	4639      	mov	r1, r7
 8010d14:	4628      	mov	r0, r5
 8010d16:	f000 fe13 	bl	8011940 <__any_on>
 8010d1a:	4682      	mov	sl, r0
 8010d1c:	b178      	cbz	r0, 8010d3e <__gethex+0x1c4>
 8010d1e:	1e7b      	subs	r3, r7, #1
 8010d20:	1159      	asrs	r1, r3, #5
 8010d22:	f003 021f 	and.w	r2, r3, #31
 8010d26:	f04f 0a01 	mov.w	sl, #1
 8010d2a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010d2e:	fa0a f202 	lsl.w	r2, sl, r2
 8010d32:	420a      	tst	r2, r1
 8010d34:	d003      	beq.n	8010d3e <__gethex+0x1c4>
 8010d36:	4553      	cmp	r3, sl
 8010d38:	dc46      	bgt.n	8010dc8 <__gethex+0x24e>
 8010d3a:	f04f 0a02 	mov.w	sl, #2
 8010d3e:	4639      	mov	r1, r7
 8010d40:	4628      	mov	r0, r5
 8010d42:	f7ff fecb 	bl	8010adc <rshift>
 8010d46:	443c      	add	r4, r7
 8010d48:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010d4c:	42a3      	cmp	r3, r4
 8010d4e:	da52      	bge.n	8010df6 <__gethex+0x27c>
 8010d50:	4629      	mov	r1, r5
 8010d52:	9802      	ldr	r0, [sp, #8]
 8010d54:	f000 fa4a 	bl	80111ec <_Bfree>
 8010d58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	6013      	str	r3, [r2, #0]
 8010d5e:	27a3      	movs	r7, #163	; 0xa3
 8010d60:	e793      	b.n	8010c8a <__gethex+0x110>
 8010d62:	3101      	adds	r1, #1
 8010d64:	105b      	asrs	r3, r3, #1
 8010d66:	e7b0      	b.n	8010cca <__gethex+0x150>
 8010d68:	1e73      	subs	r3, r6, #1
 8010d6a:	9305      	str	r3, [sp, #20]
 8010d6c:	9a07      	ldr	r2, [sp, #28]
 8010d6e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010d72:	4293      	cmp	r3, r2
 8010d74:	d018      	beq.n	8010da8 <__gethex+0x22e>
 8010d76:	f1bb 0f20 	cmp.w	fp, #32
 8010d7a:	d107      	bne.n	8010d8c <__gethex+0x212>
 8010d7c:	9b04      	ldr	r3, [sp, #16]
 8010d7e:	f8c3 a000 	str.w	sl, [r3]
 8010d82:	3304      	adds	r3, #4
 8010d84:	f04f 0a00 	mov.w	sl, #0
 8010d88:	9304      	str	r3, [sp, #16]
 8010d8a:	46d3      	mov	fp, sl
 8010d8c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010d90:	f7ff fede 	bl	8010b50 <__hexdig_fun>
 8010d94:	f000 000f 	and.w	r0, r0, #15
 8010d98:	fa00 f00b 	lsl.w	r0, r0, fp
 8010d9c:	ea4a 0a00 	orr.w	sl, sl, r0
 8010da0:	f10b 0b04 	add.w	fp, fp, #4
 8010da4:	9b05      	ldr	r3, [sp, #20]
 8010da6:	e00d      	b.n	8010dc4 <__gethex+0x24a>
 8010da8:	9b05      	ldr	r3, [sp, #20]
 8010daa:	9a08      	ldr	r2, [sp, #32]
 8010dac:	4413      	add	r3, r2
 8010dae:	42bb      	cmp	r3, r7
 8010db0:	d3e1      	bcc.n	8010d76 <__gethex+0x1fc>
 8010db2:	4618      	mov	r0, r3
 8010db4:	9a01      	ldr	r2, [sp, #4]
 8010db6:	9903      	ldr	r1, [sp, #12]
 8010db8:	9309      	str	r3, [sp, #36]	; 0x24
 8010dba:	f001 f97e 	bl	80120ba <strncmp>
 8010dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	d1d8      	bne.n	8010d76 <__gethex+0x1fc>
 8010dc4:	461e      	mov	r6, r3
 8010dc6:	e791      	b.n	8010cec <__gethex+0x172>
 8010dc8:	1eb9      	subs	r1, r7, #2
 8010dca:	4628      	mov	r0, r5
 8010dcc:	f000 fdb8 	bl	8011940 <__any_on>
 8010dd0:	2800      	cmp	r0, #0
 8010dd2:	d0b2      	beq.n	8010d3a <__gethex+0x1c0>
 8010dd4:	f04f 0a03 	mov.w	sl, #3
 8010dd8:	e7b1      	b.n	8010d3e <__gethex+0x1c4>
 8010dda:	da09      	bge.n	8010df0 <__gethex+0x276>
 8010ddc:	1bf7      	subs	r7, r6, r7
 8010dde:	4629      	mov	r1, r5
 8010de0:	463a      	mov	r2, r7
 8010de2:	9802      	ldr	r0, [sp, #8]
 8010de4:	f000 fbce 	bl	8011584 <__lshift>
 8010de8:	1be4      	subs	r4, r4, r7
 8010dea:	4605      	mov	r5, r0
 8010dec:	f100 0914 	add.w	r9, r0, #20
 8010df0:	f04f 0a00 	mov.w	sl, #0
 8010df4:	e7a8      	b.n	8010d48 <__gethex+0x1ce>
 8010df6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010dfa:	42a0      	cmp	r0, r4
 8010dfc:	dd6a      	ble.n	8010ed4 <__gethex+0x35a>
 8010dfe:	1b04      	subs	r4, r0, r4
 8010e00:	42a6      	cmp	r6, r4
 8010e02:	dc2e      	bgt.n	8010e62 <__gethex+0x2e8>
 8010e04:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010e08:	2b02      	cmp	r3, #2
 8010e0a:	d022      	beq.n	8010e52 <__gethex+0x2d8>
 8010e0c:	2b03      	cmp	r3, #3
 8010e0e:	d024      	beq.n	8010e5a <__gethex+0x2e0>
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	d115      	bne.n	8010e40 <__gethex+0x2c6>
 8010e14:	42a6      	cmp	r6, r4
 8010e16:	d113      	bne.n	8010e40 <__gethex+0x2c6>
 8010e18:	2e01      	cmp	r6, #1
 8010e1a:	dc0b      	bgt.n	8010e34 <__gethex+0x2ba>
 8010e1c:	9a06      	ldr	r2, [sp, #24]
 8010e1e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010e22:	6013      	str	r3, [r2, #0]
 8010e24:	2301      	movs	r3, #1
 8010e26:	612b      	str	r3, [r5, #16]
 8010e28:	f8c9 3000 	str.w	r3, [r9]
 8010e2c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010e2e:	2762      	movs	r7, #98	; 0x62
 8010e30:	601d      	str	r5, [r3, #0]
 8010e32:	e72a      	b.n	8010c8a <__gethex+0x110>
 8010e34:	1e71      	subs	r1, r6, #1
 8010e36:	4628      	mov	r0, r5
 8010e38:	f000 fd82 	bl	8011940 <__any_on>
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	d1ed      	bne.n	8010e1c <__gethex+0x2a2>
 8010e40:	4629      	mov	r1, r5
 8010e42:	9802      	ldr	r0, [sp, #8]
 8010e44:	f000 f9d2 	bl	80111ec <_Bfree>
 8010e48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010e4a:	2300      	movs	r3, #0
 8010e4c:	6013      	str	r3, [r2, #0]
 8010e4e:	2750      	movs	r7, #80	; 0x50
 8010e50:	e71b      	b.n	8010c8a <__gethex+0x110>
 8010e52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d0e1      	beq.n	8010e1c <__gethex+0x2a2>
 8010e58:	e7f2      	b.n	8010e40 <__gethex+0x2c6>
 8010e5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d1dd      	bne.n	8010e1c <__gethex+0x2a2>
 8010e60:	e7ee      	b.n	8010e40 <__gethex+0x2c6>
 8010e62:	1e67      	subs	r7, r4, #1
 8010e64:	f1ba 0f00 	cmp.w	sl, #0
 8010e68:	d131      	bne.n	8010ece <__gethex+0x354>
 8010e6a:	b127      	cbz	r7, 8010e76 <__gethex+0x2fc>
 8010e6c:	4639      	mov	r1, r7
 8010e6e:	4628      	mov	r0, r5
 8010e70:	f000 fd66 	bl	8011940 <__any_on>
 8010e74:	4682      	mov	sl, r0
 8010e76:	117a      	asrs	r2, r7, #5
 8010e78:	2301      	movs	r3, #1
 8010e7a:	f007 071f 	and.w	r7, r7, #31
 8010e7e:	fa03 f707 	lsl.w	r7, r3, r7
 8010e82:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010e86:	4621      	mov	r1, r4
 8010e88:	421f      	tst	r7, r3
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	bf18      	it	ne
 8010e8e:	f04a 0a02 	orrne.w	sl, sl, #2
 8010e92:	1b36      	subs	r6, r6, r4
 8010e94:	f7ff fe22 	bl	8010adc <rshift>
 8010e98:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010e9c:	2702      	movs	r7, #2
 8010e9e:	f1ba 0f00 	cmp.w	sl, #0
 8010ea2:	d048      	beq.n	8010f36 <__gethex+0x3bc>
 8010ea4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010ea8:	2b02      	cmp	r3, #2
 8010eaa:	d015      	beq.n	8010ed8 <__gethex+0x35e>
 8010eac:	2b03      	cmp	r3, #3
 8010eae:	d017      	beq.n	8010ee0 <__gethex+0x366>
 8010eb0:	2b01      	cmp	r3, #1
 8010eb2:	d109      	bne.n	8010ec8 <__gethex+0x34e>
 8010eb4:	f01a 0f02 	tst.w	sl, #2
 8010eb8:	d006      	beq.n	8010ec8 <__gethex+0x34e>
 8010eba:	f8d9 3000 	ldr.w	r3, [r9]
 8010ebe:	ea4a 0a03 	orr.w	sl, sl, r3
 8010ec2:	f01a 0f01 	tst.w	sl, #1
 8010ec6:	d10e      	bne.n	8010ee6 <__gethex+0x36c>
 8010ec8:	f047 0710 	orr.w	r7, r7, #16
 8010ecc:	e033      	b.n	8010f36 <__gethex+0x3bc>
 8010ece:	f04f 0a01 	mov.w	sl, #1
 8010ed2:	e7d0      	b.n	8010e76 <__gethex+0x2fc>
 8010ed4:	2701      	movs	r7, #1
 8010ed6:	e7e2      	b.n	8010e9e <__gethex+0x324>
 8010ed8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010eda:	f1c3 0301 	rsb	r3, r3, #1
 8010ede:	9315      	str	r3, [sp, #84]	; 0x54
 8010ee0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d0f0      	beq.n	8010ec8 <__gethex+0x34e>
 8010ee6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010eea:	f105 0314 	add.w	r3, r5, #20
 8010eee:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010ef2:	eb03 010a 	add.w	r1, r3, sl
 8010ef6:	f04f 0c00 	mov.w	ip, #0
 8010efa:	4618      	mov	r0, r3
 8010efc:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f00:	f1b2 3fff 	cmp.w	r2, #4294967295
 8010f04:	d01c      	beq.n	8010f40 <__gethex+0x3c6>
 8010f06:	3201      	adds	r2, #1
 8010f08:	6002      	str	r2, [r0, #0]
 8010f0a:	2f02      	cmp	r7, #2
 8010f0c:	f105 0314 	add.w	r3, r5, #20
 8010f10:	d138      	bne.n	8010f84 <__gethex+0x40a>
 8010f12:	f8d8 2000 	ldr.w	r2, [r8]
 8010f16:	3a01      	subs	r2, #1
 8010f18:	42b2      	cmp	r2, r6
 8010f1a:	d10a      	bne.n	8010f32 <__gethex+0x3b8>
 8010f1c:	1171      	asrs	r1, r6, #5
 8010f1e:	2201      	movs	r2, #1
 8010f20:	f006 061f 	and.w	r6, r6, #31
 8010f24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f28:	fa02 f606 	lsl.w	r6, r2, r6
 8010f2c:	421e      	tst	r6, r3
 8010f2e:	bf18      	it	ne
 8010f30:	4617      	movne	r7, r2
 8010f32:	f047 0720 	orr.w	r7, r7, #32
 8010f36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010f38:	601d      	str	r5, [r3, #0]
 8010f3a:	9b06      	ldr	r3, [sp, #24]
 8010f3c:	601c      	str	r4, [r3, #0]
 8010f3e:	e6a4      	b.n	8010c8a <__gethex+0x110>
 8010f40:	4299      	cmp	r1, r3
 8010f42:	f843 cc04 	str.w	ip, [r3, #-4]
 8010f46:	d8d8      	bhi.n	8010efa <__gethex+0x380>
 8010f48:	68ab      	ldr	r3, [r5, #8]
 8010f4a:	4599      	cmp	r9, r3
 8010f4c:	db12      	blt.n	8010f74 <__gethex+0x3fa>
 8010f4e:	6869      	ldr	r1, [r5, #4]
 8010f50:	9802      	ldr	r0, [sp, #8]
 8010f52:	3101      	adds	r1, #1
 8010f54:	f000 f916 	bl	8011184 <_Balloc>
 8010f58:	692a      	ldr	r2, [r5, #16]
 8010f5a:	3202      	adds	r2, #2
 8010f5c:	f105 010c 	add.w	r1, r5, #12
 8010f60:	4683      	mov	fp, r0
 8010f62:	0092      	lsls	r2, r2, #2
 8010f64:	300c      	adds	r0, #12
 8010f66:	f7fd f969 	bl	800e23c <memcpy>
 8010f6a:	4629      	mov	r1, r5
 8010f6c:	9802      	ldr	r0, [sp, #8]
 8010f6e:	f000 f93d 	bl	80111ec <_Bfree>
 8010f72:	465d      	mov	r5, fp
 8010f74:	692b      	ldr	r3, [r5, #16]
 8010f76:	1c5a      	adds	r2, r3, #1
 8010f78:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010f7c:	612a      	str	r2, [r5, #16]
 8010f7e:	2201      	movs	r2, #1
 8010f80:	615a      	str	r2, [r3, #20]
 8010f82:	e7c2      	b.n	8010f0a <__gethex+0x390>
 8010f84:	692a      	ldr	r2, [r5, #16]
 8010f86:	454a      	cmp	r2, r9
 8010f88:	dd0b      	ble.n	8010fa2 <__gethex+0x428>
 8010f8a:	2101      	movs	r1, #1
 8010f8c:	4628      	mov	r0, r5
 8010f8e:	f7ff fda5 	bl	8010adc <rshift>
 8010f92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f96:	3401      	adds	r4, #1
 8010f98:	42a3      	cmp	r3, r4
 8010f9a:	f6ff aed9 	blt.w	8010d50 <__gethex+0x1d6>
 8010f9e:	2701      	movs	r7, #1
 8010fa0:	e7c7      	b.n	8010f32 <__gethex+0x3b8>
 8010fa2:	f016 061f 	ands.w	r6, r6, #31
 8010fa6:	d0fa      	beq.n	8010f9e <__gethex+0x424>
 8010fa8:	449a      	add	sl, r3
 8010faa:	f1c6 0620 	rsb	r6, r6, #32
 8010fae:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010fb2:	f000 f9ab 	bl	801130c <__hi0bits>
 8010fb6:	42b0      	cmp	r0, r6
 8010fb8:	dbe7      	blt.n	8010f8a <__gethex+0x410>
 8010fba:	e7f0      	b.n	8010f9e <__gethex+0x424>

08010fbc <L_shift>:
 8010fbc:	f1c2 0208 	rsb	r2, r2, #8
 8010fc0:	0092      	lsls	r2, r2, #2
 8010fc2:	b570      	push	{r4, r5, r6, lr}
 8010fc4:	f1c2 0620 	rsb	r6, r2, #32
 8010fc8:	6843      	ldr	r3, [r0, #4]
 8010fca:	6804      	ldr	r4, [r0, #0]
 8010fcc:	fa03 f506 	lsl.w	r5, r3, r6
 8010fd0:	432c      	orrs	r4, r5
 8010fd2:	40d3      	lsrs	r3, r2
 8010fd4:	6004      	str	r4, [r0, #0]
 8010fd6:	f840 3f04 	str.w	r3, [r0, #4]!
 8010fda:	4288      	cmp	r0, r1
 8010fdc:	d3f4      	bcc.n	8010fc8 <L_shift+0xc>
 8010fde:	bd70      	pop	{r4, r5, r6, pc}

08010fe0 <__match>:
 8010fe0:	b530      	push	{r4, r5, lr}
 8010fe2:	6803      	ldr	r3, [r0, #0]
 8010fe4:	3301      	adds	r3, #1
 8010fe6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010fea:	b914      	cbnz	r4, 8010ff2 <__match+0x12>
 8010fec:	6003      	str	r3, [r0, #0]
 8010fee:	2001      	movs	r0, #1
 8010ff0:	bd30      	pop	{r4, r5, pc}
 8010ff2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ff6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010ffa:	2d19      	cmp	r5, #25
 8010ffc:	bf98      	it	ls
 8010ffe:	3220      	addls	r2, #32
 8011000:	42a2      	cmp	r2, r4
 8011002:	d0f0      	beq.n	8010fe6 <__match+0x6>
 8011004:	2000      	movs	r0, #0
 8011006:	e7f3      	b.n	8010ff0 <__match+0x10>

08011008 <__hexnan>:
 8011008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801100c:	680b      	ldr	r3, [r1, #0]
 801100e:	6801      	ldr	r1, [r0, #0]
 8011010:	115f      	asrs	r7, r3, #5
 8011012:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8011016:	f013 031f 	ands.w	r3, r3, #31
 801101a:	b087      	sub	sp, #28
 801101c:	bf18      	it	ne
 801101e:	3704      	addne	r7, #4
 8011020:	2500      	movs	r5, #0
 8011022:	1f3e      	subs	r6, r7, #4
 8011024:	4682      	mov	sl, r0
 8011026:	4690      	mov	r8, r2
 8011028:	9301      	str	r3, [sp, #4]
 801102a:	f847 5c04 	str.w	r5, [r7, #-4]
 801102e:	46b1      	mov	r9, r6
 8011030:	4634      	mov	r4, r6
 8011032:	9502      	str	r5, [sp, #8]
 8011034:	46ab      	mov	fp, r5
 8011036:	784a      	ldrb	r2, [r1, #1]
 8011038:	1c4b      	adds	r3, r1, #1
 801103a:	9303      	str	r3, [sp, #12]
 801103c:	b342      	cbz	r2, 8011090 <__hexnan+0x88>
 801103e:	4610      	mov	r0, r2
 8011040:	9105      	str	r1, [sp, #20]
 8011042:	9204      	str	r2, [sp, #16]
 8011044:	f7ff fd84 	bl	8010b50 <__hexdig_fun>
 8011048:	2800      	cmp	r0, #0
 801104a:	d143      	bne.n	80110d4 <__hexnan+0xcc>
 801104c:	9a04      	ldr	r2, [sp, #16]
 801104e:	9905      	ldr	r1, [sp, #20]
 8011050:	2a20      	cmp	r2, #32
 8011052:	d818      	bhi.n	8011086 <__hexnan+0x7e>
 8011054:	9b02      	ldr	r3, [sp, #8]
 8011056:	459b      	cmp	fp, r3
 8011058:	dd13      	ble.n	8011082 <__hexnan+0x7a>
 801105a:	454c      	cmp	r4, r9
 801105c:	d206      	bcs.n	801106c <__hexnan+0x64>
 801105e:	2d07      	cmp	r5, #7
 8011060:	dc04      	bgt.n	801106c <__hexnan+0x64>
 8011062:	462a      	mov	r2, r5
 8011064:	4649      	mov	r1, r9
 8011066:	4620      	mov	r0, r4
 8011068:	f7ff ffa8 	bl	8010fbc <L_shift>
 801106c:	4544      	cmp	r4, r8
 801106e:	d944      	bls.n	80110fa <__hexnan+0xf2>
 8011070:	2300      	movs	r3, #0
 8011072:	f1a4 0904 	sub.w	r9, r4, #4
 8011076:	f844 3c04 	str.w	r3, [r4, #-4]
 801107a:	f8cd b008 	str.w	fp, [sp, #8]
 801107e:	464c      	mov	r4, r9
 8011080:	461d      	mov	r5, r3
 8011082:	9903      	ldr	r1, [sp, #12]
 8011084:	e7d7      	b.n	8011036 <__hexnan+0x2e>
 8011086:	2a29      	cmp	r2, #41	; 0x29
 8011088:	d14a      	bne.n	8011120 <__hexnan+0x118>
 801108a:	3102      	adds	r1, #2
 801108c:	f8ca 1000 	str.w	r1, [sl]
 8011090:	f1bb 0f00 	cmp.w	fp, #0
 8011094:	d044      	beq.n	8011120 <__hexnan+0x118>
 8011096:	454c      	cmp	r4, r9
 8011098:	d206      	bcs.n	80110a8 <__hexnan+0xa0>
 801109a:	2d07      	cmp	r5, #7
 801109c:	dc04      	bgt.n	80110a8 <__hexnan+0xa0>
 801109e:	462a      	mov	r2, r5
 80110a0:	4649      	mov	r1, r9
 80110a2:	4620      	mov	r0, r4
 80110a4:	f7ff ff8a 	bl	8010fbc <L_shift>
 80110a8:	4544      	cmp	r4, r8
 80110aa:	d928      	bls.n	80110fe <__hexnan+0xf6>
 80110ac:	4643      	mov	r3, r8
 80110ae:	f854 2b04 	ldr.w	r2, [r4], #4
 80110b2:	f843 2b04 	str.w	r2, [r3], #4
 80110b6:	42a6      	cmp	r6, r4
 80110b8:	d2f9      	bcs.n	80110ae <__hexnan+0xa6>
 80110ba:	2200      	movs	r2, #0
 80110bc:	f843 2b04 	str.w	r2, [r3], #4
 80110c0:	429e      	cmp	r6, r3
 80110c2:	d2fb      	bcs.n	80110bc <__hexnan+0xb4>
 80110c4:	6833      	ldr	r3, [r6, #0]
 80110c6:	b91b      	cbnz	r3, 80110d0 <__hexnan+0xc8>
 80110c8:	4546      	cmp	r6, r8
 80110ca:	d127      	bne.n	801111c <__hexnan+0x114>
 80110cc:	2301      	movs	r3, #1
 80110ce:	6033      	str	r3, [r6, #0]
 80110d0:	2005      	movs	r0, #5
 80110d2:	e026      	b.n	8011122 <__hexnan+0x11a>
 80110d4:	3501      	adds	r5, #1
 80110d6:	2d08      	cmp	r5, #8
 80110d8:	f10b 0b01 	add.w	fp, fp, #1
 80110dc:	dd06      	ble.n	80110ec <__hexnan+0xe4>
 80110de:	4544      	cmp	r4, r8
 80110e0:	d9cf      	bls.n	8011082 <__hexnan+0x7a>
 80110e2:	2300      	movs	r3, #0
 80110e4:	f844 3c04 	str.w	r3, [r4, #-4]
 80110e8:	2501      	movs	r5, #1
 80110ea:	3c04      	subs	r4, #4
 80110ec:	6822      	ldr	r2, [r4, #0]
 80110ee:	f000 000f 	and.w	r0, r0, #15
 80110f2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80110f6:	6020      	str	r0, [r4, #0]
 80110f8:	e7c3      	b.n	8011082 <__hexnan+0x7a>
 80110fa:	2508      	movs	r5, #8
 80110fc:	e7c1      	b.n	8011082 <__hexnan+0x7a>
 80110fe:	9b01      	ldr	r3, [sp, #4]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d0df      	beq.n	80110c4 <__hexnan+0xbc>
 8011104:	f04f 32ff 	mov.w	r2, #4294967295
 8011108:	f1c3 0320 	rsb	r3, r3, #32
 801110c:	fa22 f303 	lsr.w	r3, r2, r3
 8011110:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8011114:	401a      	ands	r2, r3
 8011116:	f847 2c04 	str.w	r2, [r7, #-4]
 801111a:	e7d3      	b.n	80110c4 <__hexnan+0xbc>
 801111c:	3e04      	subs	r6, #4
 801111e:	e7d1      	b.n	80110c4 <__hexnan+0xbc>
 8011120:	2004      	movs	r0, #4
 8011122:	b007      	add	sp, #28
 8011124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011128 <__locale_ctype_ptr_l>:
 8011128:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801112c:	4770      	bx	lr

0801112e <__localeconv_l>:
 801112e:	30f0      	adds	r0, #240	; 0xf0
 8011130:	4770      	bx	lr
	...

08011134 <_localeconv_r>:
 8011134:	4b04      	ldr	r3, [pc, #16]	; (8011148 <_localeconv_r+0x14>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	6a18      	ldr	r0, [r3, #32]
 801113a:	4b04      	ldr	r3, [pc, #16]	; (801114c <_localeconv_r+0x18>)
 801113c:	2800      	cmp	r0, #0
 801113e:	bf08      	it	eq
 8011140:	4618      	moveq	r0, r3
 8011142:	30f0      	adds	r0, #240	; 0xf0
 8011144:	4770      	bx	lr
 8011146:	bf00      	nop
 8011148:	20000048 	.word	0x20000048
 801114c:	200000ac 	.word	0x200000ac

08011150 <malloc>:
 8011150:	4b02      	ldr	r3, [pc, #8]	; (801115c <malloc+0xc>)
 8011152:	4601      	mov	r1, r0
 8011154:	6818      	ldr	r0, [r3, #0]
 8011156:	f000 bc71 	b.w	8011a3c <_malloc_r>
 801115a:	bf00      	nop
 801115c:	20000048 	.word	0x20000048

08011160 <__ascii_mbtowc>:
 8011160:	b082      	sub	sp, #8
 8011162:	b901      	cbnz	r1, 8011166 <__ascii_mbtowc+0x6>
 8011164:	a901      	add	r1, sp, #4
 8011166:	b142      	cbz	r2, 801117a <__ascii_mbtowc+0x1a>
 8011168:	b14b      	cbz	r3, 801117e <__ascii_mbtowc+0x1e>
 801116a:	7813      	ldrb	r3, [r2, #0]
 801116c:	600b      	str	r3, [r1, #0]
 801116e:	7812      	ldrb	r2, [r2, #0]
 8011170:	1c10      	adds	r0, r2, #0
 8011172:	bf18      	it	ne
 8011174:	2001      	movne	r0, #1
 8011176:	b002      	add	sp, #8
 8011178:	4770      	bx	lr
 801117a:	4610      	mov	r0, r2
 801117c:	e7fb      	b.n	8011176 <__ascii_mbtowc+0x16>
 801117e:	f06f 0001 	mvn.w	r0, #1
 8011182:	e7f8      	b.n	8011176 <__ascii_mbtowc+0x16>

08011184 <_Balloc>:
 8011184:	b570      	push	{r4, r5, r6, lr}
 8011186:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011188:	4604      	mov	r4, r0
 801118a:	460e      	mov	r6, r1
 801118c:	b93d      	cbnz	r5, 801119e <_Balloc+0x1a>
 801118e:	2010      	movs	r0, #16
 8011190:	f7ff ffde 	bl	8011150 <malloc>
 8011194:	6260      	str	r0, [r4, #36]	; 0x24
 8011196:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801119a:	6005      	str	r5, [r0, #0]
 801119c:	60c5      	str	r5, [r0, #12]
 801119e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80111a0:	68eb      	ldr	r3, [r5, #12]
 80111a2:	b183      	cbz	r3, 80111c6 <_Balloc+0x42>
 80111a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80111ac:	b9b8      	cbnz	r0, 80111de <_Balloc+0x5a>
 80111ae:	2101      	movs	r1, #1
 80111b0:	fa01 f506 	lsl.w	r5, r1, r6
 80111b4:	1d6a      	adds	r2, r5, #5
 80111b6:	0092      	lsls	r2, r2, #2
 80111b8:	4620      	mov	r0, r4
 80111ba:	f000 fbe2 	bl	8011982 <_calloc_r>
 80111be:	b160      	cbz	r0, 80111da <_Balloc+0x56>
 80111c0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80111c4:	e00e      	b.n	80111e4 <_Balloc+0x60>
 80111c6:	2221      	movs	r2, #33	; 0x21
 80111c8:	2104      	movs	r1, #4
 80111ca:	4620      	mov	r0, r4
 80111cc:	f000 fbd9 	bl	8011982 <_calloc_r>
 80111d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111d2:	60e8      	str	r0, [r5, #12]
 80111d4:	68db      	ldr	r3, [r3, #12]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d1e4      	bne.n	80111a4 <_Balloc+0x20>
 80111da:	2000      	movs	r0, #0
 80111dc:	bd70      	pop	{r4, r5, r6, pc}
 80111de:	6802      	ldr	r2, [r0, #0]
 80111e0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80111e4:	2300      	movs	r3, #0
 80111e6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111ea:	e7f7      	b.n	80111dc <_Balloc+0x58>

080111ec <_Bfree>:
 80111ec:	b570      	push	{r4, r5, r6, lr}
 80111ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80111f0:	4606      	mov	r6, r0
 80111f2:	460d      	mov	r5, r1
 80111f4:	b93c      	cbnz	r4, 8011206 <_Bfree+0x1a>
 80111f6:	2010      	movs	r0, #16
 80111f8:	f7ff ffaa 	bl	8011150 <malloc>
 80111fc:	6270      	str	r0, [r6, #36]	; 0x24
 80111fe:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011202:	6004      	str	r4, [r0, #0]
 8011204:	60c4      	str	r4, [r0, #12]
 8011206:	b13d      	cbz	r5, 8011218 <_Bfree+0x2c>
 8011208:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801120a:	686a      	ldr	r2, [r5, #4]
 801120c:	68db      	ldr	r3, [r3, #12]
 801120e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011212:	6029      	str	r1, [r5, #0]
 8011214:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8011218:	bd70      	pop	{r4, r5, r6, pc}

0801121a <__multadd>:
 801121a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801121e:	690d      	ldr	r5, [r1, #16]
 8011220:	461f      	mov	r7, r3
 8011222:	4606      	mov	r6, r0
 8011224:	460c      	mov	r4, r1
 8011226:	f101 0c14 	add.w	ip, r1, #20
 801122a:	2300      	movs	r3, #0
 801122c:	f8dc 0000 	ldr.w	r0, [ip]
 8011230:	b281      	uxth	r1, r0
 8011232:	fb02 7101 	mla	r1, r2, r1, r7
 8011236:	0c0f      	lsrs	r7, r1, #16
 8011238:	0c00      	lsrs	r0, r0, #16
 801123a:	fb02 7000 	mla	r0, r2, r0, r7
 801123e:	b289      	uxth	r1, r1
 8011240:	3301      	adds	r3, #1
 8011242:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8011246:	429d      	cmp	r5, r3
 8011248:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801124c:	f84c 1b04 	str.w	r1, [ip], #4
 8011250:	dcec      	bgt.n	801122c <__multadd+0x12>
 8011252:	b1d7      	cbz	r7, 801128a <__multadd+0x70>
 8011254:	68a3      	ldr	r3, [r4, #8]
 8011256:	42ab      	cmp	r3, r5
 8011258:	dc12      	bgt.n	8011280 <__multadd+0x66>
 801125a:	6861      	ldr	r1, [r4, #4]
 801125c:	4630      	mov	r0, r6
 801125e:	3101      	adds	r1, #1
 8011260:	f7ff ff90 	bl	8011184 <_Balloc>
 8011264:	6922      	ldr	r2, [r4, #16]
 8011266:	3202      	adds	r2, #2
 8011268:	f104 010c 	add.w	r1, r4, #12
 801126c:	4680      	mov	r8, r0
 801126e:	0092      	lsls	r2, r2, #2
 8011270:	300c      	adds	r0, #12
 8011272:	f7fc ffe3 	bl	800e23c <memcpy>
 8011276:	4621      	mov	r1, r4
 8011278:	4630      	mov	r0, r6
 801127a:	f7ff ffb7 	bl	80111ec <_Bfree>
 801127e:	4644      	mov	r4, r8
 8011280:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011284:	3501      	adds	r5, #1
 8011286:	615f      	str	r7, [r3, #20]
 8011288:	6125      	str	r5, [r4, #16]
 801128a:	4620      	mov	r0, r4
 801128c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011290 <__s2b>:
 8011290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011294:	460c      	mov	r4, r1
 8011296:	4615      	mov	r5, r2
 8011298:	461f      	mov	r7, r3
 801129a:	2209      	movs	r2, #9
 801129c:	3308      	adds	r3, #8
 801129e:	4606      	mov	r6, r0
 80112a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80112a4:	2100      	movs	r1, #0
 80112a6:	2201      	movs	r2, #1
 80112a8:	429a      	cmp	r2, r3
 80112aa:	db20      	blt.n	80112ee <__s2b+0x5e>
 80112ac:	4630      	mov	r0, r6
 80112ae:	f7ff ff69 	bl	8011184 <_Balloc>
 80112b2:	9b08      	ldr	r3, [sp, #32]
 80112b4:	6143      	str	r3, [r0, #20]
 80112b6:	2d09      	cmp	r5, #9
 80112b8:	f04f 0301 	mov.w	r3, #1
 80112bc:	6103      	str	r3, [r0, #16]
 80112be:	dd19      	ble.n	80112f4 <__s2b+0x64>
 80112c0:	f104 0809 	add.w	r8, r4, #9
 80112c4:	46c1      	mov	r9, r8
 80112c6:	442c      	add	r4, r5
 80112c8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80112cc:	4601      	mov	r1, r0
 80112ce:	3b30      	subs	r3, #48	; 0x30
 80112d0:	220a      	movs	r2, #10
 80112d2:	4630      	mov	r0, r6
 80112d4:	f7ff ffa1 	bl	801121a <__multadd>
 80112d8:	45a1      	cmp	r9, r4
 80112da:	d1f5      	bne.n	80112c8 <__s2b+0x38>
 80112dc:	eb08 0405 	add.w	r4, r8, r5
 80112e0:	3c08      	subs	r4, #8
 80112e2:	1b2d      	subs	r5, r5, r4
 80112e4:	1963      	adds	r3, r4, r5
 80112e6:	42bb      	cmp	r3, r7
 80112e8:	db07      	blt.n	80112fa <__s2b+0x6a>
 80112ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80112ee:	0052      	lsls	r2, r2, #1
 80112f0:	3101      	adds	r1, #1
 80112f2:	e7d9      	b.n	80112a8 <__s2b+0x18>
 80112f4:	340a      	adds	r4, #10
 80112f6:	2509      	movs	r5, #9
 80112f8:	e7f3      	b.n	80112e2 <__s2b+0x52>
 80112fa:	f814 3b01 	ldrb.w	r3, [r4], #1
 80112fe:	4601      	mov	r1, r0
 8011300:	3b30      	subs	r3, #48	; 0x30
 8011302:	220a      	movs	r2, #10
 8011304:	4630      	mov	r0, r6
 8011306:	f7ff ff88 	bl	801121a <__multadd>
 801130a:	e7eb      	b.n	80112e4 <__s2b+0x54>

0801130c <__hi0bits>:
 801130c:	0c02      	lsrs	r2, r0, #16
 801130e:	0412      	lsls	r2, r2, #16
 8011310:	4603      	mov	r3, r0
 8011312:	b9b2      	cbnz	r2, 8011342 <__hi0bits+0x36>
 8011314:	0403      	lsls	r3, r0, #16
 8011316:	2010      	movs	r0, #16
 8011318:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801131c:	bf04      	itt	eq
 801131e:	021b      	lsleq	r3, r3, #8
 8011320:	3008      	addeq	r0, #8
 8011322:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8011326:	bf04      	itt	eq
 8011328:	011b      	lsleq	r3, r3, #4
 801132a:	3004      	addeq	r0, #4
 801132c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8011330:	bf04      	itt	eq
 8011332:	009b      	lsleq	r3, r3, #2
 8011334:	3002      	addeq	r0, #2
 8011336:	2b00      	cmp	r3, #0
 8011338:	db06      	blt.n	8011348 <__hi0bits+0x3c>
 801133a:	005b      	lsls	r3, r3, #1
 801133c:	d503      	bpl.n	8011346 <__hi0bits+0x3a>
 801133e:	3001      	adds	r0, #1
 8011340:	4770      	bx	lr
 8011342:	2000      	movs	r0, #0
 8011344:	e7e8      	b.n	8011318 <__hi0bits+0xc>
 8011346:	2020      	movs	r0, #32
 8011348:	4770      	bx	lr

0801134a <__lo0bits>:
 801134a:	6803      	ldr	r3, [r0, #0]
 801134c:	f013 0207 	ands.w	r2, r3, #7
 8011350:	4601      	mov	r1, r0
 8011352:	d00b      	beq.n	801136c <__lo0bits+0x22>
 8011354:	07da      	lsls	r2, r3, #31
 8011356:	d423      	bmi.n	80113a0 <__lo0bits+0x56>
 8011358:	0798      	lsls	r0, r3, #30
 801135a:	bf49      	itett	mi
 801135c:	085b      	lsrmi	r3, r3, #1
 801135e:	089b      	lsrpl	r3, r3, #2
 8011360:	2001      	movmi	r0, #1
 8011362:	600b      	strmi	r3, [r1, #0]
 8011364:	bf5c      	itt	pl
 8011366:	600b      	strpl	r3, [r1, #0]
 8011368:	2002      	movpl	r0, #2
 801136a:	4770      	bx	lr
 801136c:	b298      	uxth	r0, r3
 801136e:	b9a8      	cbnz	r0, 801139c <__lo0bits+0x52>
 8011370:	0c1b      	lsrs	r3, r3, #16
 8011372:	2010      	movs	r0, #16
 8011374:	f013 0fff 	tst.w	r3, #255	; 0xff
 8011378:	bf04      	itt	eq
 801137a:	0a1b      	lsreq	r3, r3, #8
 801137c:	3008      	addeq	r0, #8
 801137e:	071a      	lsls	r2, r3, #28
 8011380:	bf04      	itt	eq
 8011382:	091b      	lsreq	r3, r3, #4
 8011384:	3004      	addeq	r0, #4
 8011386:	079a      	lsls	r2, r3, #30
 8011388:	bf04      	itt	eq
 801138a:	089b      	lsreq	r3, r3, #2
 801138c:	3002      	addeq	r0, #2
 801138e:	07da      	lsls	r2, r3, #31
 8011390:	d402      	bmi.n	8011398 <__lo0bits+0x4e>
 8011392:	085b      	lsrs	r3, r3, #1
 8011394:	d006      	beq.n	80113a4 <__lo0bits+0x5a>
 8011396:	3001      	adds	r0, #1
 8011398:	600b      	str	r3, [r1, #0]
 801139a:	4770      	bx	lr
 801139c:	4610      	mov	r0, r2
 801139e:	e7e9      	b.n	8011374 <__lo0bits+0x2a>
 80113a0:	2000      	movs	r0, #0
 80113a2:	4770      	bx	lr
 80113a4:	2020      	movs	r0, #32
 80113a6:	4770      	bx	lr

080113a8 <__i2b>:
 80113a8:	b510      	push	{r4, lr}
 80113aa:	460c      	mov	r4, r1
 80113ac:	2101      	movs	r1, #1
 80113ae:	f7ff fee9 	bl	8011184 <_Balloc>
 80113b2:	2201      	movs	r2, #1
 80113b4:	6144      	str	r4, [r0, #20]
 80113b6:	6102      	str	r2, [r0, #16]
 80113b8:	bd10      	pop	{r4, pc}

080113ba <__multiply>:
 80113ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113be:	4614      	mov	r4, r2
 80113c0:	690a      	ldr	r2, [r1, #16]
 80113c2:	6923      	ldr	r3, [r4, #16]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	bfb8      	it	lt
 80113c8:	460b      	movlt	r3, r1
 80113ca:	4688      	mov	r8, r1
 80113cc:	bfbc      	itt	lt
 80113ce:	46a0      	movlt	r8, r4
 80113d0:	461c      	movlt	r4, r3
 80113d2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80113d6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80113da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80113de:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80113e2:	eb07 0609 	add.w	r6, r7, r9
 80113e6:	42b3      	cmp	r3, r6
 80113e8:	bfb8      	it	lt
 80113ea:	3101      	addlt	r1, #1
 80113ec:	f7ff feca 	bl	8011184 <_Balloc>
 80113f0:	f100 0514 	add.w	r5, r0, #20
 80113f4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80113f8:	462b      	mov	r3, r5
 80113fa:	2200      	movs	r2, #0
 80113fc:	4573      	cmp	r3, lr
 80113fe:	d316      	bcc.n	801142e <__multiply+0x74>
 8011400:	f104 0214 	add.w	r2, r4, #20
 8011404:	f108 0114 	add.w	r1, r8, #20
 8011408:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801140c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8011410:	9300      	str	r3, [sp, #0]
 8011412:	9b00      	ldr	r3, [sp, #0]
 8011414:	9201      	str	r2, [sp, #4]
 8011416:	4293      	cmp	r3, r2
 8011418:	d80c      	bhi.n	8011434 <__multiply+0x7a>
 801141a:	2e00      	cmp	r6, #0
 801141c:	dd03      	ble.n	8011426 <__multiply+0x6c>
 801141e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8011422:	2b00      	cmp	r3, #0
 8011424:	d05d      	beq.n	80114e2 <__multiply+0x128>
 8011426:	6106      	str	r6, [r0, #16]
 8011428:	b003      	add	sp, #12
 801142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801142e:	f843 2b04 	str.w	r2, [r3], #4
 8011432:	e7e3      	b.n	80113fc <__multiply+0x42>
 8011434:	f8b2 b000 	ldrh.w	fp, [r2]
 8011438:	f1bb 0f00 	cmp.w	fp, #0
 801143c:	d023      	beq.n	8011486 <__multiply+0xcc>
 801143e:	4689      	mov	r9, r1
 8011440:	46ac      	mov	ip, r5
 8011442:	f04f 0800 	mov.w	r8, #0
 8011446:	f859 4b04 	ldr.w	r4, [r9], #4
 801144a:	f8dc a000 	ldr.w	sl, [ip]
 801144e:	b2a3      	uxth	r3, r4
 8011450:	fa1f fa8a 	uxth.w	sl, sl
 8011454:	fb0b a303 	mla	r3, fp, r3, sl
 8011458:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801145c:	f8dc 4000 	ldr.w	r4, [ip]
 8011460:	4443      	add	r3, r8
 8011462:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8011466:	fb0b 840a 	mla	r4, fp, sl, r8
 801146a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801146e:	46e2      	mov	sl, ip
 8011470:	b29b      	uxth	r3, r3
 8011472:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011476:	454f      	cmp	r7, r9
 8011478:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801147c:	f84a 3b04 	str.w	r3, [sl], #4
 8011480:	d82b      	bhi.n	80114da <__multiply+0x120>
 8011482:	f8cc 8004 	str.w	r8, [ip, #4]
 8011486:	9b01      	ldr	r3, [sp, #4]
 8011488:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801148c:	3204      	adds	r2, #4
 801148e:	f1ba 0f00 	cmp.w	sl, #0
 8011492:	d020      	beq.n	80114d6 <__multiply+0x11c>
 8011494:	682b      	ldr	r3, [r5, #0]
 8011496:	4689      	mov	r9, r1
 8011498:	46a8      	mov	r8, r5
 801149a:	f04f 0b00 	mov.w	fp, #0
 801149e:	f8b9 c000 	ldrh.w	ip, [r9]
 80114a2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80114a6:	fb0a 440c 	mla	r4, sl, ip, r4
 80114aa:	445c      	add	r4, fp
 80114ac:	46c4      	mov	ip, r8
 80114ae:	b29b      	uxth	r3, r3
 80114b0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80114b4:	f84c 3b04 	str.w	r3, [ip], #4
 80114b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80114bc:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80114c0:	0c1b      	lsrs	r3, r3, #16
 80114c2:	fb0a b303 	mla	r3, sl, r3, fp
 80114c6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80114ca:	454f      	cmp	r7, r9
 80114cc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80114d0:	d805      	bhi.n	80114de <__multiply+0x124>
 80114d2:	f8c8 3004 	str.w	r3, [r8, #4]
 80114d6:	3504      	adds	r5, #4
 80114d8:	e79b      	b.n	8011412 <__multiply+0x58>
 80114da:	46d4      	mov	ip, sl
 80114dc:	e7b3      	b.n	8011446 <__multiply+0x8c>
 80114de:	46e0      	mov	r8, ip
 80114e0:	e7dd      	b.n	801149e <__multiply+0xe4>
 80114e2:	3e01      	subs	r6, #1
 80114e4:	e799      	b.n	801141a <__multiply+0x60>
	...

080114e8 <__pow5mult>:
 80114e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114ec:	4615      	mov	r5, r2
 80114ee:	f012 0203 	ands.w	r2, r2, #3
 80114f2:	4606      	mov	r6, r0
 80114f4:	460f      	mov	r7, r1
 80114f6:	d007      	beq.n	8011508 <__pow5mult+0x20>
 80114f8:	3a01      	subs	r2, #1
 80114fa:	4c21      	ldr	r4, [pc, #132]	; (8011580 <__pow5mult+0x98>)
 80114fc:	2300      	movs	r3, #0
 80114fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011502:	f7ff fe8a 	bl	801121a <__multadd>
 8011506:	4607      	mov	r7, r0
 8011508:	10ad      	asrs	r5, r5, #2
 801150a:	d035      	beq.n	8011578 <__pow5mult+0x90>
 801150c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801150e:	b93c      	cbnz	r4, 8011520 <__pow5mult+0x38>
 8011510:	2010      	movs	r0, #16
 8011512:	f7ff fe1d 	bl	8011150 <malloc>
 8011516:	6270      	str	r0, [r6, #36]	; 0x24
 8011518:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801151c:	6004      	str	r4, [r0, #0]
 801151e:	60c4      	str	r4, [r0, #12]
 8011520:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011524:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011528:	b94c      	cbnz	r4, 801153e <__pow5mult+0x56>
 801152a:	f240 2171 	movw	r1, #625	; 0x271
 801152e:	4630      	mov	r0, r6
 8011530:	f7ff ff3a 	bl	80113a8 <__i2b>
 8011534:	2300      	movs	r3, #0
 8011536:	f8c8 0008 	str.w	r0, [r8, #8]
 801153a:	4604      	mov	r4, r0
 801153c:	6003      	str	r3, [r0, #0]
 801153e:	f04f 0800 	mov.w	r8, #0
 8011542:	07eb      	lsls	r3, r5, #31
 8011544:	d50a      	bpl.n	801155c <__pow5mult+0x74>
 8011546:	4639      	mov	r1, r7
 8011548:	4622      	mov	r2, r4
 801154a:	4630      	mov	r0, r6
 801154c:	f7ff ff35 	bl	80113ba <__multiply>
 8011550:	4639      	mov	r1, r7
 8011552:	4681      	mov	r9, r0
 8011554:	4630      	mov	r0, r6
 8011556:	f7ff fe49 	bl	80111ec <_Bfree>
 801155a:	464f      	mov	r7, r9
 801155c:	106d      	asrs	r5, r5, #1
 801155e:	d00b      	beq.n	8011578 <__pow5mult+0x90>
 8011560:	6820      	ldr	r0, [r4, #0]
 8011562:	b938      	cbnz	r0, 8011574 <__pow5mult+0x8c>
 8011564:	4622      	mov	r2, r4
 8011566:	4621      	mov	r1, r4
 8011568:	4630      	mov	r0, r6
 801156a:	f7ff ff26 	bl	80113ba <__multiply>
 801156e:	6020      	str	r0, [r4, #0]
 8011570:	f8c0 8000 	str.w	r8, [r0]
 8011574:	4604      	mov	r4, r0
 8011576:	e7e4      	b.n	8011542 <__pow5mult+0x5a>
 8011578:	4638      	mov	r0, r7
 801157a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801157e:	bf00      	nop
 8011580:	08012e80 	.word	0x08012e80

08011584 <__lshift>:
 8011584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011588:	460c      	mov	r4, r1
 801158a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801158e:	6923      	ldr	r3, [r4, #16]
 8011590:	6849      	ldr	r1, [r1, #4]
 8011592:	eb0a 0903 	add.w	r9, sl, r3
 8011596:	68a3      	ldr	r3, [r4, #8]
 8011598:	4607      	mov	r7, r0
 801159a:	4616      	mov	r6, r2
 801159c:	f109 0501 	add.w	r5, r9, #1
 80115a0:	42ab      	cmp	r3, r5
 80115a2:	db32      	blt.n	801160a <__lshift+0x86>
 80115a4:	4638      	mov	r0, r7
 80115a6:	f7ff fded 	bl	8011184 <_Balloc>
 80115aa:	2300      	movs	r3, #0
 80115ac:	4680      	mov	r8, r0
 80115ae:	f100 0114 	add.w	r1, r0, #20
 80115b2:	461a      	mov	r2, r3
 80115b4:	4553      	cmp	r3, sl
 80115b6:	db2b      	blt.n	8011610 <__lshift+0x8c>
 80115b8:	6920      	ldr	r0, [r4, #16]
 80115ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80115be:	f104 0314 	add.w	r3, r4, #20
 80115c2:	f016 021f 	ands.w	r2, r6, #31
 80115c6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80115ca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80115ce:	d025      	beq.n	801161c <__lshift+0x98>
 80115d0:	f1c2 0e20 	rsb	lr, r2, #32
 80115d4:	2000      	movs	r0, #0
 80115d6:	681e      	ldr	r6, [r3, #0]
 80115d8:	468a      	mov	sl, r1
 80115da:	4096      	lsls	r6, r2
 80115dc:	4330      	orrs	r0, r6
 80115de:	f84a 0b04 	str.w	r0, [sl], #4
 80115e2:	f853 0b04 	ldr.w	r0, [r3], #4
 80115e6:	459c      	cmp	ip, r3
 80115e8:	fa20 f00e 	lsr.w	r0, r0, lr
 80115ec:	d814      	bhi.n	8011618 <__lshift+0x94>
 80115ee:	6048      	str	r0, [r1, #4]
 80115f0:	b108      	cbz	r0, 80115f6 <__lshift+0x72>
 80115f2:	f109 0502 	add.w	r5, r9, #2
 80115f6:	3d01      	subs	r5, #1
 80115f8:	4638      	mov	r0, r7
 80115fa:	f8c8 5010 	str.w	r5, [r8, #16]
 80115fe:	4621      	mov	r1, r4
 8011600:	f7ff fdf4 	bl	80111ec <_Bfree>
 8011604:	4640      	mov	r0, r8
 8011606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801160a:	3101      	adds	r1, #1
 801160c:	005b      	lsls	r3, r3, #1
 801160e:	e7c7      	b.n	80115a0 <__lshift+0x1c>
 8011610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8011614:	3301      	adds	r3, #1
 8011616:	e7cd      	b.n	80115b4 <__lshift+0x30>
 8011618:	4651      	mov	r1, sl
 801161a:	e7dc      	b.n	80115d6 <__lshift+0x52>
 801161c:	3904      	subs	r1, #4
 801161e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011622:	f841 2f04 	str.w	r2, [r1, #4]!
 8011626:	459c      	cmp	ip, r3
 8011628:	d8f9      	bhi.n	801161e <__lshift+0x9a>
 801162a:	e7e4      	b.n	80115f6 <__lshift+0x72>

0801162c <__mcmp>:
 801162c:	6903      	ldr	r3, [r0, #16]
 801162e:	690a      	ldr	r2, [r1, #16]
 8011630:	1a9b      	subs	r3, r3, r2
 8011632:	b530      	push	{r4, r5, lr}
 8011634:	d10c      	bne.n	8011650 <__mcmp+0x24>
 8011636:	0092      	lsls	r2, r2, #2
 8011638:	3014      	adds	r0, #20
 801163a:	3114      	adds	r1, #20
 801163c:	1884      	adds	r4, r0, r2
 801163e:	4411      	add	r1, r2
 8011640:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011644:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011648:	4295      	cmp	r5, r2
 801164a:	d003      	beq.n	8011654 <__mcmp+0x28>
 801164c:	d305      	bcc.n	801165a <__mcmp+0x2e>
 801164e:	2301      	movs	r3, #1
 8011650:	4618      	mov	r0, r3
 8011652:	bd30      	pop	{r4, r5, pc}
 8011654:	42a0      	cmp	r0, r4
 8011656:	d3f3      	bcc.n	8011640 <__mcmp+0x14>
 8011658:	e7fa      	b.n	8011650 <__mcmp+0x24>
 801165a:	f04f 33ff 	mov.w	r3, #4294967295
 801165e:	e7f7      	b.n	8011650 <__mcmp+0x24>

08011660 <__mdiff>:
 8011660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011664:	460d      	mov	r5, r1
 8011666:	4607      	mov	r7, r0
 8011668:	4611      	mov	r1, r2
 801166a:	4628      	mov	r0, r5
 801166c:	4614      	mov	r4, r2
 801166e:	f7ff ffdd 	bl	801162c <__mcmp>
 8011672:	1e06      	subs	r6, r0, #0
 8011674:	d108      	bne.n	8011688 <__mdiff+0x28>
 8011676:	4631      	mov	r1, r6
 8011678:	4638      	mov	r0, r7
 801167a:	f7ff fd83 	bl	8011184 <_Balloc>
 801167e:	2301      	movs	r3, #1
 8011680:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8011684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011688:	bfa4      	itt	ge
 801168a:	4623      	movge	r3, r4
 801168c:	462c      	movge	r4, r5
 801168e:	4638      	mov	r0, r7
 8011690:	6861      	ldr	r1, [r4, #4]
 8011692:	bfa6      	itte	ge
 8011694:	461d      	movge	r5, r3
 8011696:	2600      	movge	r6, #0
 8011698:	2601      	movlt	r6, #1
 801169a:	f7ff fd73 	bl	8011184 <_Balloc>
 801169e:	692b      	ldr	r3, [r5, #16]
 80116a0:	60c6      	str	r6, [r0, #12]
 80116a2:	6926      	ldr	r6, [r4, #16]
 80116a4:	f105 0914 	add.w	r9, r5, #20
 80116a8:	f104 0214 	add.w	r2, r4, #20
 80116ac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80116b0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80116b4:	f100 0514 	add.w	r5, r0, #20
 80116b8:	f04f 0e00 	mov.w	lr, #0
 80116bc:	f852 ab04 	ldr.w	sl, [r2], #4
 80116c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80116c4:	fa1e f18a 	uxtah	r1, lr, sl
 80116c8:	b2a3      	uxth	r3, r4
 80116ca:	1ac9      	subs	r1, r1, r3
 80116cc:	0c23      	lsrs	r3, r4, #16
 80116ce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80116d2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80116d6:	b289      	uxth	r1, r1
 80116d8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80116dc:	45c8      	cmp	r8, r9
 80116de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80116e2:	4694      	mov	ip, r2
 80116e4:	f845 3b04 	str.w	r3, [r5], #4
 80116e8:	d8e8      	bhi.n	80116bc <__mdiff+0x5c>
 80116ea:	45bc      	cmp	ip, r7
 80116ec:	d304      	bcc.n	80116f8 <__mdiff+0x98>
 80116ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80116f2:	b183      	cbz	r3, 8011716 <__mdiff+0xb6>
 80116f4:	6106      	str	r6, [r0, #16]
 80116f6:	e7c5      	b.n	8011684 <__mdiff+0x24>
 80116f8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80116fc:	fa1e f381 	uxtah	r3, lr, r1
 8011700:	141a      	asrs	r2, r3, #16
 8011702:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8011706:	b29b      	uxth	r3, r3
 8011708:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801170c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011710:	f845 3b04 	str.w	r3, [r5], #4
 8011714:	e7e9      	b.n	80116ea <__mdiff+0x8a>
 8011716:	3e01      	subs	r6, #1
 8011718:	e7e9      	b.n	80116ee <__mdiff+0x8e>
	...

0801171c <__ulp>:
 801171c:	4b12      	ldr	r3, [pc, #72]	; (8011768 <__ulp+0x4c>)
 801171e:	ee10 2a90 	vmov	r2, s1
 8011722:	401a      	ands	r2, r3
 8011724:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011728:	2b00      	cmp	r3, #0
 801172a:	dd04      	ble.n	8011736 <__ulp+0x1a>
 801172c:	2000      	movs	r0, #0
 801172e:	4619      	mov	r1, r3
 8011730:	ec41 0b10 	vmov	d0, r0, r1
 8011734:	4770      	bx	lr
 8011736:	425b      	negs	r3, r3
 8011738:	151b      	asrs	r3, r3, #20
 801173a:	2b13      	cmp	r3, #19
 801173c:	f04f 0000 	mov.w	r0, #0
 8011740:	f04f 0100 	mov.w	r1, #0
 8011744:	dc04      	bgt.n	8011750 <__ulp+0x34>
 8011746:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801174a:	fa42 f103 	asr.w	r1, r2, r3
 801174e:	e7ef      	b.n	8011730 <__ulp+0x14>
 8011750:	3b14      	subs	r3, #20
 8011752:	2b1e      	cmp	r3, #30
 8011754:	f04f 0201 	mov.w	r2, #1
 8011758:	bfda      	itte	le
 801175a:	f1c3 031f 	rsble	r3, r3, #31
 801175e:	fa02 f303 	lslle.w	r3, r2, r3
 8011762:	4613      	movgt	r3, r2
 8011764:	4618      	mov	r0, r3
 8011766:	e7e3      	b.n	8011730 <__ulp+0x14>
 8011768:	7ff00000 	.word	0x7ff00000

0801176c <__b2d>:
 801176c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801176e:	6905      	ldr	r5, [r0, #16]
 8011770:	f100 0714 	add.w	r7, r0, #20
 8011774:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011778:	1f2e      	subs	r6, r5, #4
 801177a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801177e:	4620      	mov	r0, r4
 8011780:	f7ff fdc4 	bl	801130c <__hi0bits>
 8011784:	f1c0 0320 	rsb	r3, r0, #32
 8011788:	280a      	cmp	r0, #10
 801178a:	600b      	str	r3, [r1, #0]
 801178c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8011804 <__b2d+0x98>
 8011790:	dc14      	bgt.n	80117bc <__b2d+0x50>
 8011792:	f1c0 0e0b 	rsb	lr, r0, #11
 8011796:	fa24 f10e 	lsr.w	r1, r4, lr
 801179a:	42b7      	cmp	r7, r6
 801179c:	ea41 030c 	orr.w	r3, r1, ip
 80117a0:	bf34      	ite	cc
 80117a2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80117a6:	2100      	movcs	r1, #0
 80117a8:	3015      	adds	r0, #21
 80117aa:	fa04 f000 	lsl.w	r0, r4, r0
 80117ae:	fa21 f10e 	lsr.w	r1, r1, lr
 80117b2:	ea40 0201 	orr.w	r2, r0, r1
 80117b6:	ec43 2b10 	vmov	d0, r2, r3
 80117ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80117bc:	42b7      	cmp	r7, r6
 80117be:	bf3a      	itte	cc
 80117c0:	f1a5 0608 	subcc.w	r6, r5, #8
 80117c4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80117c8:	2100      	movcs	r1, #0
 80117ca:	380b      	subs	r0, #11
 80117cc:	d015      	beq.n	80117fa <__b2d+0x8e>
 80117ce:	4084      	lsls	r4, r0
 80117d0:	f1c0 0520 	rsb	r5, r0, #32
 80117d4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80117d8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80117dc:	42be      	cmp	r6, r7
 80117de:	fa21 fc05 	lsr.w	ip, r1, r5
 80117e2:	ea44 030c 	orr.w	r3, r4, ip
 80117e6:	bf8c      	ite	hi
 80117e8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80117ec:	2400      	movls	r4, #0
 80117ee:	fa01 f000 	lsl.w	r0, r1, r0
 80117f2:	40ec      	lsrs	r4, r5
 80117f4:	ea40 0204 	orr.w	r2, r0, r4
 80117f8:	e7dd      	b.n	80117b6 <__b2d+0x4a>
 80117fa:	ea44 030c 	orr.w	r3, r4, ip
 80117fe:	460a      	mov	r2, r1
 8011800:	e7d9      	b.n	80117b6 <__b2d+0x4a>
 8011802:	bf00      	nop
 8011804:	3ff00000 	.word	0x3ff00000

08011808 <__d2b>:
 8011808:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801180c:	460e      	mov	r6, r1
 801180e:	2101      	movs	r1, #1
 8011810:	ec59 8b10 	vmov	r8, r9, d0
 8011814:	4615      	mov	r5, r2
 8011816:	f7ff fcb5 	bl	8011184 <_Balloc>
 801181a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 801181e:	4607      	mov	r7, r0
 8011820:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011824:	bb34      	cbnz	r4, 8011874 <__d2b+0x6c>
 8011826:	9301      	str	r3, [sp, #4]
 8011828:	f1b8 0300 	subs.w	r3, r8, #0
 801182c:	d027      	beq.n	801187e <__d2b+0x76>
 801182e:	a802      	add	r0, sp, #8
 8011830:	f840 3d08 	str.w	r3, [r0, #-8]!
 8011834:	f7ff fd89 	bl	801134a <__lo0bits>
 8011838:	9900      	ldr	r1, [sp, #0]
 801183a:	b1f0      	cbz	r0, 801187a <__d2b+0x72>
 801183c:	9a01      	ldr	r2, [sp, #4]
 801183e:	f1c0 0320 	rsb	r3, r0, #32
 8011842:	fa02 f303 	lsl.w	r3, r2, r3
 8011846:	430b      	orrs	r3, r1
 8011848:	40c2      	lsrs	r2, r0
 801184a:	617b      	str	r3, [r7, #20]
 801184c:	9201      	str	r2, [sp, #4]
 801184e:	9b01      	ldr	r3, [sp, #4]
 8011850:	61bb      	str	r3, [r7, #24]
 8011852:	2b00      	cmp	r3, #0
 8011854:	bf14      	ite	ne
 8011856:	2102      	movne	r1, #2
 8011858:	2101      	moveq	r1, #1
 801185a:	6139      	str	r1, [r7, #16]
 801185c:	b1c4      	cbz	r4, 8011890 <__d2b+0x88>
 801185e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8011862:	4404      	add	r4, r0
 8011864:	6034      	str	r4, [r6, #0]
 8011866:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801186a:	6028      	str	r0, [r5, #0]
 801186c:	4638      	mov	r0, r7
 801186e:	b003      	add	sp, #12
 8011870:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011878:	e7d5      	b.n	8011826 <__d2b+0x1e>
 801187a:	6179      	str	r1, [r7, #20]
 801187c:	e7e7      	b.n	801184e <__d2b+0x46>
 801187e:	a801      	add	r0, sp, #4
 8011880:	f7ff fd63 	bl	801134a <__lo0bits>
 8011884:	9b01      	ldr	r3, [sp, #4]
 8011886:	617b      	str	r3, [r7, #20]
 8011888:	2101      	movs	r1, #1
 801188a:	6139      	str	r1, [r7, #16]
 801188c:	3020      	adds	r0, #32
 801188e:	e7e5      	b.n	801185c <__d2b+0x54>
 8011890:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8011894:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011898:	6030      	str	r0, [r6, #0]
 801189a:	6918      	ldr	r0, [r3, #16]
 801189c:	f7ff fd36 	bl	801130c <__hi0bits>
 80118a0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80118a4:	e7e1      	b.n	801186a <__d2b+0x62>

080118a6 <__ratio>:
 80118a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118aa:	4688      	mov	r8, r1
 80118ac:	4669      	mov	r1, sp
 80118ae:	4681      	mov	r9, r0
 80118b0:	f7ff ff5c 	bl	801176c <__b2d>
 80118b4:	a901      	add	r1, sp, #4
 80118b6:	4640      	mov	r0, r8
 80118b8:	ec57 6b10 	vmov	r6, r7, d0
 80118bc:	f7ff ff56 	bl	801176c <__b2d>
 80118c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80118c4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80118c8:	eba3 0c02 	sub.w	ip, r3, r2
 80118cc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80118d0:	1a9b      	subs	r3, r3, r2
 80118d2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80118d6:	ec5b ab10 	vmov	sl, fp, d0
 80118da:	2b00      	cmp	r3, #0
 80118dc:	bfce      	itee	gt
 80118de:	463a      	movgt	r2, r7
 80118e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80118e4:	465a      	movle	r2, fp
 80118e6:	4659      	mov	r1, fp
 80118e8:	463d      	mov	r5, r7
 80118ea:	bfd4      	ite	le
 80118ec:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80118f0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80118f4:	4630      	mov	r0, r6
 80118f6:	ee10 2a10 	vmov	r2, s0
 80118fa:	460b      	mov	r3, r1
 80118fc:	4629      	mov	r1, r5
 80118fe:	f7ee ffa5 	bl	800084c <__aeabi_ddiv>
 8011902:	ec41 0b10 	vmov	d0, r0, r1
 8011906:	b003      	add	sp, #12
 8011908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801190c <__copybits>:
 801190c:	3901      	subs	r1, #1
 801190e:	b510      	push	{r4, lr}
 8011910:	1149      	asrs	r1, r1, #5
 8011912:	6914      	ldr	r4, [r2, #16]
 8011914:	3101      	adds	r1, #1
 8011916:	f102 0314 	add.w	r3, r2, #20
 801191a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801191e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011922:	42a3      	cmp	r3, r4
 8011924:	4602      	mov	r2, r0
 8011926:	d303      	bcc.n	8011930 <__copybits+0x24>
 8011928:	2300      	movs	r3, #0
 801192a:	428a      	cmp	r2, r1
 801192c:	d305      	bcc.n	801193a <__copybits+0x2e>
 801192e:	bd10      	pop	{r4, pc}
 8011930:	f853 2b04 	ldr.w	r2, [r3], #4
 8011934:	f840 2b04 	str.w	r2, [r0], #4
 8011938:	e7f3      	b.n	8011922 <__copybits+0x16>
 801193a:	f842 3b04 	str.w	r3, [r2], #4
 801193e:	e7f4      	b.n	801192a <__copybits+0x1e>

08011940 <__any_on>:
 8011940:	f100 0214 	add.w	r2, r0, #20
 8011944:	6900      	ldr	r0, [r0, #16]
 8011946:	114b      	asrs	r3, r1, #5
 8011948:	4298      	cmp	r0, r3
 801194a:	b510      	push	{r4, lr}
 801194c:	db11      	blt.n	8011972 <__any_on+0x32>
 801194e:	dd0a      	ble.n	8011966 <__any_on+0x26>
 8011950:	f011 011f 	ands.w	r1, r1, #31
 8011954:	d007      	beq.n	8011966 <__any_on+0x26>
 8011956:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801195a:	fa24 f001 	lsr.w	r0, r4, r1
 801195e:	fa00 f101 	lsl.w	r1, r0, r1
 8011962:	428c      	cmp	r4, r1
 8011964:	d10b      	bne.n	801197e <__any_on+0x3e>
 8011966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801196a:	4293      	cmp	r3, r2
 801196c:	d803      	bhi.n	8011976 <__any_on+0x36>
 801196e:	2000      	movs	r0, #0
 8011970:	bd10      	pop	{r4, pc}
 8011972:	4603      	mov	r3, r0
 8011974:	e7f7      	b.n	8011966 <__any_on+0x26>
 8011976:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801197a:	2900      	cmp	r1, #0
 801197c:	d0f5      	beq.n	801196a <__any_on+0x2a>
 801197e:	2001      	movs	r0, #1
 8011980:	e7f6      	b.n	8011970 <__any_on+0x30>

08011982 <_calloc_r>:
 8011982:	b538      	push	{r3, r4, r5, lr}
 8011984:	fb02 f401 	mul.w	r4, r2, r1
 8011988:	4621      	mov	r1, r4
 801198a:	f000 f857 	bl	8011a3c <_malloc_r>
 801198e:	4605      	mov	r5, r0
 8011990:	b118      	cbz	r0, 801199a <_calloc_r+0x18>
 8011992:	4622      	mov	r2, r4
 8011994:	2100      	movs	r1, #0
 8011996:	f7fc fc5c 	bl	800e252 <memset>
 801199a:	4628      	mov	r0, r5
 801199c:	bd38      	pop	{r3, r4, r5, pc}
	...

080119a0 <_free_r>:
 80119a0:	b538      	push	{r3, r4, r5, lr}
 80119a2:	4605      	mov	r5, r0
 80119a4:	2900      	cmp	r1, #0
 80119a6:	d045      	beq.n	8011a34 <_free_r+0x94>
 80119a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119ac:	1f0c      	subs	r4, r1, #4
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	bfb8      	it	lt
 80119b2:	18e4      	addlt	r4, r4, r3
 80119b4:	f000 fdc3 	bl	801253e <__malloc_lock>
 80119b8:	4a1f      	ldr	r2, [pc, #124]	; (8011a38 <_free_r+0x98>)
 80119ba:	6813      	ldr	r3, [r2, #0]
 80119bc:	4610      	mov	r0, r2
 80119be:	b933      	cbnz	r3, 80119ce <_free_r+0x2e>
 80119c0:	6063      	str	r3, [r4, #4]
 80119c2:	6014      	str	r4, [r2, #0]
 80119c4:	4628      	mov	r0, r5
 80119c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80119ca:	f000 bdb9 	b.w	8012540 <__malloc_unlock>
 80119ce:	42a3      	cmp	r3, r4
 80119d0:	d90c      	bls.n	80119ec <_free_r+0x4c>
 80119d2:	6821      	ldr	r1, [r4, #0]
 80119d4:	1862      	adds	r2, r4, r1
 80119d6:	4293      	cmp	r3, r2
 80119d8:	bf04      	itt	eq
 80119da:	681a      	ldreq	r2, [r3, #0]
 80119dc:	685b      	ldreq	r3, [r3, #4]
 80119de:	6063      	str	r3, [r4, #4]
 80119e0:	bf04      	itt	eq
 80119e2:	1852      	addeq	r2, r2, r1
 80119e4:	6022      	streq	r2, [r4, #0]
 80119e6:	6004      	str	r4, [r0, #0]
 80119e8:	e7ec      	b.n	80119c4 <_free_r+0x24>
 80119ea:	4613      	mov	r3, r2
 80119ec:	685a      	ldr	r2, [r3, #4]
 80119ee:	b10a      	cbz	r2, 80119f4 <_free_r+0x54>
 80119f0:	42a2      	cmp	r2, r4
 80119f2:	d9fa      	bls.n	80119ea <_free_r+0x4a>
 80119f4:	6819      	ldr	r1, [r3, #0]
 80119f6:	1858      	adds	r0, r3, r1
 80119f8:	42a0      	cmp	r0, r4
 80119fa:	d10b      	bne.n	8011a14 <_free_r+0x74>
 80119fc:	6820      	ldr	r0, [r4, #0]
 80119fe:	4401      	add	r1, r0
 8011a00:	1858      	adds	r0, r3, r1
 8011a02:	4282      	cmp	r2, r0
 8011a04:	6019      	str	r1, [r3, #0]
 8011a06:	d1dd      	bne.n	80119c4 <_free_r+0x24>
 8011a08:	6810      	ldr	r0, [r2, #0]
 8011a0a:	6852      	ldr	r2, [r2, #4]
 8011a0c:	605a      	str	r2, [r3, #4]
 8011a0e:	4401      	add	r1, r0
 8011a10:	6019      	str	r1, [r3, #0]
 8011a12:	e7d7      	b.n	80119c4 <_free_r+0x24>
 8011a14:	d902      	bls.n	8011a1c <_free_r+0x7c>
 8011a16:	230c      	movs	r3, #12
 8011a18:	602b      	str	r3, [r5, #0]
 8011a1a:	e7d3      	b.n	80119c4 <_free_r+0x24>
 8011a1c:	6820      	ldr	r0, [r4, #0]
 8011a1e:	1821      	adds	r1, r4, r0
 8011a20:	428a      	cmp	r2, r1
 8011a22:	bf04      	itt	eq
 8011a24:	6811      	ldreq	r1, [r2, #0]
 8011a26:	6852      	ldreq	r2, [r2, #4]
 8011a28:	6062      	str	r2, [r4, #4]
 8011a2a:	bf04      	itt	eq
 8011a2c:	1809      	addeq	r1, r1, r0
 8011a2e:	6021      	streq	r1, [r4, #0]
 8011a30:	605c      	str	r4, [r3, #4]
 8011a32:	e7c7      	b.n	80119c4 <_free_r+0x24>
 8011a34:	bd38      	pop	{r3, r4, r5, pc}
 8011a36:	bf00      	nop
 8011a38:	2001cbb8 	.word	0x2001cbb8

08011a3c <_malloc_r>:
 8011a3c:	b570      	push	{r4, r5, r6, lr}
 8011a3e:	1ccd      	adds	r5, r1, #3
 8011a40:	f025 0503 	bic.w	r5, r5, #3
 8011a44:	3508      	adds	r5, #8
 8011a46:	2d0c      	cmp	r5, #12
 8011a48:	bf38      	it	cc
 8011a4a:	250c      	movcc	r5, #12
 8011a4c:	2d00      	cmp	r5, #0
 8011a4e:	4606      	mov	r6, r0
 8011a50:	db01      	blt.n	8011a56 <_malloc_r+0x1a>
 8011a52:	42a9      	cmp	r1, r5
 8011a54:	d903      	bls.n	8011a5e <_malloc_r+0x22>
 8011a56:	230c      	movs	r3, #12
 8011a58:	6033      	str	r3, [r6, #0]
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	bd70      	pop	{r4, r5, r6, pc}
 8011a5e:	f000 fd6e 	bl	801253e <__malloc_lock>
 8011a62:	4a21      	ldr	r2, [pc, #132]	; (8011ae8 <_malloc_r+0xac>)
 8011a64:	6814      	ldr	r4, [r2, #0]
 8011a66:	4621      	mov	r1, r4
 8011a68:	b991      	cbnz	r1, 8011a90 <_malloc_r+0x54>
 8011a6a:	4c20      	ldr	r4, [pc, #128]	; (8011aec <_malloc_r+0xb0>)
 8011a6c:	6823      	ldr	r3, [r4, #0]
 8011a6e:	b91b      	cbnz	r3, 8011a78 <_malloc_r+0x3c>
 8011a70:	4630      	mov	r0, r6
 8011a72:	f000 facf 	bl	8012014 <_sbrk_r>
 8011a76:	6020      	str	r0, [r4, #0]
 8011a78:	4629      	mov	r1, r5
 8011a7a:	4630      	mov	r0, r6
 8011a7c:	f000 faca 	bl	8012014 <_sbrk_r>
 8011a80:	1c43      	adds	r3, r0, #1
 8011a82:	d124      	bne.n	8011ace <_malloc_r+0x92>
 8011a84:	230c      	movs	r3, #12
 8011a86:	6033      	str	r3, [r6, #0]
 8011a88:	4630      	mov	r0, r6
 8011a8a:	f000 fd59 	bl	8012540 <__malloc_unlock>
 8011a8e:	e7e4      	b.n	8011a5a <_malloc_r+0x1e>
 8011a90:	680b      	ldr	r3, [r1, #0]
 8011a92:	1b5b      	subs	r3, r3, r5
 8011a94:	d418      	bmi.n	8011ac8 <_malloc_r+0x8c>
 8011a96:	2b0b      	cmp	r3, #11
 8011a98:	d90f      	bls.n	8011aba <_malloc_r+0x7e>
 8011a9a:	600b      	str	r3, [r1, #0]
 8011a9c:	50cd      	str	r5, [r1, r3]
 8011a9e:	18cc      	adds	r4, r1, r3
 8011aa0:	4630      	mov	r0, r6
 8011aa2:	f000 fd4d 	bl	8012540 <__malloc_unlock>
 8011aa6:	f104 000b 	add.w	r0, r4, #11
 8011aaa:	1d23      	adds	r3, r4, #4
 8011aac:	f020 0007 	bic.w	r0, r0, #7
 8011ab0:	1ac3      	subs	r3, r0, r3
 8011ab2:	d0d3      	beq.n	8011a5c <_malloc_r+0x20>
 8011ab4:	425a      	negs	r2, r3
 8011ab6:	50e2      	str	r2, [r4, r3]
 8011ab8:	e7d0      	b.n	8011a5c <_malloc_r+0x20>
 8011aba:	428c      	cmp	r4, r1
 8011abc:	684b      	ldr	r3, [r1, #4]
 8011abe:	bf16      	itet	ne
 8011ac0:	6063      	strne	r3, [r4, #4]
 8011ac2:	6013      	streq	r3, [r2, #0]
 8011ac4:	460c      	movne	r4, r1
 8011ac6:	e7eb      	b.n	8011aa0 <_malloc_r+0x64>
 8011ac8:	460c      	mov	r4, r1
 8011aca:	6849      	ldr	r1, [r1, #4]
 8011acc:	e7cc      	b.n	8011a68 <_malloc_r+0x2c>
 8011ace:	1cc4      	adds	r4, r0, #3
 8011ad0:	f024 0403 	bic.w	r4, r4, #3
 8011ad4:	42a0      	cmp	r0, r4
 8011ad6:	d005      	beq.n	8011ae4 <_malloc_r+0xa8>
 8011ad8:	1a21      	subs	r1, r4, r0
 8011ada:	4630      	mov	r0, r6
 8011adc:	f000 fa9a 	bl	8012014 <_sbrk_r>
 8011ae0:	3001      	adds	r0, #1
 8011ae2:	d0cf      	beq.n	8011a84 <_malloc_r+0x48>
 8011ae4:	6025      	str	r5, [r4, #0]
 8011ae6:	e7db      	b.n	8011aa0 <_malloc_r+0x64>
 8011ae8:	2001cbb8 	.word	0x2001cbb8
 8011aec:	2001cbbc 	.word	0x2001cbbc

08011af0 <__ssputs_r>:
 8011af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011af4:	688e      	ldr	r6, [r1, #8]
 8011af6:	429e      	cmp	r6, r3
 8011af8:	4682      	mov	sl, r0
 8011afa:	460c      	mov	r4, r1
 8011afc:	4690      	mov	r8, r2
 8011afe:	4699      	mov	r9, r3
 8011b00:	d837      	bhi.n	8011b72 <__ssputs_r+0x82>
 8011b02:	898a      	ldrh	r2, [r1, #12]
 8011b04:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011b08:	d031      	beq.n	8011b6e <__ssputs_r+0x7e>
 8011b0a:	6825      	ldr	r5, [r4, #0]
 8011b0c:	6909      	ldr	r1, [r1, #16]
 8011b0e:	1a6f      	subs	r7, r5, r1
 8011b10:	6965      	ldr	r5, [r4, #20]
 8011b12:	2302      	movs	r3, #2
 8011b14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b18:	fb95 f5f3 	sdiv	r5, r5, r3
 8011b1c:	f109 0301 	add.w	r3, r9, #1
 8011b20:	443b      	add	r3, r7
 8011b22:	429d      	cmp	r5, r3
 8011b24:	bf38      	it	cc
 8011b26:	461d      	movcc	r5, r3
 8011b28:	0553      	lsls	r3, r2, #21
 8011b2a:	d530      	bpl.n	8011b8e <__ssputs_r+0x9e>
 8011b2c:	4629      	mov	r1, r5
 8011b2e:	f7ff ff85 	bl	8011a3c <_malloc_r>
 8011b32:	4606      	mov	r6, r0
 8011b34:	b950      	cbnz	r0, 8011b4c <__ssputs_r+0x5c>
 8011b36:	230c      	movs	r3, #12
 8011b38:	f8ca 3000 	str.w	r3, [sl]
 8011b3c:	89a3      	ldrh	r3, [r4, #12]
 8011b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b42:	81a3      	strh	r3, [r4, #12]
 8011b44:	f04f 30ff 	mov.w	r0, #4294967295
 8011b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b4c:	463a      	mov	r2, r7
 8011b4e:	6921      	ldr	r1, [r4, #16]
 8011b50:	f7fc fb74 	bl	800e23c <memcpy>
 8011b54:	89a3      	ldrh	r3, [r4, #12]
 8011b56:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b5e:	81a3      	strh	r3, [r4, #12]
 8011b60:	6126      	str	r6, [r4, #16]
 8011b62:	6165      	str	r5, [r4, #20]
 8011b64:	443e      	add	r6, r7
 8011b66:	1bed      	subs	r5, r5, r7
 8011b68:	6026      	str	r6, [r4, #0]
 8011b6a:	60a5      	str	r5, [r4, #8]
 8011b6c:	464e      	mov	r6, r9
 8011b6e:	454e      	cmp	r6, r9
 8011b70:	d900      	bls.n	8011b74 <__ssputs_r+0x84>
 8011b72:	464e      	mov	r6, r9
 8011b74:	4632      	mov	r2, r6
 8011b76:	4641      	mov	r1, r8
 8011b78:	6820      	ldr	r0, [r4, #0]
 8011b7a:	f000 fcc7 	bl	801250c <memmove>
 8011b7e:	68a3      	ldr	r3, [r4, #8]
 8011b80:	1b9b      	subs	r3, r3, r6
 8011b82:	60a3      	str	r3, [r4, #8]
 8011b84:	6823      	ldr	r3, [r4, #0]
 8011b86:	441e      	add	r6, r3
 8011b88:	6026      	str	r6, [r4, #0]
 8011b8a:	2000      	movs	r0, #0
 8011b8c:	e7dc      	b.n	8011b48 <__ssputs_r+0x58>
 8011b8e:	462a      	mov	r2, r5
 8011b90:	f000 fcd7 	bl	8012542 <_realloc_r>
 8011b94:	4606      	mov	r6, r0
 8011b96:	2800      	cmp	r0, #0
 8011b98:	d1e2      	bne.n	8011b60 <__ssputs_r+0x70>
 8011b9a:	6921      	ldr	r1, [r4, #16]
 8011b9c:	4650      	mov	r0, sl
 8011b9e:	f7ff feff 	bl	80119a0 <_free_r>
 8011ba2:	e7c8      	b.n	8011b36 <__ssputs_r+0x46>

08011ba4 <_svfiprintf_r>:
 8011ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ba8:	461d      	mov	r5, r3
 8011baa:	898b      	ldrh	r3, [r1, #12]
 8011bac:	061f      	lsls	r7, r3, #24
 8011bae:	b09d      	sub	sp, #116	; 0x74
 8011bb0:	4680      	mov	r8, r0
 8011bb2:	460c      	mov	r4, r1
 8011bb4:	4616      	mov	r6, r2
 8011bb6:	d50f      	bpl.n	8011bd8 <_svfiprintf_r+0x34>
 8011bb8:	690b      	ldr	r3, [r1, #16]
 8011bba:	b96b      	cbnz	r3, 8011bd8 <_svfiprintf_r+0x34>
 8011bbc:	2140      	movs	r1, #64	; 0x40
 8011bbe:	f7ff ff3d 	bl	8011a3c <_malloc_r>
 8011bc2:	6020      	str	r0, [r4, #0]
 8011bc4:	6120      	str	r0, [r4, #16]
 8011bc6:	b928      	cbnz	r0, 8011bd4 <_svfiprintf_r+0x30>
 8011bc8:	230c      	movs	r3, #12
 8011bca:	f8c8 3000 	str.w	r3, [r8]
 8011bce:	f04f 30ff 	mov.w	r0, #4294967295
 8011bd2:	e0c8      	b.n	8011d66 <_svfiprintf_r+0x1c2>
 8011bd4:	2340      	movs	r3, #64	; 0x40
 8011bd6:	6163      	str	r3, [r4, #20]
 8011bd8:	2300      	movs	r3, #0
 8011bda:	9309      	str	r3, [sp, #36]	; 0x24
 8011bdc:	2320      	movs	r3, #32
 8011bde:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011be2:	2330      	movs	r3, #48	; 0x30
 8011be4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011be8:	9503      	str	r5, [sp, #12]
 8011bea:	f04f 0b01 	mov.w	fp, #1
 8011bee:	4637      	mov	r7, r6
 8011bf0:	463d      	mov	r5, r7
 8011bf2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011bf6:	b10b      	cbz	r3, 8011bfc <_svfiprintf_r+0x58>
 8011bf8:	2b25      	cmp	r3, #37	; 0x25
 8011bfa:	d13e      	bne.n	8011c7a <_svfiprintf_r+0xd6>
 8011bfc:	ebb7 0a06 	subs.w	sl, r7, r6
 8011c00:	d00b      	beq.n	8011c1a <_svfiprintf_r+0x76>
 8011c02:	4653      	mov	r3, sl
 8011c04:	4632      	mov	r2, r6
 8011c06:	4621      	mov	r1, r4
 8011c08:	4640      	mov	r0, r8
 8011c0a:	f7ff ff71 	bl	8011af0 <__ssputs_r>
 8011c0e:	3001      	adds	r0, #1
 8011c10:	f000 80a4 	beq.w	8011d5c <_svfiprintf_r+0x1b8>
 8011c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c16:	4453      	add	r3, sl
 8011c18:	9309      	str	r3, [sp, #36]	; 0x24
 8011c1a:	783b      	ldrb	r3, [r7, #0]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	f000 809d 	beq.w	8011d5c <_svfiprintf_r+0x1b8>
 8011c22:	2300      	movs	r3, #0
 8011c24:	f04f 32ff 	mov.w	r2, #4294967295
 8011c28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c2c:	9304      	str	r3, [sp, #16]
 8011c2e:	9307      	str	r3, [sp, #28]
 8011c30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c34:	931a      	str	r3, [sp, #104]	; 0x68
 8011c36:	462f      	mov	r7, r5
 8011c38:	2205      	movs	r2, #5
 8011c3a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8011c3e:	4850      	ldr	r0, [pc, #320]	; (8011d80 <_svfiprintf_r+0x1dc>)
 8011c40:	f7ee face 	bl	80001e0 <memchr>
 8011c44:	9b04      	ldr	r3, [sp, #16]
 8011c46:	b9d0      	cbnz	r0, 8011c7e <_svfiprintf_r+0xda>
 8011c48:	06d9      	lsls	r1, r3, #27
 8011c4a:	bf44      	itt	mi
 8011c4c:	2220      	movmi	r2, #32
 8011c4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011c52:	071a      	lsls	r2, r3, #28
 8011c54:	bf44      	itt	mi
 8011c56:	222b      	movmi	r2, #43	; 0x2b
 8011c58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011c5c:	782a      	ldrb	r2, [r5, #0]
 8011c5e:	2a2a      	cmp	r2, #42	; 0x2a
 8011c60:	d015      	beq.n	8011c8e <_svfiprintf_r+0xea>
 8011c62:	9a07      	ldr	r2, [sp, #28]
 8011c64:	462f      	mov	r7, r5
 8011c66:	2000      	movs	r0, #0
 8011c68:	250a      	movs	r5, #10
 8011c6a:	4639      	mov	r1, r7
 8011c6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c70:	3b30      	subs	r3, #48	; 0x30
 8011c72:	2b09      	cmp	r3, #9
 8011c74:	d94d      	bls.n	8011d12 <_svfiprintf_r+0x16e>
 8011c76:	b1b8      	cbz	r0, 8011ca8 <_svfiprintf_r+0x104>
 8011c78:	e00f      	b.n	8011c9a <_svfiprintf_r+0xf6>
 8011c7a:	462f      	mov	r7, r5
 8011c7c:	e7b8      	b.n	8011bf0 <_svfiprintf_r+0x4c>
 8011c7e:	4a40      	ldr	r2, [pc, #256]	; (8011d80 <_svfiprintf_r+0x1dc>)
 8011c80:	1a80      	subs	r0, r0, r2
 8011c82:	fa0b f000 	lsl.w	r0, fp, r0
 8011c86:	4318      	orrs	r0, r3
 8011c88:	9004      	str	r0, [sp, #16]
 8011c8a:	463d      	mov	r5, r7
 8011c8c:	e7d3      	b.n	8011c36 <_svfiprintf_r+0x92>
 8011c8e:	9a03      	ldr	r2, [sp, #12]
 8011c90:	1d11      	adds	r1, r2, #4
 8011c92:	6812      	ldr	r2, [r2, #0]
 8011c94:	9103      	str	r1, [sp, #12]
 8011c96:	2a00      	cmp	r2, #0
 8011c98:	db01      	blt.n	8011c9e <_svfiprintf_r+0xfa>
 8011c9a:	9207      	str	r2, [sp, #28]
 8011c9c:	e004      	b.n	8011ca8 <_svfiprintf_r+0x104>
 8011c9e:	4252      	negs	r2, r2
 8011ca0:	f043 0302 	orr.w	r3, r3, #2
 8011ca4:	9207      	str	r2, [sp, #28]
 8011ca6:	9304      	str	r3, [sp, #16]
 8011ca8:	783b      	ldrb	r3, [r7, #0]
 8011caa:	2b2e      	cmp	r3, #46	; 0x2e
 8011cac:	d10c      	bne.n	8011cc8 <_svfiprintf_r+0x124>
 8011cae:	787b      	ldrb	r3, [r7, #1]
 8011cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8011cb2:	d133      	bne.n	8011d1c <_svfiprintf_r+0x178>
 8011cb4:	9b03      	ldr	r3, [sp, #12]
 8011cb6:	1d1a      	adds	r2, r3, #4
 8011cb8:	681b      	ldr	r3, [r3, #0]
 8011cba:	9203      	str	r2, [sp, #12]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	bfb8      	it	lt
 8011cc0:	f04f 33ff 	movlt.w	r3, #4294967295
 8011cc4:	3702      	adds	r7, #2
 8011cc6:	9305      	str	r3, [sp, #20]
 8011cc8:	4d2e      	ldr	r5, [pc, #184]	; (8011d84 <_svfiprintf_r+0x1e0>)
 8011cca:	7839      	ldrb	r1, [r7, #0]
 8011ccc:	2203      	movs	r2, #3
 8011cce:	4628      	mov	r0, r5
 8011cd0:	f7ee fa86 	bl	80001e0 <memchr>
 8011cd4:	b138      	cbz	r0, 8011ce6 <_svfiprintf_r+0x142>
 8011cd6:	2340      	movs	r3, #64	; 0x40
 8011cd8:	1b40      	subs	r0, r0, r5
 8011cda:	fa03 f000 	lsl.w	r0, r3, r0
 8011cde:	9b04      	ldr	r3, [sp, #16]
 8011ce0:	4303      	orrs	r3, r0
 8011ce2:	3701      	adds	r7, #1
 8011ce4:	9304      	str	r3, [sp, #16]
 8011ce6:	7839      	ldrb	r1, [r7, #0]
 8011ce8:	4827      	ldr	r0, [pc, #156]	; (8011d88 <_svfiprintf_r+0x1e4>)
 8011cea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011cee:	2206      	movs	r2, #6
 8011cf0:	1c7e      	adds	r6, r7, #1
 8011cf2:	f7ee fa75 	bl	80001e0 <memchr>
 8011cf6:	2800      	cmp	r0, #0
 8011cf8:	d038      	beq.n	8011d6c <_svfiprintf_r+0x1c8>
 8011cfa:	4b24      	ldr	r3, [pc, #144]	; (8011d8c <_svfiprintf_r+0x1e8>)
 8011cfc:	bb13      	cbnz	r3, 8011d44 <_svfiprintf_r+0x1a0>
 8011cfe:	9b03      	ldr	r3, [sp, #12]
 8011d00:	3307      	adds	r3, #7
 8011d02:	f023 0307 	bic.w	r3, r3, #7
 8011d06:	3308      	adds	r3, #8
 8011d08:	9303      	str	r3, [sp, #12]
 8011d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d0c:	444b      	add	r3, r9
 8011d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d10:	e76d      	b.n	8011bee <_svfiprintf_r+0x4a>
 8011d12:	fb05 3202 	mla	r2, r5, r2, r3
 8011d16:	2001      	movs	r0, #1
 8011d18:	460f      	mov	r7, r1
 8011d1a:	e7a6      	b.n	8011c6a <_svfiprintf_r+0xc6>
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	3701      	adds	r7, #1
 8011d20:	9305      	str	r3, [sp, #20]
 8011d22:	4619      	mov	r1, r3
 8011d24:	250a      	movs	r5, #10
 8011d26:	4638      	mov	r0, r7
 8011d28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d2c:	3a30      	subs	r2, #48	; 0x30
 8011d2e:	2a09      	cmp	r2, #9
 8011d30:	d903      	bls.n	8011d3a <_svfiprintf_r+0x196>
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d0c8      	beq.n	8011cc8 <_svfiprintf_r+0x124>
 8011d36:	9105      	str	r1, [sp, #20]
 8011d38:	e7c6      	b.n	8011cc8 <_svfiprintf_r+0x124>
 8011d3a:	fb05 2101 	mla	r1, r5, r1, r2
 8011d3e:	2301      	movs	r3, #1
 8011d40:	4607      	mov	r7, r0
 8011d42:	e7f0      	b.n	8011d26 <_svfiprintf_r+0x182>
 8011d44:	ab03      	add	r3, sp, #12
 8011d46:	9300      	str	r3, [sp, #0]
 8011d48:	4622      	mov	r2, r4
 8011d4a:	4b11      	ldr	r3, [pc, #68]	; (8011d90 <_svfiprintf_r+0x1ec>)
 8011d4c:	a904      	add	r1, sp, #16
 8011d4e:	4640      	mov	r0, r8
 8011d50:	f7fc fb1c 	bl	800e38c <_printf_float>
 8011d54:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011d58:	4681      	mov	r9, r0
 8011d5a:	d1d6      	bne.n	8011d0a <_svfiprintf_r+0x166>
 8011d5c:	89a3      	ldrh	r3, [r4, #12]
 8011d5e:	065b      	lsls	r3, r3, #25
 8011d60:	f53f af35 	bmi.w	8011bce <_svfiprintf_r+0x2a>
 8011d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d66:	b01d      	add	sp, #116	; 0x74
 8011d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6c:	ab03      	add	r3, sp, #12
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	4622      	mov	r2, r4
 8011d72:	4b07      	ldr	r3, [pc, #28]	; (8011d90 <_svfiprintf_r+0x1ec>)
 8011d74:	a904      	add	r1, sp, #16
 8011d76:	4640      	mov	r0, r8
 8011d78:	f7fc fdbe 	bl	800e8f8 <_printf_i>
 8011d7c:	e7ea      	b.n	8011d54 <_svfiprintf_r+0x1b0>
 8011d7e:	bf00      	nop
 8011d80:	08012e8c 	.word	0x08012e8c
 8011d84:	08012e92 	.word	0x08012e92
 8011d88:	08012e96 	.word	0x08012e96
 8011d8c:	0800e38d 	.word	0x0800e38d
 8011d90:	08011af1 	.word	0x08011af1

08011d94 <__sfputc_r>:
 8011d94:	6893      	ldr	r3, [r2, #8]
 8011d96:	3b01      	subs	r3, #1
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	b410      	push	{r4}
 8011d9c:	6093      	str	r3, [r2, #8]
 8011d9e:	da08      	bge.n	8011db2 <__sfputc_r+0x1e>
 8011da0:	6994      	ldr	r4, [r2, #24]
 8011da2:	42a3      	cmp	r3, r4
 8011da4:	db01      	blt.n	8011daa <__sfputc_r+0x16>
 8011da6:	290a      	cmp	r1, #10
 8011da8:	d103      	bne.n	8011db2 <__sfputc_r+0x1e>
 8011daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dae:	f000 b997 	b.w	80120e0 <__swbuf_r>
 8011db2:	6813      	ldr	r3, [r2, #0]
 8011db4:	1c58      	adds	r0, r3, #1
 8011db6:	6010      	str	r0, [r2, #0]
 8011db8:	7019      	strb	r1, [r3, #0]
 8011dba:	4608      	mov	r0, r1
 8011dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dc0:	4770      	bx	lr

08011dc2 <__sfputs_r>:
 8011dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dc4:	4606      	mov	r6, r0
 8011dc6:	460f      	mov	r7, r1
 8011dc8:	4614      	mov	r4, r2
 8011dca:	18d5      	adds	r5, r2, r3
 8011dcc:	42ac      	cmp	r4, r5
 8011dce:	d101      	bne.n	8011dd4 <__sfputs_r+0x12>
 8011dd0:	2000      	movs	r0, #0
 8011dd2:	e007      	b.n	8011de4 <__sfputs_r+0x22>
 8011dd4:	463a      	mov	r2, r7
 8011dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dda:	4630      	mov	r0, r6
 8011ddc:	f7ff ffda 	bl	8011d94 <__sfputc_r>
 8011de0:	1c43      	adds	r3, r0, #1
 8011de2:	d1f3      	bne.n	8011dcc <__sfputs_r+0xa>
 8011de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011de8 <_vfiprintf_r>:
 8011de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dec:	460c      	mov	r4, r1
 8011dee:	b09d      	sub	sp, #116	; 0x74
 8011df0:	4617      	mov	r7, r2
 8011df2:	461d      	mov	r5, r3
 8011df4:	4606      	mov	r6, r0
 8011df6:	b118      	cbz	r0, 8011e00 <_vfiprintf_r+0x18>
 8011df8:	6983      	ldr	r3, [r0, #24]
 8011dfa:	b90b      	cbnz	r3, 8011e00 <_vfiprintf_r+0x18>
 8011dfc:	f7fe fde4 	bl	80109c8 <__sinit>
 8011e00:	4b7c      	ldr	r3, [pc, #496]	; (8011ff4 <_vfiprintf_r+0x20c>)
 8011e02:	429c      	cmp	r4, r3
 8011e04:	d158      	bne.n	8011eb8 <_vfiprintf_r+0xd0>
 8011e06:	6874      	ldr	r4, [r6, #4]
 8011e08:	89a3      	ldrh	r3, [r4, #12]
 8011e0a:	0718      	lsls	r0, r3, #28
 8011e0c:	d55e      	bpl.n	8011ecc <_vfiprintf_r+0xe4>
 8011e0e:	6923      	ldr	r3, [r4, #16]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d05b      	beq.n	8011ecc <_vfiprintf_r+0xe4>
 8011e14:	2300      	movs	r3, #0
 8011e16:	9309      	str	r3, [sp, #36]	; 0x24
 8011e18:	2320      	movs	r3, #32
 8011e1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e1e:	2330      	movs	r3, #48	; 0x30
 8011e20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e24:	9503      	str	r5, [sp, #12]
 8011e26:	f04f 0b01 	mov.w	fp, #1
 8011e2a:	46b8      	mov	r8, r7
 8011e2c:	4645      	mov	r5, r8
 8011e2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011e32:	b10b      	cbz	r3, 8011e38 <_vfiprintf_r+0x50>
 8011e34:	2b25      	cmp	r3, #37	; 0x25
 8011e36:	d154      	bne.n	8011ee2 <_vfiprintf_r+0xfa>
 8011e38:	ebb8 0a07 	subs.w	sl, r8, r7
 8011e3c:	d00b      	beq.n	8011e56 <_vfiprintf_r+0x6e>
 8011e3e:	4653      	mov	r3, sl
 8011e40:	463a      	mov	r2, r7
 8011e42:	4621      	mov	r1, r4
 8011e44:	4630      	mov	r0, r6
 8011e46:	f7ff ffbc 	bl	8011dc2 <__sfputs_r>
 8011e4a:	3001      	adds	r0, #1
 8011e4c:	f000 80c2 	beq.w	8011fd4 <_vfiprintf_r+0x1ec>
 8011e50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e52:	4453      	add	r3, sl
 8011e54:	9309      	str	r3, [sp, #36]	; 0x24
 8011e56:	f898 3000 	ldrb.w	r3, [r8]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	f000 80ba 	beq.w	8011fd4 <_vfiprintf_r+0x1ec>
 8011e60:	2300      	movs	r3, #0
 8011e62:	f04f 32ff 	mov.w	r2, #4294967295
 8011e66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e6a:	9304      	str	r3, [sp, #16]
 8011e6c:	9307      	str	r3, [sp, #28]
 8011e6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e72:	931a      	str	r3, [sp, #104]	; 0x68
 8011e74:	46a8      	mov	r8, r5
 8011e76:	2205      	movs	r2, #5
 8011e78:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011e7c:	485e      	ldr	r0, [pc, #376]	; (8011ff8 <_vfiprintf_r+0x210>)
 8011e7e:	f7ee f9af 	bl	80001e0 <memchr>
 8011e82:	9b04      	ldr	r3, [sp, #16]
 8011e84:	bb78      	cbnz	r0, 8011ee6 <_vfiprintf_r+0xfe>
 8011e86:	06d9      	lsls	r1, r3, #27
 8011e88:	bf44      	itt	mi
 8011e8a:	2220      	movmi	r2, #32
 8011e8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011e90:	071a      	lsls	r2, r3, #28
 8011e92:	bf44      	itt	mi
 8011e94:	222b      	movmi	r2, #43	; 0x2b
 8011e96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011e9a:	782a      	ldrb	r2, [r5, #0]
 8011e9c:	2a2a      	cmp	r2, #42	; 0x2a
 8011e9e:	d02a      	beq.n	8011ef6 <_vfiprintf_r+0x10e>
 8011ea0:	9a07      	ldr	r2, [sp, #28]
 8011ea2:	46a8      	mov	r8, r5
 8011ea4:	2000      	movs	r0, #0
 8011ea6:	250a      	movs	r5, #10
 8011ea8:	4641      	mov	r1, r8
 8011eaa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011eae:	3b30      	subs	r3, #48	; 0x30
 8011eb0:	2b09      	cmp	r3, #9
 8011eb2:	d969      	bls.n	8011f88 <_vfiprintf_r+0x1a0>
 8011eb4:	b360      	cbz	r0, 8011f10 <_vfiprintf_r+0x128>
 8011eb6:	e024      	b.n	8011f02 <_vfiprintf_r+0x11a>
 8011eb8:	4b50      	ldr	r3, [pc, #320]	; (8011ffc <_vfiprintf_r+0x214>)
 8011eba:	429c      	cmp	r4, r3
 8011ebc:	d101      	bne.n	8011ec2 <_vfiprintf_r+0xda>
 8011ebe:	68b4      	ldr	r4, [r6, #8]
 8011ec0:	e7a2      	b.n	8011e08 <_vfiprintf_r+0x20>
 8011ec2:	4b4f      	ldr	r3, [pc, #316]	; (8012000 <_vfiprintf_r+0x218>)
 8011ec4:	429c      	cmp	r4, r3
 8011ec6:	bf08      	it	eq
 8011ec8:	68f4      	ldreq	r4, [r6, #12]
 8011eca:	e79d      	b.n	8011e08 <_vfiprintf_r+0x20>
 8011ecc:	4621      	mov	r1, r4
 8011ece:	4630      	mov	r0, r6
 8011ed0:	f000 f978 	bl	80121c4 <__swsetup_r>
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	d09d      	beq.n	8011e14 <_vfiprintf_r+0x2c>
 8011ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8011edc:	b01d      	add	sp, #116	; 0x74
 8011ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ee2:	46a8      	mov	r8, r5
 8011ee4:	e7a2      	b.n	8011e2c <_vfiprintf_r+0x44>
 8011ee6:	4a44      	ldr	r2, [pc, #272]	; (8011ff8 <_vfiprintf_r+0x210>)
 8011ee8:	1a80      	subs	r0, r0, r2
 8011eea:	fa0b f000 	lsl.w	r0, fp, r0
 8011eee:	4318      	orrs	r0, r3
 8011ef0:	9004      	str	r0, [sp, #16]
 8011ef2:	4645      	mov	r5, r8
 8011ef4:	e7be      	b.n	8011e74 <_vfiprintf_r+0x8c>
 8011ef6:	9a03      	ldr	r2, [sp, #12]
 8011ef8:	1d11      	adds	r1, r2, #4
 8011efa:	6812      	ldr	r2, [r2, #0]
 8011efc:	9103      	str	r1, [sp, #12]
 8011efe:	2a00      	cmp	r2, #0
 8011f00:	db01      	blt.n	8011f06 <_vfiprintf_r+0x11e>
 8011f02:	9207      	str	r2, [sp, #28]
 8011f04:	e004      	b.n	8011f10 <_vfiprintf_r+0x128>
 8011f06:	4252      	negs	r2, r2
 8011f08:	f043 0302 	orr.w	r3, r3, #2
 8011f0c:	9207      	str	r2, [sp, #28]
 8011f0e:	9304      	str	r3, [sp, #16]
 8011f10:	f898 3000 	ldrb.w	r3, [r8]
 8011f14:	2b2e      	cmp	r3, #46	; 0x2e
 8011f16:	d10e      	bne.n	8011f36 <_vfiprintf_r+0x14e>
 8011f18:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8011f1e:	d138      	bne.n	8011f92 <_vfiprintf_r+0x1aa>
 8011f20:	9b03      	ldr	r3, [sp, #12]
 8011f22:	1d1a      	adds	r2, r3, #4
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	9203      	str	r2, [sp, #12]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	bfb8      	it	lt
 8011f2c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011f30:	f108 0802 	add.w	r8, r8, #2
 8011f34:	9305      	str	r3, [sp, #20]
 8011f36:	4d33      	ldr	r5, [pc, #204]	; (8012004 <_vfiprintf_r+0x21c>)
 8011f38:	f898 1000 	ldrb.w	r1, [r8]
 8011f3c:	2203      	movs	r2, #3
 8011f3e:	4628      	mov	r0, r5
 8011f40:	f7ee f94e 	bl	80001e0 <memchr>
 8011f44:	b140      	cbz	r0, 8011f58 <_vfiprintf_r+0x170>
 8011f46:	2340      	movs	r3, #64	; 0x40
 8011f48:	1b40      	subs	r0, r0, r5
 8011f4a:	fa03 f000 	lsl.w	r0, r3, r0
 8011f4e:	9b04      	ldr	r3, [sp, #16]
 8011f50:	4303      	orrs	r3, r0
 8011f52:	f108 0801 	add.w	r8, r8, #1
 8011f56:	9304      	str	r3, [sp, #16]
 8011f58:	f898 1000 	ldrb.w	r1, [r8]
 8011f5c:	482a      	ldr	r0, [pc, #168]	; (8012008 <_vfiprintf_r+0x220>)
 8011f5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f62:	2206      	movs	r2, #6
 8011f64:	f108 0701 	add.w	r7, r8, #1
 8011f68:	f7ee f93a 	bl	80001e0 <memchr>
 8011f6c:	2800      	cmp	r0, #0
 8011f6e:	d037      	beq.n	8011fe0 <_vfiprintf_r+0x1f8>
 8011f70:	4b26      	ldr	r3, [pc, #152]	; (801200c <_vfiprintf_r+0x224>)
 8011f72:	bb1b      	cbnz	r3, 8011fbc <_vfiprintf_r+0x1d4>
 8011f74:	9b03      	ldr	r3, [sp, #12]
 8011f76:	3307      	adds	r3, #7
 8011f78:	f023 0307 	bic.w	r3, r3, #7
 8011f7c:	3308      	adds	r3, #8
 8011f7e:	9303      	str	r3, [sp, #12]
 8011f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f82:	444b      	add	r3, r9
 8011f84:	9309      	str	r3, [sp, #36]	; 0x24
 8011f86:	e750      	b.n	8011e2a <_vfiprintf_r+0x42>
 8011f88:	fb05 3202 	mla	r2, r5, r2, r3
 8011f8c:	2001      	movs	r0, #1
 8011f8e:	4688      	mov	r8, r1
 8011f90:	e78a      	b.n	8011ea8 <_vfiprintf_r+0xc0>
 8011f92:	2300      	movs	r3, #0
 8011f94:	f108 0801 	add.w	r8, r8, #1
 8011f98:	9305      	str	r3, [sp, #20]
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	250a      	movs	r5, #10
 8011f9e:	4640      	mov	r0, r8
 8011fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fa4:	3a30      	subs	r2, #48	; 0x30
 8011fa6:	2a09      	cmp	r2, #9
 8011fa8:	d903      	bls.n	8011fb2 <_vfiprintf_r+0x1ca>
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d0c3      	beq.n	8011f36 <_vfiprintf_r+0x14e>
 8011fae:	9105      	str	r1, [sp, #20]
 8011fb0:	e7c1      	b.n	8011f36 <_vfiprintf_r+0x14e>
 8011fb2:	fb05 2101 	mla	r1, r5, r1, r2
 8011fb6:	2301      	movs	r3, #1
 8011fb8:	4680      	mov	r8, r0
 8011fba:	e7f0      	b.n	8011f9e <_vfiprintf_r+0x1b6>
 8011fbc:	ab03      	add	r3, sp, #12
 8011fbe:	9300      	str	r3, [sp, #0]
 8011fc0:	4622      	mov	r2, r4
 8011fc2:	4b13      	ldr	r3, [pc, #76]	; (8012010 <_vfiprintf_r+0x228>)
 8011fc4:	a904      	add	r1, sp, #16
 8011fc6:	4630      	mov	r0, r6
 8011fc8:	f7fc f9e0 	bl	800e38c <_printf_float>
 8011fcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011fd0:	4681      	mov	r9, r0
 8011fd2:	d1d5      	bne.n	8011f80 <_vfiprintf_r+0x198>
 8011fd4:	89a3      	ldrh	r3, [r4, #12]
 8011fd6:	065b      	lsls	r3, r3, #25
 8011fd8:	f53f af7e 	bmi.w	8011ed8 <_vfiprintf_r+0xf0>
 8011fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011fde:	e77d      	b.n	8011edc <_vfiprintf_r+0xf4>
 8011fe0:	ab03      	add	r3, sp, #12
 8011fe2:	9300      	str	r3, [sp, #0]
 8011fe4:	4622      	mov	r2, r4
 8011fe6:	4b0a      	ldr	r3, [pc, #40]	; (8012010 <_vfiprintf_r+0x228>)
 8011fe8:	a904      	add	r1, sp, #16
 8011fea:	4630      	mov	r0, r6
 8011fec:	f7fc fc84 	bl	800e8f8 <_printf_i>
 8011ff0:	e7ec      	b.n	8011fcc <_vfiprintf_r+0x1e4>
 8011ff2:	bf00      	nop
 8011ff4:	08012d40 	.word	0x08012d40
 8011ff8:	08012e8c 	.word	0x08012e8c
 8011ffc:	08012d60 	.word	0x08012d60
 8012000:	08012d20 	.word	0x08012d20
 8012004:	08012e92 	.word	0x08012e92
 8012008:	08012e96 	.word	0x08012e96
 801200c:	0800e38d 	.word	0x0800e38d
 8012010:	08011dc3 	.word	0x08011dc3

08012014 <_sbrk_r>:
 8012014:	b538      	push	{r3, r4, r5, lr}
 8012016:	4c06      	ldr	r4, [pc, #24]	; (8012030 <_sbrk_r+0x1c>)
 8012018:	2300      	movs	r3, #0
 801201a:	4605      	mov	r5, r0
 801201c:	4608      	mov	r0, r1
 801201e:	6023      	str	r3, [r4, #0]
 8012020:	f7f5 fbf0 	bl	8007804 <_sbrk>
 8012024:	1c43      	adds	r3, r0, #1
 8012026:	d102      	bne.n	801202e <_sbrk_r+0x1a>
 8012028:	6823      	ldr	r3, [r4, #0]
 801202a:	b103      	cbz	r3, 801202e <_sbrk_r+0x1a>
 801202c:	602b      	str	r3, [r5, #0]
 801202e:	bd38      	pop	{r3, r4, r5, pc}
 8012030:	2001d104 	.word	0x2001d104

08012034 <__sread>:
 8012034:	b510      	push	{r4, lr}
 8012036:	460c      	mov	r4, r1
 8012038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801203c:	f000 faa8 	bl	8012590 <_read_r>
 8012040:	2800      	cmp	r0, #0
 8012042:	bfab      	itete	ge
 8012044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012046:	89a3      	ldrhlt	r3, [r4, #12]
 8012048:	181b      	addge	r3, r3, r0
 801204a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801204e:	bfac      	ite	ge
 8012050:	6563      	strge	r3, [r4, #84]	; 0x54
 8012052:	81a3      	strhlt	r3, [r4, #12]
 8012054:	bd10      	pop	{r4, pc}

08012056 <__swrite>:
 8012056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801205a:	461f      	mov	r7, r3
 801205c:	898b      	ldrh	r3, [r1, #12]
 801205e:	05db      	lsls	r3, r3, #23
 8012060:	4605      	mov	r5, r0
 8012062:	460c      	mov	r4, r1
 8012064:	4616      	mov	r6, r2
 8012066:	d505      	bpl.n	8012074 <__swrite+0x1e>
 8012068:	2302      	movs	r3, #2
 801206a:	2200      	movs	r2, #0
 801206c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012070:	f000 f9d6 	bl	8012420 <_lseek_r>
 8012074:	89a3      	ldrh	r3, [r4, #12]
 8012076:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801207a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801207e:	81a3      	strh	r3, [r4, #12]
 8012080:	4632      	mov	r2, r6
 8012082:	463b      	mov	r3, r7
 8012084:	4628      	mov	r0, r5
 8012086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801208a:	f000 b889 	b.w	80121a0 <_write_r>

0801208e <__sseek>:
 801208e:	b510      	push	{r4, lr}
 8012090:	460c      	mov	r4, r1
 8012092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012096:	f000 f9c3 	bl	8012420 <_lseek_r>
 801209a:	1c43      	adds	r3, r0, #1
 801209c:	89a3      	ldrh	r3, [r4, #12]
 801209e:	bf15      	itete	ne
 80120a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80120a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80120a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80120aa:	81a3      	strheq	r3, [r4, #12]
 80120ac:	bf18      	it	ne
 80120ae:	81a3      	strhne	r3, [r4, #12]
 80120b0:	bd10      	pop	{r4, pc}

080120b2 <__sclose>:
 80120b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120b6:	f000 b8f3 	b.w	80122a0 <_close_r>

080120ba <strncmp>:
 80120ba:	b510      	push	{r4, lr}
 80120bc:	b16a      	cbz	r2, 80120da <strncmp+0x20>
 80120be:	3901      	subs	r1, #1
 80120c0:	1884      	adds	r4, r0, r2
 80120c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80120c6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d103      	bne.n	80120d6 <strncmp+0x1c>
 80120ce:	42a0      	cmp	r0, r4
 80120d0:	d001      	beq.n	80120d6 <strncmp+0x1c>
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d1f5      	bne.n	80120c2 <strncmp+0x8>
 80120d6:	1a98      	subs	r0, r3, r2
 80120d8:	bd10      	pop	{r4, pc}
 80120da:	4610      	mov	r0, r2
 80120dc:	e7fc      	b.n	80120d8 <strncmp+0x1e>
	...

080120e0 <__swbuf_r>:
 80120e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120e2:	460e      	mov	r6, r1
 80120e4:	4614      	mov	r4, r2
 80120e6:	4605      	mov	r5, r0
 80120e8:	b118      	cbz	r0, 80120f2 <__swbuf_r+0x12>
 80120ea:	6983      	ldr	r3, [r0, #24]
 80120ec:	b90b      	cbnz	r3, 80120f2 <__swbuf_r+0x12>
 80120ee:	f7fe fc6b 	bl	80109c8 <__sinit>
 80120f2:	4b21      	ldr	r3, [pc, #132]	; (8012178 <__swbuf_r+0x98>)
 80120f4:	429c      	cmp	r4, r3
 80120f6:	d12a      	bne.n	801214e <__swbuf_r+0x6e>
 80120f8:	686c      	ldr	r4, [r5, #4]
 80120fa:	69a3      	ldr	r3, [r4, #24]
 80120fc:	60a3      	str	r3, [r4, #8]
 80120fe:	89a3      	ldrh	r3, [r4, #12]
 8012100:	071a      	lsls	r2, r3, #28
 8012102:	d52e      	bpl.n	8012162 <__swbuf_r+0x82>
 8012104:	6923      	ldr	r3, [r4, #16]
 8012106:	b363      	cbz	r3, 8012162 <__swbuf_r+0x82>
 8012108:	6923      	ldr	r3, [r4, #16]
 801210a:	6820      	ldr	r0, [r4, #0]
 801210c:	1ac0      	subs	r0, r0, r3
 801210e:	6963      	ldr	r3, [r4, #20]
 8012110:	b2f6      	uxtb	r6, r6
 8012112:	4283      	cmp	r3, r0
 8012114:	4637      	mov	r7, r6
 8012116:	dc04      	bgt.n	8012122 <__swbuf_r+0x42>
 8012118:	4621      	mov	r1, r4
 801211a:	4628      	mov	r0, r5
 801211c:	f000 f956 	bl	80123cc <_fflush_r>
 8012120:	bb28      	cbnz	r0, 801216e <__swbuf_r+0x8e>
 8012122:	68a3      	ldr	r3, [r4, #8]
 8012124:	3b01      	subs	r3, #1
 8012126:	60a3      	str	r3, [r4, #8]
 8012128:	6823      	ldr	r3, [r4, #0]
 801212a:	1c5a      	adds	r2, r3, #1
 801212c:	6022      	str	r2, [r4, #0]
 801212e:	701e      	strb	r6, [r3, #0]
 8012130:	6963      	ldr	r3, [r4, #20]
 8012132:	3001      	adds	r0, #1
 8012134:	4283      	cmp	r3, r0
 8012136:	d004      	beq.n	8012142 <__swbuf_r+0x62>
 8012138:	89a3      	ldrh	r3, [r4, #12]
 801213a:	07db      	lsls	r3, r3, #31
 801213c:	d519      	bpl.n	8012172 <__swbuf_r+0x92>
 801213e:	2e0a      	cmp	r6, #10
 8012140:	d117      	bne.n	8012172 <__swbuf_r+0x92>
 8012142:	4621      	mov	r1, r4
 8012144:	4628      	mov	r0, r5
 8012146:	f000 f941 	bl	80123cc <_fflush_r>
 801214a:	b190      	cbz	r0, 8012172 <__swbuf_r+0x92>
 801214c:	e00f      	b.n	801216e <__swbuf_r+0x8e>
 801214e:	4b0b      	ldr	r3, [pc, #44]	; (801217c <__swbuf_r+0x9c>)
 8012150:	429c      	cmp	r4, r3
 8012152:	d101      	bne.n	8012158 <__swbuf_r+0x78>
 8012154:	68ac      	ldr	r4, [r5, #8]
 8012156:	e7d0      	b.n	80120fa <__swbuf_r+0x1a>
 8012158:	4b09      	ldr	r3, [pc, #36]	; (8012180 <__swbuf_r+0xa0>)
 801215a:	429c      	cmp	r4, r3
 801215c:	bf08      	it	eq
 801215e:	68ec      	ldreq	r4, [r5, #12]
 8012160:	e7cb      	b.n	80120fa <__swbuf_r+0x1a>
 8012162:	4621      	mov	r1, r4
 8012164:	4628      	mov	r0, r5
 8012166:	f000 f82d 	bl	80121c4 <__swsetup_r>
 801216a:	2800      	cmp	r0, #0
 801216c:	d0cc      	beq.n	8012108 <__swbuf_r+0x28>
 801216e:	f04f 37ff 	mov.w	r7, #4294967295
 8012172:	4638      	mov	r0, r7
 8012174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012176:	bf00      	nop
 8012178:	08012d40 	.word	0x08012d40
 801217c:	08012d60 	.word	0x08012d60
 8012180:	08012d20 	.word	0x08012d20

08012184 <__ascii_wctomb>:
 8012184:	b149      	cbz	r1, 801219a <__ascii_wctomb+0x16>
 8012186:	2aff      	cmp	r2, #255	; 0xff
 8012188:	bf85      	ittet	hi
 801218a:	238a      	movhi	r3, #138	; 0x8a
 801218c:	6003      	strhi	r3, [r0, #0]
 801218e:	700a      	strbls	r2, [r1, #0]
 8012190:	f04f 30ff 	movhi.w	r0, #4294967295
 8012194:	bf98      	it	ls
 8012196:	2001      	movls	r0, #1
 8012198:	4770      	bx	lr
 801219a:	4608      	mov	r0, r1
 801219c:	4770      	bx	lr
	...

080121a0 <_write_r>:
 80121a0:	b538      	push	{r3, r4, r5, lr}
 80121a2:	4c07      	ldr	r4, [pc, #28]	; (80121c0 <_write_r+0x20>)
 80121a4:	4605      	mov	r5, r0
 80121a6:	4608      	mov	r0, r1
 80121a8:	4611      	mov	r1, r2
 80121aa:	2200      	movs	r2, #0
 80121ac:	6022      	str	r2, [r4, #0]
 80121ae:	461a      	mov	r2, r3
 80121b0:	f7f5 fad7 	bl	8007762 <_write>
 80121b4:	1c43      	adds	r3, r0, #1
 80121b6:	d102      	bne.n	80121be <_write_r+0x1e>
 80121b8:	6823      	ldr	r3, [r4, #0]
 80121ba:	b103      	cbz	r3, 80121be <_write_r+0x1e>
 80121bc:	602b      	str	r3, [r5, #0]
 80121be:	bd38      	pop	{r3, r4, r5, pc}
 80121c0:	2001d104 	.word	0x2001d104

080121c4 <__swsetup_r>:
 80121c4:	4b32      	ldr	r3, [pc, #200]	; (8012290 <__swsetup_r+0xcc>)
 80121c6:	b570      	push	{r4, r5, r6, lr}
 80121c8:	681d      	ldr	r5, [r3, #0]
 80121ca:	4606      	mov	r6, r0
 80121cc:	460c      	mov	r4, r1
 80121ce:	b125      	cbz	r5, 80121da <__swsetup_r+0x16>
 80121d0:	69ab      	ldr	r3, [r5, #24]
 80121d2:	b913      	cbnz	r3, 80121da <__swsetup_r+0x16>
 80121d4:	4628      	mov	r0, r5
 80121d6:	f7fe fbf7 	bl	80109c8 <__sinit>
 80121da:	4b2e      	ldr	r3, [pc, #184]	; (8012294 <__swsetup_r+0xd0>)
 80121dc:	429c      	cmp	r4, r3
 80121de:	d10f      	bne.n	8012200 <__swsetup_r+0x3c>
 80121e0:	686c      	ldr	r4, [r5, #4]
 80121e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121e6:	b29a      	uxth	r2, r3
 80121e8:	0715      	lsls	r5, r2, #28
 80121ea:	d42c      	bmi.n	8012246 <__swsetup_r+0x82>
 80121ec:	06d0      	lsls	r0, r2, #27
 80121ee:	d411      	bmi.n	8012214 <__swsetup_r+0x50>
 80121f0:	2209      	movs	r2, #9
 80121f2:	6032      	str	r2, [r6, #0]
 80121f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80121f8:	81a3      	strh	r3, [r4, #12]
 80121fa:	f04f 30ff 	mov.w	r0, #4294967295
 80121fe:	e03e      	b.n	801227e <__swsetup_r+0xba>
 8012200:	4b25      	ldr	r3, [pc, #148]	; (8012298 <__swsetup_r+0xd4>)
 8012202:	429c      	cmp	r4, r3
 8012204:	d101      	bne.n	801220a <__swsetup_r+0x46>
 8012206:	68ac      	ldr	r4, [r5, #8]
 8012208:	e7eb      	b.n	80121e2 <__swsetup_r+0x1e>
 801220a:	4b24      	ldr	r3, [pc, #144]	; (801229c <__swsetup_r+0xd8>)
 801220c:	429c      	cmp	r4, r3
 801220e:	bf08      	it	eq
 8012210:	68ec      	ldreq	r4, [r5, #12]
 8012212:	e7e6      	b.n	80121e2 <__swsetup_r+0x1e>
 8012214:	0751      	lsls	r1, r2, #29
 8012216:	d512      	bpl.n	801223e <__swsetup_r+0x7a>
 8012218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801221a:	b141      	cbz	r1, 801222e <__swsetup_r+0x6a>
 801221c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012220:	4299      	cmp	r1, r3
 8012222:	d002      	beq.n	801222a <__swsetup_r+0x66>
 8012224:	4630      	mov	r0, r6
 8012226:	f7ff fbbb 	bl	80119a0 <_free_r>
 801222a:	2300      	movs	r3, #0
 801222c:	6363      	str	r3, [r4, #52]	; 0x34
 801222e:	89a3      	ldrh	r3, [r4, #12]
 8012230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012234:	81a3      	strh	r3, [r4, #12]
 8012236:	2300      	movs	r3, #0
 8012238:	6063      	str	r3, [r4, #4]
 801223a:	6923      	ldr	r3, [r4, #16]
 801223c:	6023      	str	r3, [r4, #0]
 801223e:	89a3      	ldrh	r3, [r4, #12]
 8012240:	f043 0308 	orr.w	r3, r3, #8
 8012244:	81a3      	strh	r3, [r4, #12]
 8012246:	6923      	ldr	r3, [r4, #16]
 8012248:	b94b      	cbnz	r3, 801225e <__swsetup_r+0x9a>
 801224a:	89a3      	ldrh	r3, [r4, #12]
 801224c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012254:	d003      	beq.n	801225e <__swsetup_r+0x9a>
 8012256:	4621      	mov	r1, r4
 8012258:	4630      	mov	r0, r6
 801225a:	f000 f917 	bl	801248c <__smakebuf_r>
 801225e:	89a2      	ldrh	r2, [r4, #12]
 8012260:	f012 0301 	ands.w	r3, r2, #1
 8012264:	d00c      	beq.n	8012280 <__swsetup_r+0xbc>
 8012266:	2300      	movs	r3, #0
 8012268:	60a3      	str	r3, [r4, #8]
 801226a:	6963      	ldr	r3, [r4, #20]
 801226c:	425b      	negs	r3, r3
 801226e:	61a3      	str	r3, [r4, #24]
 8012270:	6923      	ldr	r3, [r4, #16]
 8012272:	b953      	cbnz	r3, 801228a <__swsetup_r+0xc6>
 8012274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012278:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801227c:	d1ba      	bne.n	80121f4 <__swsetup_r+0x30>
 801227e:	bd70      	pop	{r4, r5, r6, pc}
 8012280:	0792      	lsls	r2, r2, #30
 8012282:	bf58      	it	pl
 8012284:	6963      	ldrpl	r3, [r4, #20]
 8012286:	60a3      	str	r3, [r4, #8]
 8012288:	e7f2      	b.n	8012270 <__swsetup_r+0xac>
 801228a:	2000      	movs	r0, #0
 801228c:	e7f7      	b.n	801227e <__swsetup_r+0xba>
 801228e:	bf00      	nop
 8012290:	20000048 	.word	0x20000048
 8012294:	08012d40 	.word	0x08012d40
 8012298:	08012d60 	.word	0x08012d60
 801229c:	08012d20 	.word	0x08012d20

080122a0 <_close_r>:
 80122a0:	b538      	push	{r3, r4, r5, lr}
 80122a2:	4c06      	ldr	r4, [pc, #24]	; (80122bc <_close_r+0x1c>)
 80122a4:	2300      	movs	r3, #0
 80122a6:	4605      	mov	r5, r0
 80122a8:	4608      	mov	r0, r1
 80122aa:	6023      	str	r3, [r4, #0]
 80122ac:	f7f5 fa75 	bl	800779a <_close>
 80122b0:	1c43      	adds	r3, r0, #1
 80122b2:	d102      	bne.n	80122ba <_close_r+0x1a>
 80122b4:	6823      	ldr	r3, [r4, #0]
 80122b6:	b103      	cbz	r3, 80122ba <_close_r+0x1a>
 80122b8:	602b      	str	r3, [r5, #0]
 80122ba:	bd38      	pop	{r3, r4, r5, pc}
 80122bc:	2001d104 	.word	0x2001d104

080122c0 <__sflush_r>:
 80122c0:	898a      	ldrh	r2, [r1, #12]
 80122c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122c6:	4605      	mov	r5, r0
 80122c8:	0710      	lsls	r0, r2, #28
 80122ca:	460c      	mov	r4, r1
 80122cc:	d458      	bmi.n	8012380 <__sflush_r+0xc0>
 80122ce:	684b      	ldr	r3, [r1, #4]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	dc05      	bgt.n	80122e0 <__sflush_r+0x20>
 80122d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	dc02      	bgt.n	80122e0 <__sflush_r+0x20>
 80122da:	2000      	movs	r0, #0
 80122dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122e2:	2e00      	cmp	r6, #0
 80122e4:	d0f9      	beq.n	80122da <__sflush_r+0x1a>
 80122e6:	2300      	movs	r3, #0
 80122e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80122ec:	682f      	ldr	r7, [r5, #0]
 80122ee:	6a21      	ldr	r1, [r4, #32]
 80122f0:	602b      	str	r3, [r5, #0]
 80122f2:	d032      	beq.n	801235a <__sflush_r+0x9a>
 80122f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80122f6:	89a3      	ldrh	r3, [r4, #12]
 80122f8:	075a      	lsls	r2, r3, #29
 80122fa:	d505      	bpl.n	8012308 <__sflush_r+0x48>
 80122fc:	6863      	ldr	r3, [r4, #4]
 80122fe:	1ac0      	subs	r0, r0, r3
 8012300:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012302:	b10b      	cbz	r3, 8012308 <__sflush_r+0x48>
 8012304:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012306:	1ac0      	subs	r0, r0, r3
 8012308:	2300      	movs	r3, #0
 801230a:	4602      	mov	r2, r0
 801230c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801230e:	6a21      	ldr	r1, [r4, #32]
 8012310:	4628      	mov	r0, r5
 8012312:	47b0      	blx	r6
 8012314:	1c43      	adds	r3, r0, #1
 8012316:	89a3      	ldrh	r3, [r4, #12]
 8012318:	d106      	bne.n	8012328 <__sflush_r+0x68>
 801231a:	6829      	ldr	r1, [r5, #0]
 801231c:	291d      	cmp	r1, #29
 801231e:	d848      	bhi.n	80123b2 <__sflush_r+0xf2>
 8012320:	4a29      	ldr	r2, [pc, #164]	; (80123c8 <__sflush_r+0x108>)
 8012322:	40ca      	lsrs	r2, r1
 8012324:	07d6      	lsls	r6, r2, #31
 8012326:	d544      	bpl.n	80123b2 <__sflush_r+0xf2>
 8012328:	2200      	movs	r2, #0
 801232a:	6062      	str	r2, [r4, #4]
 801232c:	04d9      	lsls	r1, r3, #19
 801232e:	6922      	ldr	r2, [r4, #16]
 8012330:	6022      	str	r2, [r4, #0]
 8012332:	d504      	bpl.n	801233e <__sflush_r+0x7e>
 8012334:	1c42      	adds	r2, r0, #1
 8012336:	d101      	bne.n	801233c <__sflush_r+0x7c>
 8012338:	682b      	ldr	r3, [r5, #0]
 801233a:	b903      	cbnz	r3, 801233e <__sflush_r+0x7e>
 801233c:	6560      	str	r0, [r4, #84]	; 0x54
 801233e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012340:	602f      	str	r7, [r5, #0]
 8012342:	2900      	cmp	r1, #0
 8012344:	d0c9      	beq.n	80122da <__sflush_r+0x1a>
 8012346:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801234a:	4299      	cmp	r1, r3
 801234c:	d002      	beq.n	8012354 <__sflush_r+0x94>
 801234e:	4628      	mov	r0, r5
 8012350:	f7ff fb26 	bl	80119a0 <_free_r>
 8012354:	2000      	movs	r0, #0
 8012356:	6360      	str	r0, [r4, #52]	; 0x34
 8012358:	e7c0      	b.n	80122dc <__sflush_r+0x1c>
 801235a:	2301      	movs	r3, #1
 801235c:	4628      	mov	r0, r5
 801235e:	47b0      	blx	r6
 8012360:	1c41      	adds	r1, r0, #1
 8012362:	d1c8      	bne.n	80122f6 <__sflush_r+0x36>
 8012364:	682b      	ldr	r3, [r5, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d0c5      	beq.n	80122f6 <__sflush_r+0x36>
 801236a:	2b1d      	cmp	r3, #29
 801236c:	d001      	beq.n	8012372 <__sflush_r+0xb2>
 801236e:	2b16      	cmp	r3, #22
 8012370:	d101      	bne.n	8012376 <__sflush_r+0xb6>
 8012372:	602f      	str	r7, [r5, #0]
 8012374:	e7b1      	b.n	80122da <__sflush_r+0x1a>
 8012376:	89a3      	ldrh	r3, [r4, #12]
 8012378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801237c:	81a3      	strh	r3, [r4, #12]
 801237e:	e7ad      	b.n	80122dc <__sflush_r+0x1c>
 8012380:	690f      	ldr	r7, [r1, #16]
 8012382:	2f00      	cmp	r7, #0
 8012384:	d0a9      	beq.n	80122da <__sflush_r+0x1a>
 8012386:	0793      	lsls	r3, r2, #30
 8012388:	680e      	ldr	r6, [r1, #0]
 801238a:	bf08      	it	eq
 801238c:	694b      	ldreq	r3, [r1, #20]
 801238e:	600f      	str	r7, [r1, #0]
 8012390:	bf18      	it	ne
 8012392:	2300      	movne	r3, #0
 8012394:	eba6 0807 	sub.w	r8, r6, r7
 8012398:	608b      	str	r3, [r1, #8]
 801239a:	f1b8 0f00 	cmp.w	r8, #0
 801239e:	dd9c      	ble.n	80122da <__sflush_r+0x1a>
 80123a0:	4643      	mov	r3, r8
 80123a2:	463a      	mov	r2, r7
 80123a4:	6a21      	ldr	r1, [r4, #32]
 80123a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80123a8:	4628      	mov	r0, r5
 80123aa:	47b0      	blx	r6
 80123ac:	2800      	cmp	r0, #0
 80123ae:	dc06      	bgt.n	80123be <__sflush_r+0xfe>
 80123b0:	89a3      	ldrh	r3, [r4, #12]
 80123b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80123b6:	81a3      	strh	r3, [r4, #12]
 80123b8:	f04f 30ff 	mov.w	r0, #4294967295
 80123bc:	e78e      	b.n	80122dc <__sflush_r+0x1c>
 80123be:	4407      	add	r7, r0
 80123c0:	eba8 0800 	sub.w	r8, r8, r0
 80123c4:	e7e9      	b.n	801239a <__sflush_r+0xda>
 80123c6:	bf00      	nop
 80123c8:	20400001 	.word	0x20400001

080123cc <_fflush_r>:
 80123cc:	b538      	push	{r3, r4, r5, lr}
 80123ce:	690b      	ldr	r3, [r1, #16]
 80123d0:	4605      	mov	r5, r0
 80123d2:	460c      	mov	r4, r1
 80123d4:	b1db      	cbz	r3, 801240e <_fflush_r+0x42>
 80123d6:	b118      	cbz	r0, 80123e0 <_fflush_r+0x14>
 80123d8:	6983      	ldr	r3, [r0, #24]
 80123da:	b90b      	cbnz	r3, 80123e0 <_fflush_r+0x14>
 80123dc:	f7fe faf4 	bl	80109c8 <__sinit>
 80123e0:	4b0c      	ldr	r3, [pc, #48]	; (8012414 <_fflush_r+0x48>)
 80123e2:	429c      	cmp	r4, r3
 80123e4:	d109      	bne.n	80123fa <_fflush_r+0x2e>
 80123e6:	686c      	ldr	r4, [r5, #4]
 80123e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123ec:	b17b      	cbz	r3, 801240e <_fflush_r+0x42>
 80123ee:	4621      	mov	r1, r4
 80123f0:	4628      	mov	r0, r5
 80123f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123f6:	f7ff bf63 	b.w	80122c0 <__sflush_r>
 80123fa:	4b07      	ldr	r3, [pc, #28]	; (8012418 <_fflush_r+0x4c>)
 80123fc:	429c      	cmp	r4, r3
 80123fe:	d101      	bne.n	8012404 <_fflush_r+0x38>
 8012400:	68ac      	ldr	r4, [r5, #8]
 8012402:	e7f1      	b.n	80123e8 <_fflush_r+0x1c>
 8012404:	4b05      	ldr	r3, [pc, #20]	; (801241c <_fflush_r+0x50>)
 8012406:	429c      	cmp	r4, r3
 8012408:	bf08      	it	eq
 801240a:	68ec      	ldreq	r4, [r5, #12]
 801240c:	e7ec      	b.n	80123e8 <_fflush_r+0x1c>
 801240e:	2000      	movs	r0, #0
 8012410:	bd38      	pop	{r3, r4, r5, pc}
 8012412:	bf00      	nop
 8012414:	08012d40 	.word	0x08012d40
 8012418:	08012d60 	.word	0x08012d60
 801241c:	08012d20 	.word	0x08012d20

08012420 <_lseek_r>:
 8012420:	b538      	push	{r3, r4, r5, lr}
 8012422:	4c07      	ldr	r4, [pc, #28]	; (8012440 <_lseek_r+0x20>)
 8012424:	4605      	mov	r5, r0
 8012426:	4608      	mov	r0, r1
 8012428:	4611      	mov	r1, r2
 801242a:	2200      	movs	r2, #0
 801242c:	6022      	str	r2, [r4, #0]
 801242e:	461a      	mov	r2, r3
 8012430:	f7f5 f9da 	bl	80077e8 <_lseek>
 8012434:	1c43      	adds	r3, r0, #1
 8012436:	d102      	bne.n	801243e <_lseek_r+0x1e>
 8012438:	6823      	ldr	r3, [r4, #0]
 801243a:	b103      	cbz	r3, 801243e <_lseek_r+0x1e>
 801243c:	602b      	str	r3, [r5, #0]
 801243e:	bd38      	pop	{r3, r4, r5, pc}
 8012440:	2001d104 	.word	0x2001d104

08012444 <__swhatbuf_r>:
 8012444:	b570      	push	{r4, r5, r6, lr}
 8012446:	460e      	mov	r6, r1
 8012448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801244c:	2900      	cmp	r1, #0
 801244e:	b096      	sub	sp, #88	; 0x58
 8012450:	4614      	mov	r4, r2
 8012452:	461d      	mov	r5, r3
 8012454:	da07      	bge.n	8012466 <__swhatbuf_r+0x22>
 8012456:	2300      	movs	r3, #0
 8012458:	602b      	str	r3, [r5, #0]
 801245a:	89b3      	ldrh	r3, [r6, #12]
 801245c:	061a      	lsls	r2, r3, #24
 801245e:	d410      	bmi.n	8012482 <__swhatbuf_r+0x3e>
 8012460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012464:	e00e      	b.n	8012484 <__swhatbuf_r+0x40>
 8012466:	466a      	mov	r2, sp
 8012468:	f000 f8a4 	bl	80125b4 <_fstat_r>
 801246c:	2800      	cmp	r0, #0
 801246e:	dbf2      	blt.n	8012456 <__swhatbuf_r+0x12>
 8012470:	9a01      	ldr	r2, [sp, #4]
 8012472:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012476:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801247a:	425a      	negs	r2, r3
 801247c:	415a      	adcs	r2, r3
 801247e:	602a      	str	r2, [r5, #0]
 8012480:	e7ee      	b.n	8012460 <__swhatbuf_r+0x1c>
 8012482:	2340      	movs	r3, #64	; 0x40
 8012484:	2000      	movs	r0, #0
 8012486:	6023      	str	r3, [r4, #0]
 8012488:	b016      	add	sp, #88	; 0x58
 801248a:	bd70      	pop	{r4, r5, r6, pc}

0801248c <__smakebuf_r>:
 801248c:	898b      	ldrh	r3, [r1, #12]
 801248e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012490:	079d      	lsls	r5, r3, #30
 8012492:	4606      	mov	r6, r0
 8012494:	460c      	mov	r4, r1
 8012496:	d507      	bpl.n	80124a8 <__smakebuf_r+0x1c>
 8012498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801249c:	6023      	str	r3, [r4, #0]
 801249e:	6123      	str	r3, [r4, #16]
 80124a0:	2301      	movs	r3, #1
 80124a2:	6163      	str	r3, [r4, #20]
 80124a4:	b002      	add	sp, #8
 80124a6:	bd70      	pop	{r4, r5, r6, pc}
 80124a8:	ab01      	add	r3, sp, #4
 80124aa:	466a      	mov	r2, sp
 80124ac:	f7ff ffca 	bl	8012444 <__swhatbuf_r>
 80124b0:	9900      	ldr	r1, [sp, #0]
 80124b2:	4605      	mov	r5, r0
 80124b4:	4630      	mov	r0, r6
 80124b6:	f7ff fac1 	bl	8011a3c <_malloc_r>
 80124ba:	b948      	cbnz	r0, 80124d0 <__smakebuf_r+0x44>
 80124bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124c0:	059a      	lsls	r2, r3, #22
 80124c2:	d4ef      	bmi.n	80124a4 <__smakebuf_r+0x18>
 80124c4:	f023 0303 	bic.w	r3, r3, #3
 80124c8:	f043 0302 	orr.w	r3, r3, #2
 80124cc:	81a3      	strh	r3, [r4, #12]
 80124ce:	e7e3      	b.n	8012498 <__smakebuf_r+0xc>
 80124d0:	4b0d      	ldr	r3, [pc, #52]	; (8012508 <__smakebuf_r+0x7c>)
 80124d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80124d4:	89a3      	ldrh	r3, [r4, #12]
 80124d6:	6020      	str	r0, [r4, #0]
 80124d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124dc:	81a3      	strh	r3, [r4, #12]
 80124de:	9b00      	ldr	r3, [sp, #0]
 80124e0:	6163      	str	r3, [r4, #20]
 80124e2:	9b01      	ldr	r3, [sp, #4]
 80124e4:	6120      	str	r0, [r4, #16]
 80124e6:	b15b      	cbz	r3, 8012500 <__smakebuf_r+0x74>
 80124e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124ec:	4630      	mov	r0, r6
 80124ee:	f000 f873 	bl	80125d8 <_isatty_r>
 80124f2:	b128      	cbz	r0, 8012500 <__smakebuf_r+0x74>
 80124f4:	89a3      	ldrh	r3, [r4, #12]
 80124f6:	f023 0303 	bic.w	r3, r3, #3
 80124fa:	f043 0301 	orr.w	r3, r3, #1
 80124fe:	81a3      	strh	r3, [r4, #12]
 8012500:	89a3      	ldrh	r3, [r4, #12]
 8012502:	431d      	orrs	r5, r3
 8012504:	81a5      	strh	r5, [r4, #12]
 8012506:	e7cd      	b.n	80124a4 <__smakebuf_r+0x18>
 8012508:	08010991 	.word	0x08010991

0801250c <memmove>:
 801250c:	4288      	cmp	r0, r1
 801250e:	b510      	push	{r4, lr}
 8012510:	eb01 0302 	add.w	r3, r1, r2
 8012514:	d807      	bhi.n	8012526 <memmove+0x1a>
 8012516:	1e42      	subs	r2, r0, #1
 8012518:	4299      	cmp	r1, r3
 801251a:	d00a      	beq.n	8012532 <memmove+0x26>
 801251c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012520:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012524:	e7f8      	b.n	8012518 <memmove+0xc>
 8012526:	4283      	cmp	r3, r0
 8012528:	d9f5      	bls.n	8012516 <memmove+0xa>
 801252a:	1881      	adds	r1, r0, r2
 801252c:	1ad2      	subs	r2, r2, r3
 801252e:	42d3      	cmn	r3, r2
 8012530:	d100      	bne.n	8012534 <memmove+0x28>
 8012532:	bd10      	pop	{r4, pc}
 8012534:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012538:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801253c:	e7f7      	b.n	801252e <memmove+0x22>

0801253e <__malloc_lock>:
 801253e:	4770      	bx	lr

08012540 <__malloc_unlock>:
 8012540:	4770      	bx	lr

08012542 <_realloc_r>:
 8012542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012544:	4607      	mov	r7, r0
 8012546:	4614      	mov	r4, r2
 8012548:	460e      	mov	r6, r1
 801254a:	b921      	cbnz	r1, 8012556 <_realloc_r+0x14>
 801254c:	4611      	mov	r1, r2
 801254e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012552:	f7ff ba73 	b.w	8011a3c <_malloc_r>
 8012556:	b922      	cbnz	r2, 8012562 <_realloc_r+0x20>
 8012558:	f7ff fa22 	bl	80119a0 <_free_r>
 801255c:	4625      	mov	r5, r4
 801255e:	4628      	mov	r0, r5
 8012560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012562:	f000 f849 	bl	80125f8 <_malloc_usable_size_r>
 8012566:	42a0      	cmp	r0, r4
 8012568:	d20f      	bcs.n	801258a <_realloc_r+0x48>
 801256a:	4621      	mov	r1, r4
 801256c:	4638      	mov	r0, r7
 801256e:	f7ff fa65 	bl	8011a3c <_malloc_r>
 8012572:	4605      	mov	r5, r0
 8012574:	2800      	cmp	r0, #0
 8012576:	d0f2      	beq.n	801255e <_realloc_r+0x1c>
 8012578:	4631      	mov	r1, r6
 801257a:	4622      	mov	r2, r4
 801257c:	f7fb fe5e 	bl	800e23c <memcpy>
 8012580:	4631      	mov	r1, r6
 8012582:	4638      	mov	r0, r7
 8012584:	f7ff fa0c 	bl	80119a0 <_free_r>
 8012588:	e7e9      	b.n	801255e <_realloc_r+0x1c>
 801258a:	4635      	mov	r5, r6
 801258c:	e7e7      	b.n	801255e <_realloc_r+0x1c>
	...

08012590 <_read_r>:
 8012590:	b538      	push	{r3, r4, r5, lr}
 8012592:	4c07      	ldr	r4, [pc, #28]	; (80125b0 <_read_r+0x20>)
 8012594:	4605      	mov	r5, r0
 8012596:	4608      	mov	r0, r1
 8012598:	4611      	mov	r1, r2
 801259a:	2200      	movs	r2, #0
 801259c:	6022      	str	r2, [r4, #0]
 801259e:	461a      	mov	r2, r3
 80125a0:	f7f5 f8c2 	bl	8007728 <_read>
 80125a4:	1c43      	adds	r3, r0, #1
 80125a6:	d102      	bne.n	80125ae <_read_r+0x1e>
 80125a8:	6823      	ldr	r3, [r4, #0]
 80125aa:	b103      	cbz	r3, 80125ae <_read_r+0x1e>
 80125ac:	602b      	str	r3, [r5, #0]
 80125ae:	bd38      	pop	{r3, r4, r5, pc}
 80125b0:	2001d104 	.word	0x2001d104

080125b4 <_fstat_r>:
 80125b4:	b538      	push	{r3, r4, r5, lr}
 80125b6:	4c07      	ldr	r4, [pc, #28]	; (80125d4 <_fstat_r+0x20>)
 80125b8:	2300      	movs	r3, #0
 80125ba:	4605      	mov	r5, r0
 80125bc:	4608      	mov	r0, r1
 80125be:	4611      	mov	r1, r2
 80125c0:	6023      	str	r3, [r4, #0]
 80125c2:	f7f5 f8f6 	bl	80077b2 <_fstat>
 80125c6:	1c43      	adds	r3, r0, #1
 80125c8:	d102      	bne.n	80125d0 <_fstat_r+0x1c>
 80125ca:	6823      	ldr	r3, [r4, #0]
 80125cc:	b103      	cbz	r3, 80125d0 <_fstat_r+0x1c>
 80125ce:	602b      	str	r3, [r5, #0]
 80125d0:	bd38      	pop	{r3, r4, r5, pc}
 80125d2:	bf00      	nop
 80125d4:	2001d104 	.word	0x2001d104

080125d8 <_isatty_r>:
 80125d8:	b538      	push	{r3, r4, r5, lr}
 80125da:	4c06      	ldr	r4, [pc, #24]	; (80125f4 <_isatty_r+0x1c>)
 80125dc:	2300      	movs	r3, #0
 80125de:	4605      	mov	r5, r0
 80125e0:	4608      	mov	r0, r1
 80125e2:	6023      	str	r3, [r4, #0]
 80125e4:	f7f5 f8f5 	bl	80077d2 <_isatty>
 80125e8:	1c43      	adds	r3, r0, #1
 80125ea:	d102      	bne.n	80125f2 <_isatty_r+0x1a>
 80125ec:	6823      	ldr	r3, [r4, #0]
 80125ee:	b103      	cbz	r3, 80125f2 <_isatty_r+0x1a>
 80125f0:	602b      	str	r3, [r5, #0]
 80125f2:	bd38      	pop	{r3, r4, r5, pc}
 80125f4:	2001d104 	.word	0x2001d104

080125f8 <_malloc_usable_size_r>:
 80125f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80125fc:	1f18      	subs	r0, r3, #4
 80125fe:	2b00      	cmp	r3, #0
 8012600:	bfbc      	itt	lt
 8012602:	580b      	ldrlt	r3, [r1, r0]
 8012604:	18c0      	addlt	r0, r0, r3
 8012606:	4770      	bx	lr

08012608 <_init>:
 8012608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801260a:	bf00      	nop
 801260c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801260e:	bc08      	pop	{r3}
 8012610:	469e      	mov	lr, r3
 8012612:	4770      	bx	lr

08012614 <_fini>:
 8012614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012616:	bf00      	nop
 8012618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801261a:	bc08      	pop	{r3}
 801261c:	469e      	mov	lr, r3
 801261e:	4770      	bx	lr

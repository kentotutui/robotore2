
robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f264  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  0800f3f8  0800f3f8  0001f3f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f790  0800f790  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800f790  0800f790  0001f790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f798  0800f798  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f798  0800f798  0001f798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f79c  0800f79c  0001f79c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800f7a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f2d0  20000210  0800f9b0  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001f4e0  0800f9b0  0002f4e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021893  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046d0  00000000  00000000  00041ad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001928  00000000  00000000  000461a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001748  00000000  00000000  00047ad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024674  00000000  00000000  00049218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000167ec  00000000  00000000  0006d88c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb2cb  00000000  00000000  00084078  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014f343  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a5c  00000000  00000000  0014f3c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f3dc 	.word	0x0800f3dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800f3dc 	.word	0x0800f3dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <calculateAngleControlFlip>:
static float Angle_diff;

static float Angle_control_term;
static float variable_Angle = 0;

void calculateAngleControlFlip(void){
 8000f88:	b5b0      	push	{r4, r5, r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 6000, ki = 60000, kd = 0.0;
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <calculateAngleControlFlip+0x120>)
 8000f90:	61fb      	str	r3, [r7, #28]
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <calculateAngleControlFlip+0x124>)
 8000f94:	61bb      	str	r3, [r7, #24]
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_Angle = getTheta10mm();
 8000fa2:	f000 fc05 	bl	80017b0 <getTheta10mm>
 8000fa6:	ed87 0a03 	vstr	s0, [r7, #12]

	if(Angle_control_enable_flag == 1){
 8000faa:	4b41      	ldr	r3, [pc, #260]	; (80010b0 <calculateAngleControlFlip+0x128>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d171      	bne.n	8001096 <calculateAngleControlFlip+0x10e>
		if(i_clear_flag == 1){
 8000fb2:	4b40      	ldr	r3, [pc, #256]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d106      	bne.n	8000fc8 <calculateAngleControlFlip+0x40>
			i = 0;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8000fc2:	4b3c      	ldr	r3, [pc, #240]	; (80010b4 <calculateAngleControlFlip+0x12c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	801a      	strh	r2, [r3, #0]
		}

		diff = setvariableAngle() - current_Angle;
 8000fc8:	f000 f87e 	bl	80010c8 <setvariableAngle>
 8000fcc:	eeb0 7a40 	vmov.f32	s14, s0
 8000fd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	edc7 7a04 	vstr	s15, [r7, #16]

		Angle_diff = diff;
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <calculateAngleControlFlip+0x134>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6013      	str	r3, [r2, #0]

		p = kp * diff; //P制御
 8000fe2:	ed97 7a07 	vldr	s14, [r7, #28]
 8000fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fee:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8000ff2:	4b31      	ldr	r3, [pc, #196]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f7ff faa6 	bl	8000548 <__aeabi_f2d>
 8000ffc:	4604      	mov	r4, r0
 8000ffe:	460d      	mov	r5, r1
 8001000:	ed97 7a06 	vldr	s14, [r7, #24]
 8001004:	edd7 7a04 	vldr	s15, [r7, #16]
 8001008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800100c:	ee17 0a90 	vmov	r0, s15
 8001010:	f7ff fa9a 	bl	8000548 <__aeabi_f2d>
 8001014:	a322      	add	r3, pc, #136	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	f7ff faed 	bl	80005f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4620      	mov	r0, r4
 8001024:	4629      	mov	r1, r5
 8001026:	f7ff f931 	bl	800028c <__adddf3>
 800102a:	4603      	mov	r3, r0
 800102c:	460c      	mov	r4, r1
 800102e:	4618      	mov	r0, r3
 8001030:	4621      	mov	r1, r4
 8001032:	f7ff fdd9 	bl	8000be8 <__aeabi_d2f>
 8001036:	4602      	mov	r2, r0
 8001038:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <calculateAngleControlFlip+0x130>)
 800103a:	601a      	str	r2, [r3, #0]
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <calculateAngleControlFlip+0x138>)
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a04 	vldr	s14, [r7, #16]
 8001046:	ee37 7a67 	vsub.f32	s14, s14, s15
 800104a:	edd7 7a05 	vldr	s15, [r7, #20]
 800104e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001052:	ee17 0a90 	vmov	r0, s15
 8001056:	f7ff fa77 	bl	8000548 <__aeabi_f2d>
 800105a:	a311      	add	r3, pc, #68	; (adr r3, 80010a0 <calculateAngleControlFlip+0x118>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fbf4 	bl	800084c <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f7ff fdbc 	bl	8000be8 <__aeabi_d2f>
 8001070:	4603      	mov	r3, r0
 8001072:	607b      	str	r3, [r7, #4]

		Angle_control_term = p + i + d;
 8001074:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <calculateAngleControlFlip+0x130>)
 8001076:	ed93 7a00 	vldr	s14, [r3]
 800107a:	edd7 7a02 	vldr	s15, [r7, #8]
 800107e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <calculateAngleControlFlip+0x13c>)
 800108c:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(-Angle_control_term, Angle_control_term);

		pre_diff = diff;
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <calculateAngleControlFlip+0x138>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]
	}
}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80010a4:	3f50624d 	.word	0x3f50624d
 80010a8:	45bb8000 	.word	0x45bb8000
 80010ac:	476a6000 	.word	0x476a6000
 80010b0:	2000022c 	.word	0x2000022c
 80010b4:	2000022e 	.word	0x2000022e
 80010b8:	2000023c 	.word	0x2000023c
 80010bc:	20000230 	.word	0x20000230
 80010c0:	20000240 	.word	0x20000240
 80010c4:	20000234 	.word	0x20000234

080010c8 <setvariableAngle>:
float getAngleControlTerm(void)
{
	return Angle_control_term;
}

float setvariableAngle(void){
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
	return variable_Angle;
 80010cc:	4b04      	ldr	r3, [pc, #16]	; (80010e0 <setvariableAngle+0x18>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
}
 80010d4:	eeb0 0a67 	vmov.f32	s0, s15
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	20000238 	.word	0x20000238

080010e4 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 80010e8:	213c      	movs	r1, #60	; 0x3c
 80010ea:	4808      	ldr	r0, [pc, #32]	; (800110c <initEncoder+0x28>)
 80010ec:	f008 fcd4 	bl	8009a98 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 80010f0:	213c      	movs	r1, #60	; 0x3c
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <initEncoder+0x2c>)
 80010f4:	f008 fcd0 	bl	8009a98 <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <initEncoder+0x30>)
 80010fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80010fe:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <initEncoder+0x34>)
 8001102:	f242 7210 	movw	r2, #10000	; 0x2710
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}
 800110c:	2001f09c 	.word	0x2001f09c
 8001110:	2001f05c 	.word	0x2001f05c
 8001114:	40000400 	.word	0x40000400
 8001118:	40000800 	.word	0x40000800
 800111c:	00000000 	.word	0x00000000

08001120 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8001120:	b598      	push	{r3, r4, r7, lr}
 8001122:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8001124:	4b56      	ldr	r3, [pc, #344]	; (8001280 <updateEncoderCnt+0x160>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	b29b      	uxth	r3, r3
 800112a:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 800112e:	3b10      	subs	r3, #16
 8001130:	b29b      	uxth	r3, r3
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b53      	ldr	r3, [pc, #332]	; (8001284 <updateEncoderCnt+0x164>)
 8001136:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8001138:	4b53      	ldr	r3, [pc, #332]	; (8001288 <updateEncoderCnt+0x168>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	b29b      	uxth	r3, r3
 800113e:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8001142:	3310      	adds	r3, #16
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21a      	sxth	r2, r3
 8001148:	4b50      	ldr	r3, [pc, #320]	; (800128c <updateEncoderCnt+0x16c>)
 800114a:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 800114c:	4b50      	ldr	r3, [pc, #320]	; (8001290 <updateEncoderCnt+0x170>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	b29a      	uxth	r2, r3
 8001154:	4b4b      	ldr	r3, [pc, #300]	; (8001284 <updateEncoderCnt+0x164>)
 8001156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800115a:	b29b      	uxth	r3, r3
 800115c:	4413      	add	r3, r2
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b4b      	ldr	r3, [pc, #300]	; (8001290 <updateEncoderCnt+0x170>)
 8001164:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <updateEncoderCnt+0x174>)
 8001168:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116c:	b29a      	uxth	r2, r3
 800116e:	4b47      	ldr	r3, [pc, #284]	; (800128c <updateEncoderCnt+0x16c>)
 8001170:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001174:	b29b      	uxth	r3, r3
 8001176:	4413      	add	r3, r2
 8001178:	b29b      	uxth	r3, r3
 800117a:	b21a      	sxth	r2, r3
 800117c:	4b45      	ldr	r3, [pc, #276]	; (8001294 <updateEncoderCnt+0x174>)
 800117e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <updateEncoderCnt+0x164>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	461a      	mov	r2, r3
 8001188:	4b40      	ldr	r3, [pc, #256]	; (800128c <updateEncoderCnt+0x16c>)
 800118a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118e:	4413      	add	r3, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9c7 	bl	8000524 <__aeabi_i2d>
 8001196:	a338      	add	r3, pc, #224	; (adr r3, 8001278 <updateEncoderCnt+0x158>)
 8001198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119c:	f7ff fa2c 	bl	80005f8 <__aeabi_dmul>
 80011a0:	4603      	mov	r3, r0
 80011a2:	460c      	mov	r4, r1
 80011a4:	4618      	mov	r0, r3
 80011a6:	4621      	mov	r1, r4
 80011a8:	f04f 0200 	mov.w	r2, #0
 80011ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011b0:	f7ff fb4c 	bl	800084c <__aeabi_ddiv>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	f7ff fd14 	bl	8000be8 <__aeabi_d2f>
 80011c0:	4602      	mov	r2, r0
 80011c2:	4b35      	ldr	r3, [pc, #212]	; (8001298 <updateEncoderCnt+0x178>)
 80011c4:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 80011c6:	4b35      	ldr	r3, [pc, #212]	; (800129c <updateEncoderCnt+0x17c>)
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <updateEncoderCnt+0x178>)
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d6:	4b31      	ldr	r3, [pc, #196]	; (800129c <updateEncoderCnt+0x17c>)
 80011d8:	edc3 7a00 	vstr	s15, [r3]
	sab_distance_10mm += distance_1ms;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <updateEncoderCnt+0x180>)
 80011de:	ed93 7a00 	vldr	s14, [r3]
 80011e2:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <updateEncoderCnt+0x178>)
 80011e4:	edd3 7a00 	vldr	s15, [r3]
 80011e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ec:	4b2c      	ldr	r3, [pc, #176]	; (80012a0 <updateEncoderCnt+0x180>)
 80011ee:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <updateEncoderCnt+0x184>)
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	4b27      	ldr	r3, [pc, #156]	; (8001298 <updateEncoderCnt+0x178>)
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <updateEncoderCnt+0x184>)
 8001204:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <updateEncoderCnt+0x188>)
 800120a:	ed93 7a00 	vldr	s14, [r3]
 800120e:	4b22      	ldr	r3, [pc, #136]	; (8001298 <updateEncoderCnt+0x178>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001218:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <updateEncoderCnt+0x188>)
 800121a:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <updateEncoderCnt+0x18c>)
 8001220:	ed93 7a00 	vldr	s14, [r3]
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <updateEncoderCnt+0x178>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <updateEncoderCnt+0x18c>)
 8001230:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <updateEncoderCnt+0x190>)
 8001236:	ed93 7a00 	vldr	s14, [r3]
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <updateEncoderCnt+0x178>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <updateEncoderCnt+0x190>)
 8001246:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <updateEncoderCnt+0x194>)
 800124c:	ed93 7a00 	vldr	s14, [r3]
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <updateEncoderCnt+0x178>)
 8001252:	edd3 7a00 	vldr	s15, [r3]
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <updateEncoderCnt+0x194>)
 800125c:	edc3 7a00 	vstr	s15, [r3]

	TIM3 -> CNT = CNT_OFFSET;
 8001260:	4b07      	ldr	r3, [pc, #28]	; (8001280 <updateEncoderCnt+0x160>)
 8001262:	f242 7210 	movw	r2, #10000	; 0x2710
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
    TIM4 -> CNT = CNT_OFFSET;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <updateEncoderCnt+0x168>)
 800126a:	f242 7210 	movw	r2, #10000	; 0x2710
 800126e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001270:	bf00      	nop
 8001272:	bd98      	pop	{r3, r4, r7, pc}
 8001274:	f3af 8000 	nop.w
 8001278:	bec93a2d 	.word	0xbec93a2d
 800127c:	3f8c463a 	.word	0x3f8c463a
 8001280:	40000400 	.word	0x40000400
 8001284:	20000244 	.word	0x20000244
 8001288:	40000800 	.word	0x40000800
 800128c:	20000246 	.word	0x20000246
 8001290:	20000248 	.word	0x20000248
 8001294:	2000024a 	.word	0x2000024a
 8001298:	2000024c 	.word	0x2000024c
 800129c:	20000250 	.word	0x20000250
 80012a0:	20000254 	.word	0x20000254
 80012a4:	20000258 	.word	0x20000258
 80012a8:	2000025c 	.word	0x2000025c
 80012ac:	20000260 	.word	0x20000260
 80012b0:	20000264 	.word	0x20000264
 80012b4:	20000268 	.word	0x20000268

080012b8 <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 80012c2:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <getEncoderCnt+0x2c>)
 80012c4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <getEncoderCnt+0x30>)
 80012ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	801a      	strh	r2, [r3, #0]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000244 	.word	0x20000244
 80012e8:	20000246 	.word	0x20000246

080012ec <getTotalDistance>:

float getTotalDistance(){
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
	return total_distance;
 80012f0:	4b04      	ldr	r3, [pc, #16]	; (8001304 <getTotalDistance+0x18>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	ee07 3a90 	vmov	s15, r3
}
 80012f8:	eeb0 0a67 	vmov.f32	s0, s15
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	20000258 	.word	0x20000258

08001308 <getGoalJudgeDistance>:

float getGoalJudgeDistance(){
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <getGoalJudgeDistance+0x18>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	ee07 3a90 	vmov	s15, r3
}
 8001314:	eeb0 0a67 	vmov.f32	s0, s15
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	2000025c 	.word	0x2000025c

08001324 <getSideLineJudgeDistance>:

float getSideLineJudgeDistance(){
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
	return side_line_judge_distance;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <getSideLineJudgeDistance+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	ee07 3a90 	vmov	s15, r3
}
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	20000260 	.word	0x20000260

08001340 <setTotalDistance>:

void setTotalDistance(float distance)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	ed87 0a01 	vstr	s0, [r7, #4]
	total_distance = distance;
 800134a:	4a04      	ldr	r2, [pc, #16]	; (800135c <setTotalDistance+0x1c>)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	20000258 	.word	0x20000258

08001360 <getCrossLineIgnoreDistance>:

float getCrossLineIgnoreDistance(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	return distance_cross_line_ignore;
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <getCrossLineIgnoreDistance+0x18>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	ee07 3a90 	vmov	s15, r3
}
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	20000264 	.word	0x20000264

0800137c <clearTotalDistance>:
float getSideLineIgnoreDistance(void)
{
	return distance_side_line_ignore;
}

void clearTotalDistance(){
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	total_distance = 0;
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <clearTotalDistance+0x18>)
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	20000258 	.word	0x20000258

08001398 <clearGoalJudgeDistance>:

void clearGoalJudgeDistance(){
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 800139c:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <clearGoalJudgeDistance+0x18>)
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	2000025c 	.word	0x2000025c

080013b4 <clearSideLineJudgeDistance>:

void clearSideLineJudgeDistance(){
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
	side_line_judge_distance = 0;
 80013b8:	4b04      	ldr	r3, [pc, #16]	; (80013cc <clearSideLineJudgeDistance+0x18>)
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000260 	.word	0x20000260

080013d0 <clearCrossLineIgnoreDistance>:

void clearCrossLineIgnoreDistance(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	distance_cross_line_ignore = 0;
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <clearCrossLineIgnoreDistance+0x18>)
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000264 	.word	0x20000264

080013ec <clearSideLineIgnoreDistance>:

void clearSideLineIgnoreDistance(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
	distance_side_line_ignore = 0;
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <clearSideLineIgnoreDistance+0x18>)
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000268 	.word	0x20000268

08001408 <getDistance10mm>:
{
	TIM3 -> CNT = CNT_OFFSET;
	TIM4 -> CNT = CNT_OFFSET;
}

float getDistance10mm(void){
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
	return distance_10mm;
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <getDistance10mm+0x18>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	ee07 3a90 	vmov	s15, r3
}
 8001414:	eeb0 0a67 	vmov.f32	s0, s15
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	20000250 	.word	0x20000250

08001424 <clearDistance10mm>:

void clearDistance10mm(void){
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
	distance_10mm = 0;
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <clearDistance10mm+0x18>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	20000250 	.word	0x20000250

08001440 <getspeedcount>:

float getspeedcount(void){
 8001440:	b598      	push	{r3, r4, r7, lr}
 8001442:	af00      	add	r7, sp, #0
	if(sab_distance_10mm >= 10){
 8001444:	4b16      	ldr	r3, [pc, #88]	; (80014a0 <getspeedcount+0x60>)
 8001446:	edd3 7a00 	vldr	s15, [r3]
 800144a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800144e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001456:	db16      	blt.n	8001486 <getspeedcount+0x46>
		speed_cnt += 0.1;
 8001458:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <getspeedcount+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f873 	bl	8000548 <__aeabi_f2d>
 8001462:	a30d      	add	r3, pc, #52	; (adr r3, 8001498 <getspeedcount+0x58>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7fe ff10 	bl	800028c <__adddf3>
 800146c:	4603      	mov	r3, r0
 800146e:	460c      	mov	r4, r1
 8001470:	4618      	mov	r0, r3
 8001472:	4621      	mov	r1, r4
 8001474:	f7ff fbb8 	bl	8000be8 <__aeabi_d2f>
 8001478:	4602      	mov	r2, r0
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <getspeedcount+0x64>)
 800147c:	601a      	str	r2, [r3, #0]
		sab_distance_10mm = 0;
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <getspeedcount+0x60>)
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <getspeedcount+0x64>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	ee07 3a90 	vmov	s15, r3
}
 800148e:	eeb0 0a67 	vmov.f32	s0, s15
 8001492:	bd98      	pop	{r3, r4, r7, pc}
 8001494:	f3af 8000 	nop.w
 8001498:	9999999a 	.word	0x9999999a
 800149c:	3fb99999 	.word	0x3fb99999
 80014a0:	20000254 	.word	0x20000254
 80014a4:	2000026c 	.word	0x2000026c

080014a8 <clearspeedcount>:

void clearspeedcount(void){
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	speed_cnt = 0.1;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <clearspeedcount+0x14>)
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <clearspeedcount+0x18>)
 80014b0:	601a      	str	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	2000026c 	.word	0x2000026c
 80014c0:	3dcccccd 	.word	0x3dcccccd

080014c4 <FLASH_Unlock>:
const uint32_t start_adress_sector11 =  0x80E0000; //sentor11 start address
//const uint32_t middle_adress_sector11 = 0x80E3CAF; //sentor11 midle address
const uint32_t end_adress_sector11 	 = 	0x80FFFFF;

inline static void FLASH_Unlock(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	FLASH->KEYR =  0x45670123;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <FLASH_Unlock+0x1c>)
 80014ca:	4a06      	ldr	r2, [pc, #24]	; (80014e4 <FLASH_Unlock+0x20>)
 80014cc:	605a      	str	r2, [r3, #4]
	FLASH->KEYR =  0xCDEF89AB;
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <FLASH_Unlock+0x1c>)
 80014d0:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <FLASH_Unlock+0x24>)
 80014d2:	605a      	str	r2, [r3, #4]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023c00 	.word	0x40023c00
 80014e4:	45670123 	.word	0x45670123
 80014e8:	cdef89ab 	.word	0xcdef89ab

080014ec <FLASH_Lock>:

inline static void FLASH_Lock(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	FLASH->CR |= FLASH_CR_LOCK;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <FLASH_Lock+0x1c>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <FLASH_Lock+0x1c>)
 80014f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80014fa:	6113      	str	r3, [r2, #16]

}
 80014fc:	bf00      	nop
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023c00 	.word	0x40023c00

0800150c <FLASH_WaitBusy>:

void FLASH_WaitBusy(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	while(FLASH->SR & FLASH_SR_BSY);//BSYがクリアされるまで待機
 8001510:	bf00      	nop
 8001512:	4b05      	ldr	r3, [pc, #20]	; (8001528 <FLASH_WaitBusy+0x1c>)
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f9      	bne.n	8001512 <FLASH_WaitBusy+0x6>
}
 800151e:	bf00      	nop
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	40023c00 	.word	0x40023c00

0800152c <FLASH_EreaseSector>:
	FLASH_WaitBusy();

	FLASH_Lock();
}

void FLASH_EreaseSector( uint16_t sector ){	//FLASH_SECTOR11
 800152c:	b580      	push	{r7, lr}
 800152e:	b088      	sub	sp, #32
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	80fb      	strh	r3, [r7, #6]
	HAL_FLASH_Unlock();
 8001536:	f006 fae7 	bl	8007b08 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInit;
	EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
	EraseInit.Sector = sector;
 800153e:	88fb      	ldrh	r3, [r7, #6]
 8001540:	617b      	str	r3, [r7, #20]
	EraseInit.NbSectors = 1;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
	EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;	//!< Device operating range: 2.7V to 3.6V
 8001546:	2302      	movs	r3, #2
 8001548:	61fb      	str	r3, [r7, #28]

	uint32_t PageError = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
	HAL_FLASHEx_Erase(&EraseInit, &PageError);
 800154e:	f107 0208 	add.w	r2, r7, #8
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f006 fb9d 	bl	8007c98 <HAL_FLASHEx_Erase>
	HAL_FLASH_Lock();
 800155e:	f006 faf5 	bl	8007b4c <HAL_FLASH_Lock>
}
 8001562:	bf00      	nop
 8001564:	3720      	adds	r7, #32
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <FLASH_Write_Word_F>:

	FLASH_Lock();
}

void FLASH_Write_Word_F(uint32_t address, float data)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	ed87 0a00 	vstr	s0, [r7]
	FLASH_Unlock();
 8001578:	f7ff ffa4 	bl	80014c4 <FLASH_Unlock>

	FLASH_WaitBusy();
 800157c:	f7ff ffc6 	bl	800150c <FLASH_WaitBusy>

	FLASH->CR |= FLASH_PSIZE_WORD;
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6113      	str	r3, [r2, #16]
	FLASH->CR |= FLASH_CR_PG;
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <FLASH_Write_Word_F+0x50>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <FLASH_Write_Word_F+0x50>)
 8001592:	f043 0301 	orr.w	r3, r3, #1
 8001596:	6113      	str	r3, [r2, #16]

	*(__IO float*)address = data;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	601a      	str	r2, [r3, #0]

	FLASH_WaitBusy();
 800159e:	f7ff ffb5 	bl	800150c <FLASH_WaitBusy>

	FLASH->CR &= ~FLASH_CR_PG;
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <FLASH_Write_Word_F+0x50>)
 80015a4:	691b      	ldr	r3, [r3, #16]
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <FLASH_Write_Word_F+0x50>)
 80015a8:	f023 0301 	bic.w	r3, r3, #1
 80015ac:	6113      	str	r3, [r2, #16]

	FLASH_Lock();
 80015ae:	f7ff ff9d 	bl	80014ec <FLASH_Lock>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <initGyro>:
int16_t xg_, yg_, zg_;
float omega;
float theta_10mm;
float ang_average = 0;

uint8_t initGyro(){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
	uint8_t who_i_am;
	who_i_am = IMU_init();
 80015c6:	f001 ff6b 	bl	80034a0 <IMU_init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(500);
 80015ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015d2:	f005 fa03 	bl	80069dc <HAL_Delay>

	return who_i_am;
 80015d6:	79fb      	ldrb	r3, [r7, #7]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <updateIMUValue>:

void updateIMUValue(){
 80015e0:	b5b0      	push	{r4, r5, r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	read_gyro_data();
 80015e6:	f001 ff7f 	bl	80034e8 <read_gyro_data>
	zg_ = zg;
 80015ea:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <updateIMUValue+0x148>)
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b21a      	sxth	r2, r3
 80015f0:	4b4e      	ldr	r3, [pc, #312]	; (800172c <updateIMUValue+0x14c>)
 80015f2:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 80015f4:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <updateIMUValue+0x148>)
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff92 	bl	8000524 <__aeabi_i2d>
 8001600:	4604      	mov	r4, r0
 8001602:	460d      	mov	r5, r1
 8001604:	4b4a      	ldr	r3, [pc, #296]	; (8001730 <updateIMUValue+0x150>)
 8001606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ff8a 	bl	8000524 <__aeabi_i2d>
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	f7fe ffee 	bl	80005f8 <__aeabi_dmul>
 800161c:	4602      	mov	r2, r0
 800161e:	460b      	mov	r3, r1
 8001620:	4620      	mov	r0, r4
 8001622:	4629      	mov	r1, r5
 8001624:	f7fe fe32 	bl	800028c <__adddf3>
 8001628:	4603      	mov	r3, r0
 800162a:	460c      	mov	r4, r1
 800162c:	4618      	mov	r0, r3
 800162e:	4621      	mov	r1, r4
 8001630:	f7ff fa92 	bl	8000b58 <__aeabi_d2iz>
 8001634:	4603      	mov	r3, r0
 8001636:	b21a      	sxth	r2, r3
 8001638:	4b3c      	ldr	r3, [pc, #240]	; (800172c <updateIMUValue+0x14c>)
 800163a:	801a      	strh	r2, [r3, #0]

    zg_ -= ang_average;
 800163c:	4b3b      	ldr	r3, [pc, #236]	; (800172c <updateIMUValue+0x14c>)
 800163e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001642:	ee07 3a90 	vmov	s15, r3
 8001646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800164a:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <updateIMUValue+0x154>)
 800164c:	edd3 7a00 	vldr	s15, [r3]
 8001650:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001654:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001658:	ee17 3a90 	vmov	r3, s15
 800165c:	b21a      	sxth	r2, r3
 800165e:	4b33      	ldr	r3, [pc, #204]	; (800172c <updateIMUValue+0x14c>)
 8001660:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 8001662:	4b32      	ldr	r3, [pc, #200]	; (800172c <updateIMUValue+0x14c>)
 8001664:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001668:	4b31      	ldr	r3, [pc, #196]	; (8001730 <updateIMUValue+0x150>)
 800166a:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <updateIMUValue+0x14c>)
 800166e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800167a:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	a322      	add	r3, pc, #136	; (adr r3, 8001710 <updateIMUValue+0x130>)
 8001686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168a:	f7ff f8df 	bl	800084c <__aeabi_ddiv>
 800168e:	4603      	mov	r3, r0
 8001690:	460c      	mov	r4, r1
 8001692:	4618      	mov	r0, r3
 8001694:	4621      	mov	r1, r4
 8001696:	a320      	add	r3, pc, #128	; (adr r3, 8001718 <updateIMUValue+0x138>)
 8001698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169c:	f7fe ffac 	bl	80005f8 <__aeabi_dmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	460c      	mov	r4, r1
 80016a4:	4618      	mov	r0, r3
 80016a6:	4621      	mov	r1, r4
 80016a8:	f04f 0200 	mov.w	r2, #0
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <updateIMUValue+0x158>)
 80016ae:	f7ff f8cd 	bl	800084c <__aeabi_ddiv>
 80016b2:	4603      	mov	r3, r0
 80016b4:	460c      	mov	r4, r1
 80016b6:	4618      	mov	r0, r3
 80016b8:	4621      	mov	r1, r4
 80016ba:	f7ff fa95 	bl	8000be8 <__aeabi_d2f>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <updateIMUValue+0x15c>)
 80016c2:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 80016c4:	4b1e      	ldr	r3, [pc, #120]	; (8001740 <updateIMUValue+0x160>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7fe ff3d 	bl	8000548 <__aeabi_f2d>
 80016ce:	4604      	mov	r4, r0
 80016d0:	460d      	mov	r5, r1
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <updateIMUValue+0x15c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe ff36 	bl	8000548 <__aeabi_f2d>
 80016dc:	a310      	add	r3, pc, #64	; (adr r3, 8001720 <updateIMUValue+0x140>)
 80016de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e2:	f7fe ff89 	bl	80005f8 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4620      	mov	r0, r4
 80016ec:	4629      	mov	r1, r5
 80016ee:	f7fe fdcd 	bl	800028c <__adddf3>
 80016f2:	4603      	mov	r3, r0
 80016f4:	460c      	mov	r4, r1
 80016f6:	4618      	mov	r0, r3
 80016f8:	4621      	mov	r1, r4
 80016fa:	f7ff fa75 	bl	8000be8 <__aeabi_d2f>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <updateIMUValue+0x160>)
 8001702:	601a      	str	r2, [r3, #0]
}
 8001704:	bf00      	nop
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bdb0      	pop	{r4, r5, r7, pc}
 800170c:	f3af 8000 	nop.w
 8001710:	66666666 	.word	0x66666666
 8001714:	40306666 	.word	0x40306666
 8001718:	54411744 	.word	0x54411744
 800171c:	400921fb 	.word	0x400921fb
 8001720:	d2f1a9fc 	.word	0xd2f1a9fc
 8001724:	3f50624d 	.word	0x3f50624d
 8001728:	2001f1c0 	.word	0x2001f1c0
 800172c:	2001f0dc 	.word	0x2001f0dc
 8001730:	20000274 	.word	0x20000274
 8001734:	20000270 	.word	0x20000270
 8001738:	40668000 	.word	0x40668000
 800173c:	2001f0e8 	.word	0x2001f0e8
 8001740:	2001f0e4 	.word	0x2001f0e4

08001744 <IMU_average>:

void IMU_average(){
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
	float average = 0;
 800174a:	f04f 0300 	mov.w	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
	for(int i=0;i<=1000;i++){
 8001750:	2300      	movs	r3, #0
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	e015      	b.n	8001782 <IMU_average+0x3e>
		average = average+zg;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <IMU_average+0x60>)
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	b21b      	sxth	r3, r3
 800175c:	ee07 3a90 	vmov	s15, r3
 8001760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001764:	ed97 7a01 	vldr	s14, [r7, #4]
 8001768:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176c:	edc7 7a01 	vstr	s15, [r7, #4]
		HAL_Delay(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f005 f933 	bl	80069dc <HAL_Delay>
		setLED2('A');
 8001776:	2041      	movs	r0, #65	; 0x41
 8001778:	f000 f904 	bl	8001984 <setLED2>
	for(int i=0;i<=1000;i++){
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	3301      	adds	r3, #1
 8001780:	603b      	str	r3, [r7, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001788:	dde5      	ble.n	8001756 <IMU_average+0x12>
	}
	ang_average = average/1000;
 800178a:	ed97 7a01 	vldr	s14, [r7, #4]
 800178e:	eddf 6a06 	vldr	s13, [pc, #24]	; 80017a8 <IMU_average+0x64>
 8001792:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001796:	4b05      	ldr	r3, [pc, #20]	; (80017ac <IMU_average+0x68>)
 8001798:	edc3 7a00 	vstr	s15, [r3]
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2001f1c0 	.word	0x2001f1c0
 80017a8:	447a0000 	.word	0x447a0000
 80017ac:	20000270 	.word	0x20000270

080017b0 <getTheta10mm>:
float getOmega(){
	return omega;
}

float getTheta10mm()
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	return theta_10mm;
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <getTheta10mm+0x18>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	ee07 3a90 	vmov	s15, r3
}
 80017bc:	eeb0 0a67 	vmov.f32	s0, s15
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	2001f0e4 	.word	0x2001f0e4

080017cc <clearTheta10mm>:

void clearTheta10mm()
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	theta_10mm = 0;
 80017d0:	4b04      	ldr	r3, [pc, #16]	; (80017e4 <clearTheta10mm+0x18>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	2001f0e4 	.word	0x2001f0e4

080017e8 <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b52      	cmp	r3, #82	; 0x52
 80017f6:	d112      	bne.n	800181e <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fe:	4860      	ldr	r0, [pc, #384]	; (8001980 <setLED+0x198>)
 8001800:	f006 fd1e 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 8001804:	2201      	movs	r2, #1
 8001806:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800180a:	485d      	ldr	r0, [pc, #372]	; (8001980 <setLED+0x198>)
 800180c:	f006 fd18 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 8001810:	2201      	movs	r2, #1
 8001812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001816:	485a      	ldr	r0, [pc, #360]	; (8001980 <setLED+0x198>)
 8001818:	f006 fd12 	bl	8008240 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 800181c:	e0ab      	b.n	8001976 <setLED+0x18e>
	else if(color == 'G'){
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	2b47      	cmp	r3, #71	; 0x47
 8001822:	d112      	bne.n	800184a <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001824:	2201      	movs	r2, #1
 8001826:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800182a:	4855      	ldr	r0, [pc, #340]	; (8001980 <setLED+0x198>)
 800182c:	f006 fd08 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001836:	4852      	ldr	r0, [pc, #328]	; (8001980 <setLED+0x198>)
 8001838:	f006 fd02 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001842:	484f      	ldr	r0, [pc, #316]	; (8001980 <setLED+0x198>)
 8001844:	f006 fcfc 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001848:	e095      	b.n	8001976 <setLED+0x18e>
	else if(color == 'B'){
 800184a:	79fb      	ldrb	r3, [r7, #7]
 800184c:	2b42      	cmp	r3, #66	; 0x42
 800184e:	d112      	bne.n	8001876 <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001850:	2201      	movs	r2, #1
 8001852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001856:	484a      	ldr	r0, [pc, #296]	; (8001980 <setLED+0x198>)
 8001858:	f006 fcf2 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800185c:	2201      	movs	r2, #1
 800185e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001862:	4847      	ldr	r0, [pc, #284]	; (8001980 <setLED+0x198>)
 8001864:	f006 fcec 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186e:	4844      	ldr	r0, [pc, #272]	; (8001980 <setLED+0x198>)
 8001870:	f006 fce6 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001874:	e07f      	b.n	8001976 <setLED+0x18e>
	else if(color == 'M'){
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b4d      	cmp	r3, #77	; 0x4d
 800187a:	d112      	bne.n	80018a2 <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800187c:	2200      	movs	r2, #0
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	483f      	ldr	r0, [pc, #252]	; (8001980 <setLED+0x198>)
 8001884:	f006 fcdc 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001888:	2201      	movs	r2, #1
 800188a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800188e:	483c      	ldr	r0, [pc, #240]	; (8001980 <setLED+0x198>)
 8001890:	f006 fcd6 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800189a:	4839      	ldr	r0, [pc, #228]	; (8001980 <setLED+0x198>)
 800189c:	f006 fcd0 	bl	8008240 <HAL_GPIO_WritePin>
}
 80018a0:	e069      	b.n	8001976 <setLED+0x18e>
	else if(color == 'Y'){
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	2b59      	cmp	r3, #89	; 0x59
 80018a6:	d112      	bne.n	80018ce <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018a8:	2200      	movs	r2, #0
 80018aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ae:	4834      	ldr	r0, [pc, #208]	; (8001980 <setLED+0x198>)
 80018b0:	f006 fcc6 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018ba:	4831      	ldr	r0, [pc, #196]	; (8001980 <setLED+0x198>)
 80018bc:	f006 fcc0 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018c6:	482e      	ldr	r0, [pc, #184]	; (8001980 <setLED+0x198>)
 80018c8:	f006 fcba 	bl	8008240 <HAL_GPIO_WritePin>
}
 80018cc:	e053      	b.n	8001976 <setLED+0x18e>
	else if(color == 'C'){
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b43      	cmp	r3, #67	; 0x43
 80018d2:	d112      	bne.n	80018fa <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018da:	4829      	ldr	r0, [pc, #164]	; (8001980 <setLED+0x198>)
 80018dc:	f006 fcb0 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e6:	4826      	ldr	r0, [pc, #152]	; (8001980 <setLED+0x198>)
 80018e8:	f006 fcaa 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f2:	4823      	ldr	r0, [pc, #140]	; (8001980 <setLED+0x198>)
 80018f4:	f006 fca4 	bl	8008240 <HAL_GPIO_WritePin>
}
 80018f8:	e03d      	b.n	8001976 <setLED+0x18e>
	else if(color == 'W'){
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	2b57      	cmp	r3, #87	; 0x57
 80018fe:	d112      	bne.n	8001926 <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001900:	2200      	movs	r2, #0
 8001902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001906:	481e      	ldr	r0, [pc, #120]	; (8001980 <setLED+0x198>)
 8001908:	f006 fc9a 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800190c:	2200      	movs	r2, #0
 800190e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001912:	481b      	ldr	r0, [pc, #108]	; (8001980 <setLED+0x198>)
 8001914:	f006 fc94 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001918:	2200      	movs	r2, #0
 800191a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800191e:	4818      	ldr	r0, [pc, #96]	; (8001980 <setLED+0x198>)
 8001920:	f006 fc8e 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001924:	e027      	b.n	8001976 <setLED+0x18e>
	else if(color == 'N'){
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b4e      	cmp	r3, #78	; 0x4e
 800192a:	d112      	bne.n	8001952 <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001932:	4813      	ldr	r0, [pc, #76]	; (8001980 <setLED+0x198>)
 8001934:	f006 fc84 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800193e:	4810      	ldr	r0, [pc, #64]	; (8001980 <setLED+0x198>)
 8001940:	f006 fc7e 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001944:	2201      	movs	r2, #1
 8001946:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <setLED+0x198>)
 800194c:	f006 fc78 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001950:	e011      	b.n	8001976 <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <setLED+0x198>)
 800195a:	f006 fc71 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001964:	4806      	ldr	r0, [pc, #24]	; (8001980 <setLED+0x198>)
 8001966:	f006 fc6b 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001970:	4803      	ldr	r0, [pc, #12]	; (8001980 <setLED+0x198>)
 8001972:	f006 fc65 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40020800 	.word	0x40020800

08001984 <setLED2>:

void setLED2(uint8_t color2)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	2b52      	cmp	r3, #82	; 0x52
 8001992:	d124      	bne.n	80019de <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001994:	2200      	movs	r2, #0
 8001996:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800199a:	48c5      	ldr	r0, [pc, #788]	; (8001cb0 <setLED2+0x32c>)
 800199c:	f006 fc50 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019a6:	48c3      	ldr	r0, [pc, #780]	; (8001cb4 <setLED2+0x330>)
 80019a8:	f006 fc4a 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b2:	48c0      	ldr	r0, [pc, #768]	; (8001cb4 <setLED2+0x330>)
 80019b4:	f006 fc44 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80019b8:	2201      	movs	r2, #1
 80019ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019be:	48bd      	ldr	r0, [pc, #756]	; (8001cb4 <setLED2+0x330>)
 80019c0:	f006 fc3e 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80019c4:	2201      	movs	r2, #1
 80019c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019ca:	48ba      	ldr	r0, [pc, #744]	; (8001cb4 <setLED2+0x330>)
 80019cc:	f006 fc38 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019d6:	48b7      	ldr	r0, [pc, #732]	; (8001cb4 <setLED2+0x330>)
 80019d8:	f006 fc32 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 80019dc:	e163      	b.n	8001ca6 <setLED2+0x322>
	else if(color2 == 'G'){
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	2b47      	cmp	r3, #71	; 0x47
 80019e2:	d124      	bne.n	8001a2e <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80019e4:	2201      	movs	r2, #1
 80019e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019ea:	48b1      	ldr	r0, [pc, #708]	; (8001cb0 <setLED2+0x32c>)
 80019ec:	f006 fc28 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019f6:	48af      	ldr	r0, [pc, #700]	; (8001cb4 <setLED2+0x330>)
 80019f8:	f006 fc22 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80019fc:	2201      	movs	r2, #1
 80019fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a02:	48ac      	ldr	r0, [pc, #688]	; (8001cb4 <setLED2+0x330>)
 8001a04:	f006 fc1c 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a0e:	48a9      	ldr	r0, [pc, #676]	; (8001cb4 <setLED2+0x330>)
 8001a10:	f006 fc16 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a1a:	48a6      	ldr	r0, [pc, #664]	; (8001cb4 <setLED2+0x330>)
 8001a1c:	f006 fc10 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a26:	48a3      	ldr	r0, [pc, #652]	; (8001cb4 <setLED2+0x330>)
 8001a28:	f006 fc0a 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001a2c:	e13b      	b.n	8001ca6 <setLED2+0x322>
	else if(color2 == 'B'){
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b42      	cmp	r3, #66	; 0x42
 8001a32:	d124      	bne.n	8001a7e <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a34:	2201      	movs	r2, #1
 8001a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a3a:	489d      	ldr	r0, [pc, #628]	; (8001cb0 <setLED2+0x32c>)
 8001a3c:	f006 fc00 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a46:	489b      	ldr	r0, [pc, #620]	; (8001cb4 <setLED2+0x330>)
 8001a48:	f006 fbfa 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a52:	4898      	ldr	r0, [pc, #608]	; (8001cb4 <setLED2+0x330>)
 8001a54:	f006 fbf4 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a5e:	4895      	ldr	r0, [pc, #596]	; (8001cb4 <setLED2+0x330>)
 8001a60:	f006 fbee 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001a64:	2201      	movs	r2, #1
 8001a66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a6a:	4892      	ldr	r0, [pc, #584]	; (8001cb4 <setLED2+0x330>)
 8001a6c:	f006 fbe8 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001a70:	2201      	movs	r2, #1
 8001a72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a76:	488f      	ldr	r0, [pc, #572]	; (8001cb4 <setLED2+0x330>)
 8001a78:	f006 fbe2 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001a7c:	e113      	b.n	8001ca6 <setLED2+0x322>
	else if(color2 == 'W'){
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b57      	cmp	r3, #87	; 0x57
 8001a82:	d124      	bne.n	8001ace <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001a84:	2201      	movs	r2, #1
 8001a86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a8a:	4889      	ldr	r0, [pc, #548]	; (8001cb0 <setLED2+0x32c>)
 8001a8c:	f006 fbd8 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001a90:	2201      	movs	r2, #1
 8001a92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a96:	4887      	ldr	r0, [pc, #540]	; (8001cb4 <setLED2+0x330>)
 8001a98:	f006 fbd2 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aa2:	4884      	ldr	r0, [pc, #528]	; (8001cb4 <setLED2+0x330>)
 8001aa4:	f006 fbcc 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aae:	4881      	ldr	r0, [pc, #516]	; (8001cb4 <setLED2+0x330>)
 8001ab0:	f006 fbc6 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aba:	487e      	ldr	r0, [pc, #504]	; (8001cb4 <setLED2+0x330>)
 8001abc:	f006 fbc0 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ac6:	487b      	ldr	r0, [pc, #492]	; (8001cb4 <setLED2+0x330>)
 8001ac8:	f006 fbba 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001acc:	e0eb      	b.n	8001ca6 <setLED2+0x322>
	else if(color2 == 'Y'){
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	2b59      	cmp	r3, #89	; 0x59
 8001ad2:	d124      	bne.n	8001b1e <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ada:	4875      	ldr	r0, [pc, #468]	; (8001cb0 <setLED2+0x32c>)
 8001adc:	f006 fbb0 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ae6:	4873      	ldr	r0, [pc, #460]	; (8001cb4 <setLED2+0x330>)
 8001ae8:	f006 fbaa 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001aec:	2201      	movs	r2, #1
 8001aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af2:	4870      	ldr	r0, [pc, #448]	; (8001cb4 <setLED2+0x330>)
 8001af4:	f006 fba4 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001afe:	486d      	ldr	r0, [pc, #436]	; (8001cb4 <setLED2+0x330>)
 8001b00:	f006 fb9e 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b0a:	486a      	ldr	r0, [pc, #424]	; (8001cb4 <setLED2+0x330>)
 8001b0c:	f006 fb98 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b16:	4867      	ldr	r0, [pc, #412]	; (8001cb4 <setLED2+0x330>)
 8001b18:	f006 fb92 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001b1c:	e0c3      	b.n	8001ca6 <setLED2+0x322>
	else if(color2 == 'X'){
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b58      	cmp	r3, #88	; 0x58
 8001b22:	d124      	bne.n	8001b6e <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001b24:	2201      	movs	r2, #1
 8001b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b2a:	4861      	ldr	r0, [pc, #388]	; (8001cb0 <setLED2+0x32c>)
 8001b2c:	f006 fb88 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b30:	2201      	movs	r2, #1
 8001b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b36:	485f      	ldr	r0, [pc, #380]	; (8001cb4 <setLED2+0x330>)
 8001b38:	f006 fb82 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b42:	485c      	ldr	r0, [pc, #368]	; (8001cb4 <setLED2+0x330>)
 8001b44:	f006 fb7c 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4e:	4859      	ldr	r0, [pc, #356]	; (8001cb4 <setLED2+0x330>)
 8001b50:	f006 fb76 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001b54:	2201      	movs	r2, #1
 8001b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5a:	4856      	ldr	r0, [pc, #344]	; (8001cb4 <setLED2+0x330>)
 8001b5c:	f006 fb70 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001b60:	2200      	movs	r2, #0
 8001b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b66:	4853      	ldr	r0, [pc, #332]	; (8001cb4 <setLED2+0x330>)
 8001b68:	f006 fb6a 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001b6c:	e09b      	b.n	8001ca6 <setLED2+0x322>
	else if(color2 == 'V'){
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	2b56      	cmp	r3, #86	; 0x56
 8001b72:	d124      	bne.n	8001bbe <setLED2+0x23a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001b74:	2200      	movs	r2, #0
 8001b76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b7a:	484d      	ldr	r0, [pc, #308]	; (8001cb0 <setLED2+0x32c>)
 8001b7c:	f006 fb60 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b86:	484b      	ldr	r0, [pc, #300]	; (8001cb4 <setLED2+0x330>)
 8001b88:	f006 fb5a 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b92:	4848      	ldr	r0, [pc, #288]	; (8001cb4 <setLED2+0x330>)
 8001b94:	f006 fb54 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b9e:	4845      	ldr	r0, [pc, #276]	; (8001cb4 <setLED2+0x330>)
 8001ba0:	f006 fb4e 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001baa:	4842      	ldr	r0, [pc, #264]	; (8001cb4 <setLED2+0x330>)
 8001bac:	f006 fb48 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bb6:	483f      	ldr	r0, [pc, #252]	; (8001cb4 <setLED2+0x330>)
 8001bb8:	f006 fb42 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001bbc:	e073      	b.n	8001ca6 <setLED2+0x322>
	else if(color2 == 'T'){
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	2b54      	cmp	r3, #84	; 0x54
 8001bc2:	d124      	bne.n	8001c0e <setLED2+0x28a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bca:	4839      	ldr	r0, [pc, #228]	; (8001cb0 <setLED2+0x32c>)
 8001bcc:	f006 fb38 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd6:	4837      	ldr	r0, [pc, #220]	; (8001cb4 <setLED2+0x330>)
 8001bd8:	f006 fb32 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001be2:	4834      	ldr	r0, [pc, #208]	; (8001cb4 <setLED2+0x330>)
 8001be4:	f006 fb2c 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001be8:	2201      	movs	r2, #1
 8001bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bee:	4831      	ldr	r0, [pc, #196]	; (8001cb4 <setLED2+0x330>)
 8001bf0:	f006 fb26 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bfa:	482e      	ldr	r0, [pc, #184]	; (8001cb4 <setLED2+0x330>)
 8001bfc:	f006 fb20 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c06:	482b      	ldr	r0, [pc, #172]	; (8001cb4 <setLED2+0x330>)
 8001c08:	f006 fb1a 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001c0c:	e04b      	b.n	8001ca6 <setLED2+0x322>
	else if(color2 == 'A'){
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	2b41      	cmp	r3, #65	; 0x41
 8001c12:	d124      	bne.n	8001c5e <setLED2+0x2da>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001c14:	2200      	movs	r2, #0
 8001c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c1a:	4825      	ldr	r0, [pc, #148]	; (8001cb0 <setLED2+0x32c>)
 8001c1c:	f006 fb10 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001c20:	2200      	movs	r2, #0
 8001c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c26:	4823      	ldr	r0, [pc, #140]	; (8001cb4 <setLED2+0x330>)
 8001c28:	f006 fb0a 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c32:	4820      	ldr	r0, [pc, #128]	; (8001cb4 <setLED2+0x330>)
 8001c34:	f006 fb04 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c3e:	481d      	ldr	r0, [pc, #116]	; (8001cb4 <setLED2+0x330>)
 8001c40:	f006 fafe 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c4a:	481a      	ldr	r0, [pc, #104]	; (8001cb4 <setLED2+0x330>)
 8001c4c:	f006 faf8 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c56:	4817      	ldr	r0, [pc, #92]	; (8001cb4 <setLED2+0x330>)
 8001c58:	f006 faf2 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001c5c:	e023      	b.n	8001ca6 <setLED2+0x322>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c64:	4812      	ldr	r0, [pc, #72]	; (8001cb0 <setLED2+0x32c>)
 8001c66:	f006 faeb 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c70:	4810      	ldr	r0, [pc, #64]	; (8001cb4 <setLED2+0x330>)
 8001c72:	f006 fae5 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001c76:	2201      	movs	r2, #1
 8001c78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <setLED2+0x330>)
 8001c7e:	f006 fadf 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001c82:	2201      	movs	r2, #1
 8001c84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c88:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <setLED2+0x330>)
 8001c8a:	f006 fad9 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c94:	4807      	ldr	r0, [pc, #28]	; (8001cb4 <setLED2+0x330>)
 8001c96:	f006 fad3 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ca0:	4804      	ldr	r0, [pc, #16]	; (8001cb4 <setLED2+0x330>)
 8001ca2:	f006 facd 	bl	8008240 <HAL_GPIO_WritePin>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40020000 	.word	0x40020000
 8001cb4:	40020400 	.word	0x40020400

08001cb8 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001cb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3.3, kd = 0.025;//taiya良くないやつ kp = 3.2, kd = 0.018
 8001cc0:	4bb1      	ldr	r3, [pc, #708]	; (8001f88 <calculateLineFollowingTermFlip+0x2d0>)
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	4bb1      	ldr	r3, [pc, #708]	; (8001f8c <calculateLineFollowingTermFlip+0x2d4>)
 8001cc6:	613b      	str	r3, [r7, #16]
	float diff = 0.;
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]

	if(line_trace_enable_flag == 1){
 8001cce:	4bb0      	ldr	r3, [pc, #704]	; (8001f90 <calculateLineFollowingTermFlip+0x2d8>)
 8001cd0:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	f040 8140 	bne.w	8001f5a <calculateLineFollowingTermFlip+0x2a2>
		if(i_clear_flag == 1){
 8001cda:	4bae      	ldr	r3, [pc, #696]	; (8001f94 <calculateLineFollowingTermFlip+0x2dc>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d106      	bne.n	8001cf0 <calculateLineFollowingTermFlip+0x38>
			i = 0;
 8001ce2:	4bad      	ldr	r3, [pc, #692]	; (8001f98 <calculateLineFollowingTermFlip+0x2e0>)
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8001cea:	4baa      	ldr	r3, [pc, #680]	; (8001f94 <calculateLineFollowingTermFlip+0x2dc>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
		}

		//diff = ( ( sensor[0] * 2.0 + sensor[1] * 1.8 + sensor[2] * 1.6 + sensor[3] * 1.4 + sensor[4] * 1.2 + sensor[5]) / 6 ) - ( ( sensor[6] + sensor[7] * 1.2 + sensor[8] * 1.4 + sensor[9] * 1.6 + sensor[10] * 1.8 + sensor[11] * 2.0 ) / 6 );
		diff = ( ( sensor[0] * 1.25 + sensor[1] * 1.2 + sensor[2] * 1.15 + sensor[3] * 1.1 + sensor[4] * 1.05 + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] * 1.05 + sensor[8] * 1.1 + sensor[9] * 1.15 + sensor[10] * 1.2 + sensor[11] * 1.25 ) / 6 );
 8001cf0:	4baa      	ldr	r3, [pc, #680]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc14 	bl	8000524 <__aeabi_i2d>
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4ba7      	ldr	r3, [pc, #668]	; (8001fa0 <calculateLineFollowingTermFlip+0x2e8>)
 8001d02:	f7fe fc79 	bl	80005f8 <__aeabi_dmul>
 8001d06:	4603      	mov	r3, r0
 8001d08:	460c      	mov	r4, r1
 8001d0a:	4625      	mov	r5, r4
 8001d0c:	461c      	mov	r4, r3
 8001d0e:	4ba3      	ldr	r3, [pc, #652]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001d10:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fc05 	bl	8000524 <__aeabi_i2d>
 8001d1a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001d1e:	4ba1      	ldr	r3, [pc, #644]	; (8001fa4 <calculateLineFollowingTermFlip+0x2ec>)
 8001d20:	f7fe fc6a 	bl	80005f8 <__aeabi_dmul>
 8001d24:	4602      	mov	r2, r0
 8001d26:	460b      	mov	r3, r1
 8001d28:	4620      	mov	r0, r4
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	f7fe faae 	bl	800028c <__adddf3>
 8001d30:	4603      	mov	r3, r0
 8001d32:	460c      	mov	r4, r1
 8001d34:	4625      	mov	r5, r4
 8001d36:	461c      	mov	r4, r3
 8001d38:	4b98      	ldr	r3, [pc, #608]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001d3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fbf0 	bl	8000524 <__aeabi_i2d>
 8001d44:	a388      	add	r3, pc, #544	; (adr r3, 8001f68 <calculateLineFollowingTermFlip+0x2b0>)
 8001d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4a:	f7fe fc55 	bl	80005f8 <__aeabi_dmul>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4620      	mov	r0, r4
 8001d54:	4629      	mov	r1, r5
 8001d56:	f7fe fa99 	bl	800028c <__adddf3>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460c      	mov	r4, r1
 8001d5e:	4625      	mov	r5, r4
 8001d60:	461c      	mov	r4, r3
 8001d62:	4b8e      	ldr	r3, [pc, #568]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001d64:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbdb 	bl	8000524 <__aeabi_i2d>
 8001d6e:	a380      	add	r3, pc, #512	; (adr r3, 8001f70 <calculateLineFollowingTermFlip+0x2b8>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fc40 	bl	80005f8 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4629      	mov	r1, r5
 8001d80:	f7fe fa84 	bl	800028c <__adddf3>
 8001d84:	4603      	mov	r3, r0
 8001d86:	460c      	mov	r4, r1
 8001d88:	4625      	mov	r5, r4
 8001d8a:	461c      	mov	r4, r3
 8001d8c:	4b83      	ldr	r3, [pc, #524]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001d8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fbc6 	bl	8000524 <__aeabi_i2d>
 8001d98:	a377      	add	r3, pc, #476	; (adr r3, 8001f78 <calculateLineFollowingTermFlip+0x2c0>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	f7fe fc2b 	bl	80005f8 <__aeabi_dmul>
 8001da2:	4602      	mov	r2, r0
 8001da4:	460b      	mov	r3, r1
 8001da6:	4620      	mov	r0, r4
 8001da8:	4629      	mov	r1, r5
 8001daa:	f7fe fa6f 	bl	800028c <__adddf3>
 8001dae:	4603      	mov	r3, r0
 8001db0:	460c      	mov	r4, r1
 8001db2:	4625      	mov	r5, r4
 8001db4:	461c      	mov	r4, r3
 8001db6:	4b79      	ldr	r3, [pc, #484]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001db8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fbb1 	bl	8000524 <__aeabi_i2d>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	4629      	mov	r1, r5
 8001dca:	f7fe fa5f 	bl	800028c <__adddf3>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	460c      	mov	r4, r1
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	4621      	mov	r1, r4
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <calculateLineFollowingTermFlip+0x2f0>)
 8001ddc:	f7fe fd36 	bl	800084c <__aeabi_ddiv>
 8001de0:	4603      	mov	r3, r0
 8001de2:	460c      	mov	r4, r1
 8001de4:	4625      	mov	r5, r4
 8001de6:	461c      	mov	r4, r3
 8001de8:	4b6c      	ldr	r3, [pc, #432]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001dea:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fb98 	bl	8000524 <__aeabi_i2d>
 8001df4:	4680      	mov	r8, r0
 8001df6:	4689      	mov	r9, r1
 8001df8:	4b68      	ldr	r3, [pc, #416]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001dfa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fb90 	bl	8000524 <__aeabi_i2d>
 8001e04:	a35c      	add	r3, pc, #368	; (adr r3, 8001f78 <calculateLineFollowingTermFlip+0x2c0>)
 8001e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0a:	f7fe fbf5 	bl	80005f8 <__aeabi_dmul>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4640      	mov	r0, r8
 8001e14:	4649      	mov	r1, r9
 8001e16:	f7fe fa39 	bl	800028c <__adddf3>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4690      	mov	r8, r2
 8001e20:	4699      	mov	r9, r3
 8001e22:	4b5e      	ldr	r3, [pc, #376]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001e24:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7fe fb7b 	bl	8000524 <__aeabi_i2d>
 8001e2e:	a350      	add	r3, pc, #320	; (adr r3, 8001f70 <calculateLineFollowingTermFlip+0x2b8>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f7fe fbe0 	bl	80005f8 <__aeabi_dmul>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4640      	mov	r0, r8
 8001e3e:	4649      	mov	r1, r9
 8001e40:	f7fe fa24 	bl	800028c <__adddf3>
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	4690      	mov	r8, r2
 8001e4a:	4699      	mov	r9, r3
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001e4e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fb66 	bl	8000524 <__aeabi_i2d>
 8001e58:	a343      	add	r3, pc, #268	; (adr r3, 8001f68 <calculateLineFollowingTermFlip+0x2b0>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fbcb 	bl	80005f8 <__aeabi_dmul>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4640      	mov	r0, r8
 8001e68:	4649      	mov	r1, r9
 8001e6a:	f7fe fa0f 	bl	800028c <__adddf3>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4690      	mov	r8, r2
 8001e74:	4699      	mov	r9, r3
 8001e76:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001e78:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe fb51 	bl	8000524 <__aeabi_i2d>
 8001e82:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8001e86:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <calculateLineFollowingTermFlip+0x2ec>)
 8001e88:	f7fe fbb6 	bl	80005f8 <__aeabi_dmul>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4640      	mov	r0, r8
 8001e92:	4649      	mov	r1, r9
 8001e94:	f7fe f9fa 	bl	800028c <__adddf3>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	460b      	mov	r3, r1
 8001e9c:	4690      	mov	r8, r2
 8001e9e:	4699      	mov	r9, r3
 8001ea0:	4b3e      	ldr	r3, [pc, #248]	; (8001f9c <calculateLineFollowingTermFlip+0x2e4>)
 8001ea2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb3c 	bl	8000524 <__aeabi_i2d>
 8001eac:	f04f 0200 	mov.w	r2, #0
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <calculateLineFollowingTermFlip+0x2e8>)
 8001eb2:	f7fe fba1 	bl	80005f8 <__aeabi_dmul>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4640      	mov	r0, r8
 8001ebc:	4649      	mov	r1, r9
 8001ebe:	f7fe f9e5 	bl	800028c <__adddf3>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <calculateLineFollowingTermFlip+0x2f0>)
 8001ed0:	f7fe fcbc 	bl	800084c <__aeabi_ddiv>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4620      	mov	r0, r4
 8001eda:	4629      	mov	r1, r5
 8001edc:	f7fe f9d4 	bl	8000288 <__aeabi_dsub>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	f7fe fe7e 	bl	8000be8 <__aeabi_d2f>
 8001eec:	4603      	mov	r3, r0
 8001eee:	60fb      	str	r3, [r7, #12]
		//diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );

		p = kp * diff; //P制御
 8001ef0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ef4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001efc:	edc7 7a02 	vstr	s15, [r7, #8]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001f00:	4b2a      	ldr	r3, [pc, #168]	; (8001fac <calculateLineFollowingTermFlip+0x2f4>)
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f16:	ee17 0a90 	vmov	r0, s15
 8001f1a:	f7fe fb15 	bl	8000548 <__aeabi_f2d>
 8001f1e:	a318      	add	r3, pc, #96	; (adr r3, 8001f80 <calculateLineFollowingTermFlip+0x2c8>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fc92 	bl	800084c <__aeabi_ddiv>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	4621      	mov	r1, r4
 8001f30:	f7fe fe5a 	bl	8000be8 <__aeabi_d2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	607b      	str	r3, [r7, #4]

		line_following_term = p + i + d;
 8001f38:	4b17      	ldr	r3, [pc, #92]	; (8001f98 <calculateLineFollowingTermFlip+0x2e0>)
 8001f3a:	ed93 7a00 	vldr	s14, [r3]
 8001f3e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <calculateLineFollowingTermFlip+0x2f8>)
 8001f50:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 8001f54:	4a15      	ldr	r2, [pc, #84]	; (8001fac <calculateLineFollowingTermFlip+0x2f4>)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6013      	str	r3, [r2, #0]
	}
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f64:	f3af 8000 	nop.w
 8001f68:	66666666 	.word	0x66666666
 8001f6c:	3ff26666 	.word	0x3ff26666
 8001f70:	9999999a 	.word	0x9999999a
 8001f74:	3ff19999 	.word	0x3ff19999
 8001f78:	cccccccd 	.word	0xcccccccd
 8001f7c:	3ff0cccc 	.word	0x3ff0cccc
 8001f80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f84:	3f50624d 	.word	0x3f50624d
 8001f88:	40533333 	.word	0x40533333
 8001f8c:	3ccccccd 	.word	0x3ccccccd
 8001f90:	20000276 	.word	0x20000276
 8001f94:	20000277 	.word	0x20000277
 8001f98:	20000284 	.word	0x20000284
 8001f9c:	2001f008 	.word	0x2001f008
 8001fa0:	3ff40000 	.word	0x3ff40000
 8001fa4:	3ff33333 	.word	0x3ff33333
 8001fa8:	40180000 	.word	0x40180000
 8001fac:	20000280 	.word	0x20000280
 8001fb0:	20000278 	.word	0x20000278

08001fb4 <lineTraceFlip>:

void lineTraceFlip(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 8001fba:	4b52      	ldr	r3, [pc, #328]	; (8002104 <lineTraceFlip+0x150>)
 8001fbc:	f993 3000 	ldrsb.w	r3, [r3]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	f040 8097 	bne.w	80020f4 <lineTraceFlip+0x140>

		float velocity_control_term = getVelocityControlTerm();
 8001fc6:	f001 fb5f 	bl	8003688 <getVelocityControlTerm>
 8001fca:	ed87 0a05 	vstr	s0, [r7, #20]

		float limit = MAX_COUNTER_PERIOD * 0.85;
 8001fce:	4b4e      	ldr	r3, [pc, #312]	; (8002108 <lineTraceFlip+0x154>)
 8001fd0:	60fb      	str	r3, [r7, #12]

		if(velocity_control_term >= limit) velocity_control_term = limit;
 8001fd2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe2:	db02      	blt.n	8001fea <lineTraceFlip+0x36>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	e010      	b.n	800200c <lineTraceFlip+0x58>
		else if(velocity_control_term <= -limit) velocity_control_term = -limit;
 8001fea:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fee:	eef1 7a67 	vneg.f32	s15, s15
 8001ff2:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ffe:	d805      	bhi.n	800200c <lineTraceFlip+0x58>
 8002000:	edd7 7a03 	vldr	s15, [r7, #12]
 8002004:	eef1 7a67 	vneg.f32	s15, s15
 8002008:	edc7 7a05 	vstr	s15, [r7, #20]

		float exceeded = 0;
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
		if(velocity_control_term + line_following_term >= MAX_COUNTER_PERIOD){
 8002012:	4b3e      	ldr	r3, [pc, #248]	; (800210c <lineTraceFlip+0x158>)
 8002014:	ed93 7a00 	vldr	s14, [r3]
 8002018:	edd7 7a05 	vldr	s15, [r7, #20]
 800201c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002020:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002110 <lineTraceFlip+0x15c>
 8002024:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800202c:	db0d      	blt.n	800204a <lineTraceFlip+0x96>
			exceeded = (velocity_control_term + line_following_term) - MAX_COUNTER_PERIOD;
 800202e:	4b37      	ldr	r3, [pc, #220]	; (800210c <lineTraceFlip+0x158>)
 8002030:	ed93 7a00 	vldr	s14, [r3]
 8002034:	edd7 7a05 	vldr	s15, [r7, #20]
 8002038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800203c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002110 <lineTraceFlip+0x15c>
 8002040:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002044:	edc7 7a04 	vstr	s15, [r7, #16]
 8002048:	e01a      	b.n	8002080 <lineTraceFlip+0xcc>
		}
		else if(velocity_control_term - line_following_term <= -MAX_COUNTER_PERIOD){
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <lineTraceFlip+0x158>)
 800204c:	edd3 7a00 	vldr	s15, [r3]
 8002050:	ed97 7a05 	vldr	s14, [r7, #20]
 8002054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002058:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8002114 <lineTraceFlip+0x160>
 800205c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002064:	d80c      	bhi.n	8002080 <lineTraceFlip+0xcc>
			exceeded = -MAX_COUNTER_PERIOD - (velocity_control_term - line_following_term);
 8002066:	4b29      	ldr	r3, [pc, #164]	; (800210c <lineTraceFlip+0x158>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002074:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002114 <lineTraceFlip+0x160>
 8002078:	ee77 7a67 	vsub.f32	s15, s14, s15
 800207c:	edc7 7a04 	vstr	s15, [r7, #16]
		}

		velocity_control_term -= exceeded;
 8002080:	ed97 7a05 	vldr	s14, [r7, #20]
 8002084:	edd7 7a04 	vldr	s15, [r7, #16]
 8002088:	ee77 7a67 	vsub.f32	s15, s14, s15
 800208c:	edc7 7a05 	vstr	s15, [r7, #20]
		line_following_term += exceeded;
 8002090:	4b1e      	ldr	r3, [pc, #120]	; (800210c <lineTraceFlip+0x158>)
 8002092:	ed93 7a00 	vldr	s14, [r3]
 8002096:	edd7 7a04 	vldr	s15, [r7, #16]
 800209a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <lineTraceFlip+0x158>)
 80020a0:	edc3 7a00 	vstr	s15, [r3]



		float motor_l = velocity_control_term + line_following_term;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <lineTraceFlip+0x158>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	ed97 7a05 	vldr	s14, [r7, #20]
 80020ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b2:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <lineTraceFlip+0x158>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80020c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020c4:	edc7 7a01 	vstr	s15, [r7, #4]


		//float motor_l = velocity_control_term ;
		//float motor_r = velocity_control_term ;

		mon_velo_term = velocity_control_term;
 80020c8:	4a13      	ldr	r2, [pc, #76]	; (8002118 <lineTraceFlip+0x164>)
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	6013      	str	r3, [r2, #0]
		//motor_r_Deb = motor_r;

		//float motor_l = 500;
		//float motor_r = 500;

		setMotor(motor_l, motor_r);
 80020ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80020d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d6:	ee17 3a90 	vmov	r3, s15
 80020da:	b21b      	sxth	r3, r3
 80020dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020e4:	ee17 2a90 	vmov	r2, s15
 80020e8:	b212      	sxth	r2, r2
 80020ea:	4611      	mov	r1, r2
 80020ec:	4618      	mov	r0, r3
 80020ee:	f002 fd37 	bl	8004b60 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 80020f2:	e003      	b.n	80020fc <lineTraceFlip+0x148>
		setMotor(0, 0);
 80020f4:	2100      	movs	r1, #0
 80020f6:	2000      	movs	r0, #0
 80020f8:	f002 fd32 	bl	8004b60 <setMotor>
}
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000276 	.word	0x20000276
 8002108:	44b264cd 	.word	0x44b264cd
 800210c:	20000278 	.word	0x20000278
 8002110:	44d1e000 	.word	0x44d1e000
 8002114:	c4d1e000 	.word	0xc4d1e000
 8002118:	2001f0ec 	.word	0x2001f0ec

0800211c <startLineTrace>:

void startLineTrace()
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <startLineTrace+0x1c>)
 8002122:	2201      	movs	r2, #1
 8002124:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <startLineTrace+0x20>)
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000276 	.word	0x20000276
 800213c:	20000277 	.word	0x20000277

08002140 <stopLineTrace>:

void stopLineTrace()
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 8002144:	4b05      	ldr	r3, [pc, #20]	; (800215c <stopLineTrace+0x1c>)
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 800214a:	4b05      	ldr	r3, [pc, #20]	; (8002160 <stopLineTrace+0x20>)
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 8002152:	bf00      	nop
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	20000276 	.word	0x20000276
 8002160:	20000278 	.word	0x20000278

08002164 <checkCourseOut>:

void checkCourseOut(void)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 800216a:	4b2b      	ldr	r3, [pc, #172]	; (8002218 <checkCourseOut+0xb4>)
 800216c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002170:	461a      	mov	r2, r3
 8002172:	4b29      	ldr	r3, [pc, #164]	; (8002218 <checkCourseOut+0xb4>)
 8002174:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002178:	4413      	add	r3, r2
 800217a:	4a27      	ldr	r2, [pc, #156]	; (8002218 <checkCourseOut+0xb4>)
 800217c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002180:	4413      	add	r3, r2
 8002182:	4a25      	ldr	r2, [pc, #148]	; (8002218 <checkCourseOut+0xb4>)
 8002184:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002188:	4413      	add	r3, r2
 800218a:	4a23      	ldr	r2, [pc, #140]	; (8002218 <checkCourseOut+0xb4>)
 800218c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002190:	4413      	add	r3, r2
 8002192:	4a21      	ldr	r2, [pc, #132]	; (8002218 <checkCourseOut+0xb4>)
 8002194:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002198:	4413      	add	r3, r2
 800219a:	4a1f      	ldr	r2, [pc, #124]	; (8002218 <checkCourseOut+0xb4>)
 800219c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	4a1d      	ldr	r2, [pc, #116]	; (8002218 <checkCourseOut+0xb4>)
 80021a4:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80021a8:	4413      	add	r3, r2
 80021aa:	4a1b      	ldr	r2, [pc, #108]	; (8002218 <checkCourseOut+0xb4>)
 80021ac:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a19      	ldr	r2, [pc, #100]	; (8002218 <checkCourseOut+0xb4>)
 80021b4:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a17      	ldr	r2, [pc, #92]	; (8002218 <checkCourseOut+0xb4>)
 80021bc:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 80021c0:	4413      	add	r3, r2
 80021c2:	4a15      	ldr	r2, [pc, #84]	; (8002218 <checkCourseOut+0xb4>)
 80021c4:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 80021c8:	4413      	add	r3, r2
 80021ca:	4a14      	ldr	r2, [pc, #80]	; (800221c <checkCourseOut+0xb8>)
 80021cc:	fb82 1203 	smull	r1, r2, r2, r3
 80021d0:	1052      	asrs	r2, r2, #1
 80021d2:	17db      	asrs	r3, r3, #31
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 80021d8:	88fb      	ldrh	r3, [r7, #6]
 80021da:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80021de:	d906      	bls.n	80021ee <checkCourseOut+0x8a>
		dark_cnt++;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <checkCourseOut+0xbc>)
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	3301      	adds	r3, #1
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <checkCourseOut+0xbc>)
 80021ea:	801a      	strh	r2, [r3, #0]
 80021ec:	e002      	b.n	80021f4 <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 80021ee:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <checkCourseOut+0xbc>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <checkCourseOut+0xbc>)
 80021f6:	881b      	ldrh	r3, [r3, #0]
 80021f8:	2b13      	cmp	r3, #19
 80021fa:	d903      	bls.n	8002204 <checkCourseOut+0xa0>
 80021fc:	4b09      	ldr	r3, [pc, #36]	; (8002224 <checkCourseOut+0xc0>)
 80021fe:	2201      	movs	r2, #1
 8002200:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 8002202:	e002      	b.n	800220a <checkCourseOut+0xa6>
	else dark_flag = false;
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <checkCourseOut+0xc0>)
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	2001f008 	.word	0x2001f008
 800221c:	2aaaaaab 	.word	0x2aaaaaab
 8002220:	20000288 	.word	0x20000288
 8002224:	2000027c 	.word	0x2000027c

08002228 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
	return dark_flag;
 800222c:	4b03      	ldr	r3, [pc, #12]	; (800223c <getCouseOutFlag+0x14>)
 800222e:	781b      	ldrb	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	2000027c 	.word	0x2000027c

08002240 <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t L_index = 1;

void initADC()
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8002244:	2202      	movs	r2, #2
 8002246:	4905      	ldr	r1, [pc, #20]	; (800225c <initADC+0x1c>)
 8002248:	4805      	ldr	r0, [pc, #20]	; (8002260 <initADC+0x20>)
 800224a:	f004 fc2d 	bl	8006aa8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 800224e:	220c      	movs	r2, #12
 8002250:	4904      	ldr	r1, [pc, #16]	; (8002264 <initADC+0x24>)
 8002252:	4805      	ldr	r0, [pc, #20]	; (8002268 <initADC+0x28>)
 8002254:	f004 fc28 	bl	8006aa8 <HAL_ADC_Start_DMA>
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	200002a4 	.word	0x200002a4
 8002260:	2001f140 	.word	0x2001f140
 8002264:	2000028c 	.word	0x2000028c
 8002268:	2001f0f0 	.word	0x2001f0f0

0800226c <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	sensor1_buffer[L_index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002270:	4bc9      	ldr	r3, [pc, #804]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 8002272:	885b      	ldrh	r3, [r3, #2]
 8002274:	ee07 3a90 	vmov	s15, r3
 8002278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800227c:	4bc7      	ldr	r3, [pc, #796]	; (800259c <storeAnalogSensorBuffer+0x330>)
 800227e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002282:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002286:	4bc6      	ldr	r3, [pc, #792]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 8002288:	ed93 7a01 	vldr	s14, [r3, #4]
 800228c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002290:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 8002294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002298:	4bc3      	ldr	r3, [pc, #780]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a2:	ee17 3a90 	vmov	r3, s15
 80022a6:	b219      	sxth	r1, r3
 80022a8:	4bc0      	ldr	r3, [pc, #768]	; (80025ac <storeAnalogSensorBuffer+0x340>)
 80022aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[L_index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 80022ae:	4bba      	ldr	r3, [pc, #744]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	ee07 3a90 	vmov	s15, r3
 80022b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ba:	4bb8      	ldr	r3, [pc, #736]	; (800259c <storeAnalogSensorBuffer+0x330>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022c4:	4bb6      	ldr	r3, [pc, #728]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 80022c6:	ed93 7a00 	vldr	s14, [r3]
 80022ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ce:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 80022d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022d6:	4bb4      	ldr	r3, [pc, #720]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e0:	ee17 3a90 	vmov	r3, s15
 80022e4:	b219      	sxth	r1, r3
 80022e6:	4bb2      	ldr	r3, [pc, #712]	; (80025b0 <storeAnalogSensorBuffer+0x344>)
 80022e8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[L_index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80022ec:	4baa      	ldr	r3, [pc, #680]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 80022ee:	889b      	ldrh	r3, [r3, #4]
 80022f0:	ee07 3a90 	vmov	s15, r3
 80022f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f8:	4ba8      	ldr	r3, [pc, #672]	; (800259c <storeAnalogSensorBuffer+0x330>)
 80022fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80022fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002302:	4ba7      	ldr	r3, [pc, #668]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 8002304:	ed93 7a02 	vldr	s14, [r3, #8]
 8002308:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800230c:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 8002310:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002314:	4ba4      	ldr	r3, [pc, #656]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	461a      	mov	r2, r3
 800231a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800231e:	ee17 3a90 	vmov	r3, s15
 8002322:	b219      	sxth	r1, r3
 8002324:	4ba3      	ldr	r3, [pc, #652]	; (80025b4 <storeAnalogSensorBuffer+0x348>)
 8002326:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[L_index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 800232a:	4b9b      	ldr	r3, [pc, #620]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 800232c:	88db      	ldrh	r3, [r3, #6]
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002336:	4b99      	ldr	r3, [pc, #612]	; (800259c <storeAnalogSensorBuffer+0x330>)
 8002338:	edd3 7a03 	vldr	s15, [r3, #12]
 800233c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002340:	4b97      	ldr	r3, [pc, #604]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 8002342:	ed93 7a03 	vldr	s14, [r3, #12]
 8002346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800234a:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	4b95      	ldr	r3, [pc, #596]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800235c:	ee17 3a90 	vmov	r3, s15
 8002360:	b219      	sxth	r1, r3
 8002362:	4b95      	ldr	r3, [pc, #596]	; (80025b8 <storeAnalogSensorBuffer+0x34c>)
 8002364:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[L_index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002368:	4b8b      	ldr	r3, [pc, #556]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 800236a:	891b      	ldrh	r3, [r3, #8]
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002374:	4b89      	ldr	r3, [pc, #548]	; (800259c <storeAnalogSensorBuffer+0x330>)
 8002376:	edd3 7a04 	vldr	s15, [r3, #16]
 800237a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 8002380:	ed93 7a04 	vldr	s14, [r3, #16]
 8002384:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002388:	ed9f 7a86 	vldr	s14, [pc, #536]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 800238c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002390:	4b85      	ldr	r3, [pc, #532]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	461a      	mov	r2, r3
 8002396:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800239a:	ee17 3a90 	vmov	r3, s15
 800239e:	b219      	sxth	r1, r3
 80023a0:	4b86      	ldr	r3, [pc, #536]	; (80025bc <storeAnalogSensorBuffer+0x350>)
 80023a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[L_index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 80023a6:	4b7c      	ldr	r3, [pc, #496]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 80023a8:	895b      	ldrh	r3, [r3, #10]
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023b2:	4b7a      	ldr	r3, [pc, #488]	; (800259c <storeAnalogSensorBuffer+0x330>)
 80023b4:	edd3 7a05 	vldr	s15, [r3, #20]
 80023b8:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023bc:	4b78      	ldr	r3, [pc, #480]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 80023be:	ed93 7a05 	vldr	s14, [r3, #20]
 80023c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023c6:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 80023ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d8:	ee17 3a90 	vmov	r3, s15
 80023dc:	b219      	sxth	r1, r3
 80023de:	4b78      	ldr	r3, [pc, #480]	; (80025c0 <storeAnalogSensorBuffer+0x354>)
 80023e0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[L_index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80023e4:	4b6c      	ldr	r3, [pc, #432]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 80023e6:	899b      	ldrh	r3, [r3, #12]
 80023e8:	ee07 3a90 	vmov	s15, r3
 80023ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023f0:	4b6a      	ldr	r3, [pc, #424]	; (800259c <storeAnalogSensorBuffer+0x330>)
 80023f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80023f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80023fa:	4b69      	ldr	r3, [pc, #420]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 80023fc:	ed93 7a06 	vldr	s14, [r3, #24]
 8002400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002404:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 8002408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240c:	4b66      	ldr	r3, [pc, #408]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	461a      	mov	r2, r3
 8002412:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002416:	ee17 3a90 	vmov	r3, s15
 800241a:	b219      	sxth	r1, r3
 800241c:	4b69      	ldr	r3, [pc, #420]	; (80025c4 <storeAnalogSensorBuffer+0x358>)
 800241e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[L_index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 8002422:	4b5d      	ldr	r3, [pc, #372]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 8002424:	89db      	ldrh	r3, [r3, #14]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800242e:	4b5b      	ldr	r3, [pc, #364]	; (800259c <storeAnalogSensorBuffer+0x330>)
 8002430:	edd3 7a07 	vldr	s15, [r3, #28]
 8002434:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002438:	4b59      	ldr	r3, [pc, #356]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 800243a:	ed93 7a07 	vldr	s14, [r3, #28]
 800243e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002442:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 8002446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244a:	4b57      	ldr	r3, [pc, #348]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002454:	ee17 3a90 	vmov	r3, s15
 8002458:	b219      	sxth	r1, r3
 800245a:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <storeAnalogSensorBuffer+0x35c>)
 800245c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[L_index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 8002460:	4b4d      	ldr	r3, [pc, #308]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 8002462:	8a1b      	ldrh	r3, [r3, #16]
 8002464:	ee07 3a90 	vmov	s15, r3
 8002468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800246c:	4b4b      	ldr	r3, [pc, #300]	; (800259c <storeAnalogSensorBuffer+0x330>)
 800246e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002472:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002476:	4b4a      	ldr	r3, [pc, #296]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 8002478:	ed93 7a08 	vldr	s14, [r3, #32]
 800247c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002480:	ed9f 7a48 	vldr	s14, [pc, #288]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 8002484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002488:	4b47      	ldr	r3, [pc, #284]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	461a      	mov	r2, r3
 800248e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002492:	ee17 3a90 	vmov	r3, s15
 8002496:	b219      	sxth	r1, r3
 8002498:	4b4c      	ldr	r3, [pc, #304]	; (80025cc <storeAnalogSensorBuffer+0x360>)
 800249a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[L_index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 800249e:	4b3e      	ldr	r3, [pc, #248]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 80024a0:	8a5b      	ldrh	r3, [r3, #18]
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024aa:	4b3c      	ldr	r3, [pc, #240]	; (800259c <storeAnalogSensorBuffer+0x330>)
 80024ac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80024b0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024b4:	4b3a      	ldr	r3, [pc, #232]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 80024b6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80024ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024be:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 80024c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c6:	4b38      	ldr	r3, [pc, #224]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	461a      	mov	r2, r3
 80024cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024d0:	ee17 3a90 	vmov	r3, s15
 80024d4:	b219      	sxth	r1, r3
 80024d6:	4b3e      	ldr	r3, [pc, #248]	; (80025d0 <storeAnalogSensorBuffer+0x364>)
 80024d8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[L_index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 80024de:	8a9b      	ldrh	r3, [r3, #20]
 80024e0:	ee07 3a90 	vmov	s15, r3
 80024e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <storeAnalogSensorBuffer+0x330>)
 80024ea:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80024ee:	ee77 6a67 	vsub.f32	s13, s14, s15
 80024f2:	4b2b      	ldr	r3, [pc, #172]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 80024f4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80024f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024fc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 8002500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002504:	4b28      	ldr	r3, [pc, #160]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800250e:	ee17 3a90 	vmov	r3, s15
 8002512:	b219      	sxth	r1, r3
 8002514:	4b2f      	ldr	r3, [pc, #188]	; (80025d4 <storeAnalogSensorBuffer+0x368>)
 8002516:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[L_index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 800251a:	4b1f      	ldr	r3, [pc, #124]	; (8002598 <storeAnalogSensorBuffer+0x32c>)
 800251c:	8adb      	ldrh	r3, [r3, #22]
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002526:	4b1d      	ldr	r3, [pc, #116]	; (800259c <storeAnalogSensorBuffer+0x330>)
 8002528:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800252c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <storeAnalogSensorBuffer+0x334>)
 8002532:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800253a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 800253e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800254c:	ee17 3a90 	vmov	r3, s15
 8002550:	b219      	sxth	r1, r3
 8002552:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <storeAnalogSensorBuffer+0x36c>)
 8002554:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[L_index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8002558:	4b20      	ldr	r3, [pc, #128]	; (80025dc <storeAnalogSensorBuffer+0x370>)
 800255a:	885b      	ldrh	r3, [r3, #2]
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002564:	4b1e      	ldr	r3, [pc, #120]	; (80025e0 <storeAnalogSensorBuffer+0x374>)
 8002566:	edd3 7a01 	vldr	s15, [r3, #4]
 800256a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800256e:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <storeAnalogSensorBuffer+0x378>)
 8002570:	ed93 7a01 	vldr	s14, [r3, #4]
 8002574:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002578:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80025a4 <storeAnalogSensorBuffer+0x338>
 800257c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <storeAnalogSensorBuffer+0x33c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258a:	ee17 3a90 	vmov	r3, s15
 800258e:	b219      	sxth	r1, r3
 8002590:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <storeAnalogSensorBuffer+0x37c>)
 8002592:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8002596:	e029      	b.n	80025ec <storeAnalogSensorBuffer+0x380>
 8002598:	2000028c 	.word	0x2000028c
 800259c:	2001efc8 	.word	0x2001efc8
 80025a0:	2001f02c 	.word	0x2001f02c
 80025a4:	447a0000 	.word	0x447a0000
 80025a8:	20000030 	.word	0x20000030
 80025ac:	200002bc 	.word	0x200002bc
 80025b0:	200002a8 	.word	0x200002a8
 80025b4:	200002d0 	.word	0x200002d0
 80025b8:	200002e4 	.word	0x200002e4
 80025bc:	200002f8 	.word	0x200002f8
 80025c0:	2000030c 	.word	0x2000030c
 80025c4:	20000320 	.word	0x20000320
 80025c8:	20000334 	.word	0x20000334
 80025cc:	20000348 	.word	0x20000348
 80025d0:	2000035c 	.word	0x2000035c
 80025d4:	20000370 	.word	0x20000370
 80025d8:	20000384 	.word	0x20000384
 80025dc:	200002a4 	.word	0x200002a4
 80025e0:	2001efc0 	.word	0x2001efc0
 80025e4:	2001f000 	.word	0x2001f000
 80025e8:	20000398 	.word	0x20000398
	side_sensorL_buffer[L_index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 80025ec:	4b14      	ldr	r3, [pc, #80]	; (8002640 <storeAnalogSensorBuffer+0x3d4>)
 80025ee:	881b      	ldrh	r3, [r3, #0]
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <storeAnalogSensorBuffer+0x3d8>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002602:	4b11      	ldr	r3, [pc, #68]	; (8002648 <storeAnalogSensorBuffer+0x3dc>)
 8002604:	ed93 7a00 	vldr	s14, [r3]
 8002608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800264c <storeAnalogSensorBuffer+0x3e0>
 8002610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002614:	4b0e      	ldr	r3, [pc, #56]	; (8002650 <storeAnalogSensorBuffer+0x3e4>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	461a      	mov	r2, r3
 800261a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800261e:	ee17 3a90 	vmov	r3, s15
 8002622:	b219      	sxth	r1, r3
 8002624:	4b0b      	ldr	r3, [pc, #44]	; (8002654 <storeAnalogSensorBuffer+0x3e8>)
 8002626:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	L_index++;
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <storeAnalogSensorBuffer+0x3e4>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <storeAnalogSensorBuffer+0x3e4>)
 8002634:	701a      	strb	r2, [r3, #0]
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	200002a4 	.word	0x200002a4
 8002644:	2001efc0 	.word	0x2001efc0
 8002648:	2001f000 	.word	0x2001f000
 800264c:	447a0000 	.word	0x447a0000
 8002650:	20000030 	.word	0x20000030
 8002654:	200003ac 	.word	0x200003ac

08002658 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 800265e:	4bc9      	ldr	r3, [pc, #804]	; (8002984 <updateAnalogSensor+0x32c>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800266a:	4bc7      	ldr	r3, [pc, #796]	; (8002988 <updateAnalogSensor+0x330>)
 800266c:	edd3 7a00 	vldr	s15, [r3]
 8002670:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002674:	4bc5      	ldr	r3, [pc, #788]	; (800298c <updateAnalogSensor+0x334>)
 8002676:	ed93 7a00 	vldr	s14, [r3]
 800267a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800267e:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8002990 <updateAnalogSensor+0x338>
 8002682:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002686:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800268a:	ee17 3a90 	vmov	r3, s15
 800268e:	b21a      	sxth	r2, r3
 8002690:	4bc0      	ldr	r3, [pc, #768]	; (8002994 <updateAnalogSensor+0x33c>)
 8002692:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8002694:	4bbb      	ldr	r3, [pc, #748]	; (8002984 <updateAnalogSensor+0x32c>)
 8002696:	885b      	ldrh	r3, [r3, #2]
 8002698:	ee07 3a90 	vmov	s15, r3
 800269c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026a0:	4bb9      	ldr	r3, [pc, #740]	; (8002988 <updateAnalogSensor+0x330>)
 80026a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80026a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026aa:	4bb8      	ldr	r3, [pc, #736]	; (800298c <updateAnalogSensor+0x334>)
 80026ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80026b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b4:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002990 <updateAnalogSensor+0x338>
 80026b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026c0:	ee17 3a90 	vmov	r3, s15
 80026c4:	b21a      	sxth	r2, r3
 80026c6:	4bb3      	ldr	r3, [pc, #716]	; (8002994 <updateAnalogSensor+0x33c>)
 80026c8:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 80026ca:	4bae      	ldr	r3, [pc, #696]	; (8002984 <updateAnalogSensor+0x32c>)
 80026cc:	889b      	ldrh	r3, [r3, #4]
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d6:	4bac      	ldr	r3, [pc, #688]	; (8002988 <updateAnalogSensor+0x330>)
 80026d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80026dc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026e0:	4baa      	ldr	r3, [pc, #680]	; (800298c <updateAnalogSensor+0x334>)
 80026e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80026e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ea:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002990 <updateAnalogSensor+0x338>
 80026ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f6:	ee17 3a90 	vmov	r3, s15
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	4ba5      	ldr	r3, [pc, #660]	; (8002994 <updateAnalogSensor+0x33c>)
 80026fe:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8002700:	4ba0      	ldr	r3, [pc, #640]	; (8002984 <updateAnalogSensor+0x32c>)
 8002702:	88db      	ldrh	r3, [r3, #6]
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800270c:	4b9e      	ldr	r3, [pc, #632]	; (8002988 <updateAnalogSensor+0x330>)
 800270e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002712:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002716:	4b9d      	ldr	r3, [pc, #628]	; (800298c <updateAnalogSensor+0x334>)
 8002718:	ed93 7a03 	vldr	s14, [r3, #12]
 800271c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002720:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002990 <updateAnalogSensor+0x338>
 8002724:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800272c:	ee17 3a90 	vmov	r3, s15
 8002730:	b21a      	sxth	r2, r3
 8002732:	4b98      	ldr	r3, [pc, #608]	; (8002994 <updateAnalogSensor+0x33c>)
 8002734:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8002736:	4b93      	ldr	r3, [pc, #588]	; (8002984 <updateAnalogSensor+0x32c>)
 8002738:	891b      	ldrh	r3, [r3, #8]
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002742:	4b91      	ldr	r3, [pc, #580]	; (8002988 <updateAnalogSensor+0x330>)
 8002744:	edd3 7a04 	vldr	s15, [r3, #16]
 8002748:	ee77 6a67 	vsub.f32	s13, s14, s15
 800274c:	4b8f      	ldr	r3, [pc, #572]	; (800298c <updateAnalogSensor+0x334>)
 800274e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002752:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002756:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002990 <updateAnalogSensor+0x338>
 800275a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002762:	ee17 3a90 	vmov	r3, s15
 8002766:	b21a      	sxth	r2, r3
 8002768:	4b8a      	ldr	r3, [pc, #552]	; (8002994 <updateAnalogSensor+0x33c>)
 800276a:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 800276c:	4b85      	ldr	r3, [pc, #532]	; (8002984 <updateAnalogSensor+0x32c>)
 800276e:	895b      	ldrh	r3, [r3, #10]
 8002770:	ee07 3a90 	vmov	s15, r3
 8002774:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002778:	4b83      	ldr	r3, [pc, #524]	; (8002988 <updateAnalogSensor+0x330>)
 800277a:	edd3 7a05 	vldr	s15, [r3, #20]
 800277e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002782:	4b82      	ldr	r3, [pc, #520]	; (800298c <updateAnalogSensor+0x334>)
 8002784:	ed93 7a05 	vldr	s14, [r3, #20]
 8002788:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800278c:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8002990 <updateAnalogSensor+0x338>
 8002790:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002794:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002798:	ee17 3a90 	vmov	r3, s15
 800279c:	b21a      	sxth	r2, r3
 800279e:	4b7d      	ldr	r3, [pc, #500]	; (8002994 <updateAnalogSensor+0x33c>)
 80027a0:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 80027a2:	4b78      	ldr	r3, [pc, #480]	; (8002984 <updateAnalogSensor+0x32c>)
 80027a4:	899b      	ldrh	r3, [r3, #12]
 80027a6:	ee07 3a90 	vmov	s15, r3
 80027aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ae:	4b76      	ldr	r3, [pc, #472]	; (8002988 <updateAnalogSensor+0x330>)
 80027b0:	edd3 7a06 	vldr	s15, [r3, #24]
 80027b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027b8:	4b74      	ldr	r3, [pc, #464]	; (800298c <updateAnalogSensor+0x334>)
 80027ba:	ed93 7a06 	vldr	s14, [r3, #24]
 80027be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027c2:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8002990 <updateAnalogSensor+0x338>
 80027c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ce:	ee17 3a90 	vmov	r3, s15
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <updateAnalogSensor+0x33c>)
 80027d6:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 80027d8:	4b6a      	ldr	r3, [pc, #424]	; (8002984 <updateAnalogSensor+0x32c>)
 80027da:	89db      	ldrh	r3, [r3, #14]
 80027dc:	ee07 3a90 	vmov	s15, r3
 80027e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <updateAnalogSensor+0x330>)
 80027e6:	edd3 7a07 	vldr	s15, [r3, #28]
 80027ea:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027ee:	4b67      	ldr	r3, [pc, #412]	; (800298c <updateAnalogSensor+0x334>)
 80027f0:	ed93 7a07 	vldr	s14, [r3, #28]
 80027f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f8:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002990 <updateAnalogSensor+0x338>
 80027fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002800:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002804:	ee17 3a90 	vmov	r3, s15
 8002808:	b21a      	sxth	r2, r3
 800280a:	4b62      	ldr	r3, [pc, #392]	; (8002994 <updateAnalogSensor+0x33c>)
 800280c:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 800280e:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <updateAnalogSensor+0x32c>)
 8002810:	8a1b      	ldrh	r3, [r3, #16]
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281a:	4b5b      	ldr	r3, [pc, #364]	; (8002988 <updateAnalogSensor+0x330>)
 800281c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002820:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002824:	4b59      	ldr	r3, [pc, #356]	; (800298c <updateAnalogSensor+0x334>)
 8002826:	ed93 7a08 	vldr	s14, [r3, #32]
 800282a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800282e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8002990 <updateAnalogSensor+0x338>
 8002832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002836:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800283a:	ee17 3a90 	vmov	r3, s15
 800283e:	b21a      	sxth	r2, r3
 8002840:	4b54      	ldr	r3, [pc, #336]	; (8002994 <updateAnalogSensor+0x33c>)
 8002842:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8002844:	4b4f      	ldr	r3, [pc, #316]	; (8002984 <updateAnalogSensor+0x32c>)
 8002846:	8a5b      	ldrh	r3, [r3, #18]
 8002848:	ee07 3a90 	vmov	s15, r3
 800284c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002850:	4b4d      	ldr	r3, [pc, #308]	; (8002988 <updateAnalogSensor+0x330>)
 8002852:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002856:	ee77 6a67 	vsub.f32	s13, s14, s15
 800285a:	4b4c      	ldr	r3, [pc, #304]	; (800298c <updateAnalogSensor+0x334>)
 800285c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002864:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002990 <updateAnalogSensor+0x338>
 8002868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002870:	ee17 3a90 	vmov	r3, s15
 8002874:	b21a      	sxth	r2, r3
 8002876:	4b47      	ldr	r3, [pc, #284]	; (8002994 <updateAnalogSensor+0x33c>)
 8002878:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 800287a:	4b42      	ldr	r3, [pc, #264]	; (8002984 <updateAnalogSensor+0x32c>)
 800287c:	8a9b      	ldrh	r3, [r3, #20]
 800287e:	ee07 3a90 	vmov	s15, r3
 8002882:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002886:	4b40      	ldr	r3, [pc, #256]	; (8002988 <updateAnalogSensor+0x330>)
 8002888:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800288c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002890:	4b3e      	ldr	r3, [pc, #248]	; (800298c <updateAnalogSensor+0x334>)
 8002892:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002990 <updateAnalogSensor+0x338>
 800289e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028a6:	ee17 3a90 	vmov	r3, s15
 80028aa:	b21a      	sxth	r2, r3
 80028ac:	4b39      	ldr	r3, [pc, #228]	; (8002994 <updateAnalogSensor+0x33c>)
 80028ae:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 80028b0:	4b34      	ldr	r3, [pc, #208]	; (8002984 <updateAnalogSensor+0x32c>)
 80028b2:	8adb      	ldrh	r3, [r3, #22]
 80028b4:	ee07 3a90 	vmov	s15, r3
 80028b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028bc:	4b32      	ldr	r3, [pc, #200]	; (8002988 <updateAnalogSensor+0x330>)
 80028be:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80028c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80028c6:	4b31      	ldr	r3, [pc, #196]	; (800298c <updateAnalogSensor+0x334>)
 80028c8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80028cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002990 <updateAnalogSensor+0x338>
 80028d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028dc:	ee17 3a90 	vmov	r3, s15
 80028e0:	b21a      	sxth	r2, r3
 80028e2:	4b2c      	ldr	r3, [pc, #176]	; (8002994 <updateAnalogSensor+0x33c>)
 80028e4:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 80028e6:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <updateAnalogSensor+0x340>)
 80028e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ec:	461a      	mov	r2, r3
 80028ee:	4b2a      	ldr	r3, [pc, #168]	; (8002998 <updateAnalogSensor+0x340>)
 80028f0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80028f4:	4413      	add	r3, r2
 80028f6:	4a28      	ldr	r2, [pc, #160]	; (8002998 <updateAnalogSensor+0x340>)
 80028f8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80028fc:	4413      	add	r3, r2
 80028fe:	4a26      	ldr	r2, [pc, #152]	; (8002998 <updateAnalogSensor+0x340>)
 8002900:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002904:	4413      	add	r3, r2
 8002906:	4a24      	ldr	r2, [pc, #144]	; (8002998 <updateAnalogSensor+0x340>)
 8002908:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800290c:	4413      	add	r3, r2
 800290e:	4a22      	ldr	r2, [pc, #136]	; (8002998 <updateAnalogSensor+0x340>)
 8002910:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002914:	4413      	add	r3, r2
 8002916:	4a20      	ldr	r2, [pc, #128]	; (8002998 <updateAnalogSensor+0x340>)
 8002918:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800291c:	4413      	add	r3, r2
 800291e:	4a1e      	ldr	r2, [pc, #120]	; (8002998 <updateAnalogSensor+0x340>)
 8002920:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002924:	4413      	add	r3, r2
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <updateAnalogSensor+0x340>)
 8002928:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800292c:	4413      	add	r3, r2
 800292e:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <updateAnalogSensor+0x340>)
 8002930:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002934:	4413      	add	r3, r2
 8002936:	4a19      	ldr	r2, [pc, #100]	; (800299c <updateAnalogSensor+0x344>)
 8002938:	fb82 1203 	smull	r1, r2, r2, r3
 800293c:	1092      	asrs	r2, r2, #2
 800293e:	17db      	asrs	r3, r3, #31
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	b21a      	sxth	r2, r3
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <updateAnalogSensor+0x348>)
 8002946:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <updateAnalogSensor+0x34c>)
 800294a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800294e:	461a      	mov	r2, r3
 8002950:	4b14      	ldr	r3, [pc, #80]	; (80029a4 <updateAnalogSensor+0x34c>)
 8002952:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002956:	4413      	add	r3, r2
 8002958:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <updateAnalogSensor+0x34c>)
 800295a:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800295e:	4413      	add	r3, r2
 8002960:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <updateAnalogSensor+0x34c>)
 8002962:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002966:	4413      	add	r3, r2
 8002968:	4a0e      	ldr	r2, [pc, #56]	; (80029a4 <updateAnalogSensor+0x34c>)
 800296a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800296e:	4413      	add	r3, r2
 8002970:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <updateAnalogSensor+0x34c>)
 8002972:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002976:	4413      	add	r3, r2
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <updateAnalogSensor+0x34c>)
 800297a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800297e:	4413      	add	r3, r2
 8002980:	e012      	b.n	80029a8 <updateAnalogSensor+0x350>
 8002982:	bf00      	nop
 8002984:	2000028c 	.word	0x2000028c
 8002988:	2001efc8 	.word	0x2001efc8
 800298c:	2001f02c 	.word	0x2001f02c
 8002990:	447a0000 	.word	0x447a0000
 8002994:	2001f008 	.word	0x2001f008
 8002998:	20000398 	.word	0x20000398
 800299c:	66666667 	.word	0x66666667
 80029a0:	2001efac 	.word	0x2001efac
 80029a4:	200003ac 	.word	0x200003ac
 80029a8:	4a1f      	ldr	r2, [pc, #124]	; (8002a28 <updateAnalogSensor+0x3d0>)
 80029aa:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80029ae:	4413      	add	r3, r2
 80029b0:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <updateAnalogSensor+0x3d0>)
 80029b2:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80029b6:	4413      	add	r3, r2
 80029b8:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <updateAnalogSensor+0x3d0>)
 80029ba:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80029be:	4413      	add	r3, r2
 80029c0:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <updateAnalogSensor+0x3d4>)
 80029c2:	fb82 1203 	smull	r1, r2, r2, r3
 80029c6:	1092      	asrs	r2, r2, #2
 80029c8:	17db      	asrs	r3, r3, #31
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	b21a      	sxth	r2, r3
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <updateAnalogSensor+0x3d8>)
 80029d0:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 80029d2:	2300      	movs	r3, #0
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	e01a      	b.n	8002a0e <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 80029d8:	4a16      	ldr	r2, [pc, #88]	; (8002a34 <updateAnalogSensor+0x3dc>)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029e4:	db05      	blt.n	80029f2 <updateAnalogSensor+0x39a>
 80029e6:	4a13      	ldr	r2, [pc, #76]	; (8002a34 <updateAnalogSensor+0x3dc>)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 80029f2:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <updateAnalogSensor+0x3dc>)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	dc04      	bgt.n	8002a08 <updateAnalogSensor+0x3b0>
 80029fe:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <updateAnalogSensor+0x3dc>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2100      	movs	r1, #0
 8002a04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b0b      	cmp	r3, #11
 8002a12:	dde1      	ble.n	80029d8 <updateAnalogSensor+0x380>
	}
    L_index = 0;
 8002a14:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <updateAnalogSensor+0x3e0>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]

}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	200003ac 	.word	0x200003ac
 8002a2c:	66666667 	.word	0x66666667
 8002a30:	2001f024 	.word	0x2001f024
 8002a34:	2001f008 	.word	0x2001f008
 8002a38:	20000030 	.word	0x20000030

08002a3c <sensorCalibration>:

void sensorCalibration()//センサキャリブレーションはノムさんに修正してもらいました
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b0a0      	sub	sp, #128	; 0x80
 8002a40:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 8002a42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a46:	2230      	movs	r2, #48	; 0x30
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f008 fa8b 	bl	800af66 <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 8002a50:	f107 0310 	add.w	r3, r7, #16
 8002a54:	2230      	movs	r2, #48	; 0x30
 8002a56:	2100      	movs	r1, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f008 fa84 	bl	800af66 <memset>
 8002a5e:	4bd8      	ldr	r3, [pc, #864]	; (8002dc0 <sensorCalibration+0x384>)
 8002a60:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002a62:	2300      	movs	r3, #0
 8002a64:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002a68:	e026      	b.n	8002ab8 <sensorCalibration+0x7c>
		max_values[i] = 00;
 8002a6a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002a6e:	4ad5      	ldr	r2, [pc, #852]	; (8002dc4 <sensorCalibration+0x388>)
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 8002a7a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002a7e:	4ad2      	ldr	r2, [pc, #840]	; (8002dc8 <sensorCalibration+0x38c>)
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	4ad1      	ldr	r2, [pc, #836]	; (8002dcc <sensorCalibration+0x390>)
 8002a86:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 8002a88:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002a92:	4413      	add	r3, r2
 8002a94:	3b40      	subs	r3, #64	; 0x40
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 8002a9c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b70      	subs	r3, #112	; 0x70
 8002aaa:	4ac8      	ldr	r2, [pc, #800]	; (8002dcc <sensorCalibration+0x390>)
 8002aac:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002aae:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002ab8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002abc:	2b0b      	cmp	r3, #11
 8002abe:	d9d4      	bls.n	8002a6a <sensorCalibration+0x2e>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002ac6:	e013      	b.n	8002af0 <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002ac8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002acc:	4ac0      	ldr	r2, [pc, #768]	; (8002dd0 <sensorCalibration+0x394>)
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002ad8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002adc:	4abd      	ldr	r2, [pc, #756]	; (8002dd4 <sensorCalibration+0x398>)
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	4aba      	ldr	r2, [pc, #744]	; (8002dcc <sensorCalibration+0x390>)
 8002ae4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002ae6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002aea:	3301      	adds	r3, #1
 8002aec:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002af0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d9e7      	bls.n	8002ac8 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 8002af8:	e0f5      	b.n	8002ce6 <sensorCalibration+0x2aa>

		setLED2('X');
 8002afa:	2058      	movs	r0, #88	; 0x58
 8002afc:	f7fe ff42 	bl	8001984 <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002b00:	2300      	movs	r3, #0
 8002b02:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002b06:	e06e      	b.n	8002be6 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 8002b08:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b0c:	4ab2      	ldr	r2, [pc, #712]	; (8002dd8 <sensorCalibration+0x39c>)
 8002b0e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002b12:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b16:	ee07 2a90 	vmov	s15, r2
 8002b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b24:	4413      	add	r3, r2
 8002b26:	3b40      	subs	r3, #64	; 0x40
 8002b28:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 8002b2c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b30:	4aa9      	ldr	r2, [pc, #676]	; (8002dd8 <sensorCalibration+0x39c>)
 8002b32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002b36:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b3a:	ee07 2a90 	vmov	s15, r2
 8002b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b48:	4413      	add	r3, r2
 8002b4a:	3b70      	subs	r3, #112	; 0x70
 8002b4c:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 8002b50:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3b40      	subs	r3, #64	; 0x40
 8002b5e:	ed93 7a00 	vldr	s14, [r3]
 8002b62:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b66:	4a97      	ldr	r2, [pc, #604]	; (8002dc4 <sensorCalibration+0x388>)
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	4413      	add	r3, r2
 8002b6c:	edd3 7a00 	vldr	s15, [r3]
 8002b70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b78:	dd0d      	ble.n	8002b96 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 8002b7a:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002b7e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b82:	0092      	lsls	r2, r2, #2
 8002b84:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002b88:	440a      	add	r2, r1
 8002b8a:	3a40      	subs	r2, #64	; 0x40
 8002b8c:	6812      	ldr	r2, [r2, #0]
 8002b8e:	498d      	ldr	r1, [pc, #564]	; (8002dc4 <sensorCalibration+0x388>)
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	601a      	str	r2, [r3, #0]
			}
			if((min_values_buffer[i] < min_values[i]) ){
 8002b96:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002ba0:	4413      	add	r3, r2
 8002ba2:	3b70      	subs	r3, #112	; 0x70
 8002ba4:	ed93 7a00 	vldr	s14, [r3]
 8002ba8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bac:	4a86      	ldr	r2, [pc, #536]	; (8002dc8 <sensorCalibration+0x38c>)
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4413      	add	r3, r2
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bbe:	d50d      	bpl.n	8002bdc <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002bc0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002bc4:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bc8:	0092      	lsls	r2, r2, #2
 8002bca:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002bce:	440a      	add	r2, r1
 8002bd0:	3a70      	subs	r2, #112	; 0x70
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	497c      	ldr	r1, [pc, #496]	; (8002dc8 <sensorCalibration+0x38c>)
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002bdc:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002be0:	3301      	adds	r3, #1
 8002be2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002be6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002bea:	2b0b      	cmp	r3, #11
 8002bec:	d98c      	bls.n	8002b08 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002bf4:	e073      	b.n	8002cde <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 8002bf6:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002bfa:	4a78      	ldr	r2, [pc, #480]	; (8002ddc <sensorCalibration+0x3a0>)
 8002bfc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c00:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c04:	ee07 2a90 	vmov	s15, r2
 8002c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c12:	4413      	add	r3, r2
 8002c14:	3b78      	subs	r3, #120	; 0x78
 8002c16:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 8002c1a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c1e:	4a6f      	ldr	r2, [pc, #444]	; (8002ddc <sensorCalibration+0x3a0>)
 8002c20:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c24:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c28:	ee07 2a90 	vmov	s15, r2
 8002c2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c36:	4413      	add	r3, r2
 8002c38:	3b80      	subs	r3, #128	; 0x80
 8002c3a:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 8002c3e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c48:	4413      	add	r3, r2
 8002c4a:	3b78      	subs	r3, #120	; 0x78
 8002c4c:	ed93 7a00 	vldr	s14, [r3]
 8002c50:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c54:	4a5e      	ldr	r2, [pc, #376]	; (8002dd0 <sensorCalibration+0x394>)
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	4413      	add	r3, r2
 8002c5a:	edd3 7a00 	vldr	s15, [r3]
 8002c5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c66:	dd10      	ble.n	8002c8a <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 8002c68:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c6c:	4a5b      	ldr	r2, [pc, #364]	; (8002ddc <sensorCalibration+0x3a0>)
 8002c6e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002c72:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c76:	ee07 2a90 	vmov	s15, r2
 8002c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7e:	4a54      	ldr	r2, [pc, #336]	; (8002dd0 <sensorCalibration+0x394>)
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	edc3 7a00 	vstr	s15, [r3]
 8002c88:	e024      	b.n	8002cd4 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 8002c8a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002c94:	4413      	add	r3, r2
 8002c96:	3b80      	subs	r3, #128	; 0x80
 8002c98:	ed93 7a00 	vldr	s14, [r3]
 8002c9c:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002ca0:	4a4c      	ldr	r2, [pc, #304]	; (8002dd4 <sensorCalibration+0x398>)
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	d50f      	bpl.n	8002cd4 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002cb4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cb8:	4a48      	ldr	r2, [pc, #288]	; (8002ddc <sensorCalibration+0x3a0>)
 8002cba:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002cbe:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cc2:	ee07 2a90 	vmov	s15, r2
 8002cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cca:	4a42      	ldr	r2, [pc, #264]	; (8002dd4 <sensorCalibration+0x398>)
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002cd4:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002cd8:	3301      	adds	r3, #1
 8002cda:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002cde:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d987      	bls.n	8002bf6 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002ce6:	204c      	movs	r0, #76	; 0x4c
 8002ce8:	f003 fcf8 	bl	80066dc <getSwitchStatus>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	f43f af03 	beq.w	8002afa <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002cfa:	e01b      	b.n	8002d34 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 8002cfc:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d00:	4a30      	ldr	r2, [pc, #192]	; (8002dc4 <sensorCalibration+0x388>)
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	ed93 7a00 	vldr	s14, [r3]
 8002d0a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d0e:	4a2e      	ldr	r2, [pc, #184]	; (8002dc8 <sensorCalibration+0x38c>)
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	edd3 7a00 	vldr	s15, [r3]
 8002d18:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d20:	4a2f      	ldr	r2, [pc, #188]	; (8002de0 <sensorCalibration+0x3a4>)
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002d2a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d2e:	3301      	adds	r3, #1
 8002d30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002d34:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002d38:	2b0b      	cmp	r3, #11
 8002d3a:	d9df      	bls.n	8002cfc <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002d42:	e010      	b.n	8002d66 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 8002d44:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 8002d48:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002d4c:	491e      	ldr	r1, [pc, #120]	; (8002dc8 <sensorCalibration+0x38c>)
 8002d4e:	0092      	lsls	r2, r2, #2
 8002d50:	440a      	add	r2, r1
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	4923      	ldr	r1, [pc, #140]	; (8002de4 <sensorCalibration+0x3a8>)
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002d5c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002d60:	3301      	adds	r3, #1
 8002d62:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 8002d66:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8002d6a:	2b0b      	cmp	r3, #11
 8002d6c:	d9ea      	bls.n	8002d44 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002d74:	e01b      	b.n	8002dae <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 8002d76:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002d7a:	4a15      	ldr	r2, [pc, #84]	; (8002dd0 <sensorCalibration+0x394>)
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	4413      	add	r3, r2
 8002d80:	ed93 7a00 	vldr	s14, [r3]
 8002d84:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002d88:	4a12      	ldr	r2, [pc, #72]	; (8002dd4 <sensorCalibration+0x398>)
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	edd3 7a00 	vldr	s15, [r3]
 8002d92:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9a:	4a13      	ldr	r2, [pc, #76]	; (8002de8 <sensorCalibration+0x3ac>)
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002da4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002da8:	3301      	adds	r3, #1
 8002daa:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 8002dae:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d9df      	bls.n	8002d76 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002dbc:	e027      	b.n	8002e0e <sensorCalibration+0x3d2>
 8002dbe:	bf00      	nop
 8002dc0:	447a0000 	.word	0x447a0000
 8002dc4:	2001f188 	.word	0x2001f188
 8002dc8:	20000000 	.word	0x20000000
 8002dcc:	44bb8000 	.word	0x44bb8000
 8002dd0:	2001f138 	.word	0x2001f138
 8002dd4:	2001f1b8 	.word	0x2001f1b8
 8002dd8:	2000028c 	.word	0x2000028c
 8002ddc:	200002a4 	.word	0x200002a4
 8002de0:	2001f02c 	.word	0x2001f02c
 8002de4:	2001efc8 	.word	0x2001efc8
 8002de8:	2001f000 	.word	0x2001f000
		side_offset_values[i] = side_min_values[i];
 8002dec:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002df0:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002df4:	490a      	ldr	r1, [pc, #40]	; (8002e20 <sensorCalibration+0x3e4>)
 8002df6:	0092      	lsls	r2, r2, #2
 8002df8:	440a      	add	r2, r1
 8002dfa:	6812      	ldr	r2, [r2, #0]
 8002dfc:	4909      	ldr	r1, [pc, #36]	; (8002e24 <sensorCalibration+0x3e8>)
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002e04:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 8002e0e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d9ea      	bls.n	8002dec <sensorCalibration+0x3b0>
	}
}
 8002e16:	bf00      	nop
 8002e18:	3780      	adds	r7, #128	; 0x80
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	2001f1b8 	.word	0x2001f1b8
 8002e24:	2001efc0 	.word	0x2001efc0

08002e28 <initLog>:
static float log_debug[12000];
static float log_distance[5500];
static float log_theta[5500];
static uint16_t log_distance_cnt, log_theta_cnt, log_cross_cnt, log_side_cnt, log_debug_cnt;

void initLog(){
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
	writeAdd_1 = start_adress_sector7;
 8002e2c:	4b16      	ldr	r3, [pc, #88]	; (8002e88 <initLog+0x60>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <initLog+0x64>)
 8002e32:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002e34:	4b16      	ldr	r3, [pc, #88]	; (8002e90 <initLog+0x68>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a16      	ldr	r2, [pc, #88]	; (8002e94 <initLog+0x6c>)
 8002e3a:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002e3c:	4b16      	ldr	r3, [pc, #88]	; (8002e98 <initLog+0x70>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a16      	ldr	r2, [pc, #88]	; (8002e9c <initLog+0x74>)
 8002e42:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002e44:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <initLog+0x78>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <initLog+0x7c>)
 8002e4a:	6013      	str	r3, [r2, #0]
	writeAdd_5 = start_adress_sector11;
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <initLog+0x80>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a16      	ldr	r2, [pc, #88]	; (8002eac <initLog+0x84>)
 8002e52:	6013      	str	r3, [r2, #0]
	readAdd_1 = start_adress_sector7;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <initLog+0x60>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <initLog+0x88>)
 8002e5a:	6013      	str	r3, [r2, #0]
	readAdd_2 = start_adress_sector8;
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	; (8002e90 <initLog+0x68>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a14      	ldr	r2, [pc, #80]	; (8002eb4 <initLog+0x8c>)
 8002e62:	6013      	str	r3, [r2, #0]
	readAdd_3 = start_adress_sector9;
 8002e64:	4b0c      	ldr	r3, [pc, #48]	; (8002e98 <initLog+0x70>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a13      	ldr	r2, [pc, #76]	; (8002eb8 <initLog+0x90>)
 8002e6a:	6013      	str	r3, [r2, #0]
	readAdd_4 = start_adress_sector10;
 8002e6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <initLog+0x78>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a12      	ldr	r2, [pc, #72]	; (8002ebc <initLog+0x94>)
 8002e72:	6013      	str	r3, [r2, #0]
	readAdd_5 = start_adress_sector11;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <initLog+0x80>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a11      	ldr	r2, [pc, #68]	; (8002ec0 <initLog+0x98>)
 8002e7a:	6013      	str	r3, [r2, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	0800f43c 	.word	0x0800f43c
 8002e8c:	2001efa8 	.word	0x2001efa8
 8002e90:	0800f440 	.word	0x0800f440
 8002e94:	2001effc 	.word	0x2001effc
 8002e98:	0800f444 	.word	0x0800f444
 8002e9c:	2001efb8 	.word	0x2001efb8
 8002ea0:	0800f448 	.word	0x0800f448
 8002ea4:	2001efa4 	.word	0x2001efa4
 8002ea8:	0800f44c 	.word	0x0800f44c
 8002eac:	2001efb4 	.word	0x2001efb4
 8002eb0:	2001efb0 	.word	0x2001efb0
 8002eb4:	2001efbc 	.word	0x2001efbc
 8002eb8:	2001f028 	.word	0x2001f028
 8002ebc:	2001f020 	.word	0x2001f020
 8002ec0:	2001eff8 	.word	0x2001eff8

08002ec4 <saveDistance>:

void saveDistance(float distance){
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_1, distance);
 8002ece:	4b08      	ldr	r3, [pc, #32]	; (8002ef0 <saveDistance+0x2c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fb48 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_1 += 0x04;
 8002edc:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <saveDistance+0x2c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	3304      	adds	r3, #4
 8002ee2:	4a03      	ldr	r2, [pc, #12]	; (8002ef0 <saveDistance+0x2c>)
 8002ee4:	6013      	str	r3, [r2, #0]
}
 8002ee6:	bf00      	nop
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	2001efa8 	.word	0x2001efa8

08002ef4 <saveTheta>:

void saveTheta(float theta){
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_2, theta);
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <saveTheta+0x2c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fe fb30 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_2 += 0x04;
 8002f0c:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <saveTheta+0x2c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3304      	adds	r3, #4
 8002f12:	4a03      	ldr	r2, [pc, #12]	; (8002f20 <saveTheta+0x2c>)
 8002f14:	6013      	str	r3, [r2, #0]
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	2001effc 	.word	0x2001effc

08002f24 <saveCross>:

void saveCross(float cross){
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_3, cross);
 8002f2e:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <saveCross+0x2c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fe fb18 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_3 += 0x04;
 8002f3c:	4b04      	ldr	r3, [pc, #16]	; (8002f50 <saveCross+0x2c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	3304      	adds	r3, #4
 8002f42:	4a03      	ldr	r2, [pc, #12]	; (8002f50 <saveCross+0x2c>)
 8002f44:	6013      	str	r3, [r2, #0]
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	2001efb8 	.word	0x2001efb8

08002f54 <saveSide>:

void saveSide(float side){
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_4, side);
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <saveSide+0x2c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fb00 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_4 += 0x04;
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <saveSide+0x2c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	3304      	adds	r3, #4
 8002f72:	4a03      	ldr	r2, [pc, #12]	; (8002f80 <saveSide+0x2c>)
 8002f74:	6013      	str	r3, [r2, #0]
}
 8002f76:	bf00      	nop
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	2001efa4 	.word	0x2001efa4

08002f84 <saveDebug>:

void saveDebug(float value){
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	ed87 0a01 	vstr	s0, [r7, #4]
	FLASH_Write_Word_F(writeAdd_5, value);
 8002f8e:	4b08      	ldr	r3, [pc, #32]	; (8002fb0 <saveDebug+0x2c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	ed97 0a01 	vldr	s0, [r7, #4]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fae8 	bl	800156c <FLASH_Write_Word_F>
	writeAdd_5+= 0x04;
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <saveDebug+0x2c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	4a03      	ldr	r2, [pc, #12]	; (8002fb0 <saveDebug+0x2c>)
 8002fa4:	6013      	str	r3, [r2, #0]
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	2001efb4 	.word	0x2001efb4

08002fb4 <ereaseLog>:


void ereaseLog(){
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_7);
 8002fb8:	2007      	movs	r0, #7
 8002fba:	f7fe fab7 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_8);
 8002fbe:	2008      	movs	r0, #8
 8002fc0:	f7fe fab4 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_9);
 8002fc4:	2009      	movs	r0, #9
 8002fc6:	f7fe fab1 	bl	800152c <FLASH_EreaseSector>
	FLASH_EreaseSector(FLASH_SECTOR_10);
 8002fca:	200a      	movs	r0, #10
 8002fcc:	f7fe faae 	bl	800152c <FLASH_EreaseSector>
	//FLASH_Erease11();
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8002fd0:	200b      	movs	r0, #11
 8002fd2:	f7fe faab 	bl	800152c <FLASH_EreaseSector>

	writeAdd_1 = start_adress_sector7;
 8002fd6:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <ereaseLog+0x50>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a0b      	ldr	r2, [pc, #44]	; (8003008 <ereaseLog+0x54>)
 8002fdc:	6013      	str	r3, [r2, #0]
	writeAdd_2 = start_adress_sector8;
 8002fde:	4b0b      	ldr	r3, [pc, #44]	; (800300c <ereaseLog+0x58>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <ereaseLog+0x5c>)
 8002fe4:	6013      	str	r3, [r2, #0]
	writeAdd_3 = start_adress_sector9;
 8002fe6:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <ereaseLog+0x60>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <ereaseLog+0x64>)
 8002fec:	6013      	str	r3, [r2, #0]
	writeAdd_4 = start_adress_sector10;
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <ereaseLog+0x68>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a0b      	ldr	r2, [pc, #44]	; (8003020 <ereaseLog+0x6c>)
 8002ff4:	6013      	str	r3, [r2, #0]
	writeAdd_5= start_adress_sector11;
 8002ff6:	4b0b      	ldr	r3, [pc, #44]	; (8003024 <ereaseLog+0x70>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a0b      	ldr	r2, [pc, #44]	; (8003028 <ereaseLog+0x74>)
 8002ffc:	6013      	str	r3, [r2, #0]
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	0800f43c 	.word	0x0800f43c
 8003008:	2001efa8 	.word	0x2001efa8
 800300c:	0800f440 	.word	0x0800f440
 8003010:	2001effc 	.word	0x2001effc
 8003014:	0800f444 	.word	0x0800f444
 8003018:	2001efb8 	.word	0x2001efb8
 800301c:	0800f448 	.word	0x0800f448
 8003020:	2001efa4 	.word	0x2001efa4
 8003024:	0800f44c 	.word	0x0800f44c
 8003028:	2001efb4 	.word	0x2001efb4

0800302c <ereaseDebugLog>:

void ereaseDebugLog(){
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
	FLASH_EreaseSector(FLASH_SECTOR_11);
 8003030:	200b      	movs	r0, #11
 8003032:	f7fe fa7b 	bl	800152c <FLASH_EreaseSector>

	writeAdd_5= start_adress_sector11;
 8003036:	4b03      	ldr	r3, [pc, #12]	; (8003044 <ereaseDebugLog+0x18>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a03      	ldr	r2, [pc, #12]	; (8003048 <ereaseDebugLog+0x1c>)
 800303c:	6013      	str	r3, [r2, #0]
}
 800303e:	bf00      	nop
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	0800f44c 	.word	0x0800f44c
 8003048:	2001efb4 	.word	0x2001efb4

0800304c <getDistanceLogSize>:

uint16_t getDistanceLogSize(){
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
	return log_distance_cnt;
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <getDistanceLogSize+0x14>)
 8003052:	881b      	ldrh	r3, [r3, #0]
}
 8003054:	4618      	mov	r0, r3
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20016e40 	.word	0x20016e40

08003064 <getCrossLogSize>:

uint16_t getCrossLogSize(){
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
	return log_cross_cnt;
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <getCrossLogSize+0x14>)
 800306a:	881b      	ldrh	r3, [r3, #0]
}
 800306c:	4618      	mov	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20016e44 	.word	0x20016e44

0800307c <getSideLogSize>:

uint16_t getSideLogSize(){
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
	return log_side_cnt;
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <getSideLogSize+0x14>)
 8003082:	881b      	ldrh	r3, [r3, #0]
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	20016e46 	.word	0x20016e46

08003094 <getDebugLogSize>:

uint16_t getDebugLogSize(){
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
	return log_debug_cnt;
 8003098:	4b03      	ldr	r3, [pc, #12]	; (80030a8 <getDebugLogSize+0x14>)
 800309a:	881b      	ldrh	r3, [r3, #0]
}
 800309c:	4618      	mov	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	20016e48 	.word	0x20016e48

080030ac <loadDistance>:


void loadDistance(){
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	80fb      	strh	r3, [r7, #6]
	readAdd_1 = start_adress_sector7;
 80030b6:	4b18      	ldr	r3, [pc, #96]	; (8003118 <loadDistance+0x6c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <loadDistance+0x70>)
 80030bc:	6013      	str	r3, [r2, #0]
	log_distance_cnt = 0;
 80030be:	4b18      	ldr	r3, [pc, #96]	; (8003120 <loadDistance+0x74>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	801a      	strh	r2, [r3, #0]

	while(1){
		log_distance[i] = *(float*)readAdd_1;
 80030c4:	4b15      	ldr	r3, [pc, #84]	; (800311c <loadDistance+0x70>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	88fb      	ldrh	r3, [r7, #6]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	4915      	ldr	r1, [pc, #84]	; (8003124 <loadDistance+0x78>)
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	601a      	str	r2, [r3, #0]
		if(isnan(log_distance[i]) != 0){
 80030d6:	88fb      	ldrh	r3, [r7, #6]
 80030d8:	4a12      	ldr	r2, [pc, #72]	; (8003124 <loadDistance+0x78>)
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	edd3 7a00 	vldr	s15, [r3]
 80030e2:	eef4 7a67 	vcmp.f32	s15, s15
 80030e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030ea:	d60e      	bvs.n	800310a <loadDistance+0x5e>
			break;
		}
		else{
			log_distance_cnt++;
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <loadDistance+0x74>)
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	3301      	adds	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <loadDistance+0x74>)
 80030f6:	801a      	strh	r2, [r3, #0]
		}
		readAdd_1 += 0x04;
 80030f8:	4b08      	ldr	r3, [pc, #32]	; (800311c <loadDistance+0x70>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	3304      	adds	r3, #4
 80030fe:	4a07      	ldr	r2, [pc, #28]	; (800311c <loadDistance+0x70>)
 8003100:	6013      	str	r3, [r2, #0]
		i++;
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	3301      	adds	r3, #1
 8003106:	80fb      	strh	r3, [r7, #6]
		log_distance[i] = *(float*)readAdd_1;
 8003108:	e7dc      	b.n	80030c4 <loadDistance+0x18>
			break;
 800310a:	bf00      	nop
	}
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	0800f43c 	.word	0x0800f43c
 800311c:	2001efb0 	.word	0x2001efb0
 8003120:	20016e40 	.word	0x20016e40
 8003124:	2000c260 	.word	0x2000c260

08003128 <loadTheta>:

void loadTheta(){
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 800312e:	2300      	movs	r3, #0
 8003130:	80fb      	strh	r3, [r7, #6]
	readAdd_2 = start_adress_sector8;
 8003132:	4b18      	ldr	r3, [pc, #96]	; (8003194 <loadTheta+0x6c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a18      	ldr	r2, [pc, #96]	; (8003198 <loadTheta+0x70>)
 8003138:	6013      	str	r3, [r2, #0]
	log_theta_cnt = 0;
 800313a:	4b18      	ldr	r3, [pc, #96]	; (800319c <loadTheta+0x74>)
 800313c:	2200      	movs	r2, #0
 800313e:	801a      	strh	r2, [r3, #0]

	while(1){
		log_theta[i] = *(float*)readAdd_2;
 8003140:	4b15      	ldr	r3, [pc, #84]	; (8003198 <loadTheta+0x70>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	88fb      	ldrh	r3, [r7, #6]
 8003148:	6812      	ldr	r2, [r2, #0]
 800314a:	4915      	ldr	r1, [pc, #84]	; (80031a0 <loadTheta+0x78>)
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	601a      	str	r2, [r3, #0]
		if(isnan(log_theta[i]) != 0){
 8003152:	88fb      	ldrh	r3, [r7, #6]
 8003154:	4a12      	ldr	r2, [pc, #72]	; (80031a0 <loadTheta+0x78>)
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	edd3 7a00 	vldr	s15, [r3]
 800315e:	eef4 7a67 	vcmp.f32	s15, s15
 8003162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003166:	d60e      	bvs.n	8003186 <loadTheta+0x5e>
			break;
		}
		else{
			log_theta_cnt++;
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <loadTheta+0x74>)
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	3301      	adds	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	4b0a      	ldr	r3, [pc, #40]	; (800319c <loadTheta+0x74>)
 8003172:	801a      	strh	r2, [r3, #0]
		}
		readAdd_2 += 0x04;
 8003174:	4b08      	ldr	r3, [pc, #32]	; (8003198 <loadTheta+0x70>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3304      	adds	r3, #4
 800317a:	4a07      	ldr	r2, [pc, #28]	; (8003198 <loadTheta+0x70>)
 800317c:	6013      	str	r3, [r2, #0]
		i++;
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	3301      	adds	r3, #1
 8003182:	80fb      	strh	r3, [r7, #6]
		log_theta[i] = *(float*)readAdd_2;
 8003184:	e7dc      	b.n	8003140 <loadTheta+0x18>
			break;
 8003186:	bf00      	nop
	}
}
 8003188:	bf00      	nop
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	0800f440 	.word	0x0800f440
 8003198:	2001efbc 	.word	0x2001efbc
 800319c:	20016e42 	.word	0x20016e42
 80031a0:	20011850 	.word	0x20011850

080031a4 <loadCross>:

void loadCross(){
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80031aa:	2300      	movs	r3, #0
 80031ac:	80fb      	strh	r3, [r7, #6]
	readAdd_3 = start_adress_sector9;
 80031ae:	4b18      	ldr	r3, [pc, #96]	; (8003210 <loadCross+0x6c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a18      	ldr	r2, [pc, #96]	; (8003214 <loadCross+0x70>)
 80031b4:	6013      	str	r3, [r2, #0]
	log_cross_cnt = 0;
 80031b6:	4b18      	ldr	r3, [pc, #96]	; (8003218 <loadCross+0x74>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	801a      	strh	r2, [r3, #0]

	while(1){
		log_cross[i] = *(float*)readAdd_3;
 80031bc:	4b15      	ldr	r3, [pc, #84]	; (8003214 <loadCross+0x70>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	88fb      	ldrh	r3, [r7, #6]
 80031c4:	6812      	ldr	r2, [r2, #0]
 80031c6:	4915      	ldr	r1, [pc, #84]	; (800321c <loadCross+0x78>)
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	601a      	str	r2, [r3, #0]
		if(isnan(log_cross[i]) != 0){
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	4a12      	ldr	r2, [pc, #72]	; (800321c <loadCross+0x78>)
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	edd3 7a00 	vldr	s15, [r3]
 80031da:	eef4 7a67 	vcmp.f32	s15, s15
 80031de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e2:	d60e      	bvs.n	8003202 <loadCross+0x5e>
			break;
		}
		else{
			log_cross_cnt++;
 80031e4:	4b0c      	ldr	r3, [pc, #48]	; (8003218 <loadCross+0x74>)
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	b29a      	uxth	r2, r3
 80031ec:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <loadCross+0x74>)
 80031ee:	801a      	strh	r2, [r3, #0]
		}
		readAdd_3 += 0x04;
 80031f0:	4b08      	ldr	r3, [pc, #32]	; (8003214 <loadCross+0x70>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3304      	adds	r3, #4
 80031f6:	4a07      	ldr	r2, [pc, #28]	; (8003214 <loadCross+0x70>)
 80031f8:	6013      	str	r3, [r2, #0]
		i++;
 80031fa:	88fb      	ldrh	r3, [r7, #6]
 80031fc:	3301      	adds	r3, #1
 80031fe:	80fb      	strh	r3, [r7, #6]
		log_cross[i] = *(float*)readAdd_3;
 8003200:	e7dc      	b.n	80031bc <loadCross+0x18>
			break;
 8003202:	bf00      	nop
	}
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	0800f444 	.word	0x0800f444
 8003214:	2001f028 	.word	0x2001f028
 8003218:	20016e44 	.word	0x20016e44
 800321c:	200003c0 	.word	0x200003c0

08003220 <loadSide>:

void loadSide(){
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8003226:	2300      	movs	r3, #0
 8003228:	80fb      	strh	r3, [r7, #6]
	readAdd_4 = start_adress_sector10;
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <loadSide+0x6c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a18      	ldr	r2, [pc, #96]	; (8003290 <loadSide+0x70>)
 8003230:	6013      	str	r3, [r2, #0]
	log_side_cnt = 0;
 8003232:	4b18      	ldr	r3, [pc, #96]	; (8003294 <loadSide+0x74>)
 8003234:	2200      	movs	r2, #0
 8003236:	801a      	strh	r2, [r3, #0]

	while(1){
		log_side[i] = *(float*)readAdd_4;
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <loadSide+0x70>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	461a      	mov	r2, r3
 800323e:	88fb      	ldrh	r3, [r7, #6]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	4915      	ldr	r1, [pc, #84]	; (8003298 <loadSide+0x78>)
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	601a      	str	r2, [r3, #0]
		if(isnan(log_side[i]) != 0){
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	4a12      	ldr	r2, [pc, #72]	; (8003298 <loadSide+0x78>)
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	edd3 7a00 	vldr	s15, [r3]
 8003256:	eef4 7a67 	vcmp.f32	s15, s15
 800325a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325e:	d60e      	bvs.n	800327e <loadSide+0x5e>
			break;
		}
		else{
			log_side_cnt++;
 8003260:	4b0c      	ldr	r3, [pc, #48]	; (8003294 <loadSide+0x74>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	4b0a      	ldr	r3, [pc, #40]	; (8003294 <loadSide+0x74>)
 800326a:	801a      	strh	r2, [r3, #0]
		}
		readAdd_4 += 0x04;
 800326c:	4b08      	ldr	r3, [pc, #32]	; (8003290 <loadSide+0x70>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3304      	adds	r3, #4
 8003272:	4a07      	ldr	r2, [pc, #28]	; (8003290 <loadSide+0x70>)
 8003274:	6013      	str	r3, [r2, #0]
		i++;
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	3301      	adds	r3, #1
 800327a:	80fb      	strh	r3, [r7, #6]
		log_side[i] = *(float*)readAdd_4;
 800327c:	e7dc      	b.n	8003238 <loadSide+0x18>
			break;
 800327e:	bf00      	nop
	}
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	0800f448 	.word	0x0800f448
 8003290:	2001f020 	.word	0x2001f020
 8003294:	20016e46 	.word	0x20016e46
 8003298:	20000550 	.word	0x20000550

0800329c <loadDebug>:

void loadDebug(){
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 80032a2:	2300      	movs	r3, #0
 80032a4:	80fb      	strh	r3, [r7, #6]
	readAdd_5= start_adress_sector11;
 80032a6:	4b18      	ldr	r3, [pc, #96]	; (8003308 <loadDebug+0x6c>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a18      	ldr	r2, [pc, #96]	; (800330c <loadDebug+0x70>)
 80032ac:	6013      	str	r3, [r2, #0]
	log_debug_cnt = 0;
 80032ae:	4b18      	ldr	r3, [pc, #96]	; (8003310 <loadDebug+0x74>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	801a      	strh	r2, [r3, #0]

	while(1){
		log_debug[i] = *(float*)readAdd_5;
 80032b4:	4b15      	ldr	r3, [pc, #84]	; (800330c <loadDebug+0x70>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	6812      	ldr	r2, [r2, #0]
 80032be:	4915      	ldr	r1, [pc, #84]	; (8003314 <loadDebug+0x78>)
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	601a      	str	r2, [r3, #0]
		if(isnan(log_debug[i]) != 0){
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	4a12      	ldr	r2, [pc, #72]	; (8003314 <loadDebug+0x78>)
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	edd3 7a00 	vldr	s15, [r3]
 80032d2:	eef4 7a67 	vcmp.f32	s15, s15
 80032d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032da:	d60e      	bvs.n	80032fa <loadDebug+0x5e>
			break;
		}
		else{
			log_debug_cnt++;
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <loadDebug+0x74>)
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	3301      	adds	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b0a      	ldr	r3, [pc, #40]	; (8003310 <loadDebug+0x74>)
 80032e6:	801a      	strh	r2, [r3, #0]
		}
		readAdd_5 += 0x04;
 80032e8:	4b08      	ldr	r3, [pc, #32]	; (800330c <loadDebug+0x70>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3304      	adds	r3, #4
 80032ee:	4a07      	ldr	r2, [pc, #28]	; (800330c <loadDebug+0x70>)
 80032f0:	6013      	str	r3, [r2, #0]
		i++;
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	3301      	adds	r3, #1
 80032f6:	80fb      	strh	r3, [r7, #6]
		log_debug[i] = *(float*)readAdd_5;
 80032f8:	e7dc      	b.n	80032b4 <loadDebug+0x18>
			break;
 80032fa:	bf00      	nop
	}
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	0800f44c 	.word	0x0800f44c
 800330c:	2001eff8 	.word	0x2001eff8
 8003310:	20016e48 	.word	0x20016e48
 8003314:	200006e0 	.word	0x200006e0

08003318 <getDistanceArrayPointer>:


const float *getDistanceArrayPointer(){
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
	return log_distance;
 800331c:	4b02      	ldr	r3, [pc, #8]	; (8003328 <getDistanceArrayPointer+0x10>)
}
 800331e:	4618      	mov	r0, r3
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	2000c260 	.word	0x2000c260

0800332c <getThetaArrayPointer>:

const float *getThetaArrayPointer(){
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
	return log_theta;
 8003330:	4b02      	ldr	r3, [pc, #8]	; (800333c <getThetaArrayPointer+0x10>)
}
 8003332:	4618      	mov	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	20011850 	.word	0x20011850

08003340 <getDistanceLog>:

const float *getSideArrayPointer(){
	return log_side;
}

float getDistanceLog(uint16_t idx){
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	80fb      	strh	r3, [r7, #6]
	return log_distance[idx];
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	4a06      	ldr	r2, [pc, #24]	; (8003368 <getDistanceLog+0x28>)
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	ee07 3a90 	vmov	s15, r3
}
 8003358:	eeb0 0a67 	vmov.f32	s0, s15
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	2000c260 	.word	0x2000c260

0800336c <getCrossLog>:

float getThetaLog(uint16_t idx){
	return log_theta[idx];
}

float getCrossLog(uint16_t idx){
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	80fb      	strh	r3, [r7, #6]
	return log_cross[idx];
 8003376:	88fb      	ldrh	r3, [r7, #6]
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <getCrossLog+0x28>)
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	ee07 3a90 	vmov	s15, r3
}
 8003384:	eeb0 0a67 	vmov.f32	s0, s15
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	200003c0 	.word	0x200003c0

08003398 <getSideLog>:

float getSideLog(uint16_t idx){
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	80fb      	strh	r3, [r7, #6]
	return log_side[idx];
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	4a06      	ldr	r2, [pc, #24]	; (80033c0 <getSideLog+0x28>)
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	ee07 3a90 	vmov	s15, r3
}
 80033b0:	eeb0 0a67 	vmov.f32	s0, s15
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	20000550 	.word	0x20000550

080033c4 <getDebugLog>:

float getDebugLog(uint16_t idx){
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
	return log_debug[idx];
 80033ce:	88fb      	ldrh	r3, [r7, #6]
 80033d0:	4a06      	ldr	r2, [pc, #24]	; (80033ec <getDebugLog+0x28>)
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	ee07 3a90 	vmov	s15, r3
}
 80033dc:	eeb0 0a67 	vmov.f32	s0, s15
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	200006e0 	.word	0x200006e0

080033f0 <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	4603      	mov	r3, r0
 80033f8:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003400:	b2db      	uxtb	r3, r3
 8003402:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 8003404:	2200      	movs	r2, #0
 8003406:	2104      	movs	r1, #4
 8003408:	480d      	ldr	r0, [pc, #52]	; (8003440 <read_byte+0x50>)
 800340a:	f004 ff19 	bl	8008240 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 800340e:	f107 010f 	add.w	r1, r7, #15
 8003412:	2364      	movs	r3, #100	; 0x64
 8003414:	2201      	movs	r2, #1
 8003416:	480b      	ldr	r0, [pc, #44]	; (8003444 <read_byte+0x54>)
 8003418:	f005 fd04 	bl	8008e24 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 800341c:	f107 010e 	add.w	r1, r7, #14
 8003420:	2364      	movs	r3, #100	; 0x64
 8003422:	2201      	movs	r2, #1
 8003424:	4807      	ldr	r0, [pc, #28]	; (8003444 <read_byte+0x54>)
 8003426:	f005 fe31 	bl	800908c <HAL_SPI_Receive>
		CS_SET;
 800342a:	2201      	movs	r2, #1
 800342c:	2104      	movs	r1, #4
 800342e:	4804      	ldr	r0, [pc, #16]	; (8003440 <read_byte+0x50>)
 8003430:	f004 ff06 	bl	8008240 <HAL_GPIO_WritePin>

	return val;
 8003434:	7bbb      	ldrb	r3, [r7, #14]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40020c00 	.word	0x40020c00
 8003444:	2001f288 	.word	0x2001f288

08003448 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	460a      	mov	r2, r1
 8003452:	71fb      	strb	r3, [r7, #7]
 8003454:	4613      	mov	r3, r2
 8003456:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8003458:	79fb      	ldrb	r3, [r7, #7]
 800345a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800345e:	b2db      	uxtb	r3, r3
 8003460:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8003462:	2200      	movs	r2, #0
 8003464:	2104      	movs	r1, #4
 8003466:	480c      	ldr	r0, [pc, #48]	; (8003498 <write_byte+0x50>)
 8003468:	f004 feea 	bl	8008240 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 800346c:	f107 010f 	add.w	r1, r7, #15
 8003470:	2364      	movs	r3, #100	; 0x64
 8003472:	2201      	movs	r2, #1
 8003474:	4809      	ldr	r0, [pc, #36]	; (800349c <write_byte+0x54>)
 8003476:	f005 fcd5 	bl	8008e24 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &val, 1, 100);
 800347a:	1db9      	adds	r1, r7, #6
 800347c:	2364      	movs	r3, #100	; 0x64
 800347e:	2201      	movs	r2, #1
 8003480:	4806      	ldr	r0, [pc, #24]	; (800349c <write_byte+0x54>)
 8003482:	f005 fe03 	bl	800908c <HAL_SPI_Receive>
	CS_SET;
 8003486:	2201      	movs	r2, #1
 8003488:	2104      	movs	r1, #4
 800348a:	4803      	ldr	r0, [pc, #12]	; (8003498 <write_byte+0x50>)
 800348c:	f004 fed8 	bl	8008240 <HAL_GPIO_WritePin>
}
 8003490:	bf00      	nop
 8003492:	3710      	adds	r7, #16
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40020c00 	.word	0x40020c00
 800349c:	2001f288 	.word	0x2001f288

080034a0 <IMU_init>:

uint8_t IMU_init() {
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
	uint8_t who_am_i, ret;
	ret = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	71fb      	strb	r3, [r7, #7]

	who_am_i = read_byte( 0x75 );
 80034aa:	2075      	movs	r0, #117	; 0x75
 80034ac:	f7ff ffa0 	bl	80033f0 <read_byte>
 80034b0:	4603      	mov	r3, r0
 80034b2:	71bb      	strb	r3, [r7, #6]
	if ( who_am_i == 0x70 ) {
 80034b4:	79bb      	ldrb	r3, [r7, #6]
 80034b6:	2b70      	cmp	r3, #112	; 0x70
 80034b8:	d110      	bne.n	80034dc <IMU_init+0x3c>
		ret = 1;
 80034ba:	2301      	movs	r3, #1
 80034bc:	71fb      	strb	r3, [r7, #7]
		write_byte(0x6B, 0x00);	//sleep mode解除
 80034be:	2100      	movs	r1, #0
 80034c0:	206b      	movs	r0, #107	; 0x6b
 80034c2:	f7ff ffc1 	bl	8003448 <write_byte>
		HAL_Delay(100);
 80034c6:	2064      	movs	r0, #100	; 0x64
 80034c8:	f003 fa88 	bl	80069dc <HAL_Delay>
		write_byte(0x1A, 0x00);
 80034cc:	2100      	movs	r1, #0
 80034ce:	201a      	movs	r0, #26
 80034d0:	f7ff ffba 	bl	8003448 <write_byte>
		write_byte(0x1B, 0x18);
 80034d4:	2118      	movs	r1, #24
 80034d6:	201b      	movs	r0, #27
 80034d8:	f7ff ffb6 	bl	8003448 <write_byte>
	}
	return ret;
 80034dc:	79fb      	ldrb	r3, [r7, #7]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3708      	adds	r7, #8
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <read_gyro_data>:

void read_gyro_data() {
 80034e8:	b598      	push	{r3, r4, r7, lr}
 80034ea:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80034ec:	2047      	movs	r0, #71	; 0x47
 80034ee:	f7ff ff7f 	bl	80033f0 <read_byte>
 80034f2:	4603      	mov	r3, r0
 80034f4:	021b      	lsls	r3, r3, #8
 80034f6:	b21c      	sxth	r4, r3
 80034f8:	2048      	movs	r0, #72	; 0x48
 80034fa:	f7ff ff79 	bl	80033f0 <read_byte>
 80034fe:	4603      	mov	r3, r0
 8003500:	b21b      	sxth	r3, r3
 8003502:	4323      	orrs	r3, r4
 8003504:	b21a      	sxth	r2, r3
 8003506:	4b02      	ldr	r3, [pc, #8]	; (8003510 <read_gyro_data+0x28>)
 8003508:	801a      	strh	r2, [r3, #0]
}
 800350a:	bf00      	nop
 800350c:	bd98      	pop	{r3, r4, r7, pc}
 800350e:	bf00      	nop
 8003510:	2001f1c0 	.word	0x2001f1c0
 8003514:	00000000 	.word	0x00000000

08003518 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 8003518:	b5b0      	push	{r4, r5, r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 1500, ki = 20000, kd = 0.0;//kp = 1550, ki = 20000, kd = 0.0;
 800351e:	4b4e      	ldr	r3, [pc, #312]	; (8003658 <calculateVelocityControlFlip+0x140>)
 8003520:	61fb      	str	r3, [r7, #28]
 8003522:	4b4e      	ldr	r3, [pc, #312]	; (800365c <calculateVelocityControlFlip+0x144>)
 8003524:	61bb      	str	r3, [r7, #24]
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 8003532:	f000 f909 	bl	8003748 <getCurrentVelocity>
 8003536:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 800353a:	4b49      	ldr	r3, [pc, #292]	; (8003660 <calculateVelocityControlFlip+0x148>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d17f      	bne.n	8003642 <calculateVelocityControlFlip+0x12a>
		if(i_clear_flag == 1){
 8003542:	4b48      	ldr	r3, [pc, #288]	; (8003664 <calculateVelocityControlFlip+0x14c>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d106      	bne.n	8003558 <calculateVelocityControlFlip+0x40>
			i = 0;
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <calculateVelocityControlFlip+0x150>)
 800354c:	f04f 0200 	mov.w	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 8003552:	4b44      	ldr	r3, [pc, #272]	; (8003664 <calculateVelocityControlFlip+0x14c>)
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8003558:	f000 f8c4 	bl	80036e4 <setvariablespeed>
 800355c:	eeb0 7a40 	vmov.f32	s14, s0
 8003560:	edd7 7a03 	vldr	s15, [r7, #12]
 8003564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003568:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 800356c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003570:	edd7 7a04 	vldr	s15, [r7, #16]
 8003574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003578:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 800357c:	4b3a      	ldr	r3, [pc, #232]	; (8003668 <calculateVelocityControlFlip+0x150>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7fc ffe1 	bl	8000548 <__aeabi_f2d>
 8003586:	4604      	mov	r4, r0
 8003588:	460d      	mov	r5, r1
 800358a:	ed97 7a06 	vldr	s14, [r7, #24]
 800358e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003596:	ee17 0a90 	vmov	r0, s15
 800359a:	f7fc ffd5 	bl	8000548 <__aeabi_f2d>
 800359e:	a32c      	add	r3, pc, #176	; (adr r3, 8003650 <calculateVelocityControlFlip+0x138>)
 80035a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a4:	f7fd f828 	bl	80005f8 <__aeabi_dmul>
 80035a8:	4602      	mov	r2, r0
 80035aa:	460b      	mov	r3, r1
 80035ac:	4620      	mov	r0, r4
 80035ae:	4629      	mov	r1, r5
 80035b0:	f7fc fe6c 	bl	800028c <__adddf3>
 80035b4:	4603      	mov	r3, r0
 80035b6:	460c      	mov	r4, r1
 80035b8:	4618      	mov	r0, r3
 80035ba:	4621      	mov	r1, r4
 80035bc:	f7fd fb14 	bl	8000be8 <__aeabi_d2f>
 80035c0:	4602      	mov	r2, r0
 80035c2:	4b29      	ldr	r3, [pc, #164]	; (8003668 <calculateVelocityControlFlip+0x150>)
 80035c4:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		pid_plus = p + i;
 80035c6:	4b28      	ldr	r3, [pc, #160]	; (8003668 <calculateVelocityControlFlip+0x150>)
 80035c8:	ed93 7a00 	vldr	s14, [r3]
 80035cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80035d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035d4:	4b25      	ldr	r3, [pc, #148]	; (800366c <calculateVelocityControlFlip+0x154>)
 80035d6:	edc3 7a00 	vstr	s15, [r3]

		mon_p = p;
 80035da:	4a25      	ldr	r2, [pc, #148]	; (8003670 <calculateVelocityControlFlip+0x158>)
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80035e0:	4b21      	ldr	r3, [pc, #132]	; (8003668 <calculateVelocityControlFlip+0x150>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a23      	ldr	r2, [pc, #140]	; (8003674 <calculateVelocityControlFlip+0x15c>)
 80035e6:	6013      	str	r3, [r2, #0]
		//if(i <= -1000) i = -1000;

		//velocity_control_term = p + i + d;//速度制御のPIDゲイン調整の時はこのコメント文をはずす


		if(mode == 1){
 80035e8:	4b23      	ldr	r3, [pc, #140]	; (8003678 <calculateVelocityControlFlip+0x160>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d10e      	bne.n	800360e <calculateVelocityControlFlip+0xf6>
		    velocity_control_term = p + i + d;
 80035f0:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <calculateVelocityControlFlip+0x150>)
 80035f2:	ed93 7a00 	vldr	s14, [r3]
 80035f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80035fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003606:	4b1d      	ldr	r3, [pc, #116]	; (800367c <calculateVelocityControlFlip+0x164>)
 8003608:	edc3 7a00 	vstr	s15, [r3]
 800360c:	e016      	b.n	800363c <calculateVelocityControlFlip+0x124>
		}
		else if(mode == 2){
 800360e:	4b1a      	ldr	r3, [pc, #104]	; (8003678 <calculateVelocityControlFlip+0x160>)
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	2b02      	cmp	r3, #2
 8003614:	d112      	bne.n	800363c <calculateVelocityControlFlip+0x124>
			velocity_control_term = (p + i + d) + target_acceleration;//速度PID ＋ フィードフォワード制御 2自由度制御
 8003616:	4b14      	ldr	r3, [pc, #80]	; (8003668 <calculateVelocityControlFlip+0x150>)
 8003618:	ed93 7a00 	vldr	s14, [r3]
 800361c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003624:	edd7 7a01 	vldr	s15, [r7, #4]
 8003628:	ee37 7a27 	vadd.f32	s14, s14, s15
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <calculateVelocityControlFlip+0x168>)
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <calculateVelocityControlFlip+0x164>)
 8003638:	edc3 7a00 	vstr	s15, [r3]
			//velocity_control_term = p + i + d;
		}

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 800363c:	4a11      	ldr	r2, [pc, #68]	; (8003684 <calculateVelocityControlFlip+0x16c>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6013      	str	r3, [r2, #0]

	}

}
 8003642:	bf00      	nop
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bdb0      	pop	{r4, r5, r7, pc}
 800364a:	bf00      	nop
 800364c:	f3af 8000 	nop.w
 8003650:	d2f1a9fc 	.word	0xd2f1a9fc
 8003654:	3f50624d 	.word	0x3f50624d
 8003658:	44bb8000 	.word	0x44bb8000
 800365c:	469c4000 	.word	0x469c4000
 8003660:	20016e4a 	.word	0x20016e4a
 8003664:	20016e4b 	.word	0x20016e4b
 8003668:	20016e5c 	.word	0x20016e5c
 800366c:	2001f1cc 	.word	0x2001f1cc
 8003670:	2001f1e0 	.word	0x2001f1e0
 8003674:	2001f1d8 	.word	0x2001f1d8
 8003678:	2001f1d0 	.word	0x2001f1d0
 800367c:	20016e4c 	.word	0x20016e4c
 8003680:	20016e54 	.word	0x20016e54
 8003684:	20016e60 	.word	0x20016e60

08003688 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
	return velocity_control_term;
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <getVelocityControlTerm+0x18>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	ee07 3a90 	vmov	s15, r3
}
 8003694:	eeb0 0a67 	vmov.f32	s0, s15
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	20016e4c 	.word	0x20016e4c

080036a4 <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 80036ae:	4a04      	ldr	r2, [pc, #16]	; (80036c0 <setTargetVelocity+0x1c>)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr
 80036c0:	20016e50 	.word	0x20016e50

080036c4 <setTargetAcceleration>:

void setTargetAcceleration(float acceleration)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	ed87 0a01 	vstr	s0, [r7, #4]
	target_acceleration = acceleration;
 80036ce:	4a04      	ldr	r2, [pc, #16]	; (80036e0 <setTargetAcceleration+0x1c>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6013      	str	r3, [r2, #0]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	20016e54 	.word	0x20016e54

080036e4 <setvariablespeed>:

float setvariablespeed(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 80036e8:	f7fd feaa 	bl	8001440 <getspeedcount>
 80036ec:	eeb0 7a40 	vmov.f32	s14, s0
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <setvariablespeed+0x5c>)
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fe:	db04      	blt.n	800370a <setvariablespeed+0x26>
		variable_speed = target_velocity;
 8003700:	4b0f      	ldr	r3, [pc, #60]	; (8003740 <setvariablespeed+0x5c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0f      	ldr	r2, [pc, #60]	; (8003744 <setvariablespeed+0x60>)
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e012      	b.n	8003730 <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 800370a:	f7fd fe99 	bl	8001440 <getspeedcount>
 800370e:	eeb0 7a40 	vmov.f32	s14, s0
 8003712:	4b0b      	ldr	r3, [pc, #44]	; (8003740 <setvariablespeed+0x5c>)
 8003714:	edd3 7a00 	vldr	s15, [r3]
 8003718:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003720:	d506      	bpl.n	8003730 <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 8003722:	f7fd fe8d 	bl	8001440 <getspeedcount>
 8003726:	eef0 7a40 	vmov.f32	s15, s0
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <setvariablespeed+0x60>)
 800372c:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 8003730:	4b04      	ldr	r3, [pc, #16]	; (8003744 <setvariablespeed+0x60>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	ee07 3a90 	vmov	s15, r3
}
 8003738:	eeb0 0a67 	vmov.f32	s0, s15
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20016e50 	.word	0x20016e50
 8003744:	20016e58 	.word	0x20016e58

08003748 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 8003748:	b590      	push	{r4, r7, lr}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	80fb      	strh	r3, [r7, #6]
 8003752:	2300      	movs	r3, #0
 8003754:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 8003756:	1d3a      	adds	r2, r7, #4
 8003758:	1dbb      	adds	r3, r7, #6
 800375a:	4611      	mov	r1, r2
 800375c:	4618      	mov	r0, r3
 800375e:	f7fd fdab 	bl	80012b8 <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 8003762:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003766:	461a      	mov	r2, r3
 8003768:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800376c:	4413      	add	r3, r2
 800376e:	0fda      	lsrs	r2, r3, #31
 8003770:	4413      	add	r3, r2
 8003772:	105b      	asrs	r3, r3, #1
 8003774:	ee07 3a90 	vmov	s15, r3
 8003778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800377c:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f7fc fee1 	bl	8000548 <__aeabi_f2d>
 8003786:	a30d      	add	r3, pc, #52	; (adr r3, 80037bc <getCurrentVelocity+0x74>)
 8003788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800378c:	f7fc ff34 	bl	80005f8 <__aeabi_dmul>
 8003790:	4603      	mov	r3, r0
 8003792:	460c      	mov	r4, r1
 8003794:	4618      	mov	r0, r3
 8003796:	4621      	mov	r1, r4
 8003798:	f7fd fa26 	bl	8000be8 <__aeabi_d2f>
 800379c:	4603      	mov	r3, r0
 800379e:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 80037a0:	4a05      	ldr	r2, [pc, #20]	; (80037b8 <getCurrentVelocity+0x70>)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	6013      	str	r3, [r2, #0]

	return current_velocity;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	ee07 3a90 	vmov	s15, r3
}
 80037ac:	eeb0 0a67 	vmov.f32	s0, s15
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}
 80037b6:	bf00      	nop
 80037b8:	2001f1d4 	.word	0x2001f1d4
 80037bc:	2df331e5 	.word	0x2df331e5
 80037c0:	3f878fcc 	.word	0x3f878fcc

080037c4 <getTargetVelocity>:

float getTargetVelocity()
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
	return target_velocity;
 80037c8:	4b04      	ldr	r3, [pc, #16]	; (80037dc <getTargetVelocity+0x18>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	ee07 3a90 	vmov	s15, r3
}
 80037d0:	eeb0 0a67 	vmov.f32	s0, s15
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	20016e50 	.word	0x20016e50

080037e0 <startVelocityControl>:
{
	return pid_plus;
}

void startVelocityControl(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <startVelocityControl+0x1c>)
 80037e6:	2201      	movs	r2, #1
 80037e8:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <startVelocityControl+0x20>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	20016e4a 	.word	0x20016e4a
 8003800:	20016e4b 	.word	0x20016e4b

08003804 <stopVelocityControl>:

void stopVelocityControl(void)
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <stopVelocityControl+0x14>)
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
}
 800380e:	bf00      	nop
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	20016e4a 	.word	0x20016e4a

0800381c <setClearFlagOfVelocityControlI>:

void setClearFlagOfVelocityControlI(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
	i_clear_flag = 1;
 8003820:	4b03      	ldr	r3, [pc, #12]	; (8003830 <setClearFlagOfVelocityControlI+0x14>)
 8003822:	2201      	movs	r2, #1
 8003824:	701a      	strb	r2, [r3, #0]
}
 8003826:	bf00      	nop
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	20016e4b 	.word	0x20016e4b

08003834 <setrunmode>:

void setrunmode(uint16_t num){
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	80fb      	strh	r3, [r7, #6]
	mode = num;
 800383e:	4a04      	ldr	r2, [pc, #16]	; (8003850 <setrunmode+0x1c>)
 8003840:	88fb      	ldrh	r3, [r7, #6]
 8003842:	8013      	strh	r3, [r2, #0]
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	2001f1d0 	.word	0x2001f1d0

08003854 <__io_putchar>:
	#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /*__GNUC__*/

PUTCHAR_PROTOTYPE{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xFFFF);
 800385c:	1d39      	adds	r1, r7, #4
 800385e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003862:	2201      	movs	r2, #1
 8003864:	4803      	ldr	r0, [pc, #12]	; (8003874 <__io_putchar+0x20>)
 8003866:	f006 feea 	bl	800a63e <HAL_UART_Transmit>
	return ch;
 800386a:	687b      	ldr	r3, [r7, #4]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	2001f2e0 	.word	0x2001f2e0

08003878 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a1a      	ldr	r2, [pc, #104]	; (80038f0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d121      	bne.n	80038ce <HAL_TIM_PeriodElapsedCallback+0x56>
      timer++;
 800388a:	4b1a      	ldr	r3, [pc, #104]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	3301      	adds	r3, #1
 8003890:	4a18      	ldr	r2, [pc, #96]	; (80038f4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8003892:	6013      	str	r3, [r2, #0]
      timer2++;
 8003894:	4b18      	ldr	r3, [pc, #96]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3301      	adds	r3, #1
 800389a:	4a17      	ldr	r2, [pc, #92]	; (80038f8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800389c:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 800389e:	f7fd fc3f 	bl	8001120 <updateEncoderCnt>
      updateIMUValue();
 80038a2:	f7fd fe9d 	bl	80015e0 <updateIMUValue>
      updateAnalogSensor();
 80038a6:	f7fe fed7 	bl	8002658 <updateAnalogSensor>

      calculateLineFollowingTermFlip();
 80038aa:	f7fe fa05 	bl	8001cb8 <calculateLineFollowingTermFlip>
      calculateVelocityControlFlip();
 80038ae:	f7ff fe33 	bl	8003518 <calculateVelocityControlFlip>
      calculateAngleControlFlip();
 80038b2:	f7fd fb69 	bl	8000f88 <calculateAngleControlFlip>
      lineTraceFlip();
 80038b6:	f7fe fb7d 	bl	8001fb4 <lineTraceFlip>
      runningFlip();
 80038ba:	f001 fbaf 	bl	800501c <runningFlip>
      motorCtrlFlip();
 80038be:	f001 f8d9 	bl	8004a74 <motorCtrlFlip>
      suctionmotorCtrlFlip();
 80038c2:	f001 f93b 	bl	8004b3c <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 80038c6:	f001 f9a7 	bl	8004c18 <updateSideSensorStatus>

      checkCourseOut();
 80038ca:	f7fe fc4b 	bl	8002164 <checkCourseOut>

      //resetEncoderCnt();
   }

   if(htim->Instance == TIM7){//0.1ms
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a0a      	ldr	r2, [pc, #40]	; (80038fc <HAL_TIM_PeriodElapsedCallback+0x84>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d106      	bne.n	80038e6 <HAL_TIM_PeriodElapsedCallback+0x6e>
	   timer1++;
 80038d8:	4b09      	ldr	r3, [pc, #36]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	4a08      	ldr	r2, [pc, #32]	; (8003900 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80038e0:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 80038e2:	f7fe fcc3 	bl	800226c <storeAnalogSensorBuffer>

   }
}
 80038e6:	bf00      	nop
 80038e8:	3708      	adds	r7, #8
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40001000 	.word	0x40001000
 80038f4:	2001f1e4 	.word	0x2001f1e4
 80038f8:	2001f22c 	.word	0x2001f22c
 80038fc:	40001400 	.word	0x40001400
 8003900:	2001f404 	.word	0x2001f404

08003904 <init>:

void init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
	  initADC();
 8003908:	f7fe fc9a 	bl	8002240 <initADC>
	  initEncoder();
 800390c:	f7fd fbea 	bl	80010e4 <initEncoder>
	  initLog();
 8003910:	f7ff fa8a 	bl	8002e28 <initLog>
	  initGyro();
 8003914:	f7fd fe54 	bl	80015c0 <initGyro>

	  HAL_TIM_Base_Start_IT(&htim6);
 8003918:	4809      	ldr	r0, [pc, #36]	; (8003940 <init+0x3c>)
 800391a:	f005 ff9e 	bl	800985a <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 800391e:	4809      	ldr	r0, [pc, #36]	; (8003944 <init+0x40>)
 8003920:	f005 ff9b 	bl	800985a <HAL_TIM_Base_Start_IT>

	  initMotor();
 8003924:	f001 f88e 	bl	8004a44 <initMotor>

	  setLED('R');
 8003928:	2052      	movs	r0, #82	; 0x52
 800392a:	f7fd ff5d 	bl	80017e8 <setLED>

	  sensorCalibration();
 800392e:	f7ff f885 	bl	8002a3c <sensorCalibration>

	  HAL_Delay(1000);
 8003932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003936:	f003 f851 	bl	80069dc <HAL_Delay>

}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2001f380 	.word	0x2001f380
 8003944:	2001f468 	.word	0x2001f468

08003948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394a:	b085      	sub	sp, #20
 800394c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800394e:	f002 ffd3 	bl	80068f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003952:	f000 fb25 	bl	8003fa0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003956:	f000 ffb3 	bl	80048c0 <MX_GPIO_Init>
  MX_DMA_Init();
 800395a:	f000 ff89 	bl	8004870 <MX_DMA_Init>
  MX_TIM1_Init();
 800395e:	f000 fd39 	bl	80043d4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8003962:	f000 fdb9 	bl	80044d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003966:	f000 fe0b 	bl	8004580 <MX_TIM4_Init>
  MX_TIM8_Init();
 800396a:	f000 fec7 	bl	80046fc <MX_TIM8_Init>
  MX_ADC1_Init();
 800396e:	f000 fb81 	bl	8004074 <MX_ADC1_Init>
  MX_I2C1_Init();
 8003972:	f000 fccb 	bl	800430c <MX_I2C1_Init>
  MX_SPI3_Init();
 8003976:	f000 fcf7 	bl	8004368 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800397a:	f000 ff4f 	bl	800481c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 800397e:	f000 fe53 	bl	8004628 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003982:	f000 fe87 	bl	8004694 <MX_TIM7_Init>
  MX_ADC2_Init();
 8003986:	f000 fbd5 	bl	8004134 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 800398a:	f7ff ffbb 	bl	8003904 <init>

  bool running_flag = false;
 800398e:	2300      	movs	r3, #0
 8003990:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003992:	204c      	movs	r0, #76	; 0x4c
 8003994:	f002 fea2 	bl	80066dc <getSwitchStatus>
 8003998:	4603      	mov	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d109      	bne.n	80039b2 <main+0x6a>
 800399e:	4bb7      	ldr	r3, [pc, #732]	; (8003c7c <main+0x334>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d105      	bne.n	80039b2 <main+0x6a>
		  timer = 0;
 80039a6:	4bb6      	ldr	r3, [pc, #728]	; (8003c80 <main+0x338>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	601a      	str	r2, [r3, #0]
		  sw = 1;
 80039ac:	4bb3      	ldr	r3, [pc, #716]	; (8003c7c <main+0x334>)
 80039ae:	2201      	movs	r2, #1
 80039b0:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 80039b2:	204c      	movs	r0, #76	; 0x4c
 80039b4:	f002 fe92 	bl	80066dc <getSwitchStatus>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d10a      	bne.n	80039d4 <main+0x8c>
 80039be:	4bb0      	ldr	r3, [pc, #704]	; (8003c80 <main+0x338>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b14      	cmp	r3, #20
 80039c4:	d906      	bls.n	80039d4 <main+0x8c>
 80039c6:	4bad      	ldr	r3, [pc, #692]	; (8003c7c <main+0x334>)
 80039c8:	881b      	ldrh	r3, [r3, #0]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d102      	bne.n	80039d4 <main+0x8c>
		  sw = 2;
 80039ce:	4bab      	ldr	r3, [pc, #684]	; (8003c7c <main+0x334>)
 80039d0:	2202      	movs	r2, #2
 80039d2:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 80039d4:	4baa      	ldr	r3, [pc, #680]	; (8003c80 <main+0x338>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b28      	cmp	r3, #40	; 0x28
 80039da:	d906      	bls.n	80039ea <main+0xa2>
 80039dc:	4ba7      	ldr	r3, [pc, #668]	; (8003c7c <main+0x334>)
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d102      	bne.n	80039ea <main+0xa2>
		  sw = 0;
 80039e4:	4ba5      	ldr	r3, [pc, #660]	; (8003c7c <main+0x334>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 80039ea:	204c      	movs	r0, #76	; 0x4c
 80039ec:	f002 fe76 	bl	80066dc <getSwitchStatus>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10c      	bne.n	8003a10 <main+0xc8>
 80039f6:	4ba1      	ldr	r3, [pc, #644]	; (8003c7c <main+0x334>)
 80039f8:	881b      	ldrh	r3, [r3, #0]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d108      	bne.n	8003a10 <main+0xc8>
		  //mode_selector++;
		  soiya++;
 80039fe:	4ba1      	ldr	r3, [pc, #644]	; (8003c84 <main+0x33c>)
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	3301      	adds	r3, #1
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	4b9f      	ldr	r3, [pc, #636]	; (8003c84 <main+0x33c>)
 8003a08:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 8003a0a:	4b9c      	ldr	r3, [pc, #624]	; (8003c7c <main+0x334>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 8003a10:	2052      	movs	r0, #82	; 0x52
 8003a12:	f002 fe63 	bl	80066dc <getSwitchStatus>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d109      	bne.n	8003a30 <main+0xe8>
 8003a1c:	4b9a      	ldr	r3, [pc, #616]	; (8003c88 <main+0x340>)
 8003a1e:	881b      	ldrh	r3, [r3, #0]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d105      	bne.n	8003a30 <main+0xe8>
	  	  timer = 0;
 8003a24:	4b96      	ldr	r3, [pc, #600]	; (8003c80 <main+0x338>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 8003a2a:	4b97      	ldr	r3, [pc, #604]	; (8003c88 <main+0x340>)
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8003a30:	2052      	movs	r0, #82	; 0x52
 8003a32:	f002 fe53 	bl	80066dc <getSwitchStatus>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d10a      	bne.n	8003a52 <main+0x10a>
 8003a3c:	4b90      	ldr	r3, [pc, #576]	; (8003c80 <main+0x338>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b14      	cmp	r3, #20
 8003a42:	d906      	bls.n	8003a52 <main+0x10a>
 8003a44:	4b90      	ldr	r3, [pc, #576]	; (8003c88 <main+0x340>)
 8003a46:	881b      	ldrh	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d102      	bne.n	8003a52 <main+0x10a>
	  	  sw2 = 2;
 8003a4c:	4b8e      	ldr	r3, [pc, #568]	; (8003c88 <main+0x340>)
 8003a4e:	2202      	movs	r2, #2
 8003a50:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8003a52:	4b8b      	ldr	r3, [pc, #556]	; (8003c80 <main+0x338>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b28      	cmp	r3, #40	; 0x28
 8003a58:	d906      	bls.n	8003a68 <main+0x120>
 8003a5a:	4b8b      	ldr	r3, [pc, #556]	; (8003c88 <main+0x340>)
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d102      	bne.n	8003a68 <main+0x120>
	  	  sw2 = 0;
 8003a62:	4b89      	ldr	r3, [pc, #548]	; (8003c88 <main+0x340>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8003a68:	2052      	movs	r0, #82	; 0x52
 8003a6a:	f002 fe37 	bl	80066dc <getSwitchStatus>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10c      	bne.n	8003a8e <main+0x146>
 8003a74:	4b84      	ldr	r3, [pc, #528]	; (8003c88 <main+0x340>)
 8003a76:	881b      	ldrh	r3, [r3, #0]
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d108      	bne.n	8003a8e <main+0x146>
	  	  cnt++;
 8003a7c:	4b83      	ldr	r3, [pc, #524]	; (8003c8c <main+0x344>)
 8003a7e:	881b      	ldrh	r3, [r3, #0]
 8003a80:	3301      	adds	r3, #1
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	4b81      	ldr	r3, [pc, #516]	; (8003c8c <main+0x344>)
 8003a86:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8003a88:	4b7f      	ldr	r3, [pc, #508]	; (8003c88 <main+0x340>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 8003a8e:	4b7f      	ldr	r3, [pc, #508]	; (8003c8c <main+0x344>)
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d902      	bls.n	8003a9c <main+0x154>
		  cnt = 0;
 8003a96:	4b7d      	ldr	r3, [pc, #500]	; (8003c8c <main+0x344>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8003a9c:	4b7b      	ldr	r3, [pc, #492]	; (8003c8c <main+0x344>)
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <main+0x174>
		  HAL_Delay(1000);
 8003aa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003aa8:	f002 ff98 	bl	80069dc <HAL_Delay>
		  running_flag = true;
 8003aac:	2301      	movs	r3, #1
 8003aae:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 8003ab0:	4b77      	ldr	r3, [pc, #476]	; (8003c90 <main+0x348>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 8003ab6:	4b75      	ldr	r3, [pc, #468]	; (8003c8c <main+0x344>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	f083 0301 	eor.w	r3, r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <main+0x188>
		  stopLineTrace();
 8003ac8:	f7fe fb3a 	bl	8002140 <stopLineTrace>
		  stopVelocityControl();
 8003acc:	f7ff fe9a 	bl	8003804 <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){//goal判定
 8003ad0:	f002 f9da 	bl	8005e88 <getgoalStatus>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d007      	beq.n	8003aea <main+0x1a2>
		  running_flag = false;
 8003ada:	2300      	movs	r3, #0
 8003adc:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 8003ade:	4b6b      	ldr	r3, [pc, #428]	; (8003c8c <main+0x344>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f001 f879 	bl	8004bdc <setsuctionMotor>
	  /*if(isTargetDistance(10) == true){
		  cnt2++;
		  clearDistance10mm();
	  }*/

	  if(soiya >= 12){
 8003aea:	4b66      	ldr	r3, [pc, #408]	; (8003c84 <main+0x33c>)
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	2b0b      	cmp	r3, #11
 8003af0:	d902      	bls.n	8003af8 <main+0x1b0>
		  soiya = 0;
 8003af2:	4b64      	ldr	r3, [pc, #400]	; (8003c84 <main+0x33c>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 8003af8:	4b62      	ldr	r3, [pc, #392]	; (8003c84 <main+0x33c>)
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	2b0b      	cmp	r3, #11
 8003afe:	f200 822d 	bhi.w	8003f5c <main+0x614>
 8003b02:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <main+0x1c0>)
 8003b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b08:	08003b39 	.word	0x08003b39
 8003b0c:	08003b5d 	.word	0x08003b5d
 8003b10:	08003b93 	.word	0x08003b93
 8003b14:	08003bd7 	.word	0x08003bd7
 8003b18:	08003c21 	.word	0x08003c21
 8003b1c:	08003cad 	.word	0x08003cad
 8003b20:	08003d07 	.word	0x08003d07
 8003b24:	08003d61 	.word	0x08003d61
 8003b28:	08003dbb 	.word	0x08003dbb
 8003b2c:	08003e15 	.word	0x08003e15
 8003b30:	08003e6f 	.word	0x08003e6f
 8003b34:	08003ec9 	.word	0x08003ec9

			  case 0:
				  setLED('W');
 8003b38:	2057      	movs	r0, #87	; 0x57
 8003b3a:	f7fd fe55 	bl	80017e8 <setLED>
				  setLED2('R');
 8003b3e:	2052      	movs	r0, #82	; 0x52
 8003b40:	f7fd ff20 	bl	8001984 <setLED2>
				  printf("0\r\n");
 8003b44:	4853      	ldr	r0, [pc, #332]	; (8003c94 <main+0x34c>)
 8003b46:	f008 f8c9 	bl	800bcdc <puts>

				  if(running_flag == true){
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8207 	beq.w	8003f60 <main+0x618>

				  		  setsuctionMotor(500);
 8003b52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b56:	f001 f841 	bl	8004bdc <setsuctionMotor>
				  }

				  break;
 8003b5a:	e201      	b.n	8003f60 <main+0x618>

			  case 1:
				  setLED('G');
 8003b5c:	2047      	movs	r0, #71	; 0x47
 8003b5e:	f7fd fe43 	bl	80017e8 <setLED>
				  setLED2('G');
 8003b62:	2047      	movs	r0, #71	; 0x47
 8003b64:	f7fd ff0e 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 81fa 	beq.w	8003f64 <main+0x61c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8003b70:	f7fd fc9a 	bl	80014a8 <clearspeedcount>

					      //setVelocityRange(0, 0);
						  setTargetVelocity(0.0);
 8003b74:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8003c98 <main+0x350>
 8003b78:	f7ff fd94 	bl	80036a4 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(500);
 8003b7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b80:	f001 f82c 	bl	8004bdc <setsuctionMotor>

						  HAL_Delay(1500);
 8003b84:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003b88:	f002 ff28 	bl	80069dc <HAL_Delay>

						  running();
 8003b8c:	f001 f956 	bl	8004e3c <running>
				  }

				  break;
 8003b90:	e1e8      	b.n	8003f64 <main+0x61c>

			  case 2:
				  setLED('Y');
 8003b92:	2059      	movs	r0, #89	; 0x59
 8003b94:	f7fd fe28 	bl	80017e8 <setLED>
				  setLED2('R');
 8003b98:	2052      	movs	r0, #82	; 0x52
 8003b9a:	f7fd fef3 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 81e1 	beq.w	8003f68 <main+0x620>
						  //startLineTrace();

					      clearspeedcount();
 8003ba6:	f7fd fc7f 	bl	80014a8 <clearspeedcount>

					      IMU_average();
 8003baa:	f7fd fdcb 	bl	8001744 <IMU_average>

					      setRunMode(1);
 8003bae:	2001      	movs	r0, #1
 8003bb0:	f001 f85c 	bl	8004c6c <setRunMode>

					      setVelocityRange(1.8, 1.8);
 8003bb4:	eddf 0a39 	vldr	s1, [pc, #228]	; 8003c9c <main+0x354>
 8003bb8:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003c9c <main+0x354>
 8003bbc:	f002 f970 	bl	8005ea0 <setVelocityRange>

						  setsuctionMotor(500);
 8003bc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bc4:	f001 f80a 	bl	8004bdc <setsuctionMotor>

						  HAL_Delay(1000);
 8003bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bcc:	f002 ff06 	bl	80069dc <HAL_Delay>

						  running();
 8003bd0:	f001 f934 	bl	8004e3c <running>
				  }

				  break;
 8003bd4:	e1c8      	b.n	8003f68 <main+0x620>

			  case 3:
				  setLED('Y');
 8003bd6:	2059      	movs	r0, #89	; 0x59
 8003bd8:	f7fd fe06 	bl	80017e8 <setLED>
				  setLED2('G');
 8003bdc:	2047      	movs	r0, #71	; 0x47
 8003bde:	f7fd fed1 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003be2:	79fb      	ldrb	r3, [r7, #7]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 81c1 	beq.w	8003f6c <main+0x624>
						  //startLineTrace();

						  clearspeedcount();
 8003bea:	f7fd fc5d 	bl	80014a8 <clearspeedcount>

						  IMU_average();
 8003bee:	f7fd fda9 	bl	8001744 <IMU_average>

						  setRunMode(1);
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f001 f83a 	bl	8004c6c <setRunMode>
						  setrunmode(1);
 8003bf8:	2001      	movs	r0, #1
 8003bfa:	f7ff fe1b 	bl	8003834 <setrunmode>

						  setVelocityRange(2.2, 2.2);
 8003bfe:	eddf 0a29 	vldr	s1, [pc, #164]	; 8003ca4 <main+0x35c>
 8003c02:	ed9f 0a28 	vldr	s0, [pc, #160]	; 8003ca4 <main+0x35c>
 8003c06:	f002 f94b 	bl	8005ea0 <setVelocityRange>

						  setsuctionMotor(500);
 8003c0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c0e:	f000 ffe5 	bl	8004bdc <setsuctionMotor>

						  HAL_Delay(1000);
 8003c12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c16:	f002 fee1 	bl	80069dc <HAL_Delay>

						  running();
 8003c1a:	f001 f90f 	bl	8004e3c <running>
				  }

				  break;
 8003c1e:	e1a5      	b.n	8003f6c <main+0x624>

			  case 4:
				  setLED('C');
 8003c20:	2043      	movs	r0, #67	; 0x43
 8003c22:	f7fd fde1 	bl	80017e8 <setLED>
				  setLED2('R');
 8003c26:	2052      	movs	r0, #82	; 0x52
 8003c28:	f7fd feac 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 819e 	beq.w	8003f70 <main+0x628>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8003c34:	f7fd fc38 	bl	80014a8 <clearspeedcount>

					      setRunMode(2);
 8003c38:	2002      	movs	r0, #2
 8003c3a:	f001 f817 	bl	8004c6c <setRunMode>
					      setrunmode(2);
 8003c3e:	2002      	movs	r0, #2
 8003c40:	f7ff fdf8 	bl	8003834 <setrunmode>

					      setVelocityRange(2.0, 5.0);
 8003c44:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003c48:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003c4c:	f002 f928 	bl	8005ea0 <setVelocityRange>
					      setAccDec(6, 2);
 8003c50:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8003c54:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8003c58:	f002 f93a 	bl	8005ed0 <setAccDec>
					      setStraightRadius(1000); //Do Not Change
 8003c5c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8003ca8 <main+0x360>
 8003c60:	f002 f94e 	bl	8005f00 <setStraightRadius>

						  setsuctionMotor(500);
 8003c64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003c68:	f000 ffb8 	bl	8004bdc <setsuctionMotor>

						  HAL_Delay(1500);
 8003c6c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003c70:	f002 feb4 	bl	80069dc <HAL_Delay>

						  running();
 8003c74:	f001 f8e2 	bl	8004e3c <running>
				  }

				  break;
 8003c78:	e17a      	b.n	8003f70 <main+0x628>
 8003c7a:	bf00      	nop
 8003c7c:	2001f400 	.word	0x2001f400
 8003c80:	2001f1e4 	.word	0x2001f1e4
 8003c84:	20016e66 	.word	0x20016e66
 8003c88:	20016e64 	.word	0x20016e64
 8003c8c:	2001f284 	.word	0x2001f284
 8003c90:	2001f22c 	.word	0x2001f22c
 8003c94:	0800f3f8 	.word	0x0800f3f8
 8003c98:	00000000 	.word	0x00000000
 8003c9c:	3fe66666 	.word	0x3fe66666
 8003ca0:	40133333 	.word	0x40133333
 8003ca4:	400ccccd 	.word	0x400ccccd
 8003ca8:	447a0000 	.word	0x447a0000

			  case 5:
				  setLED('C');
 8003cac:	2043      	movs	r0, #67	; 0x43
 8003cae:	f7fd fd9b 	bl	80017e8 <setLED>
				  setLED2('G');
 8003cb2:	2047      	movs	r0, #71	; 0x47
 8003cb4:	f7fd fe66 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 815a 	beq.w	8003f74 <main+0x62c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003cc0:	f7fd fbf2 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003cc4:	2002      	movs	r0, #2
 8003cc6:	f000 ffd1 	bl	8004c6c <setRunMode>
						  setrunmode(2);
 8003cca:	2002      	movs	r0, #2
 8003ccc:	f7ff fdb2 	bl	8003834 <setrunmode>

						  setVelocityRange(2.5, 5.0);//changeパラメータ
 8003cd0:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003cd4:	eeb0 0a04 	vmov.f32	s0, #4	; 0x40200000  2.5
 8003cd8:	f002 f8e2 	bl	8005ea0 <setVelocityRange>
						  setAccDec(7, 3);
 8003cdc:	eef0 0a08 	vmov.f32	s1, #8	; 0x40400000  3.0
 8003ce0:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8003ce4:	f002 f8f4 	bl	8005ed0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003ce8:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 8003ca8 <main+0x360>
 8003cec:	f002 f908 	bl	8005f00 <setStraightRadius>

						  setsuctionMotor(500);
 8003cf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003cf4:	f000 ff72 	bl	8004bdc <setsuctionMotor>

						  HAL_Delay(1500);
 8003cf8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003cfc:	f002 fe6e 	bl	80069dc <HAL_Delay>

						  running();
 8003d00:	f001 f89c 	bl	8004e3c <running>
				  }

				  break;
 8003d04:	e136      	b.n	8003f74 <main+0x62c>

			  case 6:
				  setLED('C');
 8003d06:	2043      	movs	r0, #67	; 0x43
 8003d08:	f7fd fd6e 	bl	80017e8 <setLED>
				  setLED2('B');
 8003d0c:	2042      	movs	r0, #66	; 0x42
 8003d0e:	f7fd fe39 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	f000 812f 	beq.w	8003f78 <main+0x630>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003d1a:	f7fd fbc5 	bl	80014a8 <clearspeedcount>

						  setRunMode(3);
 8003d1e:	2003      	movs	r0, #3
 8003d20:	f000 ffa4 	bl	8004c6c <setRunMode>
						  setrunmode(2);
 8003d24:	2002      	movs	r0, #2
 8003d26:	f7ff fd85 	bl	8003834 <setrunmode>

						  setVelocityRange(2.0, 6.0);
 8003d2a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8003d2e:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003d32:	f002 f8b5 	bl	8005ea0 <setVelocityRange>
						  setAccDec(8, 5);
 8003d36:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003d3a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8003d3e:	f002 f8c7 	bl	8005ed0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003d42:	ed1f 0a27 	vldr	s0, [pc, #-156]	; 8003ca8 <main+0x360>
 8003d46:	f002 f8db 	bl	8005f00 <setStraightRadius>

						  setsuctionMotor(500);
 8003d4a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d4e:	f000 ff45 	bl	8004bdc <setsuctionMotor>

						  HAL_Delay(1500);
 8003d52:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003d56:	f002 fe41 	bl	80069dc <HAL_Delay>

						  running();
 8003d5a:	f001 f86f 	bl	8004e3c <running>
				  }

				  break;
 8003d5e:	e10b      	b.n	8003f78 <main+0x630>

			  case 7:
				  setLED('C');
 8003d60:	2043      	movs	r0, #67	; 0x43
 8003d62:	f7fd fd41 	bl	80017e8 <setLED>
				  setLED2('W');
 8003d66:	2057      	movs	r0, #87	; 0x57
 8003d68:	f7fd fe0c 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003d6c:	79fb      	ldrb	r3, [r7, #7]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8104 	beq.w	8003f7c <main+0x634>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003d74:	f7fd fb98 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003d78:	2002      	movs	r0, #2
 8003d7a:	f000 ff77 	bl	8004c6c <setRunMode>
						  setrunmode(2);
 8003d7e:	2002      	movs	r0, #2
 8003d80:	f7ff fd58 	bl	8003834 <setrunmode>

						  setVelocityRange(2.0, 6.0);
 8003d84:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8003d88:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8003d8c:	f002 f888 	bl	8005ea0 <setVelocityRange>
						  setAccDec(8, 5);
 8003d90:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8003d94:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8003d98:	f002 f89a 	bl	8005ed0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003d9c:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 8003ca8 <main+0x360>
 8003da0:	f002 f8ae 	bl	8005f00 <setStraightRadius>

						  setsuctionMotor(500);
 8003da4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003da8:	f000 ff18 	bl	8004bdc <setsuctionMotor>

						  HAL_Delay(1500);
 8003dac:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003db0:	f002 fe14 	bl	80069dc <HAL_Delay>

						  running();
 8003db4:	f001 f842 	bl	8004e3c <running>
				  }

				  break;
 8003db8:	e0e0      	b.n	8003f7c <main+0x634>

			  case 8:
				  setLED('C');
 8003dba:	2043      	movs	r0, #67	; 0x43
 8003dbc:	f7fd fd14 	bl	80017e8 <setLED>
				  setLED2('Y');
 8003dc0:	2059      	movs	r0, #89	; 0x59
 8003dc2:	f7fd fddf 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80d9 	beq.w	8003f80 <main+0x638>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003dce:	f7fd fb6b 	bl	80014a8 <clearspeedcount>

						  setRunMode(3);
 8003dd2:	2003      	movs	r0, #3
 8003dd4:	f000 ff4a 	bl	8004c6c <setRunMode>
						  setrunmode(2);
 8003dd8:	2002      	movs	r0, #2
 8003dda:	f7ff fd2b 	bl	8003834 <setrunmode>

						  setVelocityRange(2.2, 6.0);
 8003dde:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8003de2:	ed1f 0a50 	vldr	s0, [pc, #-320]	; 8003ca4 <main+0x35c>
 8003de6:	f002 f85b 	bl	8005ea0 <setVelocityRange>
						  setAccDec(7, 4);
 8003dea:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8003dee:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8003df2:	f002 f86d 	bl	8005ed0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003df6:	ed1f 0a54 	vldr	s0, [pc, #-336]	; 8003ca8 <main+0x360>
 8003dfa:	f002 f881 	bl	8005f00 <setStraightRadius>

						  setsuctionMotor(500);
 8003dfe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e02:	f000 feeb 	bl	8004bdc <setsuctionMotor>

						  HAL_Delay(1500);
 8003e06:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003e0a:	f002 fde7 	bl	80069dc <HAL_Delay>

						  running();
 8003e0e:	f001 f815 	bl	8004e3c <running>
				  }

			  	  break;
 8003e12:	e0b5      	b.n	8003f80 <main+0x638>

			  case 9:
				  setLED('C');
 8003e14:	2043      	movs	r0, #67	; 0x43
 8003e16:	f7fd fce7 	bl	80017e8 <setLED>
				  setLED2('X');
 8003e1a:	2058      	movs	r0, #88	; 0x58
 8003e1c:	f7fd fdb2 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 80ae 	beq.w	8003f84 <main+0x63c>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

						  clearspeedcount();
 8003e28:	f7fd fb3e 	bl	80014a8 <clearspeedcount>

						  setRunMode(3);
 8003e2c:	2003      	movs	r0, #3
 8003e2e:	f000 ff1d 	bl	8004c6c <setRunMode>
						  setrunmode(2);
 8003e32:	2002      	movs	r0, #2
 8003e34:	f7ff fcfe 	bl	8003834 <setrunmode>

						  setVelocityRange(2.3, 6.5);
 8003e38:	eef1 0a0a 	vmov.f32	s1, #26	; 0x40d00000  6.5
 8003e3c:	ed1f 0a68 	vldr	s0, [pc, #-416]	; 8003ca0 <main+0x358>
 8003e40:	f002 f82e 	bl	8005ea0 <setVelocityRange>
						  setAccDec(8, 4);
 8003e44:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8003e48:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8003e4c:	f002 f840 	bl	8005ed0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003e50:	ed1f 0a6b 	vldr	s0, [pc, #-428]	; 8003ca8 <main+0x360>
 8003e54:	f002 f854 	bl	8005f00 <setStraightRadius>

						  setsuctionMotor(500);
 8003e58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e5c:	f000 febe 	bl	8004bdc <setsuctionMotor>

						  HAL_Delay(1500);
 8003e60:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8003e64:	f002 fdba 	bl	80069dc <HAL_Delay>

						  running();
 8003e68:	f000 ffe8 	bl	8004e3c <running>
				  }

				  break;
 8003e6c:	e08a      	b.n	8003f84 <main+0x63c>

			  case 10:
				  setLED('Y');
 8003e6e:	2059      	movs	r0, #89	; 0x59
 8003e70:	f7fd fcba 	bl	80017e8 <setLED>
				  setLED2('V');
 8003e74:	2056      	movs	r0, #86	; 0x56
 8003e76:	f7fd fd85 	bl	8001984 <setLED2>

				  if(running_flag == true){
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 8083 	beq.w	8003f88 <main+0x640>
						  //startLineTrace();

						  clearspeedcount();
 8003e82:	f7fd fb11 	bl	80014a8 <clearspeedcount>

						  setRunMode(2);
 8003e86:	2002      	movs	r0, #2
 8003e88:	f000 fef0 	bl	8004c6c <setRunMode>
						  setrunmode(2);
 8003e8c:	2002      	movs	r0, #2
 8003e8e:	f7ff fcd1 	bl	8003834 <setrunmode>

						  setVelocityRange(2.2, 7.0);
 8003e92:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 8003e96:	ed1f 0a7d 	vldr	s0, [pc, #-500]	; 8003ca4 <main+0x35c>
 8003e9a:	f002 f801 	bl	8005ea0 <setVelocityRange>
						  setAccDec(7, 4);
 8003e9e:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8003ea2:	eeb1 0a0c 	vmov.f32	s0, #28	; 0x40e00000  7.0
 8003ea6:	f002 f813 	bl	8005ed0 <setAccDec>
						  setStraightRadius(1000); //Do Not Change
 8003eaa:	ed1f 0a81 	vldr	s0, [pc, #-516]	; 8003ca8 <main+0x360>
 8003eae:	f002 f827 	bl	8005f00 <setStraightRadius>

						  setsuctionMotor(500);
 8003eb2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003eb6:	f000 fe91 	bl	8004bdc <setsuctionMotor>

						  HAL_Delay(1000);
 8003eba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ebe:	f002 fd8d 	bl	80069dc <HAL_Delay>

						  running();
 8003ec2:	f000 ffbb 	bl	8004e3c <running>
				  }

				  break;
 8003ec6:	e05f      	b.n	8003f88 <main+0x640>

			  case 11:
				  setLED('W');
 8003ec8:	2057      	movs	r0, #87	; 0x57
 8003eca:	f7fd fc8d 	bl	80017e8 <setLED>
				  setLED2('A');
 8003ece:	2041      	movs	r0, #65	; 0x41
 8003ed0:	f7fd fd58 	bl	8001984 <setLED2>
				  printf("6\r\n");
 8003ed4:	482e      	ldr	r0, [pc, #184]	; (8003f90 <main+0x648>)
 8003ed6:	f007 ff01 	bl	800bcdc <puts>

				  if(running_flag == true){
 8003eda:	79fb      	ldrb	r3, [r7, #7]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d055      	beq.n	8003f8c <main+0x644>
					  loadDistance();
 8003ee0:	f7ff f8e4 	bl	80030ac <loadDistance>
					  loadTheta();
 8003ee4:	f7ff f920 	bl	8003128 <loadTheta>
					  loadCross();
 8003ee8:	f7ff f95c 	bl	80031a4 <loadCross>
					  loadSide();
 8003eec:	f7ff f998 	bl	8003220 <loadSide>
					  loadDebug();
 8003ef0:	f7ff f9d4 	bl	800329c <loadDebug>
					  for(uint16_t i = 0; i < getSideLogSize(); i++){
						 printf("%f\r\n", getSideLog(i));
					  }*/


					  printf("TargetVelocity, CurrentVelocity\r\n");
 8003ef4:	4827      	ldr	r0, [pc, #156]	; (8003f94 <main+0x64c>)
 8003ef6:	f007 fef1 	bl	800bcdc <puts>
					  uint16_t size = getDebugLogSize();
 8003efa:	f7ff f8cb 	bl	8003094 <getDebugLogSize>
 8003efe:	4603      	mov	r3, r0
 8003f00:	807b      	strh	r3, [r7, #2]
					  for(uint16_t i = 0; i < size; i = i+2){
 8003f02:	2300      	movs	r3, #0
 8003f04:	80bb      	strh	r3, [r7, #4]
 8003f06:	e021      	b.n	8003f4c <main+0x604>
						 printf("%f, %f\r\n", getDebugLog(i), getDebugLog(i + 1));
 8003f08:	88bb      	ldrh	r3, [r7, #4]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f7ff fa5a 	bl	80033c4 <getDebugLog>
 8003f10:	ee10 3a10 	vmov	r3, s0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fc fb17 	bl	8000548 <__aeabi_f2d>
 8003f1a:	4605      	mov	r5, r0
 8003f1c:	460e      	mov	r6, r1
 8003f1e:	88bb      	ldrh	r3, [r7, #4]
 8003f20:	3301      	adds	r3, #1
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7ff fa4d 	bl	80033c4 <getDebugLog>
 8003f2a:	ee10 3a10 	vmov	r3, s0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc fb0a 	bl	8000548 <__aeabi_f2d>
 8003f34:	4603      	mov	r3, r0
 8003f36:	460c      	mov	r4, r1
 8003f38:	e9cd 3400 	strd	r3, r4, [sp]
 8003f3c:	462a      	mov	r2, r5
 8003f3e:	4633      	mov	r3, r6
 8003f40:	4815      	ldr	r0, [pc, #84]	; (8003f98 <main+0x650>)
 8003f42:	f007 fe57 	bl	800bbf4 <iprintf>
					  for(uint16_t i = 0; i < size; i = i+2){
 8003f46:	88bb      	ldrh	r3, [r7, #4]
 8003f48:	3302      	adds	r3, #2
 8003f4a:	80bb      	strh	r3, [r7, #4]
 8003f4c:	88ba      	ldrh	r2, [r7, #4]
 8003f4e:	887b      	ldrh	r3, [r7, #2]
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d3d9      	bcc.n	8003f08 <main+0x5c0>
					  }

					  printf("9999, 9999\r\n");
 8003f54:	4811      	ldr	r0, [pc, #68]	; (8003f9c <main+0x654>)
 8003f56:	f007 fec1 	bl	800bcdc <puts>
				  }

				  break;
 8003f5a:	e017      	b.n	8003f8c <main+0x644>

			  default:
				  break;
 8003f5c:	bf00      	nop
 8003f5e:	e518      	b.n	8003992 <main+0x4a>
				  break;
 8003f60:	bf00      	nop
 8003f62:	e516      	b.n	8003992 <main+0x4a>
				  break;
 8003f64:	bf00      	nop
 8003f66:	e514      	b.n	8003992 <main+0x4a>
				  break;
 8003f68:	bf00      	nop
 8003f6a:	e512      	b.n	8003992 <main+0x4a>
				  break;
 8003f6c:	bf00      	nop
 8003f6e:	e510      	b.n	8003992 <main+0x4a>
				  break;
 8003f70:	bf00      	nop
 8003f72:	e50e      	b.n	8003992 <main+0x4a>
				  break;
 8003f74:	bf00      	nop
 8003f76:	e50c      	b.n	8003992 <main+0x4a>
				  break;
 8003f78:	bf00      	nop
 8003f7a:	e50a      	b.n	8003992 <main+0x4a>
				  break;
 8003f7c:	bf00      	nop
 8003f7e:	e508      	b.n	8003992 <main+0x4a>
			  	  break;
 8003f80:	bf00      	nop
 8003f82:	e506      	b.n	8003992 <main+0x4a>
				  break;
 8003f84:	bf00      	nop
 8003f86:	e504      	b.n	8003992 <main+0x4a>
				  break;
 8003f88:	bf00      	nop
 8003f8a:	e502      	b.n	8003992 <main+0x4a>
				  break;
 8003f8c:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8003f8e:	e500      	b.n	8003992 <main+0x4a>
 8003f90:	0800f3fc 	.word	0x0800f3fc
 8003f94:	0800f400 	.word	0x0800f400
 8003f98:	0800f424 	.word	0x0800f424
 8003f9c:	0800f430 	.word	0x0800f430

08003fa0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b094      	sub	sp, #80	; 0x50
 8003fa4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003fa6:	f107 0320 	add.w	r3, r7, #32
 8003faa:	2230      	movs	r2, #48	; 0x30
 8003fac:	2100      	movs	r1, #0
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f006 ffd9 	bl	800af66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003fb4:	f107 030c 	add.w	r3, r7, #12
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	605a      	str	r2, [r3, #4]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	60da      	str	r2, [r3, #12]
 8003fc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	4b28      	ldr	r3, [pc, #160]	; (800406c <SystemClock_Config+0xcc>)
 8003fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fcc:	4a27      	ldr	r2, [pc, #156]	; (800406c <SystemClock_Config+0xcc>)
 8003fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd4:	4b25      	ldr	r3, [pc, #148]	; (800406c <SystemClock_Config+0xcc>)
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	60bb      	str	r3, [r7, #8]
 8003fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	607b      	str	r3, [r7, #4]
 8003fe4:	4b22      	ldr	r3, [pc, #136]	; (8004070 <SystemClock_Config+0xd0>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a21      	ldr	r2, [pc, #132]	; (8004070 <SystemClock_Config+0xd0>)
 8003fea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	4b1f      	ldr	r3, [pc, #124]	; (8004070 <SystemClock_Config+0xd0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004000:	2301      	movs	r3, #1
 8004002:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004004:	2310      	movs	r3, #16
 8004006:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004008:	2302      	movs	r3, #2
 800400a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800400c:	2300      	movs	r3, #0
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004010:	2308      	movs	r3, #8
 8004012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004014:	23a8      	movs	r3, #168	; 0xa8
 8004016:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004018:	2302      	movs	r3, #2
 800401a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800401c:	2304      	movs	r3, #4
 800401e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004020:	f107 0320 	add.w	r3, r7, #32
 8004024:	4618      	mov	r0, r3
 8004026:	f004 fa5d 	bl	80084e4 <HAL_RCC_OscConfig>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004030:	f000 fd04 	bl	8004a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004034:	230f      	movs	r3, #15
 8004036:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004038:	2302      	movs	r3, #2
 800403a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800403c:	2300      	movs	r3, #0
 800403e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004040:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004044:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800404a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800404c:	f107 030c 	add.w	r3, r7, #12
 8004050:	2105      	movs	r1, #5
 8004052:	4618      	mov	r0, r3
 8004054:	f004 fcb6 	bl	80089c4 <HAL_RCC_ClockConfig>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800405e:	f000 fced 	bl	8004a3c <Error_Handler>
  }
}
 8004062:	bf00      	nop
 8004064:	3750      	adds	r7, #80	; 0x50
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	40007000 	.word	0x40007000

08004074 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800407a:	463b      	mov	r3, r7
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004086:	4b28      	ldr	r3, [pc, #160]	; (8004128 <MX_ADC1_Init+0xb4>)
 8004088:	4a28      	ldr	r2, [pc, #160]	; (800412c <MX_ADC1_Init+0xb8>)
 800408a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800408c:	4b26      	ldr	r3, [pc, #152]	; (8004128 <MX_ADC1_Init+0xb4>)
 800408e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004092:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004094:	4b24      	ldr	r3, [pc, #144]	; (8004128 <MX_ADC1_Init+0xb4>)
 8004096:	2200      	movs	r2, #0
 8004098:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800409a:	4b23      	ldr	r3, [pc, #140]	; (8004128 <MX_ADC1_Init+0xb4>)
 800409c:	2201      	movs	r2, #1
 800409e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80040a0:	4b21      	ldr	r3, [pc, #132]	; (8004128 <MX_ADC1_Init+0xb4>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <MX_ADC1_Init+0xb4>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040ae:	4b1e      	ldr	r3, [pc, #120]	; (8004128 <MX_ADC1_Init+0xb4>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040b4:	4b1c      	ldr	r3, [pc, #112]	; (8004128 <MX_ADC1_Init+0xb4>)
 80040b6:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <MX_ADC1_Init+0xbc>)
 80040b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040ba:	4b1b      	ldr	r3, [pc, #108]	; (8004128 <MX_ADC1_Init+0xb4>)
 80040bc:	2200      	movs	r2, #0
 80040be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <MX_ADC1_Init+0xb4>)
 80040c2:	2202      	movs	r2, #2
 80040c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <MX_ADC1_Init+0xb4>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040ce:	4b16      	ldr	r3, [pc, #88]	; (8004128 <MX_ADC1_Init+0xb4>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80040d4:	4814      	ldr	r0, [pc, #80]	; (8004128 <MX_ADC1_Init+0xb4>)
 80040d6:	f002 fca3 	bl	8006a20 <HAL_ADC_Init>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d001      	beq.n	80040e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80040e0:	f000 fcac 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80040e4:	230c      	movs	r3, #12
 80040e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80040e8:	2301      	movs	r3, #1
 80040ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80040ec:	2307      	movs	r3, #7
 80040ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040f0:	463b      	mov	r3, r7
 80040f2:	4619      	mov	r1, r3
 80040f4:	480c      	ldr	r0, [pc, #48]	; (8004128 <MX_ADC1_Init+0xb4>)
 80040f6:	f002 fde7 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8004100:	f000 fc9c 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004104:	230d      	movs	r3, #13
 8004106:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8004108:	2302      	movs	r3, #2
 800410a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800410c:	463b      	mov	r3, r7
 800410e:	4619      	mov	r1, r3
 8004110:	4805      	ldr	r0, [pc, #20]	; (8004128 <MX_ADC1_Init+0xb4>)
 8004112:	f002 fdd9 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800411c:	f000 fc8e 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	2001f140 	.word	0x2001f140
 800412c:	40012000 	.word	0x40012000
 8004130:	0f000001 	.word	0x0f000001

08004134 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800413a:	463b      	mov	r3, r7
 800413c:	2200      	movs	r2, #0
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	609a      	str	r2, [r3, #8]
 8004144:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8004146:	4b6e      	ldr	r3, [pc, #440]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004148:	4a6e      	ldr	r2, [pc, #440]	; (8004304 <MX_ADC2_Init+0x1d0>)
 800414a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800414c:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <MX_ADC2_Init+0x1cc>)
 800414e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004152:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004154:	4b6a      	ldr	r3, [pc, #424]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004156:	2200      	movs	r2, #0
 8004158:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800415a:	4b69      	ldr	r3, [pc, #420]	; (8004300 <MX_ADC2_Init+0x1cc>)
 800415c:	2201      	movs	r2, #1
 800415e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004160:	4b67      	ldr	r3, [pc, #412]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004162:	2201      	movs	r2, #1
 8004164:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004166:	4b66      	ldr	r3, [pc, #408]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800416e:	4b64      	ldr	r3, [pc, #400]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004170:	2200      	movs	r2, #0
 8004172:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004174:	4b62      	ldr	r3, [pc, #392]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004176:	4a64      	ldr	r2, [pc, #400]	; (8004308 <MX_ADC2_Init+0x1d4>)
 8004178:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800417a:	4b61      	ldr	r3, [pc, #388]	; (8004300 <MX_ADC2_Init+0x1cc>)
 800417c:	2200      	movs	r2, #0
 800417e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8004180:	4b5f      	ldr	r3, [pc, #380]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004182:	220c      	movs	r2, #12
 8004184:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004186:	4b5e      	ldr	r3, [pc, #376]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800418e:	4b5c      	ldr	r3, [pc, #368]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004190:	2201      	movs	r2, #1
 8004192:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004194:	485a      	ldr	r0, [pc, #360]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004196:	f002 fc43 	bl	8006a20 <HAL_ADC_Init>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80041a0:	f000 fc4c 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80041a8:	2301      	movs	r3, #1
 80041aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80041ac:	2307      	movs	r3, #7
 80041ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041b0:	463b      	mov	r3, r7
 80041b2:	4619      	mov	r1, r3
 80041b4:	4852      	ldr	r0, [pc, #328]	; (8004300 <MX_ADC2_Init+0x1cc>)
 80041b6:	f002 fd87 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80041c0:	f000 fc3c 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80041c4:	2301      	movs	r3, #1
 80041c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80041c8:	2302      	movs	r3, #2
 80041ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041cc:	463b      	mov	r3, r7
 80041ce:	4619      	mov	r1, r3
 80041d0:	484b      	ldr	r0, [pc, #300]	; (8004300 <MX_ADC2_Init+0x1cc>)
 80041d2:	f002 fd79 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80041dc:	f000 fc2e 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80041e0:	2302      	movs	r3, #2
 80041e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80041e4:	2303      	movs	r3, #3
 80041e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80041e8:	463b      	mov	r3, r7
 80041ea:	4619      	mov	r1, r3
 80041ec:	4844      	ldr	r0, [pc, #272]	; (8004300 <MX_ADC2_Init+0x1cc>)
 80041ee:	f002 fd6b 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d001      	beq.n	80041fc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80041f8:	f000 fc20 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80041fc:	2303      	movs	r3, #3
 80041fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004200:	2304      	movs	r3, #4
 8004202:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004204:	463b      	mov	r3, r7
 8004206:	4619      	mov	r1, r3
 8004208:	483d      	ldr	r0, [pc, #244]	; (8004300 <MX_ADC2_Init+0x1cc>)
 800420a:	f002 fd5d 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8004214:	f000 fc12 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004218:	2304      	movs	r3, #4
 800421a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800421c:	2305      	movs	r3, #5
 800421e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004220:	463b      	mov	r3, r7
 8004222:	4619      	mov	r1, r3
 8004224:	4836      	ldr	r0, [pc, #216]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004226:	f002 fd4f 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8004230:	f000 fc04 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8004234:	2305      	movs	r3, #5
 8004236:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004238:	2306      	movs	r3, #6
 800423a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800423c:	463b      	mov	r3, r7
 800423e:	4619      	mov	r1, r3
 8004240:	482f      	ldr	r0, [pc, #188]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004242:	f002 fd41 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800424c:	f000 fbf6 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8004250:	2306      	movs	r3, #6
 8004252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8004254:	2307      	movs	r3, #7
 8004256:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004258:	463b      	mov	r3, r7
 800425a:	4619      	mov	r1, r3
 800425c:	4828      	ldr	r0, [pc, #160]	; (8004300 <MX_ADC2_Init+0x1cc>)
 800425e:	f002 fd33 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8004268:	f000 fbe8 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800426c:	2307      	movs	r3, #7
 800426e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8004270:	2308      	movs	r3, #8
 8004272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004274:	463b      	mov	r3, r7
 8004276:	4619      	mov	r1, r3
 8004278:	4821      	ldr	r0, [pc, #132]	; (8004300 <MX_ADC2_Init+0x1cc>)
 800427a:	f002 fd25 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8004284:	f000 fbda 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004288:	2308      	movs	r3, #8
 800428a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800428c:	2309      	movs	r3, #9
 800428e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004290:	463b      	mov	r3, r7
 8004292:	4619      	mov	r1, r3
 8004294:	481a      	ldr	r0, [pc, #104]	; (8004300 <MX_ADC2_Init+0x1cc>)
 8004296:	f002 fd17 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80042a0:	f000 fbcc 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80042a4:	2309      	movs	r3, #9
 80042a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80042a8:	230a      	movs	r3, #10
 80042aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042ac:	463b      	mov	r3, r7
 80042ae:	4619      	mov	r1, r3
 80042b0:	4813      	ldr	r0, [pc, #76]	; (8004300 <MX_ADC2_Init+0x1cc>)
 80042b2:	f002 fd09 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80042bc:	f000 fbbe 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80042c0:	230e      	movs	r3, #14
 80042c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80042c4:	230b      	movs	r3, #11
 80042c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042c8:	463b      	mov	r3, r7
 80042ca:	4619      	mov	r1, r3
 80042cc:	480c      	ldr	r0, [pc, #48]	; (8004300 <MX_ADC2_Init+0x1cc>)
 80042ce:	f002 fcfb 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80042d8:	f000 fbb0 	bl	8004a3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80042dc:	230f      	movs	r3, #15
 80042de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80042e0:	230c      	movs	r3, #12
 80042e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80042e4:	463b      	mov	r3, r7
 80042e6:	4619      	mov	r1, r3
 80042e8:	4805      	ldr	r0, [pc, #20]	; (8004300 <MX_ADC2_Init+0x1cc>)
 80042ea:	f002 fced 	bl	8006cc8 <HAL_ADC_ConfigChannel>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80042f4:	f000 fba2 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	2001f0f0 	.word	0x2001f0f0
 8004304:	40012100 	.word	0x40012100
 8004308:	0f000001 	.word	0x0f000001

0800430c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004310:	4b12      	ldr	r3, [pc, #72]	; (800435c <MX_I2C1_Init+0x50>)
 8004312:	4a13      	ldr	r2, [pc, #76]	; (8004360 <MX_I2C1_Init+0x54>)
 8004314:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8004316:	4b11      	ldr	r3, [pc, #68]	; (800435c <MX_I2C1_Init+0x50>)
 8004318:	4a12      	ldr	r2, [pc, #72]	; (8004364 <MX_I2C1_Init+0x58>)
 800431a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800431c:	4b0f      	ldr	r3, [pc, #60]	; (800435c <MX_I2C1_Init+0x50>)
 800431e:	2200      	movs	r2, #0
 8004320:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004322:	4b0e      	ldr	r3, [pc, #56]	; (800435c <MX_I2C1_Init+0x50>)
 8004324:	2200      	movs	r2, #0
 8004326:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004328:	4b0c      	ldr	r3, [pc, #48]	; (800435c <MX_I2C1_Init+0x50>)
 800432a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800432e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004330:	4b0a      	ldr	r3, [pc, #40]	; (800435c <MX_I2C1_Init+0x50>)
 8004332:	2200      	movs	r2, #0
 8004334:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004336:	4b09      	ldr	r3, [pc, #36]	; (800435c <MX_I2C1_Init+0x50>)
 8004338:	2200      	movs	r2, #0
 800433a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800433c:	4b07      	ldr	r3, [pc, #28]	; (800435c <MX_I2C1_Init+0x50>)
 800433e:	2200      	movs	r2, #0
 8004340:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004342:	4b06      	ldr	r3, [pc, #24]	; (800435c <MX_I2C1_Init+0x50>)
 8004344:	2200      	movs	r2, #0
 8004346:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004348:	4804      	ldr	r0, [pc, #16]	; (800435c <MX_I2C1_Init+0x50>)
 800434a:	f003 ff93 	bl	8008274 <HAL_I2C_Init>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004354:	f000 fb72 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004358:	bf00      	nop
 800435a:	bd80      	pop	{r7, pc}
 800435c:	2001f230 	.word	0x2001f230
 8004360:	40005400 	.word	0x40005400
 8004364:	000186a0 	.word	0x000186a0

08004368 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800436c:	4b17      	ldr	r3, [pc, #92]	; (80043cc <MX_SPI3_Init+0x64>)
 800436e:	4a18      	ldr	r2, [pc, #96]	; (80043d0 <MX_SPI3_Init+0x68>)
 8004370:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004372:	4b16      	ldr	r3, [pc, #88]	; (80043cc <MX_SPI3_Init+0x64>)
 8004374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004378:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800437a:	4b14      	ldr	r3, [pc, #80]	; (80043cc <MX_SPI3_Init+0x64>)
 800437c:	2200      	movs	r2, #0
 800437e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004380:	4b12      	ldr	r3, [pc, #72]	; (80043cc <MX_SPI3_Init+0x64>)
 8004382:	2200      	movs	r2, #0
 8004384:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004386:	4b11      	ldr	r3, [pc, #68]	; (80043cc <MX_SPI3_Init+0x64>)
 8004388:	2200      	movs	r2, #0
 800438a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <MX_SPI3_Init+0x64>)
 800438e:	2200      	movs	r2, #0
 8004390:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004392:	4b0e      	ldr	r3, [pc, #56]	; (80043cc <MX_SPI3_Init+0x64>)
 8004394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004398:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800439a:	4b0c      	ldr	r3, [pc, #48]	; (80043cc <MX_SPI3_Init+0x64>)
 800439c:	2228      	movs	r2, #40	; 0x28
 800439e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <MX_SPI3_Init+0x64>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80043a6:	4b09      	ldr	r3, [pc, #36]	; (80043cc <MX_SPI3_Init+0x64>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043ac:	4b07      	ldr	r3, [pc, #28]	; (80043cc <MX_SPI3_Init+0x64>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80043b2:	4b06      	ldr	r3, [pc, #24]	; (80043cc <MX_SPI3_Init+0x64>)
 80043b4:	220a      	movs	r2, #10
 80043b6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80043b8:	4804      	ldr	r0, [pc, #16]	; (80043cc <MX_SPI3_Init+0x64>)
 80043ba:	f004 fccf 	bl	8008d5c <HAL_SPI_Init>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80043c4:	f000 fb3a 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80043c8:	bf00      	nop
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	2001f288 	.word	0x2001f288
 80043d0:	40003c00 	.word	0x40003c00

080043d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b092      	sub	sp, #72	; 0x48
 80043d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]
 80043ec:	605a      	str	r2, [r3, #4]
 80043ee:	609a      	str	r2, [r3, #8]
 80043f0:	60da      	str	r2, [r3, #12]
 80043f2:	611a      	str	r2, [r3, #16]
 80043f4:	615a      	str	r2, [r3, #20]
 80043f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043f8:	1d3b      	adds	r3, r7, #4
 80043fa:	2220      	movs	r2, #32
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f006 fdb1 	bl	800af66 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004404:	4b32      	ldr	r3, [pc, #200]	; (80044d0 <MX_TIM1_Init+0xfc>)
 8004406:	4a33      	ldr	r2, [pc, #204]	; (80044d4 <MX_TIM1_Init+0x100>)
 8004408:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800440a:	4b31      	ldr	r3, [pc, #196]	; (80044d0 <MX_TIM1_Init+0xfc>)
 800440c:	2200      	movs	r2, #0
 800440e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004410:	4b2f      	ldr	r3, [pc, #188]	; (80044d0 <MX_TIM1_Init+0xfc>)
 8004412:	2200      	movs	r2, #0
 8004414:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 8004416:	4b2e      	ldr	r3, [pc, #184]	; (80044d0 <MX_TIM1_Init+0xfc>)
 8004418:	f240 3247 	movw	r2, #839	; 0x347
 800441c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800441e:	4b2c      	ldr	r3, [pc, #176]	; (80044d0 <MX_TIM1_Init+0xfc>)
 8004420:	2200      	movs	r2, #0
 8004422:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004424:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <MX_TIM1_Init+0xfc>)
 8004426:	2200      	movs	r2, #0
 8004428:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800442a:	4b29      	ldr	r3, [pc, #164]	; (80044d0 <MX_TIM1_Init+0xfc>)
 800442c:	2200      	movs	r2, #0
 800442e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004430:	4827      	ldr	r0, [pc, #156]	; (80044d0 <MX_TIM1_Init+0xfc>)
 8004432:	f005 fa36 	bl	80098a2 <HAL_TIM_PWM_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800443c:	f000 fafe 	bl	8004a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004440:	2300      	movs	r3, #0
 8004442:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004444:	2300      	movs	r3, #0
 8004446:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004448:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800444c:	4619      	mov	r1, r3
 800444e:	4820      	ldr	r0, [pc, #128]	; (80044d0 <MX_TIM1_Init+0xfc>)
 8004450:	f005 ffc6 	bl	800a3e0 <HAL_TIMEx_MasterConfigSynchronization>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800445a:	f000 faef 	bl	8004a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800445e:	2360      	movs	r3, #96	; 0x60
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004466:	2300      	movs	r3, #0
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800446a:	2300      	movs	r3, #0
 800446c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800446e:	2300      	movs	r3, #0
 8004470:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004472:	2300      	movs	r3, #0
 8004474:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800447a:	220c      	movs	r2, #12
 800447c:	4619      	mov	r1, r3
 800447e:	4814      	ldr	r0, [pc, #80]	; (80044d0 <MX_TIM1_Init+0xfc>)
 8004480:	f005 fc4a 	bl	8009d18 <HAL_TIM_PWM_ConfigChannel>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d001      	beq.n	800448e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800448a:	f000 fad7 	bl	8004a3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800448e:	2300      	movs	r3, #0
 8004490:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004492:	2300      	movs	r3, #0
 8004494:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044a8:	2300      	movs	r3, #0
 80044aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80044ac:	1d3b      	adds	r3, r7, #4
 80044ae:	4619      	mov	r1, r3
 80044b0:	4807      	ldr	r0, [pc, #28]	; (80044d0 <MX_TIM1_Init+0xfc>)
 80044b2:	f006 f811 	bl	800a4d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d001      	beq.n	80044c0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80044bc:	f000 fabe 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80044c0:	4803      	ldr	r0, [pc, #12]	; (80044d0 <MX_TIM1_Init+0xfc>)
 80044c2:	f002 f80d 	bl	80064e0 <HAL_TIM_MspPostInit>

}
 80044c6:	bf00      	nop
 80044c8:	3748      	adds	r7, #72	; 0x48
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	2001f3c0 	.word	0x2001f3c0
 80044d4:	40010000 	.word	0x40010000

080044d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b08c      	sub	sp, #48	; 0x30
 80044dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80044de:	f107 030c 	add.w	r3, r7, #12
 80044e2:	2224      	movs	r2, #36	; 0x24
 80044e4:	2100      	movs	r1, #0
 80044e6:	4618      	mov	r0, r3
 80044e8:	f006 fd3d 	bl	800af66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044ec:	1d3b      	adds	r3, r7, #4
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80044f4:	4b20      	ldr	r3, [pc, #128]	; (8004578 <MX_TIM3_Init+0xa0>)
 80044f6:	4a21      	ldr	r2, [pc, #132]	; (800457c <MX_TIM3_Init+0xa4>)
 80044f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80044fa:	4b1f      	ldr	r3, [pc, #124]	; (8004578 <MX_TIM3_Init+0xa0>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004500:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004502:	2200      	movs	r2, #0
 8004504:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004506:	4b1c      	ldr	r3, [pc, #112]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800450c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800450e:	4b1a      	ldr	r3, [pc, #104]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004510:	2200      	movs	r2, #0
 8004512:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004514:	4b18      	ldr	r3, [pc, #96]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004516:	2200      	movs	r2, #0
 8004518:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800451a:	2301      	movs	r3, #1
 800451c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800451e:	2300      	movs	r3, #0
 8004520:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8004522:	2301      	movs	r3, #1
 8004524:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8004526:	2300      	movs	r3, #0
 8004528:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800452a:	2300      	movs	r3, #0
 800452c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800452e:	2300      	movs	r3, #0
 8004530:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8004532:	2301      	movs	r3, #1
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8004536:	2300      	movs	r3, #0
 8004538:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800453e:	f107 030c 	add.w	r3, r7, #12
 8004542:	4619      	mov	r1, r3
 8004544:	480c      	ldr	r0, [pc, #48]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004546:	f005 fa15 	bl	8009974 <HAL_TIM_Encoder_Init>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8004550:	f000 fa74 	bl	8004a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004554:	2300      	movs	r3, #0
 8004556:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	4619      	mov	r1, r3
 8004560:	4805      	ldr	r0, [pc, #20]	; (8004578 <MX_TIM3_Init+0xa0>)
 8004562:	f005 ff3d 	bl	800a3e0 <HAL_TIMEx_MasterConfigSynchronization>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800456c:	f000 fa66 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004570:	bf00      	nop
 8004572:	3730      	adds	r7, #48	; 0x30
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	2001f09c 	.word	0x2001f09c
 800457c:	40000400 	.word	0x40000400

08004580 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08c      	sub	sp, #48	; 0x30
 8004584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8004586:	f107 030c 	add.w	r3, r7, #12
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	2100      	movs	r1, #0
 800458e:	4618      	mov	r0, r3
 8004590:	f006 fce9 	bl	800af66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004594:	1d3b      	adds	r3, r7, #4
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800459c:	4b20      	ldr	r3, [pc, #128]	; (8004620 <MX_TIM4_Init+0xa0>)
 800459e:	4a21      	ldr	r2, [pc, #132]	; (8004624 <MX_TIM4_Init+0xa4>)
 80045a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80045a2:	4b1f      	ldr	r3, [pc, #124]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045a8:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b6:	4b1a      	ldr	r3, [pc, #104]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045be:	2200      	movs	r2, #0
 80045c0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80045c2:	2301      	movs	r3, #1
 80045c4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80045ca:	2301      	movs	r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80045d6:	2300      	movs	r3, #0
 80045d8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80045da:	2301      	movs	r3, #1
 80045dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80045de:	2300      	movs	r3, #0
 80045e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80045e2:	2300      	movs	r3, #0
 80045e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80045e6:	f107 030c 	add.w	r3, r7, #12
 80045ea:	4619      	mov	r1, r3
 80045ec:	480c      	ldr	r0, [pc, #48]	; (8004620 <MX_TIM4_Init+0xa0>)
 80045ee:	f005 f9c1 	bl	8009974 <HAL_TIM_Encoder_Init>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80045f8:	f000 fa20 	bl	8004a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045fc:	2300      	movs	r3, #0
 80045fe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004600:	2300      	movs	r3, #0
 8004602:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004604:	1d3b      	adds	r3, r7, #4
 8004606:	4619      	mov	r1, r3
 8004608:	4805      	ldr	r0, [pc, #20]	; (8004620 <MX_TIM4_Init+0xa0>)
 800460a:	f005 fee9 	bl	800a3e0 <HAL_TIMEx_MasterConfigSynchronization>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8004614:	f000 fa12 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004618:	bf00      	nop
 800461a:	3730      	adds	r7, #48	; 0x30
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	2001f05c 	.word	0x2001f05c
 8004624:	40000800 	.word	0x40000800

08004628 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800462e:	463b      	mov	r3, r7
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
 8004634:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004636:	4b15      	ldr	r3, [pc, #84]	; (800468c <MX_TIM6_Init+0x64>)
 8004638:	4a15      	ldr	r2, [pc, #84]	; (8004690 <MX_TIM6_Init+0x68>)
 800463a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800463c:	4b13      	ldr	r3, [pc, #76]	; (800468c <MX_TIM6_Init+0x64>)
 800463e:	2253      	movs	r2, #83	; 0x53
 8004640:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004642:	4b12      	ldr	r3, [pc, #72]	; (800468c <MX_TIM6_Init+0x64>)
 8004644:	2200      	movs	r2, #0
 8004646:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8004648:	4b10      	ldr	r3, [pc, #64]	; (800468c <MX_TIM6_Init+0x64>)
 800464a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800464e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004650:	4b0e      	ldr	r3, [pc, #56]	; (800468c <MX_TIM6_Init+0x64>)
 8004652:	2200      	movs	r2, #0
 8004654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004656:	480d      	ldr	r0, [pc, #52]	; (800468c <MX_TIM6_Init+0x64>)
 8004658:	f005 f8d4 	bl	8009804 <HAL_TIM_Base_Init>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8004662:	f000 f9eb 	bl	8004a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004666:	2300      	movs	r3, #0
 8004668:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800466a:	2300      	movs	r3, #0
 800466c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800466e:	463b      	mov	r3, r7
 8004670:	4619      	mov	r1, r3
 8004672:	4806      	ldr	r0, [pc, #24]	; (800468c <MX_TIM6_Init+0x64>)
 8004674:	f005 feb4 	bl	800a3e0 <HAL_TIMEx_MasterConfigSynchronization>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800467e:	f000 f9dd 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	2001f380 	.word	0x2001f380
 8004690:	40001000 	.word	0x40001000

08004694 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b082      	sub	sp, #8
 8004698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800469a:	463b      	mov	r3, r7
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <MX_TIM7_Init+0x60>)
 80046a4:	4a14      	ldr	r2, [pc, #80]	; (80046f8 <MX_TIM7_Init+0x64>)
 80046a6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 80046a8:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <MX_TIM7_Init+0x60>)
 80046aa:	2253      	movs	r2, #83	; 0x53
 80046ac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046ae:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <MX_TIM7_Init+0x60>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <MX_TIM7_Init+0x60>)
 80046b6:	2263      	movs	r2, #99	; 0x63
 80046b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046ba:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <MX_TIM7_Init+0x60>)
 80046bc:	2200      	movs	r2, #0
 80046be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80046c0:	480c      	ldr	r0, [pc, #48]	; (80046f4 <MX_TIM7_Init+0x60>)
 80046c2:	f005 f89f 	bl	8009804 <HAL_TIM_Base_Init>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80046cc:	f000 f9b6 	bl	8004a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046d0:	2300      	movs	r3, #0
 80046d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80046d8:	463b      	mov	r3, r7
 80046da:	4619      	mov	r1, r3
 80046dc:	4805      	ldr	r0, [pc, #20]	; (80046f4 <MX_TIM7_Init+0x60>)
 80046de:	f005 fe7f 	bl	800a3e0 <HAL_TIMEx_MasterConfigSynchronization>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80046e8:	f000 f9a8 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80046ec:	bf00      	nop
 80046ee:	3708      	adds	r7, #8
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	2001f468 	.word	0x2001f468
 80046f8:	40001400 	.word	0x40001400

080046fc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b092      	sub	sp, #72	; 0x48
 8004700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004702:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800470c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	605a      	str	r2, [r3, #4]
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	60da      	str	r2, [r3, #12]
 800471a:	611a      	str	r2, [r3, #16]
 800471c:	615a      	str	r2, [r3, #20]
 800471e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004720:	1d3b      	adds	r3, r7, #4
 8004722:	2220      	movs	r2, #32
 8004724:	2100      	movs	r1, #0
 8004726:	4618      	mov	r0, r3
 8004728:	f006 fc1d 	bl	800af66 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800472c:	4b39      	ldr	r3, [pc, #228]	; (8004814 <MX_TIM8_Init+0x118>)
 800472e:	4a3a      	ldr	r2, [pc, #232]	; (8004818 <MX_TIM8_Init+0x11c>)
 8004730:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 8004732:	4b38      	ldr	r3, [pc, #224]	; (8004814 <MX_TIM8_Init+0x118>)
 8004734:	2203      	movs	r2, #3
 8004736:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004738:	4b36      	ldr	r3, [pc, #216]	; (8004814 <MX_TIM8_Init+0x118>)
 800473a:	2200      	movs	r2, #0
 800473c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 800473e:	4b35      	ldr	r3, [pc, #212]	; (8004814 <MX_TIM8_Init+0x118>)
 8004740:	f240 628f 	movw	r2, #1679	; 0x68f
 8004744:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004746:	4b33      	ldr	r3, [pc, #204]	; (8004814 <MX_TIM8_Init+0x118>)
 8004748:	2200      	movs	r2, #0
 800474a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800474c:	4b31      	ldr	r3, [pc, #196]	; (8004814 <MX_TIM8_Init+0x118>)
 800474e:	2200      	movs	r2, #0
 8004750:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004752:	4b30      	ldr	r3, [pc, #192]	; (8004814 <MX_TIM8_Init+0x118>)
 8004754:	2200      	movs	r2, #0
 8004756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004758:	482e      	ldr	r0, [pc, #184]	; (8004814 <MX_TIM8_Init+0x118>)
 800475a:	f005 f8a2 	bl	80098a2 <HAL_TIM_PWM_Init>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004764:	f000 f96a 	bl	8004a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004768:	2300      	movs	r3, #0
 800476a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800476c:	2300      	movs	r3, #0
 800476e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004770:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004774:	4619      	mov	r1, r3
 8004776:	4827      	ldr	r0, [pc, #156]	; (8004814 <MX_TIM8_Init+0x118>)
 8004778:	f005 fe32 	bl	800a3e0 <HAL_TIMEx_MasterConfigSynchronization>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8004782:	f000 f95b 	bl	8004a3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004786:	2360      	movs	r3, #96	; 0x60
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800478e:	2300      	movs	r3, #0
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004792:	2300      	movs	r3, #0
 8004794:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004796:	2300      	movs	r3, #0
 8004798:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800479e:	2300      	movs	r3, #0
 80047a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a6:	2200      	movs	r2, #0
 80047a8:	4619      	mov	r1, r3
 80047aa:	481a      	ldr	r0, [pc, #104]	; (8004814 <MX_TIM8_Init+0x118>)
 80047ac:	f005 fab4 	bl	8009d18 <HAL_TIM_PWM_ConfigChannel>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80047b6:	f000 f941 	bl	8004a3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80047ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047be:	2208      	movs	r2, #8
 80047c0:	4619      	mov	r1, r3
 80047c2:	4814      	ldr	r0, [pc, #80]	; (8004814 <MX_TIM8_Init+0x118>)
 80047c4:	f005 faa8 	bl	8009d18 <HAL_TIM_PWM_ConfigChannel>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80047ce:	f000 f935 	bl	8004a3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80047d6:	2300      	movs	r3, #0
 80047d8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80047da:	2300      	movs	r3, #0
 80047dc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80047e2:	2300      	movs	r3, #0
 80047e4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80047e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80047ec:	2300      	movs	r3, #0
 80047ee:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80047f0:	1d3b      	adds	r3, r7, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4807      	ldr	r0, [pc, #28]	; (8004814 <MX_TIM8_Init+0x118>)
 80047f6:	f005 fe6f 	bl	800a4d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d001      	beq.n	8004804 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8004800:	f000 f91c 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004804:	4803      	ldr	r0, [pc, #12]	; (8004814 <MX_TIM8_Init+0x118>)
 8004806:	f001 fe6b 	bl	80064e0 <HAL_TIM_MspPostInit>

}
 800480a:	bf00      	nop
 800480c:	3748      	adds	r7, #72	; 0x48
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	2001f1e8 	.word	0x2001f1e8
 8004818:	40010400 	.word	0x40010400

0800481c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004820:	4b11      	ldr	r3, [pc, #68]	; (8004868 <MX_USART1_UART_Init+0x4c>)
 8004822:	4a12      	ldr	r2, [pc, #72]	; (800486c <MX_USART1_UART_Init+0x50>)
 8004824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004826:	4b10      	ldr	r3, [pc, #64]	; (8004868 <MX_USART1_UART_Init+0x4c>)
 8004828:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800482c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800482e:	4b0e      	ldr	r3, [pc, #56]	; (8004868 <MX_USART1_UART_Init+0x4c>)
 8004830:	2200      	movs	r2, #0
 8004832:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004834:	4b0c      	ldr	r3, [pc, #48]	; (8004868 <MX_USART1_UART_Init+0x4c>)
 8004836:	2200      	movs	r2, #0
 8004838:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <MX_USART1_UART_Init+0x4c>)
 800483c:	2200      	movs	r2, #0
 800483e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004840:	4b09      	ldr	r3, [pc, #36]	; (8004868 <MX_USART1_UART_Init+0x4c>)
 8004842:	220c      	movs	r2, #12
 8004844:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004846:	4b08      	ldr	r3, [pc, #32]	; (8004868 <MX_USART1_UART_Init+0x4c>)
 8004848:	2200      	movs	r2, #0
 800484a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800484c:	4b06      	ldr	r3, [pc, #24]	; (8004868 <MX_USART1_UART_Init+0x4c>)
 800484e:	2200      	movs	r2, #0
 8004850:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004852:	4805      	ldr	r0, [pc, #20]	; (8004868 <MX_USART1_UART_Init+0x4c>)
 8004854:	f005 fea6 	bl	800a5a4 <HAL_UART_Init>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800485e:	f000 f8ed 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004862:	bf00      	nop
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	2001f2e0 	.word	0x2001f2e0
 800486c:	40011000 	.word	0x40011000

08004870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	4b10      	ldr	r3, [pc, #64]	; (80048bc <MX_DMA_Init+0x4c>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	4a0f      	ldr	r2, [pc, #60]	; (80048bc <MX_DMA_Init+0x4c>)
 8004880:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004884:	6313      	str	r3, [r2, #48]	; 0x30
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <MX_DMA_Init+0x4c>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800488e:	607b      	str	r3, [r7, #4]
 8004890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8004892:	2200      	movs	r2, #0
 8004894:	2100      	movs	r1, #0
 8004896:	2038      	movs	r0, #56	; 0x38
 8004898:	f002 fd91 	bl	80073be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800489c:	2038      	movs	r0, #56	; 0x38
 800489e:	f002 fdaa 	bl	80073f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80048a2:	2200      	movs	r2, #0
 80048a4:	2100      	movs	r1, #0
 80048a6:	203a      	movs	r0, #58	; 0x3a
 80048a8:	f002 fd89 	bl	80073be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80048ac:	203a      	movs	r0, #58	; 0x3a
 80048ae:	f002 fda2 	bl	80073f6 <HAL_NVIC_EnableIRQ>

}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40023800 	.word	0x40023800

080048c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c6:	f107 0314 	add.w	r3, r7, #20
 80048ca:	2200      	movs	r2, #0
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	605a      	str	r2, [r3, #4]
 80048d0:	609a      	str	r2, [r3, #8]
 80048d2:	60da      	str	r2, [r3, #12]
 80048d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80048d6:	2300      	movs	r3, #0
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	4b53      	ldr	r3, [pc, #332]	; (8004a28 <MX_GPIO_Init+0x168>)
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	4a52      	ldr	r2, [pc, #328]	; (8004a28 <MX_GPIO_Init+0x168>)
 80048e0:	f043 0304 	orr.w	r3, r3, #4
 80048e4:	6313      	str	r3, [r2, #48]	; 0x30
 80048e6:	4b50      	ldr	r3, [pc, #320]	; (8004a28 <MX_GPIO_Init+0x168>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	4b4c      	ldr	r3, [pc, #304]	; (8004a28 <MX_GPIO_Init+0x168>)
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	4a4b      	ldr	r2, [pc, #300]	; (8004a28 <MX_GPIO_Init+0x168>)
 80048fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004900:	6313      	str	r3, [r2, #48]	; 0x30
 8004902:	4b49      	ldr	r3, [pc, #292]	; (8004a28 <MX_GPIO_Init+0x168>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	4b45      	ldr	r3, [pc, #276]	; (8004a28 <MX_GPIO_Init+0x168>)
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	4a44      	ldr	r2, [pc, #272]	; (8004a28 <MX_GPIO_Init+0x168>)
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	6313      	str	r3, [r2, #48]	; 0x30
 800491e:	4b42      	ldr	r3, [pc, #264]	; (8004a28 <MX_GPIO_Init+0x168>)
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	60bb      	str	r3, [r7, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	607b      	str	r3, [r7, #4]
 800492e:	4b3e      	ldr	r3, [pc, #248]	; (8004a28 <MX_GPIO_Init+0x168>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	4a3d      	ldr	r2, [pc, #244]	; (8004a28 <MX_GPIO_Init+0x168>)
 8004934:	f043 0302 	orr.w	r3, r3, #2
 8004938:	6313      	str	r3, [r2, #48]	; 0x30
 800493a:	4b3b      	ldr	r3, [pc, #236]	; (8004a28 <MX_GPIO_Init+0x168>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	607b      	str	r3, [r7, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	4b37      	ldr	r3, [pc, #220]	; (8004a28 <MX_GPIO_Init+0x168>)
 800494c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494e:	4a36      	ldr	r2, [pc, #216]	; (8004a28 <MX_GPIO_Init+0x168>)
 8004950:	f043 0308 	orr.w	r3, r3, #8
 8004954:	6313      	str	r3, [r2, #48]	; 0x30
 8004956:	4b34      	ldr	r3, [pc, #208]	; (8004a28 <MX_GPIO_Init+0x168>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004962:	2200      	movs	r2, #0
 8004964:	f24e 2180 	movw	r1, #57984	; 0xe280
 8004968:	4830      	ldr	r0, [pc, #192]	; (8004a2c <MX_GPIO_Init+0x16c>)
 800496a:	f003 fc69 	bl	8008240 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800496e:	2200      	movs	r2, #0
 8004970:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 8004974:	482e      	ldr	r0, [pc, #184]	; (8004a30 <MX_GPIO_Init+0x170>)
 8004976:	f003 fc63 	bl	8008240 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800497a:	2200      	movs	r2, #0
 800497c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004980:	482c      	ldr	r0, [pc, #176]	; (8004a34 <MX_GPIO_Init+0x174>)
 8004982:	f003 fc5d 	bl	8008240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004986:	2200      	movs	r2, #0
 8004988:	2104      	movs	r1, #4
 800498a:	482b      	ldr	r0, [pc, #172]	; (8004a38 <MX_GPIO_Init+0x178>)
 800498c:	f003 fc58 	bl	8008240 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8004990:	f24e 2380 	movw	r3, #57984	; 0xe280
 8004994:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004996:	2301      	movs	r3, #1
 8004998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800499a:	2300      	movs	r3, #0
 800499c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800499e:	2300      	movs	r3, #0
 80049a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049a2:	f107 0314 	add.w	r3, r7, #20
 80049a6:	4619      	mov	r1, r3
 80049a8:	4820      	ldr	r0, [pc, #128]	; (8004a2c <MX_GPIO_Init+0x16c>)
 80049aa:	f003 fa97 	bl	8007edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80049ae:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 80049b2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049b4:	2301      	movs	r3, #1
 80049b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049bc:	2300      	movs	r3, #0
 80049be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c0:	f107 0314 	add.w	r3, r7, #20
 80049c4:	4619      	mov	r1, r3
 80049c6:	481a      	ldr	r0, [pc, #104]	; (8004a30 <MX_GPIO_Init+0x170>)
 80049c8:	f003 fa88 	bl	8007edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80049cc:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80049d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80049d2:	2300      	movs	r3, #0
 80049d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049da:	f107 0314 	add.w	r3, r7, #20
 80049de:	4619      	mov	r1, r3
 80049e0:	4814      	ldr	r0, [pc, #80]	; (8004a34 <MX_GPIO_Init+0x174>)
 80049e2:	f003 fa7b 	bl	8007edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80049e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80049ec:	2301      	movs	r3, #1
 80049ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049f4:	2300      	movs	r3, #0
 80049f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049f8:	f107 0314 	add.w	r3, r7, #20
 80049fc:	4619      	mov	r1, r3
 80049fe:	480d      	ldr	r0, [pc, #52]	; (8004a34 <MX_GPIO_Init+0x174>)
 8004a00:	f003 fa6c 	bl	8007edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004a04:	2304      	movs	r3, #4
 8004a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a10:	2300      	movs	r3, #0
 8004a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a14:	f107 0314 	add.w	r3, r7, #20
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4807      	ldr	r0, [pc, #28]	; (8004a38 <MX_GPIO_Init+0x178>)
 8004a1c:	f003 fa5e 	bl	8007edc <HAL_GPIO_Init>

}
 8004a20:	bf00      	nop
 8004a22:	3728      	adds	r7, #40	; 0x28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40020800 	.word	0x40020800
 8004a30:	40020400 	.word	0x40020400
 8004a34:	40020000 	.word	0x40020000
 8004a38:	40020c00 	.word	0x40020c00

08004a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a40:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a42:	e7fe      	b.n	8004a42 <Error_Handler+0x6>

08004a44 <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4808      	ldr	r0, [pc, #32]	; (8004a6c <initMotor+0x28>)
 8004a4c:	f004 ff54 	bl	80098f8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 8004a50:	2108      	movs	r1, #8
 8004a52:	4806      	ldr	r0, [pc, #24]	; (8004a6c <initMotor+0x28>)
 8004a54:	f004 ff50 	bl	80098f8 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8004a58:	210c      	movs	r1, #12
 8004a5a:	4805      	ldr	r0, [pc, #20]	; (8004a70 <initMotor+0x2c>)
 8004a5c:	f004 ff4c 	bl	80098f8 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 8004a60:	2064      	movs	r0, #100	; 0x64
 8004a62:	f001 ffbb 	bl	80069dc <HAL_Delay>
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	2001f1e8 	.word	0x2001f1e8
 8004a70:	2001f3c0 	.word	0x2001f3c0

08004a74 <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 8004a7a:	4b2a      	ldr	r3, [pc, #168]	; (8004b24 <motorCtrlFlip+0xb0>)
 8004a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	db0d      	blt.n	8004aa0 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 8004a84:	4b27      	ldr	r3, [pc, #156]	; (8004b24 <motorCtrlFlip+0xb0>)
 8004a86:	881b      	ldrh	r3, [r3, #0]
 8004a88:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8004a8a:	4b27      	ldr	r3, [pc, #156]	; (8004b28 <motorCtrlFlip+0xb4>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004a92:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8004a94:	2200      	movs	r2, #0
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	4824      	ldr	r0, [pc, #144]	; (8004b2c <motorCtrlFlip+0xb8>)
 8004a9a:	f003 fbd1 	bl	8008240 <HAL_GPIO_WritePin>
 8004a9e:	e010      	b.n	8004ac2 <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8004aa0:	4b20      	ldr	r3, [pc, #128]	; (8004b24 <motorCtrlFlip+0xb0>)
 8004aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	425b      	negs	r3, r3
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8004aae:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <motorCtrlFlip+0xb4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004ab6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8004ab8:	2201      	movs	r2, #1
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	481b      	ldr	r0, [pc, #108]	; (8004b2c <motorCtrlFlip+0xb8>)
 8004abe:	f003 fbbf 	bl	8008240 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <motorCtrlFlip+0xbc>)
 8004ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	db0e      	blt.n	8004aea <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <motorCtrlFlip+0xbc>)
 8004ace:	881b      	ldrh	r3, [r3, #0]
 8004ad0:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8004ad2:	4b15      	ldr	r3, [pc, #84]	; (8004b28 <motorCtrlFlip+0xb4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004ada:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8004adc:	2200      	movs	r2, #0
 8004ade:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004ae2:	4812      	ldr	r0, [pc, #72]	; (8004b2c <motorCtrlFlip+0xb8>)
 8004ae4:	f003 fbac 	bl	8008240 <HAL_GPIO_WritePin>
 8004ae8:	e011      	b.n	8004b0e <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 8004aea:	4b11      	ldr	r3, [pc, #68]	; (8004b30 <motorCtrlFlip+0xbc>)
 8004aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	425b      	negs	r3, r3
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 8004af8:	4b0b      	ldr	r3, [pc, #44]	; (8004b28 <motorCtrlFlip+0xb4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004b00:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8004b02:	2201      	movs	r2, #1
 8004b04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b08:	4808      	ldr	r0, [pc, #32]	; (8004b2c <motorCtrlFlip+0xb8>)
 8004b0a:	f003 fb99 	bl	8008240 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 8004b0e:	4a09      	ldr	r2, [pc, #36]	; (8004b34 <motorCtrlFlip+0xc0>)
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 8004b14:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <motorCtrlFlip+0xc4>)
 8004b16:	88bb      	ldrh	r3, [r7, #4]
 8004b18:	8013      	strh	r3, [r2, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	3708      	adds	r7, #8
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20016e68 	.word	0x20016e68
 8004b28:	2001f1e8 	.word	0x2001f1e8
 8004b2c:	40020800 	.word	0x40020800
 8004b30:	20016e6a 	.word	0x20016e6a
 8004b34:	2001f4ac 	.word	0x2001f4ac
 8004b38:	2001f4aa 	.word	0x2001f4aa

08004b3c <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <suctionmotorCtrlFlip+0x1c>)
 8004b42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004b46:	4b05      	ldr	r3, [pc, #20]	; (8004b5c <suctionmotorCtrlFlip+0x20>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b4c:	bf00      	nop
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	20016e6c 	.word	0x20016e6c
 8004b5c:	2001f3c0 	.word	0x2001f3c0

08004b60 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	4603      	mov	r3, r0
 8004b68:	460a      	mov	r2, r1
 8004b6a:	80fb      	strh	r3, [r7, #6]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8004b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b74:	f240 628e 	movw	r2, #1678	; 0x68e
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	dd03      	ble.n	8004b84 <setMotor+0x24>
 8004b7c:	f240 638f 	movw	r3, #1679	; 0x68f
 8004b80:	80fb      	strh	r3, [r7, #6]
 8004b82:	e007      	b.n	8004b94 <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 8004b84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b88:	4a11      	ldr	r2, [pc, #68]	; (8004bd0 <setMotor+0x70>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	da02      	bge.n	8004b94 <setMotor+0x34>
 8004b8e:	f64f 1371 	movw	r3, #63857	; 0xf971
 8004b92:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 8004b94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b98:	f240 628e 	movw	r2, #1678	; 0x68e
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	dd03      	ble.n	8004ba8 <setMotor+0x48>
 8004ba0:	f240 638f 	movw	r3, #1679	; 0x68f
 8004ba4:	80bb      	strh	r3, [r7, #4]
 8004ba6:	e007      	b.n	8004bb8 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8004ba8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bac:	4a08      	ldr	r2, [pc, #32]	; (8004bd0 <setMotor+0x70>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	da02      	bge.n	8004bb8 <setMotor+0x58>
 8004bb2:	f64f 1371 	movw	r3, #63857	; 0xf971
 8004bb6:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8004bb8:	4a06      	ldr	r2, [pc, #24]	; (8004bd4 <setMotor+0x74>)
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8004bbe:	4a06      	ldr	r2, [pc, #24]	; (8004bd8 <setMotor+0x78>)
 8004bc0:	88bb      	ldrh	r3, [r7, #4]
 8004bc2:	8013      	strh	r3, [r2, #0]
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	fffff972 	.word	0xfffff972
 8004bd4:	20016e68 	.word	0x20016e68
 8004bd8:	20016e6a 	.word	0x20016e6a

08004bdc <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	4603      	mov	r3, r0
 8004be4:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 8004be6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bfb8      	it	lt
 8004bee:	425b      	neglt	r3, r3
 8004bf0:	b21a      	sxth	r2, r3
 8004bf2:	4b08      	ldr	r3, [pc, #32]	; (8004c14 <setsuctionMotor+0x38>)
 8004bf4:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 8004bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bfa:	f240 3246 	movw	r2, #838	; 0x346
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	dd02      	ble.n	8004c08 <setsuctionMotor+0x2c>
 8004c02:	f240 3347 	movw	r3, #839	; 0x347
 8004c06:	80fb      	strh	r3, [r7, #6]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	20016e6c 	.word	0x20016e6c

08004c18 <updateSideSensorStatus>:
static float min_velocity, max_velocity;
static float acceleration, deceleration;
static float straight_radius;
static int16_t V_motor;

void updateSideSensorStatus(){
 8004c18:	b480      	push	{r7}
 8004c1a:	af00      	add	r7, sp, #0

	if(side_sensorL <= 500){
 8004c1c:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <updateSideSensorStatus+0x44>)
 8004c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c26:	dc03      	bgt.n	8004c30 <updateSideSensorStatus+0x18>
		side_sensor_l = true;
 8004c28:	4b0d      	ldr	r3, [pc, #52]	; (8004c60 <updateSideSensorStatus+0x48>)
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e002      	b.n	8004c36 <updateSideSensorStatus+0x1e>
	}
	else{
		side_sensor_l = false;
 8004c30:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <updateSideSensorStatus+0x48>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 8004c36:	4b0b      	ldr	r3, [pc, #44]	; (8004c64 <updateSideSensorStatus+0x4c>)
 8004c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004c40:	dc03      	bgt.n	8004c4a <updateSideSensorStatus+0x32>
		side_sensor_r = true;
 8004c42:	4b09      	ldr	r3, [pc, #36]	; (8004c68 <updateSideSensorStatus+0x50>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 8004c48:	e002      	b.n	8004c50 <updateSideSensorStatus+0x38>
		side_sensor_r = false;
 8004c4a:	4b07      	ldr	r3, [pc, #28]	; (8004c68 <updateSideSensorStatus+0x50>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	2001f024 	.word	0x2001f024
 8004c60:	2001ef64 	.word	0x2001ef64
 8004c64:	2001efac 	.word	0x2001efac
 8004c68:	2001ef65 	.word	0x2001ef65

08004c6c <setRunMode>:

void setRunMode(uint16_t num){
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	80fb      	strh	r3, [r7, #6]
	mode = num;
 8004c76:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <setRunMode+0x1c>)
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	8013      	strh	r3, [r2, #0]
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	2001f1d0 	.word	0x2001f1d0

08004c8c <isCrossLine>:

bool isCrossLine()
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
	static uint16_t cnt = 0;
	float sensor_edge_val_l = sensor[0];
 8004c92:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <isCrossLine+0x88>)
 8004c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c98:	ee07 3a90 	vmov	s15, r3
 8004c9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ca0:	edc7 7a01 	vstr	s15, [r7, #4]
	float sensor_edge_val_r = sensor[11];
 8004ca4:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <isCrossLine+0x88>)
 8004ca6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8004caa:	ee07 3a90 	vmov	s15, r3
 8004cae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004cb2:	edc7 7a00 	vstr	s15, [r7]
	static bool flag = false;

	if(sensor_edge_val_l < 700 && sensor_edge_val_r < 700){
 8004cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004cba:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8004d18 <isCrossLine+0x8c>
 8004cbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc6:	d50f      	bpl.n	8004ce8 <isCrossLine+0x5c>
 8004cc8:	edd7 7a00 	vldr	s15, [r7]
 8004ccc:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004d18 <isCrossLine+0x8c>
 8004cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd8:	d506      	bpl.n	8004ce8 <isCrossLine+0x5c>
		cnt++;
 8004cda:	4b10      	ldr	r3, [pc, #64]	; (8004d1c <isCrossLine+0x90>)
 8004cdc:	881b      	ldrh	r3, [r3, #0]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <isCrossLine+0x90>)
 8004ce4:	801a      	strh	r2, [r3, #0]
 8004ce6:	e002      	b.n	8004cee <isCrossLine+0x62>
	}
	else{
		cnt = 0;
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <isCrossLine+0x90>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 3){
 8004cee:	4b0b      	ldr	r3, [pc, #44]	; (8004d1c <isCrossLine+0x90>)
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d903      	bls.n	8004cfe <isCrossLine+0x72>
		//setLED2('Y');
		flag = true;
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <isCrossLine+0x94>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e002      	b.n	8004d04 <isCrossLine+0x78>
	}
	else{
		//setLED2('N');
		flag = false;
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <isCrossLine+0x94>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
	}

	return flag;
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <isCrossLine+0x94>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	2001f008 	.word	0x2001f008
 8004d18:	442f0000 	.word	0x442f0000
 8004d1c:	2001ef86 	.word	0x2001ef86
 8004d20:	2001ef88 	.word	0x2001ef88
 8004d24:	00000000 	.word	0x00000000

08004d28 <isContinuousCurvature>:

bool isContinuousCurvature()//連続曲率判定
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	ed2d 8b02 	vpush	{d8}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
	static float pre_theta;
	static float continuous_cnt;
	bool continuous_flag = false;
 8004d32:	2300      	movs	r3, #0
 8004d34:	71fb      	strb	r3, [r7, #7]
	float diff_theta = fabs(pre_theta - getTheta10mm());
 8004d36:	4b2e      	ldr	r3, [pc, #184]	; (8004df0 <isContinuousCurvature+0xc8>)
 8004d38:	ed93 8a00 	vldr	s16, [r3]
 8004d3c:	f7fc fd38 	bl	80017b0 <getTheta10mm>
 8004d40:	eef0 7a40 	vmov.f32	s15, s0
 8004d44:	ee78 7a67 	vsub.f32	s15, s16, s15
 8004d48:	eef0 7ae7 	vabs.f32	s15, s15
 8004d4c:	edc7 7a00 	vstr	s15, [r7]

	if(continuous_cnt_reset_flag == true){
 8004d50:	4b28      	ldr	r3, [pc, #160]	; (8004df4 <isContinuousCurvature+0xcc>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d006      	beq.n	8004d66 <isContinuousCurvature+0x3e>
		continuous_cnt_reset_flag = false;
 8004d58:	4b26      	ldr	r3, [pc, #152]	; (8004df4 <isContinuousCurvature+0xcc>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	701a      	strb	r2, [r3, #0]
		continuous_cnt = 0;
 8004d5e:	4b26      	ldr	r3, [pc, #152]	; (8004df8 <isContinuousCurvature+0xd0>)
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	601a      	str	r2, [r3, #0]
	}

	//if(diff_theta <= 0.005) continuous_cnt++;
	//if(diff_theta <= 0.010) continuous_cnt++;
	if(diff_theta <= 0.020) continuous_cnt++;
 8004d66:	6838      	ldr	r0, [r7, #0]
 8004d68:	f7fb fbee 	bl	8000548 <__aeabi_f2d>
 8004d6c:	a31e      	add	r3, pc, #120	; (adr r3, 8004de8 <isContinuousCurvature+0xc0>)
 8004d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d72:	f7fb febd 	bl	8000af0 <__aeabi_dcmple>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <isContinuousCurvature+0x6a>
 8004d7c:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <isContinuousCurvature+0xd0>)
 8004d7e:	edd3 7a00 	vldr	s15, [r3]
 8004d82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d8a:	4b1b      	ldr	r3, [pc, #108]	; (8004df8 <isContinuousCurvature+0xd0>)
 8004d8c:	edc3 7a00 	vstr	s15, [r3]
 8004d90:	e003      	b.n	8004d9a <isContinuousCurvature+0x72>
	else continuous_cnt = 0;
 8004d92:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <isContinuousCurvature+0xd0>)
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]

	if(continuous_cnt >= 40) continuous_flag = true;
 8004d9a:	4b17      	ldr	r3, [pc, #92]	; (8004df8 <isContinuousCurvature+0xd0>)
 8004d9c:	edd3 7a00 	vldr	s15, [r3]
 8004da0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004dfc <isContinuousCurvature+0xd4>
 8004da4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dac:	db01      	blt.n	8004db2 <isContinuousCurvature+0x8a>
 8004dae:	2301      	movs	r3, #1
 8004db0:	71fb      	strb	r3, [r7, #7]

	if(continuous_cnt >= 1000) continuous_cnt = 1000;
 8004db2:	4b11      	ldr	r3, [pc, #68]	; (8004df8 <isContinuousCurvature+0xd0>)
 8004db4:	edd3 7a00 	vldr	s15, [r3]
 8004db8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8004e00 <isContinuousCurvature+0xd8>
 8004dbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc4:	db02      	blt.n	8004dcc <isContinuousCurvature+0xa4>
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <isContinuousCurvature+0xd0>)
 8004dc8:	4a0e      	ldr	r2, [pc, #56]	; (8004e04 <isContinuousCurvature+0xdc>)
 8004dca:	601a      	str	r2, [r3, #0]

	pre_theta = getTheta10mm();
 8004dcc:	f7fc fcf0 	bl	80017b0 <getTheta10mm>
 8004dd0:	eef0 7a40 	vmov.f32	s15, s0
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <isContinuousCurvature+0xc8>)
 8004dd6:	edc3 7a00 	vstr	s15, [r3]

	return continuous_flag;
 8004dda:	79fb      	ldrb	r3, [r7, #7]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	ecbd 8b02 	vpop	{d8}
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	47ae147b 	.word	0x47ae147b
 8004dec:	3f947ae1 	.word	0x3f947ae1
 8004df0:	2001ef8c 	.word	0x2001ef8c
 8004df4:	2001ef68 	.word	0x2001ef68
 8004df8:	2001ef90 	.word	0x2001ef90
 8004dfc:	42200000 	.word	0x42200000
 8004e00:	447a0000 	.word	0x447a0000
 8004e04:	447a0000 	.word	0x447a0000

08004e08 <isTargetDistance>:

bool isTargetDistance(float target){
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	ed87 0a01 	vstr	s0, [r7, #4]
	bool ret = false;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]
	if(getDistance10mm() >= target){
 8004e16:	f7fc faf7 	bl	8001408 <getDistance10mm>
 8004e1a:	eeb0 7a40 	vmov.f32	s14, s0
 8004e1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e2a:	d801      	bhi.n	8004e30 <isTargetDistance+0x28>
		ret = true;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8004e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <running>:

void running(void)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b082      	sub	sp, #8
 8004e40:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8004e42:	2300      	movs	r3, #0
 8004e44:	80fb      	strh	r3, [r7, #6]

	runningInit();
 8004e46:	f000 f9eb 	bl	8005220 <runningInit>
	startLineTrace();
 8004e4a:	f7fd f967 	bl	800211c <startLineTrace>
	startVelocityControl();
 8004e4e:	f7fe fcc7 	bl	80037e0 <startVelocityControl>
	setTargetVelocity(min_velocity);
 8004e52:	4b6b      	ldr	r3, [pc, #428]	; (8005000 <running+0x1c4>)
 8004e54:	edd3 7a00 	vldr	s15, [r3]
 8004e58:	eeb0 0a67 	vmov.f32	s0, s15
 8004e5c:	f7fe fc22 	bl	80036a4 <setTargetVelocity>

	while(goal_flag == false){
 8004e60:	e0c2      	b.n	8004fe8 <running+0x1ac>
		switch(pattern){
 8004e62:	88fb      	ldrh	r3, [r7, #6]
 8004e64:	2b14      	cmp	r3, #20
 8004e66:	f200 80b4 	bhi.w	8004fd2 <running+0x196>
 8004e6a:	a201      	add	r2, pc, #4	; (adr r2, 8004e70 <running+0x34>)
 8004e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e70:	08004ec5 	.word	0x08004ec5
 8004e74:	08004fd3 	.word	0x08004fd3
 8004e78:	08004fd3 	.word	0x08004fd3
 8004e7c:	08004fd3 	.word	0x08004fd3
 8004e80:	08004fd3 	.word	0x08004fd3
 8004e84:	08004efb 	.word	0x08004efb
 8004e88:	08004fd3 	.word	0x08004fd3
 8004e8c:	08004fd3 	.word	0x08004fd3
 8004e90:	08004fd3 	.word	0x08004fd3
 8004e94:	08004fd3 	.word	0x08004fd3
 8004e98:	08004f0f 	.word	0x08004f0f
 8004e9c:	08004fd3 	.word	0x08004fd3
 8004ea0:	08004fd3 	.word	0x08004fd3
 8004ea4:	08004fd3 	.word	0x08004fd3
 8004ea8:	08004fd3 	.word	0x08004fd3
 8004eac:	08004fd3 	.word	0x08004fd3
 8004eb0:	08004fd3 	.word	0x08004fd3
 8004eb4:	08004fd3 	.word	0x08004fd3
 8004eb8:	08004fd3 	.word	0x08004fd3
 8004ebc:	08004fd3 	.word	0x08004fd3
 8004ec0:	08004fa7 	.word	0x08004fa7

				  case 0:
					  if(getSideSensorStatusR() == true){
 8004ec4:	f001 f838 	bl	8005f38 <getSideSensorStatusR>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d07e      	beq.n	8004fcc <running+0x190>
						  start_goal_line_cnt++;
 8004ece:	4b4d      	ldr	r3, [pc, #308]	; (8005004 <running+0x1c8>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	4b4b      	ldr	r3, [pc, #300]	; (8005004 <running+0x1c8>)
 8004ed8:	701a      	strb	r2, [r3, #0]

						  if(mode == 1) startLogging();
 8004eda:	4b4b      	ldr	r3, [pc, #300]	; (8005008 <running+0x1cc>)
 8004edc:	881b      	ldrh	r3, [r3, #0]
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d102      	bne.n	8004ee8 <running+0xac>
 8004ee2:	f000 fa13 	bl	800530c <startLogging>
 8004ee6:	e001      	b.n	8004eec <running+0xb0>
						  else startVelocityUpdate();
 8004ee8:	f000 fa2c 	bl	8005344 <startVelocityUpdate>

						  clearGoalJudgeDistance();
 8004eec:	f7fc fa54 	bl	8001398 <clearGoalJudgeDistance>
						  clearSideLineJudgeDistance();
 8004ef0:	f7fc fa60 	bl	80013b4 <clearSideLineJudgeDistance>
						  pattern = 5;
 8004ef4:	2305      	movs	r3, #5
 8004ef6:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8004ef8:	e068      	b.n	8004fcc <running+0x190>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8004efa:	f001 f81d 	bl	8005f38 <getSideSensorStatusR>
 8004efe:	4603      	mov	r3, r0
 8004f00:	f083 0301 	eor.w	r3, r3, #1
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <running+0xd2>
 8004f0a:	230a      	movs	r3, #10
 8004f0c:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8004f0e:	f001 f807 	bl	8005f20 <getSideSensorStatusL>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d004      	beq.n	8004f22 <running+0xe6>
						  goal_judge_flag = false;
 8004f18:	4b3c      	ldr	r3, [pc, #240]	; (800500c <running+0x1d0>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004f1e:	f7fc fa3b 	bl	8001398 <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 8004f22:	4b3a      	ldr	r3, [pc, #232]	; (800500c <running+0x1d0>)
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	f083 0301 	eor.w	r3, r3, #1
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d015      	beq.n	8004f5c <running+0x120>
 8004f30:	f001 f802 	bl	8005f38 <getSideSensorStatusR>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d010      	beq.n	8004f5c <running+0x120>
 8004f3a:	f7fc f9e5 	bl	8001308 <getGoalJudgeDistance>
 8004f3e:	eeb0 7a40 	vmov.f32	s14, s0
 8004f42:	eddf 7a33 	vldr	s15, [pc, #204]	; 8005010 <running+0x1d4>
 8004f46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4e:	db05      	blt.n	8004f5c <running+0x120>
						  goal_judge_flag = true;
 8004f50:	4b2e      	ldr	r3, [pc, #184]	; (800500c <running+0x1d0>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004f56:	f7fc fa1f 	bl	8001398 <clearGoalJudgeDistance>
 8004f5a:	e019      	b.n	8004f90 <running+0x154>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <running+0x1d0>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d015      	beq.n	8004f90 <running+0x154>
 8004f64:	f7fc f9d0 	bl	8001308 <getGoalJudgeDistance>
 8004f68:	eeb0 7a40 	vmov.f32	s14, s0
 8004f6c:	eddf 7a28 	vldr	s15, [pc, #160]	; 8005010 <running+0x1d4>
 8004f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f78:	db0a      	blt.n	8004f90 <running+0x154>
						  start_goal_line_cnt++;
 8004f7a:	4b22      	ldr	r3, [pc, #136]	; (8005004 <running+0x1c8>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	4b20      	ldr	r3, [pc, #128]	; (8005004 <running+0x1c8>)
 8004f84:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 8004f86:	4b21      	ldr	r3, [pc, #132]	; (800500c <running+0x1d0>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8004f8c:	f7fc fa04 	bl	8001398 <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8004f90:	4b1c      	ldr	r3, [pc, #112]	; (8005004 <running+0x1c8>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d91b      	bls.n	8004fd0 <running+0x194>
						  stopLogging();
 8004f98:	f000 f9c8 	bl	800532c <stopLogging>
						  stopVelocityUpdate();
 8004f9c:	f000 f9f4 	bl	8005388 <stopVelocityUpdate>
						  pattern = 20;
 8004fa0:	2314      	movs	r3, #20
 8004fa2:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8004fa4:	e014      	b.n	8004fd0 <running+0x194>

				  case 20:

					  setTargetVelocity(1.0);
 8004fa6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004faa:	f7fe fb7b 	bl	80036a4 <setTargetVelocity>
					  HAL_Delay(100);
 8004fae:	2064      	movs	r0, #100	; 0x64
 8004fb0:	f001 fd14 	bl	80069dc <HAL_Delay>
					  //setTargetVelocity(-0.01);
					  //HAL_Delay(20);
					  setTargetVelocity(0);
 8004fb4:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8005014 <running+0x1d8>
 8004fb8:	f7fe fb74 	bl	80036a4 <setTargetVelocity>
					  HAL_Delay(500);
 8004fbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004fc0:	f001 fd0c 	bl	80069dc <HAL_Delay>

					  goal_flag = true;
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <running+0x1dc>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]

					  break;
 8004fca:	e002      	b.n	8004fd2 <running+0x196>
					  break;
 8004fcc:	bf00      	nop
 8004fce:	e000      	b.n	8004fd2 <running+0x196>
					  break;
 8004fd0:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 8004fd2:	f7fd f929 	bl	8002228 <getCouseOutFlag>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <running+0x1ac>
		{
			stopLogging();
 8004fdc:	f000 f9a6 	bl	800532c <stopLogging>
			stopVelocityUpdate();
 8004fe0:	f000 f9d2 	bl	8005388 <stopVelocityUpdate>
		    pattern = 20;
 8004fe4:	2314      	movs	r3, #20
 8004fe6:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 8004fe8:	4b0b      	ldr	r3, [pc, #44]	; (8005018 <running+0x1dc>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	f083 0301 	eor.w	r3, r3, #1
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f47f af35 	bne.w	8004e62 <running+0x26>
	    }
	}
	//HAL_Delay(2000);
	//goal_flag = false;
}
 8004ff8:	bf00      	nop
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	2001ef70 	.word	0x2001ef70
 8005004:	2001ef58 	.word	0x2001ef58
 8005008:	2001f1d0 	.word	0x2001f1d0
 800500c:	2001ef67 	.word	0x2001ef67
 8005010:	428c0000 	.word	0x428c0000
 8005014:	00000000 	.word	0x00000000
 8005018:	2001ef66 	.word	0x2001ef66

0800501c <runningFlip>:

void runningFlip()
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
	if(run_flag == true){
 8005020:	4b75      	ldr	r3, [pc, #468]	; (80051f8 <runningFlip+0x1dc>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	f000 80e5 	beq.w	80051f4 <runningFlip+0x1d8>
		setLED('G');
 800502a:	2047      	movs	r0, #71	; 0x47
 800502c:	f7fc fbdc 	bl	80017e8 <setLED>
		updateTargetVelocity();
 8005030:	f000 fcf0 	bl	8005a14 <updateTargetVelocity>

		if(isTargetDistance(10) == true){
 8005034:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8005038:	f7ff fee6 	bl	8004e08 <isTargetDistance>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <runningFlip+0x42>
			saveLog();
 8005042:	f000 f931 	bl	80052a8 <saveLog>

			if(isContinuousCurvature() == true){
 8005046:	f7ff fe6f 	bl	8004d28 <isContinuousCurvature>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d002      	beq.n	8005056 <runningFlip+0x3a>
				//continuous_curve_check_cnt = 0;
				continuous_curve_flag = true;
 8005050:	4b6a      	ldr	r3, [pc, #424]	; (80051fc <runningFlip+0x1e0>)
 8005052:	2201      	movs	r2, #1
 8005054:	701a      	strb	r2, [r3, #0]
			}

			clearDistance10mm();
 8005056:	f7fc f9e5 	bl	8001424 <clearDistance10mm>
			clearTheta10mm();
 800505a:	f7fc fbb7 	bl	80017cc <clearTheta10mm>
		}

		//--- Cross Line Process ---//
		if(isCrossLine() == true && cross_line_ignore_flag == false){ //Cross line detect
 800505e:	f7ff fe15 	bl	8004c8c <isCrossLine>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d026      	beq.n	80050b6 <runningFlip+0x9a>
 8005068:	4b65      	ldr	r3, [pc, #404]	; (8005200 <runningFlip+0x1e4>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	f083 0301 	eor.w	r3, r3, #1
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01f      	beq.n	80050b6 <runningFlip+0x9a>
			cross_line_ignore_flag = true;
 8005076:	4b62      	ldr	r3, [pc, #392]	; (8005200 <runningFlip+0x1e4>)
 8005078:	2201      	movs	r2, #1
 800507a:	701a      	strb	r2, [r3, #0]
			continuous_curve_flag = true;
 800507c:	4b5f      	ldr	r3, [pc, #380]	; (80051fc <runningFlip+0x1e0>)
 800507e:	2201      	movs	r2, #1
 8005080:	701a      	strb	r2, [r3, #0]

			clearCrossLineIgnoreDistance();
 8005082:	f7fc f9a5 	bl	80013d0 <clearCrossLineIgnoreDistance>
			clearSideLineIgnoreDistance();
 8005086:	f7fc f9b1 	bl	80013ec <clearSideLineIgnoreDistance>

			if(mode == 1){
 800508a:	4b5e      	ldr	r3, [pc, #376]	; (8005204 <runningFlip+0x1e8>)
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d10b      	bne.n	80050aa <runningFlip+0x8e>
				correction_check_cnt_cross = 0;
 8005092:	4b5d      	ldr	r3, [pc, #372]	; (8005208 <runningFlip+0x1ec>)
 8005094:	2200      	movs	r2, #0
 8005096:	801a      	strh	r2, [r3, #0]
				saveCross(getTotalDistance());
 8005098:	f7fc f928 	bl	80012ec <getTotalDistance>
 800509c:	eef0 7a40 	vmov.f32	s15, s0
 80050a0:	eeb0 0a67 	vmov.f32	s0, s15
 80050a4:	f7fd ff3e 	bl	8002f24 <saveCross>
			if(mode == 1){
 80050a8:	e017      	b.n	80050da <runningFlip+0xbe>
			}
			else{
				correction_check_cnt_cross = 0;
 80050aa:	4b57      	ldr	r3, [pc, #348]	; (8005208 <runningFlip+0x1ec>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	801a      	strh	r2, [r3, #0]
				correctionTotalDistanceFromCrossLine();
 80050b0:	f000 fd26 	bl	8005b00 <correctionTotalDistanceFromCrossLine>
			if(mode == 1){
 80050b4:	e011      	b.n	80050da <runningFlip+0xbe>
				//saveDebug(getTotalDistance());
			}
		}
		else if(cross_line_ignore_flag == true && getCrossLineIgnoreDistance() >= 50){ //50
 80050b6:	4b52      	ldr	r3, [pc, #328]	; (8005200 <runningFlip+0x1e4>)
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00d      	beq.n	80050da <runningFlip+0xbe>
 80050be:	f7fc f94f 	bl	8001360 <getCrossLineIgnoreDistance>
 80050c2:	eeb0 7a40 	vmov.f32	s14, s0
 80050c6:	eddf 7a51 	vldr	s15, [pc, #324]	; 800520c <runningFlip+0x1f0>
 80050ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80050ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d2:	db02      	blt.n	80050da <runningFlip+0xbe>
			cross_line_ignore_flag = false;
 80050d4:	4b4a      	ldr	r3, [pc, #296]	; (8005200 <runningFlip+0x1e4>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	701a      	strb	r2, [r3, #0]
		}

		//--- Side marker Process---//
		if(getSideSensorStatusR() == true){ //Right side line detect
 80050da:	f000 ff2d 	bl	8005f38 <getSideSensorStatusR>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d004      	beq.n	80050ee <runningFlip+0xd2>
			side_line_judge_flag = false;
 80050e4:	4b4a      	ldr	r3, [pc, #296]	; (8005210 <runningFlip+0x1f4>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 80050ea:	f7fc f963 	bl	80013b4 <clearSideLineJudgeDistance>
		}
		if(side_line_judge_flag == false && getSideSensorStatusL() == true && getSideLineJudgeDistance() >= 60){
 80050ee:	4b48      	ldr	r3, [pc, #288]	; (8005210 <runningFlip+0x1f4>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	f083 0301 	eor.w	r3, r3, #1
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d015      	beq.n	8005128 <runningFlip+0x10c>
 80050fc:	f000 ff10 	bl	8005f20 <getSideSensorStatusL>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d010      	beq.n	8005128 <runningFlip+0x10c>
 8005106:	f7fc f90d 	bl	8001324 <getSideLineJudgeDistance>
 800510a:	eeb0 7a40 	vmov.f32	s14, s0
 800510e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8005214 <runningFlip+0x1f8>
 8005112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800511a:	db05      	blt.n	8005128 <runningFlip+0x10c>
			side_line_judge_flag = true;
 800511c:	4b3c      	ldr	r3, [pc, #240]	; (8005210 <runningFlip+0x1f4>)
 800511e:	2201      	movs	r2, #1
 8005120:	701a      	strb	r2, [r3, #0]
			clearSideLineJudgeDistance();
 8005122:	f7fc f947 	bl	80013b4 <clearSideLineJudgeDistance>
 8005126:	e02f      	b.n	8005188 <runningFlip+0x16c>
		}
		else if(side_line_judge_flag == true && getSideLineJudgeDistance() >= 60){ //Detect side line
 8005128:	4b39      	ldr	r3, [pc, #228]	; (8005210 <runningFlip+0x1f4>)
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d02b      	beq.n	8005188 <runningFlip+0x16c>
 8005130:	f7fc f8f8 	bl	8001324 <getSideLineJudgeDistance>
 8005134:	eeb0 7a40 	vmov.f32	s14, s0
 8005138:	eddf 7a36 	vldr	s15, [pc, #216]	; 8005214 <runningFlip+0x1f8>
 800513c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005144:	db20      	blt.n	8005188 <runningFlip+0x16c>
			clearSideLineJudgeDistance();
 8005146:	f7fc f935 	bl	80013b4 <clearSideLineJudgeDistance>
			side_line_judge_flag= false;
 800514a:	4b31      	ldr	r3, [pc, #196]	; (8005210 <runningFlip+0x1f4>)
 800514c:	2200      	movs	r2, #0
 800514e:	701a      	strb	r2, [r3, #0]

			if(continuous_curve_flag == true){
 8005150:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <runningFlip+0x1e0>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d017      	beq.n	8005188 <runningFlip+0x16c>
				continuous_curve_flag = false;
 8005158:	4b28      	ldr	r3, [pc, #160]	; (80051fc <runningFlip+0x1e0>)
 800515a:	2200      	movs	r2, #0
 800515c:	701a      	strb	r2, [r3, #0]
				continuous_cnt_reset_flag = true;
 800515e:	4b2e      	ldr	r3, [pc, #184]	; (8005218 <runningFlip+0x1fc>)
 8005160:	2201      	movs	r2, #1
 8005162:	701a      	strb	r2, [r3, #0]

				if(mode == 1){
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <runningFlip+0x1e8>)
 8005166:	881b      	ldrh	r3, [r3, #0]
 8005168:	2b01      	cmp	r3, #1
 800516a:	d10b      	bne.n	8005184 <runningFlip+0x168>
					correction_check_cnt_side = 0;
 800516c:	4b2b      	ldr	r3, [pc, #172]	; (800521c <runningFlip+0x200>)
 800516e:	2200      	movs	r2, #0
 8005170:	801a      	strh	r2, [r3, #0]
					saveSide(getTotalDistance());
 8005172:	f7fc f8bb 	bl	80012ec <getTotalDistance>
 8005176:	eef0 7a40 	vmov.f32	s15, s0
 800517a:	eeb0 0a67 	vmov.f32	s0, s15
 800517e:	f7fd fee9 	bl	8002f54 <saveSide>
 8005182:	e001      	b.n	8005188 <runningFlip+0x16c>
				}
				else{
					correctionTotalDistanceFromSideLine();
 8005184:	f000 fd12 	bl	8005bac <correctionTotalDistanceFromSideLine>
				}
			}
		}

		// Debug LED //
		correction_check_cnt_cross++;
 8005188:	4b1f      	ldr	r3, [pc, #124]	; (8005208 <runningFlip+0x1ec>)
 800518a:	881b      	ldrh	r3, [r3, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <runningFlip+0x1ec>)
 8005192:	801a      	strh	r2, [r3, #0]
		correction_check_cnt_side++;
 8005194:	4b21      	ldr	r3, [pc, #132]	; (800521c <runningFlip+0x200>)
 8005196:	881b      	ldrh	r3, [r3, #0]
 8005198:	3301      	adds	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	4b1f      	ldr	r3, [pc, #124]	; (800521c <runningFlip+0x200>)
 800519e:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_cross >= 10000) correction_check_cnt_cross = 10000;
 80051a0:	4b19      	ldr	r3, [pc, #100]	; (8005208 <runningFlip+0x1ec>)
 80051a2:	881b      	ldrh	r3, [r3, #0]
 80051a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d903      	bls.n	80051b4 <runningFlip+0x198>
 80051ac:	4b16      	ldr	r3, [pc, #88]	; (8005208 <runningFlip+0x1ec>)
 80051ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80051b2:	801a      	strh	r2, [r3, #0]
	    if(correction_check_cnt_side >= 10000) correction_check_cnt_side = 10000;
 80051b4:	4b19      	ldr	r3, [pc, #100]	; (800521c <runningFlip+0x200>)
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80051bc:	4293      	cmp	r3, r2
 80051be:	d903      	bls.n	80051c8 <runningFlip+0x1ac>
 80051c0:	4b16      	ldr	r3, [pc, #88]	; (800521c <runningFlip+0x200>)
 80051c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80051c6:	801a      	strh	r2, [r3, #0]

	    if(correction_check_cnt_side <= 150) setLED2('G');
 80051c8:	4b14      	ldr	r3, [pc, #80]	; (800521c <runningFlip+0x200>)
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	2b96      	cmp	r3, #150	; 0x96
 80051ce:	d803      	bhi.n	80051d8 <runningFlip+0x1bc>
 80051d0:	2047      	movs	r0, #71	; 0x47
 80051d2:	f7fc fbd7 	bl	8001984 <setLED2>
 80051d6:	e002      	b.n	80051de <runningFlip+0x1c2>
	    else setLED2('N');
 80051d8:	204e      	movs	r0, #78	; 0x4e
 80051da:	f7fc fbd3 	bl	8001984 <setLED2>

	    if(correction_check_cnt_side <= 150) setLED('B');
 80051de:	4b0f      	ldr	r3, [pc, #60]	; (800521c <runningFlip+0x200>)
 80051e0:	881b      	ldrh	r3, [r3, #0]
 80051e2:	2b96      	cmp	r3, #150	; 0x96
 80051e4:	d803      	bhi.n	80051ee <runningFlip+0x1d2>
 80051e6:	2042      	movs	r0, #66	; 0x42
 80051e8:	f7fc fafe 	bl	80017e8 <setLED>
	    else setLED('G');
	}
}
 80051ec:	e002      	b.n	80051f4 <runningFlip+0x1d8>
	    else setLED('G');
 80051ee:	2047      	movs	r0, #71	; 0x47
 80051f0:	f7fc fafa 	bl	80017e8 <setLED>
}
 80051f4:	bf00      	nop
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	2001ef6a 	.word	0x2001ef6a
 80051fc:	2001ef69 	.word	0x2001ef69
 8005200:	2001ef62 	.word	0x2001ef62
 8005204:	2001f1d0 	.word	0x2001f1d0
 8005208:	2001ef5e 	.word	0x2001ef5e
 800520c:	42480000 	.word	0x42480000
 8005210:	2001ef63 	.word	0x2001ef63
 8005214:	42700000 	.word	0x42700000
 8005218:	2001ef68 	.word	0x2001ef68
 800521c:	2001ef60 	.word	0x2001ef60

08005220 <runningInit>:

void runningInit()
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
	if(mode == 1){
 8005224:	4b18      	ldr	r3, [pc, #96]	; (8005288 <runningInit+0x68>)
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d105      	bne.n	8005238 <runningInit+0x18>
		setLED('W');
 800522c:	2057      	movs	r0, #87	; 0x57
 800522e:	f7fc fadb 	bl	80017e8 <setLED>
		ereaseLog();
 8005232:	f7fd febf 	bl	8002fb4 <ereaseLog>
 8005236:	e00b      	b.n	8005250 <runningInit+0x30>
	}
	else
	{
		loadDistance();
 8005238:	f7fd ff38 	bl	80030ac <loadDistance>
		loadTheta();
 800523c:	f7fd ff74 	bl	8003128 <loadTheta>
		loadCross();
 8005240:	f7fd ffb0 	bl	80031a4 <loadCross>
		loadSide();
 8005244:	f7fd ffec 	bl	8003220 <loadSide>
		createVelocityTable();
 8005248:	f000 f8aa 	bl	80053a0 <createVelocityTable>

		ereaseDebugLog();
 800524c:	f7fd feee 	bl	800302c <ereaseDebugLog>
	}

	clearCrossLineIgnoreDistance();
 8005250:	f7fc f8be 	bl	80013d0 <clearCrossLineIgnoreDistance>
	clearSideLineIgnoreDistance();
 8005254:	f7fc f8ca 	bl	80013ec <clearSideLineIgnoreDistance>

	start_goal_line_cnt = 0;
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <runningInit+0x6c>)
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
	cross_line_ignore_flag = false;
 800525e:	4b0c      	ldr	r3, [pc, #48]	; (8005290 <runningInit+0x70>)
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
	side_line_judge_flag = false;
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <runningInit+0x74>)
 8005266:	2200      	movs	r2, #0
 8005268:	701a      	strb	r2, [r3, #0]
	goal_judge_flag = false;
 800526a:	4b0b      	ldr	r3, [pc, #44]	; (8005298 <runningInit+0x78>)
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
	continuous_cnt_reset_flag = true;
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <runningInit+0x7c>)
 8005272:	2201      	movs	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]
	continuous_curve_flag = false;
 8005276:	4b0a      	ldr	r3, [pc, #40]	; (80052a0 <runningInit+0x80>)
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
	run_flag = true;
 800527c:	4b09      	ldr	r3, [pc, #36]	; (80052a4 <runningInit+0x84>)
 800527e:	2201      	movs	r2, #1
 8005280:	701a      	strb	r2, [r3, #0]
}
 8005282:	bf00      	nop
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	2001f1d0 	.word	0x2001f1d0
 800528c:	2001ef58 	.word	0x2001ef58
 8005290:	2001ef62 	.word	0x2001ef62
 8005294:	2001ef63 	.word	0x2001ef63
 8005298:	2001ef67 	.word	0x2001ef67
 800529c:	2001ef68 	.word	0x2001ef68
 80052a0:	2001ef69 	.word	0x2001ef69
 80052a4:	2001ef6a 	.word	0x2001ef6a

080052a8 <saveLog>:

void saveLog(){
 80052a8:	b580      	push	{r7, lr}
 80052aa:	af00      	add	r7, sp, #0
	if(logging_flag == true){
 80052ac:	4b15      	ldr	r3, [pc, #84]	; (8005304 <saveLog+0x5c>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d010      	beq.n	80052d6 <saveLog+0x2e>
		saveDistance(getDistance10mm());
 80052b4:	f7fc f8a8 	bl	8001408 <getDistance10mm>
 80052b8:	eef0 7a40 	vmov.f32	s15, s0
 80052bc:	eeb0 0a67 	vmov.f32	s0, s15
 80052c0:	f7fd fe00 	bl	8002ec4 <saveDistance>
		saveTheta(getTheta10mm());
 80052c4:	f7fc fa74 	bl	80017b0 <getTheta10mm>
 80052c8:	eef0 7a40 	vmov.f32	s15, s0
 80052cc:	eeb0 0a67 	vmov.f32	s0, s15
 80052d0:	f7fd fe10 	bl	8002ef4 <saveTheta>
		saveDebug(getTargetVelocity());
		saveDebug(getCurrentVelocity());
		//saveDebug(getPID());
		//saveDebug(getTargetAcceleration());
	}
}
 80052d4:	e013      	b.n	80052fe <saveLog+0x56>
	else if(velocity_update_flag == true){
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <saveLog+0x60>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00f      	beq.n	80052fe <saveLog+0x56>
		saveDebug(getTargetVelocity());
 80052de:	f7fe fa71 	bl	80037c4 <getTargetVelocity>
 80052e2:	eef0 7a40 	vmov.f32	s15, s0
 80052e6:	eeb0 0a67 	vmov.f32	s0, s15
 80052ea:	f7fd fe4b 	bl	8002f84 <saveDebug>
		saveDebug(getCurrentVelocity());
 80052ee:	f7fe fa2b 	bl	8003748 <getCurrentVelocity>
 80052f2:	eef0 7a40 	vmov.f32	s15, s0
 80052f6:	eeb0 0a67 	vmov.f32	s0, s15
 80052fa:	f7fd fe43 	bl	8002f84 <saveDebug>
}
 80052fe:	bf00      	nop
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	2001ef6b 	.word	0x2001ef6b
 8005308:	2001ef6c 	.word	0x2001ef6c

0800530c <startLogging>:

void startLogging(){
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005310:	f7fc f888 	bl	8001424 <clearDistance10mm>
	clearTheta10mm();
 8005314:	f7fc fa5a 	bl	80017cc <clearTheta10mm>
	clearTotalDistance();
 8005318:	f7fc f830 	bl	800137c <clearTotalDistance>
	logging_flag = true;
 800531c:	4b02      	ldr	r3, [pc, #8]	; (8005328 <startLogging+0x1c>)
 800531e:	2201      	movs	r2, #1
 8005320:	701a      	strb	r2, [r3, #0]
}
 8005322:	bf00      	nop
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	2001ef6b 	.word	0x2001ef6b

0800532c <stopLogging>:

void stopLogging()
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
	logging_flag = false;
 8005330:	4b03      	ldr	r3, [pc, #12]	; (8005340 <stopLogging+0x14>)
 8005332:	2200      	movs	r2, #0
 8005334:	701a      	strb	r2, [r3, #0]
}
 8005336:	bf00      	nop
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	2001ef6b 	.word	0x2001ef6b

08005344 <startVelocityUpdate>:

void startVelocityUpdate(){
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
	clearDistance10mm();
 8005348:	f7fc f86c 	bl	8001424 <clearDistance10mm>
	clearTotalDistance();
 800534c:	f7fc f816 	bl	800137c <clearTotalDistance>
	velocity_table_idx = 0;
 8005350:	4b08      	ldr	r3, [pc, #32]	; (8005374 <startVelocityUpdate+0x30>)
 8005352:	2200      	movs	r2, #0
 8005354:	801a      	strh	r2, [r3, #0]
	ref_distance = 0;
 8005356:	4b08      	ldr	r3, [pc, #32]	; (8005378 <startVelocityUpdate+0x34>)
 8005358:	f04f 0200 	mov.w	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
	velocity_update_flag = true;
 800535e:	4b07      	ldr	r3, [pc, #28]	; (800537c <startVelocityUpdate+0x38>)
 8005360:	2201      	movs	r2, #1
 8005362:	701a      	strb	r2, [r3, #0]

	cross_line_idx = 0;
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <startVelocityUpdate+0x3c>)
 8005366:	2200      	movs	r2, #0
 8005368:	801a      	strh	r2, [r3, #0]
	side_line_idx = 0;
 800536a:	4b06      	ldr	r3, [pc, #24]	; (8005384 <startVelocityUpdate+0x40>)
 800536c:	2200      	movs	r2, #0
 800536e:	801a      	strh	r2, [r3, #0]
}
 8005370:	bf00      	nop
 8005372:	bd80      	pop	{r7, pc}
 8005374:	2001f4b4 	.word	0x2001f4b4
 8005378:	2001f4b0 	.word	0x2001f4b0
 800537c:	2001ef6c 	.word	0x2001ef6c
 8005380:	2001ef5a 	.word	0x2001ef5a
 8005384:	2001ef5c 	.word	0x2001ef5c

08005388 <stopVelocityUpdate>:

void stopVelocityUpdate()
{
 8005388:	b480      	push	{r7}
 800538a:	af00      	add	r7, sp, #0
	velocity_update_flag = false;
 800538c:	4b03      	ldr	r3, [pc, #12]	; (800539c <stopVelocityUpdate+0x14>)
 800538e:	2200      	movs	r2, #0
 8005390:	701a      	strb	r2, [r3, #0]
}
 8005392:	bf00      	nop
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	2001ef6c 	.word	0x2001ef6c

080053a0 <createVelocityTable>:

void createVelocityTable(){
 80053a0:	b590      	push	{r4, r7, lr}
 80053a2:	b08d      	sub	sp, #52	; 0x34
 80053a4:	af00      	add	r7, sp, #0
	const float *p_distance, *p_theta;
	p_distance = getDistanceArrayPointer();
 80053a6:	f7fd ffb7 	bl	8003318 <getDistanceArrayPointer>
 80053aa:	6178      	str	r0, [r7, #20]
	p_theta = getThetaArrayPointer();
 80053ac:	f7fd ffbe 	bl	800332c <getThetaArrayPointer>
 80053b0:	6138      	str	r0, [r7, #16]
	float temp_distance, temp_theta;

	uint16_t log_size = getDistanceLogSize();
 80053b2:	f7fd fe4b 	bl	800304c <getDistanceLogSize>
 80053b6:	4603      	mov	r3, r0
 80053b8:	81fb      	strh	r3, [r7, #14]

	uint16_t crossline_idx = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	857b      	strh	r3, [r7, #42]	; 0x2a
	float total_distance = 0;
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	627b      	str	r3, [r7, #36]	; 0x24
	for(uint16_t i = 0; i < log_size; i++){
 80053c4:	2300      	movs	r3, #0
 80053c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80053c8:	e079      	b.n	80054be <createVelocityTable+0x11e>
		temp_distance = p_distance[i];
 80053ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	4413      	add	r3, r2
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80053d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	4413      	add	r3, r2
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if(temp_theta == 0) temp_theta = 0.00001;
 80053e2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80053e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80053ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ee:	d101      	bne.n	80053f4 <createVelocityTable+0x54>
 80053f0:	4b4f      	ldr	r3, [pc, #316]	; (8005530 <createVelocityTable+0x190>)
 80053f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		float radius = fabs(temp_distance / temp_theta);
 80053f4:	edd7 6a02 	vldr	s13, [r7, #8]
 80053f8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80053fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005400:	eef0 7ae7 	vabs.f32	s15, s15
 8005404:	edc7 7a07 	vstr	s15, [r7, #28]
		if(radius >= straight_radius) radius = straight_radius;
 8005408:	4b4a      	ldr	r3, [pc, #296]	; (8005534 <createVelocityTable+0x194>)
 800540a:	edd3 7a00 	vldr	s15, [r3]
 800540e:	ed97 7a07 	vldr	s14, [r7, #28]
 8005412:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541a:	db02      	blt.n	8005422 <createVelocityTable+0x82>
 800541c:	4b45      	ldr	r3, [pc, #276]	; (8005534 <createVelocityTable+0x194>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	61fb      	str	r3, [r7, #28]
		velocity_table[i] = radius2Velocity(radius);
 8005422:	8c7c      	ldrh	r4, [r7, #34]	; 0x22
 8005424:	ed97 0a07 	vldr	s0, [r7, #28]
 8005428:	f000 f892 	bl	8005550 <radius2Velocity>
 800542c:	eef0 7a40 	vmov.f32	s15, s0
 8005430:	4a41      	ldr	r2, [pc, #260]	; (8005538 <createVelocityTable+0x198>)
 8005432:	00a3      	lsls	r3, r4, #2
 8005434:	4413      	add	r3, r2
 8005436:	edc3 7a00 	vstr	s15, [r3]

		//Forced maximum speed on the crossline
		total_distance += temp_distance;
 800543a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800543e:	edd7 7a02 	vldr	s15, [r7, #8]
 8005442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005446:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

		float crossline_distance = getCrossLog(crossline_idx);
 800544a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800544c:	4618      	mov	r0, r3
 800544e:	f7fd ff8d 	bl	800336c <getCrossLog>
 8005452:	ed87 0a01 	vstr	s0, [r7, #4]
		if(crossline_distance + 60 >= total_distance && total_distance >= crossline_distance - 60){
 8005456:	edd7 7a01 	vldr	s15, [r7, #4]
 800545a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800553c <createVelocityTable+0x19c>
 800545e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005462:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005466:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800546a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800546e:	d813      	bhi.n	8005498 <createVelocityTable+0xf8>
 8005470:	edd7 7a01 	vldr	s15, [r7, #4]
 8005474:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800553c <createVelocityTable+0x19c>
 8005478:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800547c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005480:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005488:	db06      	blt.n	8005498 <createVelocityTable+0xf8>
			 velocity_table[i] = max_velocity;
 800548a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800548c:	4a2c      	ldr	r2, [pc, #176]	; (8005540 <createVelocityTable+0x1a0>)
 800548e:	6812      	ldr	r2, [r2, #0]
 8005490:	4929      	ldr	r1, [pc, #164]	; (8005538 <createVelocityTable+0x198>)
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	601a      	str	r2, [r3, #0]
		}

		if(total_distance >= crossline_distance + 60){
 8005498:	edd7 7a01 	vldr	s15, [r7, #4]
 800549c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800553c <createVelocityTable+0x19c>
 80054a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054a4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80054a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b0:	db02      	blt.n	80054b8 <createVelocityTable+0x118>
			crossline_idx++;
 80054b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80054b4:	3301      	adds	r3, #1
 80054b6:	857b      	strh	r3, [r7, #42]	; 0x2a
	for(uint16_t i = 0; i < log_size; i++){
 80054b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80054ba:	3301      	adds	r3, #1
 80054bc:	847b      	strh	r3, [r7, #34]	; 0x22
 80054be:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80054c0:	89fb      	ldrh	r3, [r7, #14]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d381      	bcc.n	80053ca <createVelocityTable+0x2a>
		}

	}
	for(uint16_t i = log_size; i < 6000; i++){
 80054c6:	89fb      	ldrh	r3, [r7, #14]
 80054c8:	837b      	strh	r3, [r7, #26]
 80054ca:	e009      	b.n	80054e0 <createVelocityTable+0x140>
		velocity_table[i] = max_velocity;
 80054cc:	8b7b      	ldrh	r3, [r7, #26]
 80054ce:	4a1c      	ldr	r2, [pc, #112]	; (8005540 <createVelocityTable+0x1a0>)
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	4919      	ldr	r1, [pc, #100]	; (8005538 <createVelocityTable+0x198>)
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = log_size; i < 6000; i++){
 80054da:	8b7b      	ldrh	r3, [r7, #26]
 80054dc:	3301      	adds	r3, #1
 80054de:	837b      	strh	r3, [r7, #26]
 80054e0:	8b7b      	ldrh	r3, [r7, #26]
 80054e2:	f241 726f 	movw	r2, #5999	; 0x176f
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d9f0      	bls.n	80054cc <createVelocityTable+0x12c>
		//velocity_table[i] = 2.0;
	}


	addDecelerationDistanceMergin(velocity_table, 13); //8
 80054ea:	210d      	movs	r1, #13
 80054ec:	4812      	ldr	r0, [pc, #72]	; (8005538 <createVelocityTable+0x198>)
 80054ee:	f000 f8b3 	bl	8005658 <addDecelerationDistanceMergin>
	addAccelerationDistanceMergin(velocity_table, 5); //15
 80054f2:	2105      	movs	r1, #5
 80054f4:	4810      	ldr	r0, [pc, #64]	; (8005538 <createVelocityTable+0x198>)
 80054f6:	f000 f8fd 	bl	80056f4 <addAccelerationDistanceMergin>
	//shiftVelocityTable(velocity_table, 1);

	velocity_table[0] = min_velocity;
 80054fa:	4b12      	ldr	r3, [pc, #72]	; (8005544 <createVelocityTable+0x1a4>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a0e      	ldr	r2, [pc, #56]	; (8005538 <createVelocityTable+0x198>)
 8005500:	6013      	str	r3, [r2, #0]

	decelerateProcessing(deceleration, p_distance);
 8005502:	4b11      	ldr	r3, [pc, #68]	; (8005548 <createVelocityTable+0x1a8>)
 8005504:	edd3 7a00 	vldr	s15, [r3]
 8005508:	6978      	ldr	r0, [r7, #20]
 800550a:	eeb0 0a67 	vmov.f32	s0, s15
 800550e:	f000 f943 	bl	8005798 <decelerateProcessing>
	accelerateProcessing(acceleration, p_distance);
 8005512:	4b0e      	ldr	r3, [pc, #56]	; (800554c <createVelocityTable+0x1ac>)
 8005514:	edd3 7a00 	vldr	s15, [r3]
 8005518:	6978      	ldr	r0, [r7, #20]
 800551a:	eeb0 0a67 	vmov.f32	s0, s15
 800551e:	f000 f9db 	bl	80058d8 <accelerateProcessing>

	CreateAcceleration(p_distance);
 8005522:	6978      	ldr	r0, [r7, #20]
 8005524:	f000 fb98 	bl	8005c58 <CreateAcceleration>

}
 8005528:	bf00      	nop
 800552a:	3734      	adds	r7, #52	; 0x34
 800552c:	46bd      	mov	sp, r7
 800552e:	bd90      	pop	{r4, r7, pc}
 8005530:	3727c5ac 	.word	0x3727c5ac
 8005534:	2001ef80 	.word	0x2001ef80
 8005538:	20016e70 	.word	0x20016e70
 800553c:	42700000 	.word	0x42700000
 8005540:	2001ef74 	.word	0x2001ef74
 8005544:	2001ef70 	.word	0x2001ef70
 8005548:	2001ef7c 	.word	0x2001ef7c
 800554c:	2001ef78 	.word	0x2001ef78

08005550 <radius2Velocity>:

float radius2Velocity(float radius){
 8005550:	b5b0      	push	{r4, r5, r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	ed87 0a01 	vstr	s0, [r7, #4]
	float velocity;

	if(mode == 2){
 800555a:	4b3b      	ldr	r3, [pc, #236]	; (8005648 <radius2Velocity+0xf8>)
 800555c:	881b      	ldrh	r3, [r3, #0]
 800555e:	2b02      	cmp	r3, #2
 8005560:	d118      	bne.n	8005594 <radius2Velocity+0x44>
		velocity = radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
 8005562:	4b3a      	ldr	r3, [pc, #232]	; (800564c <radius2Velocity+0xfc>)
 8005564:	ed93 7a00 	vldr	s14, [r3]
 8005568:	4b39      	ldr	r3, [pc, #228]	; (8005650 <radius2Velocity+0x100>)
 800556a:	edd3 7a00 	vldr	s15, [r3]
 800556e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005572:	4b38      	ldr	r3, [pc, #224]	; (8005654 <radius2Velocity+0x104>)
 8005574:	edd3 7a00 	vldr	s15, [r3]
 8005578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800557c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005580:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005584:	4b32      	ldr	r3, [pc, #200]	; (8005650 <radius2Velocity+0x100>)
 8005586:	edd3 7a00 	vldr	s15, [r3]
 800558a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800558e:	edc7 7a03 	vstr	s15, [r7, #12]
 8005592:	e04a      	b.n	800562a <radius2Velocity+0xda>
	}
	else if(mode == 3){
 8005594:	4b2c      	ldr	r3, [pc, #176]	; (8005648 <radius2Velocity+0xf8>)
 8005596:	881b      	ldrh	r3, [r3, #0]
 8005598:	2b03      	cmp	r3, #3
 800559a:	d146      	bne.n	800562a <radius2Velocity+0xda>
		velocity = 1e-3 * radius * radius * ((max_velocity - min_velocity) / straight_radius) + min_velocity;
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7fa ffd3 	bl	8000548 <__aeabi_f2d>
 80055a2:	a327      	add	r3, pc, #156	; (adr r3, 8005640 <radius2Velocity+0xf0>)
 80055a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a8:	f7fb f826 	bl	80005f8 <__aeabi_dmul>
 80055ac:	4603      	mov	r3, r0
 80055ae:	460c      	mov	r4, r1
 80055b0:	4625      	mov	r5, r4
 80055b2:	461c      	mov	r4, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fa ffc7 	bl	8000548 <__aeabi_f2d>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4620      	mov	r0, r4
 80055c0:	4629      	mov	r1, r5
 80055c2:	f7fb f819 	bl	80005f8 <__aeabi_dmul>
 80055c6:	4603      	mov	r3, r0
 80055c8:	460c      	mov	r4, r1
 80055ca:	4625      	mov	r5, r4
 80055cc:	461c      	mov	r4, r3
 80055ce:	4b1f      	ldr	r3, [pc, #124]	; (800564c <radius2Velocity+0xfc>)
 80055d0:	ed93 7a00 	vldr	s14, [r3]
 80055d4:	4b1e      	ldr	r3, [pc, #120]	; (8005650 <radius2Velocity+0x100>)
 80055d6:	edd3 7a00 	vldr	s15, [r3]
 80055da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80055de:	4b1d      	ldr	r3, [pc, #116]	; (8005654 <radius2Velocity+0x104>)
 80055e0:	edd3 7a00 	vldr	s15, [r3]
 80055e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80055e8:	ee16 0a90 	vmov	r0, s13
 80055ec:	f7fa ffac 	bl	8000548 <__aeabi_f2d>
 80055f0:	4602      	mov	r2, r0
 80055f2:	460b      	mov	r3, r1
 80055f4:	4620      	mov	r0, r4
 80055f6:	4629      	mov	r1, r5
 80055f8:	f7fa fffe 	bl	80005f8 <__aeabi_dmul>
 80055fc:	4603      	mov	r3, r0
 80055fe:	460c      	mov	r4, r1
 8005600:	4625      	mov	r5, r4
 8005602:	461c      	mov	r4, r3
 8005604:	4b12      	ldr	r3, [pc, #72]	; (8005650 <radius2Velocity+0x100>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f7fa ff9d 	bl	8000548 <__aeabi_f2d>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4620      	mov	r0, r4
 8005614:	4629      	mov	r1, r5
 8005616:	f7fa fe39 	bl	800028c <__adddf3>
 800561a:	4603      	mov	r3, r0
 800561c:	460c      	mov	r4, r1
 800561e:	4618      	mov	r0, r3
 8005620:	4621      	mov	r1, r4
 8005622:	f7fb fae1 	bl	8000be8 <__aeabi_d2f>
 8005626:	4603      	mov	r3, r0
 8005628:	60fb      	str	r3, [r7, #12]
	}

	return velocity;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	ee07 3a90 	vmov	s15, r3
}
 8005630:	eeb0 0a67 	vmov.f32	s0, s15
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bdb0      	pop	{r4, r5, r7, pc}
 800563a:	bf00      	nop
 800563c:	f3af 8000 	nop.w
 8005640:	d2f1a9fc 	.word	0xd2f1a9fc
 8005644:	3f50624d 	.word	0x3f50624d
 8005648:	2001f1d0 	.word	0x2001f1d0
 800564c:	2001ef74 	.word	0x2001ef74
 8005650:	2001ef70 	.word	0x2001ef70
 8005654:	2001ef80 	.word	0x2001ef80

08005658 <addDecelerationDistanceMergin>:

//*table：速度テーブル（一定距離ごとの目標速度が格納された配列）
//mergin_size：マージンする距離（10mmごとに速度テーブルを生成している場合，10を引数にすると100mmマージンされます）
void addDecelerationDistanceMergin(float *table, int16_t mergin_size)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	460b      	mov	r3, r1
 8005662:	807b      	strh	r3, [r7, #2]
	uint16_t idx = mergin_size;
 8005664:	887b      	ldrh	r3, [r7, #2]
 8005666:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 8005668:	8afb      	ldrh	r3, [r7, #22]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	4413      	add	r3, r2
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	613b      	str	r3, [r7, #16]

	while(idx <= 6000 - 1){
 8005674:	e033      	b.n	80056de <addDecelerationDistanceMergin+0x86>
		if(pre_target_velocity > table[idx]){
 8005676:	8afb      	ldrh	r3, [r7, #22]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	edd3 7a00 	vldr	s15, [r3]
 8005682:	ed97 7a04 	vldr	s14, [r7, #16]
 8005686:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800568a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568e:	dd1d      	ble.n	80056cc <addDecelerationDistanceMergin+0x74>
			float low_velocity = table[idx];
 8005690:	8afb      	ldrh	r3, [r7, #22]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	4413      	add	r3, r2
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 800569c:	887b      	ldrh	r3, [r7, #2]
 800569e:	8afa      	ldrh	r2, [r7, #22]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	81fb      	strh	r3, [r7, #14]
 80056a4:	e008      	b.n	80056b8 <addDecelerationDistanceMergin+0x60>
				table[i] = low_velocity;
 80056a6:	89fb      	ldrh	r3, [r7, #14]
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx - mergin_size; i < idx; i++){
 80056b2:	89fb      	ldrh	r3, [r7, #14]
 80056b4:	3301      	adds	r3, #1
 80056b6:	81fb      	strh	r3, [r7, #14]
 80056b8:	89fa      	ldrh	r2, [r7, #14]
 80056ba:	8afb      	ldrh	r3, [r7, #22]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d3f2      	bcc.n	80056a6 <addDecelerationDistanceMergin+0x4e>
			}
			pre_target_velocity = table[idx];
 80056c0:	8afb      	ldrh	r3, [r7, #22]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	4413      	add	r3, r2
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 80056cc:	8afb      	ldrh	r3, [r7, #22]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	4413      	add	r3, r2
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	613b      	str	r3, [r7, #16]

		idx++;
 80056d8:	8afb      	ldrh	r3, [r7, #22]
 80056da:	3301      	adds	r3, #1
 80056dc:	82fb      	strh	r3, [r7, #22]
	while(idx <= 6000 - 1){
 80056de:	8afb      	ldrh	r3, [r7, #22]
 80056e0:	f241 726f 	movw	r2, #5999	; 0x176f
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d9c6      	bls.n	8005676 <addDecelerationDistanceMergin+0x1e>
	}
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <addAccelerationDistanceMergin>:

void addAccelerationDistanceMergin(float *table, int16_t mergin_size)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	807b      	strh	r3, [r7, #2]
	uint16_t idx = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	82fb      	strh	r3, [r7, #22]
	float pre_target_velocity = table[idx];
 8005704:	8afb      	ldrh	r3, [r7, #22]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4413      	add	r3, r2
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	613b      	str	r3, [r7, #16]

	while(idx <= 6000 - 1 - mergin_size){
 8005710:	e034      	b.n	800577c <addAccelerationDistanceMergin+0x88>
		if(pre_target_velocity < table[idx]){
 8005712:	8afb      	ldrh	r3, [r7, #22]
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	edd3 7a00 	vldr	s15, [r3]
 800571e:	ed97 7a04 	vldr	s14, [r7, #16]
 8005722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800572a:	d51e      	bpl.n	800576a <addAccelerationDistanceMergin+0x76>
			float low_velocity = pre_target_velocity;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	60bb      	str	r3, [r7, #8]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 8005730:	8afb      	ldrh	r3, [r7, #22]
 8005732:	81fb      	strh	r3, [r7, #14]
 8005734:	e008      	b.n	8005748 <addAccelerationDistanceMergin+0x54>
				table[i] = low_velocity;
 8005736:	89fb      	ldrh	r3, [r7, #14]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	4413      	add	r3, r2
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	601a      	str	r2, [r3, #0]
			for(uint16_t i = idx; i < idx + mergin_size; i++){
 8005742:	89fb      	ldrh	r3, [r7, #14]
 8005744:	3301      	adds	r3, #1
 8005746:	81fb      	strh	r3, [r7, #14]
 8005748:	89fa      	ldrh	r2, [r7, #14]
 800574a:	8af9      	ldrh	r1, [r7, #22]
 800574c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005750:	440b      	add	r3, r1
 8005752:	429a      	cmp	r2, r3
 8005754:	dbef      	blt.n	8005736 <addAccelerationDistanceMergin+0x42>
			}
			idx += mergin_size;
 8005756:	887a      	ldrh	r2, [r7, #2]
 8005758:	8afb      	ldrh	r3, [r7, #22]
 800575a:	4413      	add	r3, r2
 800575c:	82fb      	strh	r3, [r7, #22]
			pre_target_velocity = table[idx];
 800575e:	8afb      	ldrh	r3, [r7, #22]
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4413      	add	r3, r2
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	613b      	str	r3, [r7, #16]
		}

		pre_target_velocity = table[idx];
 800576a:	8afb      	ldrh	r3, [r7, #22]
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4413      	add	r3, r2
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	613b      	str	r3, [r7, #16]

		idx++;
 8005776:	8afb      	ldrh	r3, [r7, #22]
 8005778:	3301      	adds	r3, #1
 800577a:	82fb      	strh	r3, [r7, #22]
	while(idx <= 6000 - 1 - mergin_size){
 800577c:	8afa      	ldrh	r2, [r7, #22]
 800577e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005782:	f5c3 53bb 	rsb	r3, r3, #5984	; 0x1760
 8005786:	330f      	adds	r3, #15
 8005788:	429a      	cmp	r2, r3
 800578a:	ddc2      	ble.n	8005712 <addAccelerationDistanceMergin+0x1e>
	}
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <decelerateProcessing>:

void decelerateProcessing(const float am, const float *p_distance){
 8005798:	b5b0      	push	{r4, r5, r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	ed87 0a01 	vstr	s0, [r7, #4]
 80057a2:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getDistanceLogSize();
 80057a4:	f7fd fc52 	bl	800304c <getDistanceLogSize>
 80057a8:	4603      	mov	r3, r0
 80057aa:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 80057ac:	8abb      	ldrh	r3, [r7, #20]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	82fb      	strh	r3, [r7, #22]
 80057b2:	e07f      	b.n	80058b4 <decelerateProcessing+0x11c>
		float v_diff = velocity_table[i-1] - velocity_table[i];
 80057b4:	8afb      	ldrh	r3, [r7, #22]
 80057b6:	3b01      	subs	r3, #1
 80057b8:	4a45      	ldr	r2, [pc, #276]	; (80058d0 <decelerateProcessing+0x138>)
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	ed93 7a00 	vldr	s14, [r3]
 80057c2:	8afb      	ldrh	r3, [r7, #22]
 80057c4:	4a42      	ldr	r2, [pc, #264]	; (80058d0 <decelerateProcessing+0x138>)
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	4413      	add	r3, r2
 80057ca:	edd3 7a00 	vldr	s15, [r3]
 80057ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057d2:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 80057d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80057da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80057de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057e2:	dd64      	ble.n	80058ae <decelerateProcessing+0x116>
			float t = p_distance[i]*1e-3 / v_diff;
 80057e4:	8afb      	ldrh	r3, [r7, #22]
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	4413      	add	r3, r2
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fa feaa 	bl	8000548 <__aeabi_f2d>
 80057f4:	a334      	add	r3, pc, #208	; (adr r3, 80058c8 <decelerateProcessing+0x130>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f7fa fefd 	bl	80005f8 <__aeabi_dmul>
 80057fe:	4603      	mov	r3, r0
 8005800:	460c      	mov	r4, r1
 8005802:	4625      	mov	r5, r4
 8005804:	461c      	mov	r4, r3
 8005806:	6938      	ldr	r0, [r7, #16]
 8005808:	f7fa fe9e 	bl	8000548 <__aeabi_f2d>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4620      	mov	r0, r4
 8005812:	4629      	mov	r1, r5
 8005814:	f7fb f81a 	bl	800084c <__aeabi_ddiv>
 8005818:	4603      	mov	r3, r0
 800581a:	460c      	mov	r4, r1
 800581c:	4618      	mov	r0, r3
 800581e:	4621      	mov	r1, r4
 8005820:	f7fb f9e2 	bl	8000be8 <__aeabi_d2f>
 8005824:	4603      	mov	r3, r0
 8005826:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 8005828:	edd7 6a04 	vldr	s13, [r7, #16]
 800582c:	ed97 7a03 	vldr	s14, [r7, #12]
 8005830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005834:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 8005838:	ed97 7a02 	vldr	s14, [r7, #8]
 800583c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005840:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005848:	dd31      	ble.n	80058ae <decelerateProcessing+0x116>
				velocity_table[i-1] = velocity_table[i] + am * p_distance[i]*1e-3;
 800584a:	8afb      	ldrh	r3, [r7, #22]
 800584c:	4a20      	ldr	r2, [pc, #128]	; (80058d0 <decelerateProcessing+0x138>)
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4618      	mov	r0, r3
 8005856:	f7fa fe77 	bl	8000548 <__aeabi_f2d>
 800585a:	4604      	mov	r4, r0
 800585c:	460d      	mov	r5, r1
 800585e:	8afb      	ldrh	r3, [r7, #22]
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	4413      	add	r3, r2
 8005866:	ed93 7a00 	vldr	s14, [r3]
 800586a:	edd7 7a01 	vldr	s15, [r7, #4]
 800586e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005872:	ee17 0a90 	vmov	r0, s15
 8005876:	f7fa fe67 	bl	8000548 <__aeabi_f2d>
 800587a:	a313      	add	r3, pc, #76	; (adr r3, 80058c8 <decelerateProcessing+0x130>)
 800587c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005880:	f7fa feba 	bl	80005f8 <__aeabi_dmul>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4620      	mov	r0, r4
 800588a:	4629      	mov	r1, r5
 800588c:	f7fa fcfe 	bl	800028c <__adddf3>
 8005890:	4603      	mov	r3, r0
 8005892:	460c      	mov	r4, r1
 8005894:	4619      	mov	r1, r3
 8005896:	4622      	mov	r2, r4
 8005898:	8afb      	ldrh	r3, [r7, #22]
 800589a:	1e5c      	subs	r4, r3, #1
 800589c:	4608      	mov	r0, r1
 800589e:	4611      	mov	r1, r2
 80058a0:	f7fb f9a2 	bl	8000be8 <__aeabi_d2f>
 80058a4:	4601      	mov	r1, r0
 80058a6:	4a0a      	ldr	r2, [pc, #40]	; (80058d0 <decelerateProcessing+0x138>)
 80058a8:	00a3      	lsls	r3, r4, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	6019      	str	r1, [r3, #0]
	for(uint16_t i = log_size - 1; i >= 1; i--){
 80058ae:	8afb      	ldrh	r3, [r7, #22]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	82fb      	strh	r3, [r7, #22]
 80058b4:	8afb      	ldrh	r3, [r7, #22]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f47f af7c 	bne.w	80057b4 <decelerateProcessing+0x1c>
			}
		}
	}
}
 80058bc:	bf00      	nop
 80058be:	3718      	adds	r7, #24
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bdb0      	pop	{r4, r5, r7, pc}
 80058c4:	f3af 8000 	nop.w
 80058c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80058cc:	3f50624d 	.word	0x3f50624d
 80058d0:	20016e70 	.word	0x20016e70
 80058d4:	00000000 	.word	0x00000000

080058d8 <accelerateProcessing>:

void accelerateProcessing(const float am, const float *p_distance){
 80058d8:	b5b0      	push	{r4, r5, r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af00      	add	r7, sp, #0
 80058de:	ed87 0a01 	vstr	s0, [r7, #4]
 80058e2:	6038      	str	r0, [r7, #0]
	uint16_t log_size = getDistanceLogSize();
 80058e4:	f7fd fbb2 	bl	800304c <getDistanceLogSize>
 80058e8:	4603      	mov	r3, r0
 80058ea:	82bb      	strh	r3, [r7, #20]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 80058ec:	2300      	movs	r3, #0
 80058ee:	82fb      	strh	r3, [r7, #22]
 80058f0:	e07f      	b.n	80059f2 <accelerateProcessing+0x11a>
		float v_diff = velocity_table[i+1] - velocity_table[i];
 80058f2:	8afb      	ldrh	r3, [r7, #22]
 80058f4:	3301      	adds	r3, #1
 80058f6:	4a46      	ldr	r2, [pc, #280]	; (8005a10 <accelerateProcessing+0x138>)
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	ed93 7a00 	vldr	s14, [r3]
 8005900:	8afb      	ldrh	r3, [r7, #22]
 8005902:	4a43      	ldr	r2, [pc, #268]	; (8005a10 <accelerateProcessing+0x138>)
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	edd3 7a00 	vldr	s15, [r3]
 800590c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005910:	edc7 7a04 	vstr	s15, [r7, #16]

		if(v_diff > 0){
 8005914:	edd7 7a04 	vldr	s15, [r7, #16]
 8005918:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800591c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005920:	dd64      	ble.n	80059ec <accelerateProcessing+0x114>
			float t = p_distance[i]*1e-3 / v_diff;
 8005922:	8afb      	ldrh	r3, [r7, #22]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	4413      	add	r3, r2
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4618      	mov	r0, r3
 800592e:	f7fa fe0b 	bl	8000548 <__aeabi_f2d>
 8005932:	a335      	add	r3, pc, #212	; (adr r3, 8005a08 <accelerateProcessing+0x130>)
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	f7fa fe5e 	bl	80005f8 <__aeabi_dmul>
 800593c:	4603      	mov	r3, r0
 800593e:	460c      	mov	r4, r1
 8005940:	4625      	mov	r5, r4
 8005942:	461c      	mov	r4, r3
 8005944:	6938      	ldr	r0, [r7, #16]
 8005946:	f7fa fdff 	bl	8000548 <__aeabi_f2d>
 800594a:	4602      	mov	r2, r0
 800594c:	460b      	mov	r3, r1
 800594e:	4620      	mov	r0, r4
 8005950:	4629      	mov	r1, r5
 8005952:	f7fa ff7b 	bl	800084c <__aeabi_ddiv>
 8005956:	4603      	mov	r3, r0
 8005958:	460c      	mov	r4, r1
 800595a:	4618      	mov	r0, r3
 800595c:	4621      	mov	r1, r4
 800595e:	f7fb f943 	bl	8000be8 <__aeabi_d2f>
 8005962:	4603      	mov	r3, r0
 8005964:	60fb      	str	r3, [r7, #12]
			float a = v_diff / t;
 8005966:	edd7 6a04 	vldr	s13, [r7, #16]
 800596a:	ed97 7a03 	vldr	s14, [r7, #12]
 800596e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005972:	edc7 7a02 	vstr	s15, [r7, #8]
			if(a > am){
 8005976:	ed97 7a02 	vldr	s14, [r7, #8]
 800597a:	edd7 7a01 	vldr	s15, [r7, #4]
 800597e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005986:	dd31      	ble.n	80059ec <accelerateProcessing+0x114>
				velocity_table[i+1] = velocity_table[i] + am * p_distance[i]*1e-3;
 8005988:	8afb      	ldrh	r3, [r7, #22]
 800598a:	4a21      	ldr	r2, [pc, #132]	; (8005a10 <accelerateProcessing+0x138>)
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4618      	mov	r0, r3
 8005994:	f7fa fdd8 	bl	8000548 <__aeabi_f2d>
 8005998:	4604      	mov	r4, r0
 800599a:	460d      	mov	r5, r1
 800599c:	8afb      	ldrh	r3, [r7, #22]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	4413      	add	r3, r2
 80059a4:	ed93 7a00 	vldr	s14, [r3]
 80059a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80059ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059b0:	ee17 0a90 	vmov	r0, s15
 80059b4:	f7fa fdc8 	bl	8000548 <__aeabi_f2d>
 80059b8:	a313      	add	r3, pc, #76	; (adr r3, 8005a08 <accelerateProcessing+0x130>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f7fa fe1b 	bl	80005f8 <__aeabi_dmul>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4620      	mov	r0, r4
 80059c8:	4629      	mov	r1, r5
 80059ca:	f7fa fc5f 	bl	800028c <__adddf3>
 80059ce:	4603      	mov	r3, r0
 80059d0:	460c      	mov	r4, r1
 80059d2:	4619      	mov	r1, r3
 80059d4:	4622      	mov	r2, r4
 80059d6:	8afb      	ldrh	r3, [r7, #22]
 80059d8:	1c5c      	adds	r4, r3, #1
 80059da:	4608      	mov	r0, r1
 80059dc:	4611      	mov	r1, r2
 80059de:	f7fb f903 	bl	8000be8 <__aeabi_d2f>
 80059e2:	4601      	mov	r1, r0
 80059e4:	4a0a      	ldr	r2, [pc, #40]	; (8005a10 <accelerateProcessing+0x138>)
 80059e6:	00a3      	lsls	r3, r4, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= log_size - 1; i++){
 80059ec:	8afb      	ldrh	r3, [r7, #22]
 80059ee:	3301      	adds	r3, #1
 80059f0:	82fb      	strh	r3, [r7, #22]
 80059f2:	8afa      	ldrh	r2, [r7, #22]
 80059f4:	8abb      	ldrh	r3, [r7, #20]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	429a      	cmp	r2, r3
 80059fa:	f77f af7a 	ble.w	80058f2 <accelerateProcessing+0x1a>
			}
		}
	}
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bdb0      	pop	{r4, r5, r7, pc}
 8005a06:	bf00      	nop
 8005a08:	d2f1a9fc 	.word	0xd2f1a9fc
 8005a0c:	3f50624d 	.word	0x3f50624d
 8005a10:	20016e70 	.word	0x20016e70

08005a14 <updateTargetVelocity>:

void updateTargetVelocity(){
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
	static float pre_target_velocity;

	if(velocity_update_flag == true){
 8005a18:	4b33      	ldr	r3, [pc, #204]	; (8005ae8 <updateTargetVelocity+0xd4>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d061      	beq.n	8005ae4 <updateTargetVelocity+0xd0>
		if(getTotalDistance() >= ref_distance){
 8005a20:	f7fb fc64 	bl	80012ec <getTotalDistance>
 8005a24:	eeb0 7a40 	vmov.f32	s14, s0
 8005a28:	4b30      	ldr	r3, [pc, #192]	; (8005aec <updateTargetVelocity+0xd8>)
 8005a2a:	edd3 7a00 	vldr	s15, [r3]
 8005a2e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a36:	db14      	blt.n	8005a62 <updateTargetVelocity+0x4e>
			ref_distance += getDistanceLog(velocity_table_idx);
 8005a38:	4b2d      	ldr	r3, [pc, #180]	; (8005af0 <updateTargetVelocity+0xdc>)
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fd fc7f 	bl	8003340 <getDistanceLog>
 8005a42:	eeb0 7a40 	vmov.f32	s14, s0
 8005a46:	4b29      	ldr	r3, [pc, #164]	; (8005aec <updateTargetVelocity+0xd8>)
 8005a48:	edd3 7a00 	vldr	s15, [r3]
 8005a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a50:	4b26      	ldr	r3, [pc, #152]	; (8005aec <updateTargetVelocity+0xd8>)
 8005a52:	edc3 7a00 	vstr	s15, [r3]
			velocity_table_idx++;
 8005a56:	4b26      	ldr	r3, [pc, #152]	; (8005af0 <updateTargetVelocity+0xdc>)
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	b29a      	uxth	r2, r3
 8005a5e:	4b24      	ldr	r3, [pc, #144]	; (8005af0 <updateTargetVelocity+0xdc>)
 8005a60:	801a      	strh	r2, [r3, #0]
		}
		if(velocity_table_idx >= getDistanceLogSize()){
 8005a62:	f7fd faf3 	bl	800304c <getDistanceLogSize>
 8005a66:	4603      	mov	r3, r0
 8005a68:	461a      	mov	r2, r3
 8005a6a:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <updateTargetVelocity+0xdc>)
 8005a6c:	881b      	ldrh	r3, [r3, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d806      	bhi.n	8005a80 <updateTargetVelocity+0x6c>
			velocity_table_idx = getDistanceLogSize() - 1;
 8005a72:	f7fd faeb 	bl	800304c <getDistanceLogSize>
 8005a76:	4603      	mov	r3, r0
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	4b1c      	ldr	r3, [pc, #112]	; (8005af0 <updateTargetVelocity+0xdc>)
 8005a7e:	801a      	strh	r2, [r3, #0]
		}

		setTargetVelocity(velocity_table[velocity_table_idx]);
 8005a80:	4b1b      	ldr	r3, [pc, #108]	; (8005af0 <updateTargetVelocity+0xdc>)
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <updateTargetVelocity+0xe0>)
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	edd3 7a00 	vldr	s15, [r3]
 8005a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a92:	f7fd fe07 	bl	80036a4 <setTargetVelocity>
		setTargetAcceleration(acceleration_table[velocity_table_idx]);
 8005a96:	4b16      	ldr	r3, [pc, #88]	; (8005af0 <updateTargetVelocity+0xdc>)
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	4b16      	ldr	r3, [pc, #88]	; (8005af8 <updateTargetVelocity+0xe4>)
 8005a9e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005aa2:	ee07 3a90 	vmov	s15, r3
 8005aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8005aae:	f7fd fe09 	bl	80036c4 <setTargetAcceleration>

		if(pre_target_velocity > velocity_table[velocity_table_idx]){
 8005ab2:	4b0f      	ldr	r3, [pc, #60]	; (8005af0 <updateTargetVelocity+0xdc>)
 8005ab4:	881b      	ldrh	r3, [r3, #0]
 8005ab6:	4a0f      	ldr	r2, [pc, #60]	; (8005af4 <updateTargetVelocity+0xe0>)
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	ed93 7a00 	vldr	s14, [r3]
 8005ac0:	4b0e      	ldr	r3, [pc, #56]	; (8005afc <updateTargetVelocity+0xe8>)
 8005ac2:	edd3 7a00 	vldr	s15, [r3]
 8005ac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ace:	d501      	bpl.n	8005ad4 <updateTargetVelocity+0xc0>
			setClearFlagOfVelocityControlI();
 8005ad0:	f7fd fea4 	bl	800381c <setClearFlagOfVelocityControlI>
		}

		pre_target_velocity = velocity_table[velocity_table_idx];
 8005ad4:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <updateTargetVelocity+0xdc>)
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	4a06      	ldr	r2, [pc, #24]	; (8005af4 <updateTargetVelocity+0xe0>)
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a06      	ldr	r2, [pc, #24]	; (8005afc <updateTargetVelocity+0xe8>)
 8005ae2:	6013      	str	r3, [r2, #0]
	}
}
 8005ae4:	bf00      	nop
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	2001ef6c 	.word	0x2001ef6c
 8005aec:	2001f4b0 	.word	0x2001f4b0
 8005af0:	2001f4b4 	.word	0x2001f4b4
 8005af4:	20016e70 	.word	0x20016e70
 8005af8:	2001c460 	.word	0x2001c460
 8005afc:	2001ef94 	.word	0x2001ef94

08005b00 <correctionTotalDistanceFromCrossLine>:

void correctionTotalDistanceFromCrossLine()//クロスでの距離補正
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
	while(cross_line_idx <= getCrossLogSize()){
 8005b06:	e03f      	b.n	8005b88 <correctionTotalDistanceFromCrossLine+0x88>
		float temp_crossline_distance = getCrossLog(cross_line_idx);
 8005b08:	4b25      	ldr	r3, [pc, #148]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7fd fc2d 	bl	800336c <getCrossLog>
 8005b12:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_crossline_distance - getTotalDistance());
 8005b16:	f7fb fbe9 	bl	80012ec <getTotalDistance>
 8005b1a:	eeb0 7a40 	vmov.f32	s14, s0
 8005b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b22:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b26:	eef0 7ae7 	vabs.f32	s15, s15
 8005b2a:	edc7 7a00 	vstr	s15, [r7]
		if(diff <= 250){
 8005b2e:	edd7 7a00 	vldr	s15, [r7]
 8005b32:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005ba4 <correctionTotalDistanceFromCrossLine+0xa4>
 8005b36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3e:	d80d      	bhi.n	8005b5c <correctionTotalDistanceFromCrossLine+0x5c>
			correction_check_cnt_cross = 0;
 8005b40:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <correctionTotalDistanceFromCrossLine+0xa8>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_crossline_distance);
 8005b46:	ed97 0a01 	vldr	s0, [r7, #4]
 8005b4a:	f7fb fbf9 	bl	8001340 <setTotalDistance>
			cross_line_idx++;
 8005b4e:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	3301      	adds	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	4b12      	ldr	r3, [pc, #72]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b58:	801a      	strh	r2, [r3, #0]
			break;
 8005b5a:	e01d      	b.n	8005b98 <correctionTotalDistanceFromCrossLine+0x98>
		}
		cross_line_idx++;
 8005b5c:	4b10      	ldr	r3, [pc, #64]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	3301      	adds	r3, #1
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	4b0e      	ldr	r3, [pc, #56]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b66:	801a      	strh	r2, [r3, #0]

		if(cross_line_idx >= getCrossLogSize()){
 8005b68:	f7fd fa7c 	bl	8003064 <getCrossLogSize>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	461a      	mov	r2, r3
 8005b70:	4b0b      	ldr	r3, [pc, #44]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d807      	bhi.n	8005b88 <correctionTotalDistanceFromCrossLine+0x88>
			cross_line_idx = getCrossLogSize() - 1;
 8005b78:	f7fd fa74 	bl	8003064 <getCrossLogSize>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	4b07      	ldr	r3, [pc, #28]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b84:	801a      	strh	r2, [r3, #0]
			break;
 8005b86:	e007      	b.n	8005b98 <correctionTotalDistanceFromCrossLine+0x98>
	while(cross_line_idx <= getCrossLogSize()){
 8005b88:	f7fd fa6c 	bl	8003064 <getCrossLogSize>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <correctionTotalDistanceFromCrossLine+0xa0>)
 8005b92:	881b      	ldrh	r3, [r3, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d2b7      	bcs.n	8005b08 <correctionTotalDistanceFromCrossLine+0x8>
		}
	}
}
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	2001ef5a 	.word	0x2001ef5a
 8005ba4:	437a0000 	.word	0x437a0000
 8005ba8:	2001ef5e 	.word	0x2001ef5e

08005bac <correctionTotalDistanceFromSideLine>:

void correctionTotalDistanceFromSideLine()//連続曲率後の距離補正
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
	while(side_line_idx <= getSideLogSize()){
 8005bb2:	e03f      	b.n	8005c34 <correctionTotalDistanceFromSideLine+0x88>
		float temp_sideline_distance = getSideLog(side_line_idx);
 8005bb4:	4b25      	ldr	r3, [pc, #148]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fd fbed 	bl	8003398 <getSideLog>
 8005bbe:	ed87 0a01 	vstr	s0, [r7, #4]
		float diff = fabs(temp_sideline_distance - getTotalDistance());
 8005bc2:	f7fb fb93 	bl	80012ec <getTotalDistance>
 8005bc6:	eeb0 7a40 	vmov.f32	s14, s0
 8005bca:	edd7 7a01 	vldr	s15, [r7, #4]
 8005bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bd2:	eef0 7ae7 	vabs.f32	s15, s15
 8005bd6:	edc7 7a00 	vstr	s15, [r7]
		//if(diff <= 700){
		if(diff <= 250){
 8005bda:	edd7 7a00 	vldr	s15, [r7]
 8005bde:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005c50 <correctionTotalDistanceFromSideLine+0xa4>
 8005be2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bea:	d80d      	bhi.n	8005c08 <correctionTotalDistanceFromSideLine+0x5c>
			correction_check_cnt_side = 0;
 8005bec:	4b19      	ldr	r3, [pc, #100]	; (8005c54 <correctionTotalDistanceFromSideLine+0xa8>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	801a      	strh	r2, [r3, #0]
			setTotalDistance(temp_sideline_distance);
 8005bf2:	ed97 0a01 	vldr	s0, [r7, #4]
 8005bf6:	f7fb fba3 	bl	8001340 <setTotalDistance>
			side_line_idx++;
 8005bfa:	4b14      	ldr	r3, [pc, #80]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005bfc:	881b      	ldrh	r3, [r3, #0]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c04:	801a      	strh	r2, [r3, #0]
			break;
 8005c06:	e01d      	b.n	8005c44 <correctionTotalDistanceFromSideLine+0x98>
		}
		side_line_idx++;
 8005c08:	4b10      	ldr	r3, [pc, #64]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c12:	801a      	strh	r2, [r3, #0]

		if(side_line_idx >= getSideLogSize()){
 8005c14:	f7fd fa32 	bl	800307c <getSideLogSize>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c1e:	881b      	ldrh	r3, [r3, #0]
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d807      	bhi.n	8005c34 <correctionTotalDistanceFromSideLine+0x88>
			side_line_idx = getSideLogSize() - 1;
 8005c24:	f7fd fa2a 	bl	800307c <getSideLogSize>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	b29a      	uxth	r2, r3
 8005c2e:	4b07      	ldr	r3, [pc, #28]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c30:	801a      	strh	r2, [r3, #0]
			break;
 8005c32:	e007      	b.n	8005c44 <correctionTotalDistanceFromSideLine+0x98>
	while(side_line_idx <= getSideLogSize()){
 8005c34:	f7fd fa22 	bl	800307c <getSideLogSize>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <correctionTotalDistanceFromSideLine+0xa0>)
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d2b7      	bcs.n	8005bb4 <correctionTotalDistanceFromSideLine+0x8>
		}
	}
}
 8005c44:	bf00      	nop
 8005c46:	3708      	adds	r7, #8
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	2001ef5c 	.word	0x2001ef5c
 8005c50:	437a0000 	.word	0x437a0000
 8005c54:	2001ef60 	.word	0x2001ef60

08005c58 <CreateAcceleration>:

void CreateAcceleration(const float *p_distance)//フィードフォワード制御計算
{
 8005c58:	b5b0      	push	{r4, r5, r7, lr}
 8005c5a:	b090      	sub	sp, #64	; 0x40
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
	uint16_t log_size = getDistanceLogSize();
 8005c60:	f7fd f9f4 	bl	800304c <getDistanceLogSize>
 8005c64:	4603      	mov	r3, r0
 8005c66:	86fb      	strh	r3, [r7, #54]	; 0x36
    for(uint16_t i = 0; i <= log_size - 1; i++){
 8005c68:	2300      	movs	r3, #0
 8005c6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005c6c:	e0dc      	b.n	8005e28 <CreateAcceleration+0x1d0>
		float v_diff = velocity_table[i+1] - velocity_table[i];//目標速度ー今の速度  Δv [m/s]
 8005c6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005c70:	3301      	adds	r3, #1
 8005c72:	4a7d      	ldr	r2, [pc, #500]	; (8005e68 <CreateAcceleration+0x210>)
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	ed93 7a00 	vldr	s14, [r3]
 8005c7c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005c7e:	4a7a      	ldr	r2, [pc, #488]	; (8005e68 <CreateAcceleration+0x210>)
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4413      	add	r3, r2
 8005c84:	edd3 7a00 	vldr	s15, [r3]
 8005c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c8c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30

		float t = p_distance[i]*1e-3 / velocity_table[i];//時間を求める mm*1e-3 → m Δt [s]
 8005c90:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4413      	add	r3, r2
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fa fc54 	bl	8000548 <__aeabi_f2d>
 8005ca0:	a367      	add	r3, pc, #412	; (adr r3, 8005e40 <CreateAcceleration+0x1e8>)
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	f7fa fca7 	bl	80005f8 <__aeabi_dmul>
 8005caa:	4603      	mov	r3, r0
 8005cac:	460c      	mov	r4, r1
 8005cae:	4625      	mov	r5, r4
 8005cb0:	461c      	mov	r4, r3
 8005cb2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005cb4:	4a6c      	ldr	r2, [pc, #432]	; (8005e68 <CreateAcceleration+0x210>)
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4413      	add	r3, r2
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fa fc43 	bl	8000548 <__aeabi_f2d>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	4629      	mov	r1, r5
 8005cca:	f7fa fdbf 	bl	800084c <__aeabi_ddiv>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	4621      	mov	r1, r4
 8005cd6:	f7fa ff87 	bl	8000be8 <__aeabi_d2f>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
		float a = v_diff / t;//加速度計算 [m/s^2]
 8005cde:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005ce2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

		float n = (60*velocity_table[i]*REDUCTION_RATIO) / (2*PI*WHEEL_RADIUS);//回転数 [rpm]
 8005cee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005cf0:	4a5d      	ldr	r2, [pc, #372]	; (8005e68 <CreateAcceleration+0x210>)
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	edd3 7a00 	vldr	s15, [r3]
 8005cfa:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8005e6c <CreateAcceleration+0x214>
 8005cfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d02:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8005d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d0a:	ee17 0a90 	vmov	r0, s15
 8005d0e:	f7fa fc1b 	bl	8000548 <__aeabi_f2d>
 8005d12:	a34d      	add	r3, pc, #308	; (adr r3, 8005e48 <CreateAcceleration+0x1f0>)
 8005d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d18:	f7fa fd98 	bl	800084c <__aeabi_ddiv>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	4618      	mov	r0, r3
 8005d22:	4621      	mov	r1, r4
 8005d24:	f7fa ff60 	bl	8000be8 <__aeabi_d2f>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	627b      	str	r3, [r7, #36]	; 0x24
		float K_e = ((2*PI)/60) * TORQUE_CONSTANT;//逆起電力定数 [V/rpm]
 8005d2c:	4b50      	ldr	r3, [pc, #320]	; (8005e70 <CreateAcceleration+0x218>)
 8005d2e:	623b      	str	r3, [r7, #32]
		float E = K_e * n;//逆起電力 [V]
 8005d30:	ed97 7a08 	vldr	s14, [r7, #32]
 8005d34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005d38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d3c:	edc7 7a07 	vstr	s15, [r7, #28]
		float T_t = (AIRCRAFT_MASS*WHEEL_RADIUS*a) / (2*REDUCTION_RATIO);//タイヤにかかるトルク [Nm]
 8005d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d42:	f7fa fc01 	bl	8000548 <__aeabi_f2d>
 8005d46:	a342      	add	r3, pc, #264	; (adr r3, 8005e50 <CreateAcceleration+0x1f8>)
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	f7fa fc54 	bl	80005f8 <__aeabi_dmul>
 8005d50:	4603      	mov	r3, r0
 8005d52:	460c      	mov	r4, r1
 8005d54:	4618      	mov	r0, r3
 8005d56:	4621      	mov	r1, r4
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	4b45      	ldr	r3, [pc, #276]	; (8005e74 <CreateAcceleration+0x21c>)
 8005d5e:	f7fa fd75 	bl	800084c <__aeabi_ddiv>
 8005d62:	4603      	mov	r3, r0
 8005d64:	460c      	mov	r4, r1
 8005d66:	4618      	mov	r0, r3
 8005d68:	4621      	mov	r1, r4
 8005d6a:	f7fa ff3d 	bl	8000be8 <__aeabi_d2f>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	61bb      	str	r3, [r7, #24]
		float I = T_t / TORQUE_CONSTANT;//電流 [A]
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f7fa fbe8 	bl	8000548 <__aeabi_f2d>
 8005d78:	a337      	add	r3, pc, #220	; (adr r3, 8005e58 <CreateAcceleration+0x200>)
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f7fa fd65 	bl	800084c <__aeabi_ddiv>
 8005d82:	4603      	mov	r3, r0
 8005d84:	460c      	mov	r4, r1
 8005d86:	4618      	mov	r0, r3
 8005d88:	4621      	mov	r1, r4
 8005d8a:	f7fa ff2d 	bl	8000be8 <__aeabi_d2f>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	617b      	str	r3, [r7, #20]
		float V_mot = I * RWSISTANCE_BETWEEN_TERMINALS + E;//モータの出力に追加したい電圧
 8005d92:	6978      	ldr	r0, [r7, #20]
 8005d94:	f7fa fbd8 	bl	8000548 <__aeabi_f2d>
 8005d98:	a331      	add	r3, pc, #196	; (adr r3, 8005e60 <CreateAcceleration+0x208>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa fc2b 	bl	80005f8 <__aeabi_dmul>
 8005da2:	4603      	mov	r3, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	4625      	mov	r5, r4
 8005da8:	461c      	mov	r4, r3
 8005daa:	69f8      	ldr	r0, [r7, #28]
 8005dac:	f7fa fbcc 	bl	8000548 <__aeabi_f2d>
 8005db0:	4602      	mov	r2, r0
 8005db2:	460b      	mov	r3, r1
 8005db4:	4620      	mov	r0, r4
 8005db6:	4629      	mov	r1, r5
 8005db8:	f7fa fa68 	bl	800028c <__adddf3>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	f7fa ff10 	bl	8000be8 <__aeabi_d2f>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	613b      	str	r3, [r7, #16]
		float Duty = V_mot / Power_supply_voltage;//Duty比
 8005dcc:	ed97 7a04 	vldr	s14, [r7, #16]
 8005dd0:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
 8005dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dd8:	edc7 7a03 	vstr	s15, [r7, #12]
		float Duty_motor = Duty * MAX_CounterPeriod;
 8005ddc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005de0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005e78 <CreateAcceleration+0x220>
 8005de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005de8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

		if(Duty_motor >= MAX_CounterPeriod) Duty_motor = MAX_CounterPeriod;
 8005dec:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005df0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005e78 <CreateAcceleration+0x220>
 8005df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfc:	db01      	blt.n	8005e02 <CreateAcceleration+0x1aa>
 8005dfe:	4b1f      	ldr	r3, [pc, #124]	; (8005e7c <CreateAcceleration+0x224>)
 8005e00:	63bb      	str	r3, [r7, #56]	; 0x38

		V_motor = Duty_motor;
 8005e02:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e0a:	ee17 3a90 	vmov	r3, s15
 8005e0e:	b21a      	sxth	r2, r3
 8005e10:	4b1b      	ldr	r3, [pc, #108]	; (8005e80 <CreateAcceleration+0x228>)
 8005e12:	801a      	strh	r2, [r3, #0]

		acceleration_table[i] = V_motor;
 8005e14:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e16:	4a1a      	ldr	r2, [pc, #104]	; (8005e80 <CreateAcceleration+0x228>)
 8005e18:	f9b2 1000 	ldrsh.w	r1, [r2]
 8005e1c:	4a19      	ldr	r2, [pc, #100]	; (8005e84 <CreateAcceleration+0x22c>)
 8005e1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint16_t i = 0; i <= log_size - 1; i++){
 8005e22:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005e24:	3301      	adds	r3, #1
 8005e26:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8005e28:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005e2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	f77f af1d 	ble.w	8005c6e <CreateAcceleration+0x16>
    }
}
 8005e34:	bf00      	nop
 8005e36:	3740      	adds	r7, #64	; 0x40
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e3c:	f3af 8000 	nop.w
 8005e40:	d2f1a9fc 	.word	0xd2f1a9fc
 8005e44:	3f50624d 	.word	0x3f50624d
 8005e48:	8457d34f 	.word	0x8457d34f
 8005e4c:	3fb21877 	.word	0x3fb21877
 8005e50:	c6fbd274 	.word	0xc6fbd274
 8005e54:	3f599ed7 	.word	0x3f599ed7
 8005e58:	9c38b04b 	.word	0x9c38b04b
 8005e5c:	3f6cd5f9 	.word	0x3f6cd5f9
 8005e60:	9999999a 	.word	0x9999999a
 8005e64:	40059999 	.word	0x40059999
 8005e68:	20016e70 	.word	0x20016e70
 8005e6c:	42700000 	.word	0x42700000
 8005e70:	39c14279 	.word	0x39c14279
 8005e74:	40180000 	.word	0x40180000
 8005e78:	44d1e000 	.word	0x44d1e000
 8005e7c:	44d1e000 	.word	0x44d1e000
 8005e80:	2001ef84 	.word	0x2001ef84
 8005e84:	2001c460 	.word	0x2001c460

08005e88 <getgoalStatus>:

bool getgoalStatus()
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
	return goal_flag;
 8005e8c:	4b03      	ldr	r3, [pc, #12]	; (8005e9c <getgoalStatus+0x14>)
 8005e8e:	781b      	ldrb	r3, [r3, #0]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	2001ef66 	.word	0x2001ef66

08005ea0 <setVelocityRange>:

void setVelocityRange(float min_vel, float max_vel)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	ed87 0a01 	vstr	s0, [r7, #4]
 8005eaa:	edc7 0a00 	vstr	s1, [r7]
	min_velocity = min_vel;
 8005eae:	4a06      	ldr	r2, [pc, #24]	; (8005ec8 <setVelocityRange+0x28>)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6013      	str	r3, [r2, #0]
	max_velocity = max_vel;
 8005eb4:	4a05      	ldr	r2, [pc, #20]	; (8005ecc <setVelocityRange+0x2c>)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6013      	str	r3, [r2, #0]
}
 8005eba:	bf00      	nop
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	2001ef70 	.word	0x2001ef70
 8005ecc:	2001ef74 	.word	0x2001ef74

08005ed0 <setAccDec>:

void setAccDec(float acc, float dec)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	ed87 0a01 	vstr	s0, [r7, #4]
 8005eda:	edc7 0a00 	vstr	s1, [r7]
	acceleration = acc;
 8005ede:	4a06      	ldr	r2, [pc, #24]	; (8005ef8 <setAccDec+0x28>)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6013      	str	r3, [r2, #0]
	deceleration = dec;
 8005ee4:	4a05      	ldr	r2, [pc, #20]	; (8005efc <setAccDec+0x2c>)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6013      	str	r3, [r2, #0]
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr
 8005ef6:	bf00      	nop
 8005ef8:	2001ef78 	.word	0x2001ef78
 8005efc:	2001ef7c 	.word	0x2001ef7c

08005f00 <setStraightRadius>:

void setStraightRadius(float radius)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b083      	sub	sp, #12
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	ed87 0a01 	vstr	s0, [r7, #4]
	straight_radius = radius;
 8005f0a:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <setStraightRadius+0x1c>)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6013      	str	r3, [r2, #0]
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr
 8005f1c:	2001ef80 	.word	0x2001ef80

08005f20 <getSideSensorStatusL>:

//↓sidesensorjob
bool getSideSensorStatusL()
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8005f24:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <getSideSensorStatusL+0x14>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop
 8005f34:	2001ef64 	.word	0x2001ef64

08005f38 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8005f3c:	4b03      	ldr	r3, [pc, #12]	; (8005f4c <getSideSensorStatusR+0x14>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	2001ef65 	.word	0x2001ef65

08005f50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f56:	2300      	movs	r3, #0
 8005f58:	607b      	str	r3, [r7, #4]
 8005f5a:	4b10      	ldr	r3, [pc, #64]	; (8005f9c <HAL_MspInit+0x4c>)
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5e:	4a0f      	ldr	r2, [pc, #60]	; (8005f9c <HAL_MspInit+0x4c>)
 8005f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f64:	6453      	str	r3, [r2, #68]	; 0x44
 8005f66:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <HAL_MspInit+0x4c>)
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f6e:	607b      	str	r3, [r7, #4]
 8005f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f72:	2300      	movs	r3, #0
 8005f74:	603b      	str	r3, [r7, #0]
 8005f76:	4b09      	ldr	r3, [pc, #36]	; (8005f9c <HAL_MspInit+0x4c>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <HAL_MspInit+0x4c>)
 8005f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f80:	6413      	str	r3, [r2, #64]	; 0x40
 8005f82:	4b06      	ldr	r3, [pc, #24]	; (8005f9c <HAL_MspInit+0x4c>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005f8e:	bf00      	nop
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	40023800 	.word	0x40023800

08005fa0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08e      	sub	sp, #56	; 0x38
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	605a      	str	r2, [r3, #4]
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a79      	ldr	r2, [pc, #484]	; (80061a4 <HAL_ADC_MspInit+0x204>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d158      	bne.n	8006074 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	623b      	str	r3, [r7, #32]
 8005fc6:	4b78      	ldr	r3, [pc, #480]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 8005fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fca:	4a77      	ldr	r2, [pc, #476]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 8005fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8005fd2:	4b75      	ldr	r3, [pc, #468]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fda:	623b      	str	r3, [r7, #32]
 8005fdc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fde:	2300      	movs	r3, #0
 8005fe0:	61fb      	str	r3, [r7, #28]
 8005fe2:	4b71      	ldr	r3, [pc, #452]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 8005fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe6:	4a70      	ldr	r2, [pc, #448]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 8005fe8:	f043 0304 	orr.w	r3, r3, #4
 8005fec:	6313      	str	r3, [r2, #48]	; 0x30
 8005fee:	4b6e      	ldr	r3, [pc, #440]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 8005ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff2:	f003 0304 	and.w	r3, r3, #4
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005ffa:	230e      	movs	r3, #14
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ffe:	2303      	movs	r3, #3
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006002:	2300      	movs	r3, #0
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800600a:	4619      	mov	r1, r3
 800600c:	4867      	ldr	r0, [pc, #412]	; (80061ac <HAL_ADC_MspInit+0x20c>)
 800600e:	f001 ff65 	bl	8007edc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006012:	4b67      	ldr	r3, [pc, #412]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 8006014:	4a67      	ldr	r2, [pc, #412]	; (80061b4 <HAL_ADC_MspInit+0x214>)
 8006016:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006018:	4b65      	ldr	r3, [pc, #404]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 800601a:	2200      	movs	r2, #0
 800601c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800601e:	4b64      	ldr	r3, [pc, #400]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 8006020:	2200      	movs	r2, #0
 8006022:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006024:	4b62      	ldr	r3, [pc, #392]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 8006026:	2200      	movs	r2, #0
 8006028:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800602a:	4b61      	ldr	r3, [pc, #388]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 800602c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006030:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006032:	4b5f      	ldr	r3, [pc, #380]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 8006034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006038:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800603a:	4b5d      	ldr	r3, [pc, #372]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 800603c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006040:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006042:	4b5b      	ldr	r3, [pc, #364]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 8006044:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006048:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800604a:	4b59      	ldr	r3, [pc, #356]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 800604c:	2200      	movs	r2, #0
 800604e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006050:	4b57      	ldr	r3, [pc, #348]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 8006052:	2200      	movs	r2, #0
 8006054:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006056:	4856      	ldr	r0, [pc, #344]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 8006058:	f001 f9e8 	bl	800742c <HAL_DMA_Init>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8006062:	f7fe fceb 	bl	8004a3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a51      	ldr	r2, [pc, #324]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 800606a:	639a      	str	r2, [r3, #56]	; 0x38
 800606c:	4a50      	ldr	r2, [pc, #320]	; (80061b0 <HAL_ADC_MspInit+0x210>)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006072:	e092      	b.n	800619a <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a4f      	ldr	r2, [pc, #316]	; (80061b8 <HAL_ADC_MspInit+0x218>)
 800607a:	4293      	cmp	r3, r2
 800607c:	f040 808d 	bne.w	800619a <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006080:	2300      	movs	r3, #0
 8006082:	61bb      	str	r3, [r7, #24]
 8006084:	4b48      	ldr	r3, [pc, #288]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 8006086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006088:	4a47      	ldr	r2, [pc, #284]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 800608a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800608e:	6453      	str	r3, [r2, #68]	; 0x44
 8006090:	4b45      	ldr	r3, [pc, #276]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 8006092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006098:	61bb      	str	r3, [r7, #24]
 800609a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800609c:	2300      	movs	r3, #0
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	4b41      	ldr	r3, [pc, #260]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 80060a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a4:	4a40      	ldr	r2, [pc, #256]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 80060a6:	f043 0301 	orr.w	r3, r3, #1
 80060aa:	6313      	str	r3, [r2, #48]	; 0x30
 80060ac:	4b3e      	ldr	r3, [pc, #248]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 80060ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060b8:	2300      	movs	r3, #0
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	4b3a      	ldr	r3, [pc, #232]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 80060be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c0:	4a39      	ldr	r2, [pc, #228]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 80060c2:	f043 0304 	orr.w	r3, r3, #4
 80060c6:	6313      	str	r3, [r2, #48]	; 0x30
 80060c8:	4b37      	ldr	r3, [pc, #220]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 80060ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060cc:	f003 0304 	and.w	r3, r3, #4
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060d4:	2300      	movs	r3, #0
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	4b33      	ldr	r3, [pc, #204]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	4a32      	ldr	r2, [pc, #200]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 80060de:	f043 0302 	orr.w	r3, r3, #2
 80060e2:	6313      	str	r3, [r2, #48]	; 0x30
 80060e4:	4b30      	ldr	r3, [pc, #192]	; (80061a8 <HAL_ADC_MspInit+0x208>)
 80060e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e8:	f003 0302 	and.w	r3, r3, #2
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80060f0:	23ff      	movs	r3, #255	; 0xff
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060f4:	2303      	movs	r3, #3
 80060f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006100:	4619      	mov	r1, r3
 8006102:	482e      	ldr	r0, [pc, #184]	; (80061bc <HAL_ADC_MspInit+0x21c>)
 8006104:	f001 feea 	bl	8007edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006108:	2330      	movs	r3, #48	; 0x30
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800610c:	2303      	movs	r3, #3
 800610e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006110:	2300      	movs	r3, #0
 8006112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006114:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006118:	4619      	mov	r1, r3
 800611a:	4824      	ldr	r0, [pc, #144]	; (80061ac <HAL_ADC_MspInit+0x20c>)
 800611c:	f001 fede 	bl	8007edc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006120:	2303      	movs	r3, #3
 8006122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006124:	2303      	movs	r3, #3
 8006126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006128:	2300      	movs	r3, #0
 800612a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800612c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006130:	4619      	mov	r1, r3
 8006132:	4823      	ldr	r0, [pc, #140]	; (80061c0 <HAL_ADC_MspInit+0x220>)
 8006134:	f001 fed2 	bl	8007edc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006138:	4b22      	ldr	r3, [pc, #136]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 800613a:	4a23      	ldr	r2, [pc, #140]	; (80061c8 <HAL_ADC_MspInit+0x228>)
 800613c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800613e:	4b21      	ldr	r3, [pc, #132]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 8006140:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006144:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006146:	4b1f      	ldr	r3, [pc, #124]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 8006148:	2200      	movs	r2, #0
 800614a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800614c:	4b1d      	ldr	r3, [pc, #116]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 800614e:	2200      	movs	r2, #0
 8006150:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006152:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 8006154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006158:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800615a:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 800615c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006160:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006162:	4b18      	ldr	r3, [pc, #96]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 8006164:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006168:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800616a:	4b16      	ldr	r3, [pc, #88]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 800616c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006170:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006172:	4b14      	ldr	r3, [pc, #80]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 8006174:	2200      	movs	r2, #0
 8006176:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006178:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 800617a:	2200      	movs	r2, #0
 800617c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800617e:	4811      	ldr	r0, [pc, #68]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 8006180:	f001 f954 	bl	800742c <HAL_DMA_Init>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 800618a:	f7fe fc57 	bl	8004a3c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a0c      	ldr	r2, [pc, #48]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 8006192:	639a      	str	r2, [r3, #56]	; 0x38
 8006194:	4a0b      	ldr	r2, [pc, #44]	; (80061c4 <HAL_ADC_MspInit+0x224>)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6393      	str	r3, [r2, #56]	; 0x38
}
 800619a:	bf00      	nop
 800619c:	3738      	adds	r7, #56	; 0x38
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	40012000 	.word	0x40012000
 80061a8:	40023800 	.word	0x40023800
 80061ac:	40020800 	.word	0x40020800
 80061b0:	2001f320 	.word	0x2001f320
 80061b4:	40026410 	.word	0x40026410
 80061b8:	40012100 	.word	0x40012100
 80061bc:	40020000 	.word	0x40020000
 80061c0:	40020400 	.word	0x40020400
 80061c4:	2001f408 	.word	0x2001f408
 80061c8:	40026440 	.word	0x40026440

080061cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b08a      	sub	sp, #40	; 0x28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061d4:	f107 0314 	add.w	r3, r7, #20
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	609a      	str	r2, [r3, #8]
 80061e0:	60da      	str	r2, [r3, #12]
 80061e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a19      	ldr	r2, [pc, #100]	; (8006250 <HAL_I2C_MspInit+0x84>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d12c      	bne.n	8006248 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80061ee:	2300      	movs	r3, #0
 80061f0:	613b      	str	r3, [r7, #16]
 80061f2:	4b18      	ldr	r3, [pc, #96]	; (8006254 <HAL_I2C_MspInit+0x88>)
 80061f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f6:	4a17      	ldr	r2, [pc, #92]	; (8006254 <HAL_I2C_MspInit+0x88>)
 80061f8:	f043 0302 	orr.w	r3, r3, #2
 80061fc:	6313      	str	r3, [r2, #48]	; 0x30
 80061fe:	4b15      	ldr	r3, [pc, #84]	; (8006254 <HAL_I2C_MspInit+0x88>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800620a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800620e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006210:	2312      	movs	r3, #18
 8006212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006214:	2301      	movs	r3, #1
 8006216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006218:	2303      	movs	r3, #3
 800621a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800621c:	2304      	movs	r3, #4
 800621e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006220:	f107 0314 	add.w	r3, r7, #20
 8006224:	4619      	mov	r1, r3
 8006226:	480c      	ldr	r0, [pc, #48]	; (8006258 <HAL_I2C_MspInit+0x8c>)
 8006228:	f001 fe58 	bl	8007edc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	4b08      	ldr	r3, [pc, #32]	; (8006254 <HAL_I2C_MspInit+0x88>)
 8006232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006234:	4a07      	ldr	r2, [pc, #28]	; (8006254 <HAL_I2C_MspInit+0x88>)
 8006236:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800623a:	6413      	str	r3, [r2, #64]	; 0x40
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <HAL_I2C_MspInit+0x88>)
 800623e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006244:	60fb      	str	r3, [r7, #12]
 8006246:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006248:	bf00      	nop
 800624a:	3728      	adds	r7, #40	; 0x28
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	40005400 	.word	0x40005400
 8006254:	40023800 	.word	0x40023800
 8006258:	40020400 	.word	0x40020400

0800625c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08a      	sub	sp, #40	; 0x28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006264:	f107 0314 	add.w	r3, r7, #20
 8006268:	2200      	movs	r2, #0
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	609a      	str	r2, [r3, #8]
 8006270:	60da      	str	r2, [r3, #12]
 8006272:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <HAL_SPI_MspInit+0x84>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d12c      	bne.n	80062d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800627e:	2300      	movs	r3, #0
 8006280:	613b      	str	r3, [r7, #16]
 8006282:	4b18      	ldr	r3, [pc, #96]	; (80062e4 <HAL_SPI_MspInit+0x88>)
 8006284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006286:	4a17      	ldr	r2, [pc, #92]	; (80062e4 <HAL_SPI_MspInit+0x88>)
 8006288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628c:	6413      	str	r3, [r2, #64]	; 0x40
 800628e:	4b15      	ldr	r3, [pc, #84]	; (80062e4 <HAL_SPI_MspInit+0x88>)
 8006290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800629a:	2300      	movs	r3, #0
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <HAL_SPI_MspInit+0x88>)
 80062a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a2:	4a10      	ldr	r2, [pc, #64]	; (80062e4 <HAL_SPI_MspInit+0x88>)
 80062a4:	f043 0304 	orr.w	r3, r3, #4
 80062a8:	6313      	str	r3, [r2, #48]	; 0x30
 80062aa:	4b0e      	ldr	r3, [pc, #56]	; (80062e4 <HAL_SPI_MspInit+0x88>)
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]
 80062b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80062b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80062ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062bc:	2302      	movs	r3, #2
 80062be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c0:	2300      	movs	r3, #0
 80062c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062c4:	2303      	movs	r3, #3
 80062c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80062c8:	2306      	movs	r3, #6
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062cc:	f107 0314 	add.w	r3, r7, #20
 80062d0:	4619      	mov	r1, r3
 80062d2:	4805      	ldr	r0, [pc, #20]	; (80062e8 <HAL_SPI_MspInit+0x8c>)
 80062d4:	f001 fe02 	bl	8007edc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80062d8:	bf00      	nop
 80062da:	3728      	adds	r7, #40	; 0x28
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40003c00 	.word	0x40003c00
 80062e4:	40023800 	.word	0x40023800
 80062e8:	40020800 	.word	0x40020800

080062ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a15      	ldr	r2, [pc, #84]	; (8006350 <HAL_TIM_PWM_MspInit+0x64>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d10e      	bne.n	800631c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80062fe:	2300      	movs	r3, #0
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	4b14      	ldr	r3, [pc, #80]	; (8006354 <HAL_TIM_PWM_MspInit+0x68>)
 8006304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006306:	4a13      	ldr	r2, [pc, #76]	; (8006354 <HAL_TIM_PWM_MspInit+0x68>)
 8006308:	f043 0301 	orr.w	r3, r3, #1
 800630c:	6453      	str	r3, [r2, #68]	; 0x44
 800630e:	4b11      	ldr	r3, [pc, #68]	; (8006354 <HAL_TIM_PWM_MspInit+0x68>)
 8006310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006312:	f003 0301 	and.w	r3, r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800631a:	e012      	b.n	8006342 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a0d      	ldr	r2, [pc, #52]	; (8006358 <HAL_TIM_PWM_MspInit+0x6c>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d10d      	bne.n	8006342 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006326:	2300      	movs	r3, #0
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	4b0a      	ldr	r3, [pc, #40]	; (8006354 <HAL_TIM_PWM_MspInit+0x68>)
 800632c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800632e:	4a09      	ldr	r2, [pc, #36]	; (8006354 <HAL_TIM_PWM_MspInit+0x68>)
 8006330:	f043 0302 	orr.w	r3, r3, #2
 8006334:	6453      	str	r3, [r2, #68]	; 0x44
 8006336:	4b07      	ldr	r3, [pc, #28]	; (8006354 <HAL_TIM_PWM_MspInit+0x68>)
 8006338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	60bb      	str	r3, [r7, #8]
 8006340:	68bb      	ldr	r3, [r7, #8]
}
 8006342:	bf00      	nop
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	40010000 	.word	0x40010000
 8006354:	40023800 	.word	0x40023800
 8006358:	40010400 	.word	0x40010400

0800635c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08c      	sub	sp, #48	; 0x30
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006364:	f107 031c 	add.w	r3, r7, #28
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	605a      	str	r2, [r3, #4]
 800636e:	609a      	str	r2, [r3, #8]
 8006370:	60da      	str	r2, [r3, #12]
 8006372:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a32      	ldr	r2, [pc, #200]	; (8006444 <HAL_TIM_Encoder_MspInit+0xe8>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d12c      	bne.n	80063d8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800637e:	2300      	movs	r3, #0
 8006380:	61bb      	str	r3, [r7, #24]
 8006382:	4b31      	ldr	r3, [pc, #196]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	4a30      	ldr	r2, [pc, #192]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 8006388:	f043 0302 	orr.w	r3, r3, #2
 800638c:	6413      	str	r3, [r2, #64]	; 0x40
 800638e:	4b2e      	ldr	r3, [pc, #184]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	61bb      	str	r3, [r7, #24]
 8006398:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	4b2a      	ldr	r3, [pc, #168]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	4a29      	ldr	r2, [pc, #164]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 80063a4:	f043 0302 	orr.w	r3, r3, #2
 80063a8:	6313      	str	r3, [r2, #48]	; 0x30
 80063aa:	4b27      	ldr	r3, [pc, #156]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 80063ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80063b6:	2330      	movs	r3, #48	; 0x30
 80063b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063ba:	2302      	movs	r3, #2
 80063bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80063c2:	2300      	movs	r3, #0
 80063c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80063c6:	2302      	movs	r3, #2
 80063c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063ca:	f107 031c 	add.w	r3, r7, #28
 80063ce:	4619      	mov	r1, r3
 80063d0:	481e      	ldr	r0, [pc, #120]	; (800644c <HAL_TIM_Encoder_MspInit+0xf0>)
 80063d2:	f001 fd83 	bl	8007edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80063d6:	e030      	b.n	800643a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a1c      	ldr	r2, [pc, #112]	; (8006450 <HAL_TIM_Encoder_MspInit+0xf4>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d12b      	bne.n	800643a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80063e2:	2300      	movs	r3, #0
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	4b18      	ldr	r3, [pc, #96]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	4a17      	ldr	r2, [pc, #92]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 80063ec:	f043 0304 	orr.w	r3, r3, #4
 80063f0:	6413      	str	r3, [r2, #64]	; 0x40
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	f003 0304 	and.w	r3, r3, #4
 80063fa:	613b      	str	r3, [r7, #16]
 80063fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063fe:	2300      	movs	r3, #0
 8006400:	60fb      	str	r3, [r7, #12]
 8006402:	4b11      	ldr	r3, [pc, #68]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	4a10      	ldr	r2, [pc, #64]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 8006408:	f043 0302 	orr.w	r3, r3, #2
 800640c:	6313      	str	r3, [r2, #48]	; 0x30
 800640e:	4b0e      	ldr	r3, [pc, #56]	; (8006448 <HAL_TIM_Encoder_MspInit+0xec>)
 8006410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800641a:	23c0      	movs	r3, #192	; 0xc0
 800641c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800641e:	2302      	movs	r3, #2
 8006420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006422:	2300      	movs	r3, #0
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006426:	2300      	movs	r3, #0
 8006428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800642a:	2302      	movs	r3, #2
 800642c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800642e:	f107 031c 	add.w	r3, r7, #28
 8006432:	4619      	mov	r1, r3
 8006434:	4805      	ldr	r0, [pc, #20]	; (800644c <HAL_TIM_Encoder_MspInit+0xf0>)
 8006436:	f001 fd51 	bl	8007edc <HAL_GPIO_Init>
}
 800643a:	bf00      	nop
 800643c:	3730      	adds	r7, #48	; 0x30
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	40000400 	.word	0x40000400
 8006448:	40023800 	.word	0x40023800
 800644c:	40020400 	.word	0x40020400
 8006450:	40000800 	.word	0x40000800

08006454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a1c      	ldr	r2, [pc, #112]	; (80064d4 <HAL_TIM_Base_MspInit+0x80>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d116      	bne.n	8006494 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006466:	2300      	movs	r3, #0
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <HAL_TIM_Base_MspInit+0x84>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	4a1a      	ldr	r2, [pc, #104]	; (80064d8 <HAL_TIM_Base_MspInit+0x84>)
 8006470:	f043 0310 	orr.w	r3, r3, #16
 8006474:	6413      	str	r3, [r2, #64]	; 0x40
 8006476:	4b18      	ldr	r3, [pc, #96]	; (80064d8 <HAL_TIM_Base_MspInit+0x84>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	f003 0310 	and.w	r3, r3, #16
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006482:	2200      	movs	r2, #0
 8006484:	2101      	movs	r1, #1
 8006486:	2036      	movs	r0, #54	; 0x36
 8006488:	f000 ff99 	bl	80073be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800648c:	2036      	movs	r0, #54	; 0x36
 800648e:	f000 ffb2 	bl	80073f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006492:	e01a      	b.n	80064ca <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a10      	ldr	r2, [pc, #64]	; (80064dc <HAL_TIM_Base_MspInit+0x88>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d115      	bne.n	80064ca <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <HAL_TIM_Base_MspInit+0x84>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	4a0c      	ldr	r2, [pc, #48]	; (80064d8 <HAL_TIM_Base_MspInit+0x84>)
 80064a8:	f043 0320 	orr.w	r3, r3, #32
 80064ac:	6413      	str	r3, [r2, #64]	; 0x40
 80064ae:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <HAL_TIM_Base_MspInit+0x84>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	60bb      	str	r3, [r7, #8]
 80064b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80064ba:	2200      	movs	r2, #0
 80064bc:	2100      	movs	r1, #0
 80064be:	2037      	movs	r0, #55	; 0x37
 80064c0:	f000 ff7d 	bl	80073be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80064c4:	2037      	movs	r0, #55	; 0x37
 80064c6:	f000 ff96 	bl	80073f6 <HAL_NVIC_EnableIRQ>
}
 80064ca:	bf00      	nop
 80064cc:	3710      	adds	r7, #16
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40001000 	.word	0x40001000
 80064d8:	40023800 	.word	0x40023800
 80064dc:	40001400 	.word	0x40001400

080064e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064e8:	f107 0314 	add.w	r3, r7, #20
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]
 80064f0:	605a      	str	r2, [r3, #4]
 80064f2:	609a      	str	r2, [r3, #8]
 80064f4:	60da      	str	r2, [r3, #12]
 80064f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a25      	ldr	r2, [pc, #148]	; (8006594 <HAL_TIM_MspPostInit+0xb4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d11f      	bne.n	8006542 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	4b24      	ldr	r3, [pc, #144]	; (8006598 <HAL_TIM_MspPostInit+0xb8>)
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	4a23      	ldr	r2, [pc, #140]	; (8006598 <HAL_TIM_MspPostInit+0xb8>)
 800650c:	f043 0301 	orr.w	r3, r3, #1
 8006510:	6313      	str	r3, [r2, #48]	; 0x30
 8006512:	4b21      	ldr	r3, [pc, #132]	; (8006598 <HAL_TIM_MspPostInit+0xb8>)
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	f003 0301 	and.w	r3, r3, #1
 800651a:	613b      	str	r3, [r7, #16]
 800651c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800651e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006522:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006524:	2302      	movs	r3, #2
 8006526:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006528:	2300      	movs	r3, #0
 800652a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800652c:	2300      	movs	r3, #0
 800652e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006530:	2301      	movs	r3, #1
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006534:	f107 0314 	add.w	r3, r7, #20
 8006538:	4619      	mov	r1, r3
 800653a:	4818      	ldr	r0, [pc, #96]	; (800659c <HAL_TIM_MspPostInit+0xbc>)
 800653c:	f001 fcce 	bl	8007edc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006540:	e023      	b.n	800658a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a16      	ldr	r2, [pc, #88]	; (80065a0 <HAL_TIM_MspPostInit+0xc0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d11e      	bne.n	800658a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	4b11      	ldr	r3, [pc, #68]	; (8006598 <HAL_TIM_MspPostInit+0xb8>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	4a10      	ldr	r2, [pc, #64]	; (8006598 <HAL_TIM_MspPostInit+0xb8>)
 8006556:	f043 0304 	orr.w	r3, r3, #4
 800655a:	6313      	str	r3, [r2, #48]	; 0x30
 800655c:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <HAL_TIM_MspPostInit+0xb8>)
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8006568:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800656c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800656e:	2302      	movs	r3, #2
 8006570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006576:	2300      	movs	r3, #0
 8006578:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800657a:	2303      	movs	r3, #3
 800657c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800657e:	f107 0314 	add.w	r3, r7, #20
 8006582:	4619      	mov	r1, r3
 8006584:	4807      	ldr	r0, [pc, #28]	; (80065a4 <HAL_TIM_MspPostInit+0xc4>)
 8006586:	f001 fca9 	bl	8007edc <HAL_GPIO_Init>
}
 800658a:	bf00      	nop
 800658c:	3728      	adds	r7, #40	; 0x28
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40010000 	.word	0x40010000
 8006598:	40023800 	.word	0x40023800
 800659c:	40020000 	.word	0x40020000
 80065a0:	40010400 	.word	0x40010400
 80065a4:	40020800 	.word	0x40020800

080065a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b08a      	sub	sp, #40	; 0x28
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065b0:	f107 0314 	add.w	r3, r7, #20
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]
 80065b8:	605a      	str	r2, [r3, #4]
 80065ba:	609a      	str	r2, [r3, #8]
 80065bc:	60da      	str	r2, [r3, #12]
 80065be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a19      	ldr	r2, [pc, #100]	; (800662c <HAL_UART_MspInit+0x84>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d12c      	bne.n	8006624 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80065ca:	2300      	movs	r3, #0
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	4b18      	ldr	r3, [pc, #96]	; (8006630 <HAL_UART_MspInit+0x88>)
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	4a17      	ldr	r2, [pc, #92]	; (8006630 <HAL_UART_MspInit+0x88>)
 80065d4:	f043 0310 	orr.w	r3, r3, #16
 80065d8:	6453      	str	r3, [r2, #68]	; 0x44
 80065da:	4b15      	ldr	r3, [pc, #84]	; (8006630 <HAL_UART_MspInit+0x88>)
 80065dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	613b      	str	r3, [r7, #16]
 80065e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
 80065ea:	4b11      	ldr	r3, [pc, #68]	; (8006630 <HAL_UART_MspInit+0x88>)
 80065ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ee:	4a10      	ldr	r2, [pc, #64]	; (8006630 <HAL_UART_MspInit+0x88>)
 80065f0:	f043 0301 	orr.w	r3, r3, #1
 80065f4:	6313      	str	r3, [r2, #48]	; 0x30
 80065f6:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <HAL_UART_MspInit+0x88>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	60fb      	str	r3, [r7, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8006602:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006606:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006608:	2302      	movs	r3, #2
 800660a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660c:	2300      	movs	r3, #0
 800660e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006610:	2303      	movs	r3, #3
 8006612:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006614:	2307      	movs	r3, #7
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006618:	f107 0314 	add.w	r3, r7, #20
 800661c:	4619      	mov	r1, r3
 800661e:	4805      	ldr	r0, [pc, #20]	; (8006634 <HAL_UART_MspInit+0x8c>)
 8006620:	f001 fc5c 	bl	8007edc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006624:	bf00      	nop
 8006626:	3728      	adds	r7, #40	; 0x28
 8006628:	46bd      	mov	sp, r7
 800662a:	bd80      	pop	{r7, pc}
 800662c:	40011000 	.word	0x40011000
 8006630:	40023800 	.word	0x40023800
 8006634:	40020000 	.word	0x40020000

08006638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006638:	b480      	push	{r7}
 800663a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800663c:	e7fe      	b.n	800663c <NMI_Handler+0x4>

0800663e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800663e:	b480      	push	{r7}
 8006640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006642:	e7fe      	b.n	8006642 <HardFault_Handler+0x4>

08006644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006644:	b480      	push	{r7}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006648:	e7fe      	b.n	8006648 <MemManage_Handler+0x4>

0800664a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800664a:	b480      	push	{r7}
 800664c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800664e:	e7fe      	b.n	800664e <BusFault_Handler+0x4>

08006650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006654:	e7fe      	b.n	8006654 <UsageFault_Handler+0x4>

08006656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006656:	b480      	push	{r7}
 8006658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800665a:	bf00      	nop
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006668:	bf00      	nop
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006672:	b480      	push	{r7}
 8006674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006676:	bf00      	nop
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006684:	f000 f98a 	bl	800699c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006688:	bf00      	nop
 800668a:	bd80      	pop	{r7, pc}

0800668c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006690:	4802      	ldr	r0, [pc, #8]	; (800669c <TIM6_DAC_IRQHandler+0x10>)
 8006692:	f003 fa38 	bl	8009b06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006696:	bf00      	nop
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	2001f380 	.word	0x2001f380

080066a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80066a4:	4802      	ldr	r0, [pc, #8]	; (80066b0 <TIM7_IRQHandler+0x10>)
 80066a6:	f003 fa2e 	bl	8009b06 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80066aa:	bf00      	nop
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	2001f468 	.word	0x2001f468

080066b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80066b8:	4802      	ldr	r0, [pc, #8]	; (80066c4 <DMA2_Stream0_IRQHandler+0x10>)
 80066ba:	f000 ffbd 	bl	8007638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80066be:	bf00      	nop
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	2001f320 	.word	0x2001f320

080066c8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80066cc:	4802      	ldr	r0, [pc, #8]	; (80066d8 <DMA2_Stream2_IRQHandler+0x10>)
 80066ce:	f000 ffb3 	bl	8007638 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80066d2:	bf00      	nop
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2001f408 	.word	0x2001f408

080066dc <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	4603      	mov	r3, r0
 80066e4:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 80066e6:	2300      	movs	r3, #0
 80066e8:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 80066ea:	79fb      	ldrb	r3, [r7, #7]
 80066ec:	2b52      	cmp	r3, #82	; 0x52
 80066ee:	d10a      	bne.n	8006706 <getSwitchStatus+0x2a>
 80066f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80066f4:	480d      	ldr	r0, [pc, #52]	; (800672c <getSwitchStatus+0x50>)
 80066f6:	f001 fd8b 	bl	8008210 <HAL_GPIO_ReadPin>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d102      	bne.n	8006706 <getSwitchStatus+0x2a>
		ret = 1;
 8006700:	2301      	movs	r3, #1
 8006702:	81fb      	strh	r3, [r7, #14]
 8006704:	e00c      	b.n	8006720 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 8006706:	79fb      	ldrb	r3, [r7, #7]
 8006708:	2b4c      	cmp	r3, #76	; 0x4c
 800670a:	d109      	bne.n	8006720 <getSwitchStatus+0x44>
 800670c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006710:	4806      	ldr	r0, [pc, #24]	; (800672c <getSwitchStatus+0x50>)
 8006712:	f001 fd7d 	bl	8008210 <HAL_GPIO_ReadPin>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d101      	bne.n	8006720 <getSwitchStatus+0x44>
		ret = 1;
 800671c:	2301      	movs	r3, #1
 800671e:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8006720:	89fb      	ldrh	r3, [r7, #14]

}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	40020000 	.word	0x40020000

08006730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af00      	add	r7, sp, #0
 8006736:	60f8      	str	r0, [r7, #12]
 8006738:	60b9      	str	r1, [r7, #8]
 800673a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800673c:	2300      	movs	r3, #0
 800673e:	617b      	str	r3, [r7, #20]
 8006740:	e00a      	b.n	8006758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006742:	f3af 8000 	nop.w
 8006746:	4601      	mov	r1, r0
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	1c5a      	adds	r2, r3, #1
 800674c:	60ba      	str	r2, [r7, #8]
 800674e:	b2ca      	uxtb	r2, r1
 8006750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	3301      	adds	r3, #1
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	429a      	cmp	r2, r3
 800675e:	dbf0      	blt.n	8006742 <_read+0x12>
	}

return len;
 8006760:	687b      	ldr	r3, [r7, #4]
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b086      	sub	sp, #24
 800676e:	af00      	add	r7, sp, #0
 8006770:	60f8      	str	r0, [r7, #12]
 8006772:	60b9      	str	r1, [r7, #8]
 8006774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
 800677a:	e009      	b.n	8006790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	1c5a      	adds	r2, r3, #1
 8006780:	60ba      	str	r2, [r7, #8]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f7fd f865 	bl	8003854 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	3301      	adds	r3, #1
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	dbf1      	blt.n	800677c <_write+0x12>
	}
	return len;
 8006798:	687b      	ldr	r3, [r7, #4]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}

080067a2 <_close>:

int _close(int file)
{
 80067a2:	b480      	push	{r7}
 80067a4:	b083      	sub	sp, #12
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
	return -1;
 80067aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	370c      	adds	r7, #12
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067ca:	605a      	str	r2, [r3, #4]
	return 0;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <_isatty>:

int _isatty(int file)
{
 80067da:	b480      	push	{r7}
 80067dc:	b083      	sub	sp, #12
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
	return 1;
 80067e2:	2301      	movs	r3, #1
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
	return 0;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
	...

0800680c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b086      	sub	sp, #24
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006814:	4a14      	ldr	r2, [pc, #80]	; (8006868 <_sbrk+0x5c>)
 8006816:	4b15      	ldr	r3, [pc, #84]	; (800686c <_sbrk+0x60>)
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006820:	4b13      	ldr	r3, [pc, #76]	; (8006870 <_sbrk+0x64>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d102      	bne.n	800682e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006828:	4b11      	ldr	r3, [pc, #68]	; (8006870 <_sbrk+0x64>)
 800682a:	4a12      	ldr	r2, [pc, #72]	; (8006874 <_sbrk+0x68>)
 800682c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800682e:	4b10      	ldr	r3, [pc, #64]	; (8006870 <_sbrk+0x64>)
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4413      	add	r3, r2
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	429a      	cmp	r2, r3
 800683a:	d207      	bcs.n	800684c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800683c:	f004 fb5e 	bl	800aefc <__errno>
 8006840:	4602      	mov	r2, r0
 8006842:	230c      	movs	r3, #12
 8006844:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006846:	f04f 33ff 	mov.w	r3, #4294967295
 800684a:	e009      	b.n	8006860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800684c:	4b08      	ldr	r3, [pc, #32]	; (8006870 <_sbrk+0x64>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006852:	4b07      	ldr	r3, [pc, #28]	; (8006870 <_sbrk+0x64>)
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4413      	add	r3, r2
 800685a:	4a05      	ldr	r2, [pc, #20]	; (8006870 <_sbrk+0x64>)
 800685c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800685e:	68fb      	ldr	r3, [r7, #12]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3718      	adds	r7, #24
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	20020000 	.word	0x20020000
 800686c:	00000400 	.word	0x00000400
 8006870:	2001ef98 	.word	0x2001ef98
 8006874:	2001f4e0 	.word	0x2001f4e0

08006878 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006878:	b480      	push	{r7}
 800687a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800687c:	4b08      	ldr	r3, [pc, #32]	; (80068a0 <SystemInit+0x28>)
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	4a07      	ldr	r2, [pc, #28]	; (80068a0 <SystemInit+0x28>)
 8006884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800688c:	4b04      	ldr	r3, [pc, #16]	; (80068a0 <SystemInit+0x28>)
 800688e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006892:	609a      	str	r2, [r3, #8]
#endif
}
 8006894:	bf00      	nop
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	e000ed00 	.word	0xe000ed00

080068a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80068a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068dc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80068a8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80068aa:	e003      	b.n	80068b4 <LoopCopyDataInit>

080068ac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80068ac:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80068ae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80068b0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80068b2:	3104      	adds	r1, #4

080068b4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80068b4:	480b      	ldr	r0, [pc, #44]	; (80068e4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80068b6:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80068b8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80068ba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80068bc:	d3f6      	bcc.n	80068ac <CopyDataInit>
  ldr  r2, =_sbss
 80068be:	4a0b      	ldr	r2, [pc, #44]	; (80068ec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80068c0:	e002      	b.n	80068c8 <LoopFillZerobss>

080068c2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80068c2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80068c4:	f842 3b04 	str.w	r3, [r2], #4

080068c8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80068c8:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80068ca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80068cc:	d3f9      	bcc.n	80068c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80068ce:	f7ff ffd3 	bl	8006878 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068d2:	f004 fb19 	bl	800af08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068d6:	f7fd f837 	bl	8003948 <main>
  bx  lr    
 80068da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80068dc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80068e0:	0800f7a0 	.word	0x0800f7a0
  ldr  r0, =_sdata
 80068e4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80068e8:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 80068ec:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 80068f0:	2001f4e0 	.word	0x2001f4e0

080068f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80068f4:	e7fe      	b.n	80068f4 <ADC_IRQHandler>
	...

080068f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80068fc:	4b0e      	ldr	r3, [pc, #56]	; (8006938 <HAL_Init+0x40>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a0d      	ldr	r2, [pc, #52]	; (8006938 <HAL_Init+0x40>)
 8006902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <HAL_Init+0x40>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a0a      	ldr	r2, [pc, #40]	; (8006938 <HAL_Init+0x40>)
 800690e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006914:	4b08      	ldr	r3, [pc, #32]	; (8006938 <HAL_Init+0x40>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a07      	ldr	r2, [pc, #28]	; (8006938 <HAL_Init+0x40>)
 800691a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800691e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006920:	2003      	movs	r0, #3
 8006922:	f000 fd41 	bl	80073a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006926:	2000      	movs	r0, #0
 8006928:	f000 f808 	bl	800693c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800692c:	f7ff fb10 	bl	8005f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	40023c00 	.word	0x40023c00

0800693c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006944:	4b12      	ldr	r3, [pc, #72]	; (8006990 <HAL_InitTick+0x54>)
 8006946:	681a      	ldr	r2, [r3, #0]
 8006948:	4b12      	ldr	r3, [pc, #72]	; (8006994 <HAL_InitTick+0x58>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	4619      	mov	r1, r3
 800694e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006952:	fbb3 f3f1 	udiv	r3, r3, r1
 8006956:	fbb2 f3f3 	udiv	r3, r2, r3
 800695a:	4618      	mov	r0, r3
 800695c:	f000 fd59 	bl	8007412 <HAL_SYSTICK_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	2b00      	cmp	r3, #0
 8006964:	d001      	beq.n	800696a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	e00e      	b.n	8006988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b0f      	cmp	r3, #15
 800696e:	d80a      	bhi.n	8006986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006970:	2200      	movs	r2, #0
 8006972:	6879      	ldr	r1, [r7, #4]
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
 8006978:	f000 fd21 	bl	80073be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800697c:	4a06      	ldr	r2, [pc, #24]	; (8006998 <HAL_InitTick+0x5c>)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	e000      	b.n	8006988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
}
 8006988:	4618      	mov	r0, r3
 800698a:	3708      	adds	r7, #8
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20000034 	.word	0x20000034
 8006994:	2000003c 	.word	0x2000003c
 8006998:	20000038 	.word	0x20000038

0800699c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800699c:	b480      	push	{r7}
 800699e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069a0:	4b06      	ldr	r3, [pc, #24]	; (80069bc <HAL_IncTick+0x20>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <HAL_IncTick+0x24>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4413      	add	r3, r2
 80069ac:	4a04      	ldr	r2, [pc, #16]	; (80069c0 <HAL_IncTick+0x24>)
 80069ae:	6013      	str	r3, [r2, #0]
}
 80069b0:	bf00      	nop
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
 80069ba:	bf00      	nop
 80069bc:	2000003c 	.word	0x2000003c
 80069c0:	2001f4b8 	.word	0x2001f4b8

080069c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069c4:	b480      	push	{r7}
 80069c6:	af00      	add	r7, sp, #0
  return uwTick;
 80069c8:	4b03      	ldr	r3, [pc, #12]	; (80069d8 <HAL_GetTick+0x14>)
 80069ca:	681b      	ldr	r3, [r3, #0]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	2001f4b8 	.word	0x2001f4b8

080069dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069e4:	f7ff ffee 	bl	80069c4 <HAL_GetTick>
 80069e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d005      	beq.n	8006a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80069f6:	4b09      	ldr	r3, [pc, #36]	; (8006a1c <HAL_Delay+0x40>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	461a      	mov	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	4413      	add	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a02:	bf00      	nop
 8006a04:	f7ff ffde 	bl	80069c4 <HAL_GetTick>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d8f7      	bhi.n	8006a04 <HAL_Delay+0x28>
  {
  }
}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	2000003c 	.word	0x2000003c

08006a20 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d101      	bne.n	8006a36 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e033      	b.n	8006a9e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d109      	bne.n	8006a52 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff faae 	bl	8005fa0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a56:	f003 0310 	and.w	r3, r3, #16
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d118      	bne.n	8006a90 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a62:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006a66:	f023 0302 	bic.w	r3, r3, #2
 8006a6a:	f043 0202 	orr.w	r2, r3, #2
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fa4a 	bl	8006f0c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	f023 0303 	bic.w	r3, r3, #3
 8006a86:	f043 0201 	orr.w	r2, r3, #1
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	641a      	str	r2, [r3, #64]	; 0x40
 8006a8e:	e001      	b.n	8006a94 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006a90:	2301      	movs	r3, #1
 8006a92:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d101      	bne.n	8006ac6 <HAL_ADC_Start_DMA+0x1e>
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	e0cc      	b.n	8006c60 <HAL_ADC_Start_DMA+0x1b8>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d018      	beq.n	8006b0e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f042 0201 	orr.w	r2, r2, #1
 8006aea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006aec:	4b5e      	ldr	r3, [pc, #376]	; (8006c68 <HAL_ADC_Start_DMA+0x1c0>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a5e      	ldr	r2, [pc, #376]	; (8006c6c <HAL_ADC_Start_DMA+0x1c4>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	0c9a      	lsrs	r2, r3, #18
 8006af8:	4613      	mov	r3, r2
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	4413      	add	r3, r2
 8006afe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006b00:	e002      	b.n	8006b08 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1f9      	bne.n	8006b02 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	f003 0301 	and.w	r3, r3, #1
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f040 80a0 	bne.w	8006c5e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006b26:	f023 0301 	bic.w	r3, r3, #1
 8006b2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006b48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b5c:	d106      	bne.n	8006b6c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b62:	f023 0206 	bic.w	r2, r3, #6
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	645a      	str	r2, [r3, #68]	; 0x44
 8006b6a:	e002      	b.n	8006b72 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b7a:	4b3d      	ldr	r3, [pc, #244]	; (8006c70 <HAL_ADC_Start_DMA+0x1c8>)
 8006b7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b82:	4a3c      	ldr	r2, [pc, #240]	; (8006c74 <HAL_ADC_Start_DMA+0x1cc>)
 8006b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8a:	4a3b      	ldr	r2, [pc, #236]	; (8006c78 <HAL_ADC_Start_DMA+0x1d0>)
 8006b8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	4a3a      	ldr	r2, [pc, #232]	; (8006c7c <HAL_ADC_Start_DMA+0x1d4>)
 8006b94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006b9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006bae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	689a      	ldr	r2, [r3, #8]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006bbe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	334c      	adds	r3, #76	; 0x4c
 8006bca:	4619      	mov	r1, r3
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f000 fcda 	bl	8007588 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d12a      	bne.n	8006c36 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a26      	ldr	r2, [pc, #152]	; (8006c80 <HAL_ADC_Start_DMA+0x1d8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d015      	beq.n	8006c16 <HAL_ADC_Start_DMA+0x16e>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a25      	ldr	r2, [pc, #148]	; (8006c84 <HAL_ADC_Start_DMA+0x1dc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d105      	bne.n	8006c00 <HAL_ADC_Start_DMA+0x158>
 8006bf4:	4b1e      	ldr	r3, [pc, #120]	; (8006c70 <HAL_ADC_Start_DMA+0x1c8>)
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	f003 031f 	and.w	r3, r3, #31
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00a      	beq.n	8006c16 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a20      	ldr	r2, [pc, #128]	; (8006c88 <HAL_ADC_Start_DMA+0x1e0>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d129      	bne.n	8006c5e <HAL_ADC_Start_DMA+0x1b6>
 8006c0a:	4b19      	ldr	r3, [pc, #100]	; (8006c70 <HAL_ADC_Start_DMA+0x1c8>)
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f003 031f 	and.w	r3, r3, #31
 8006c12:	2b0f      	cmp	r3, #15
 8006c14:	d823      	bhi.n	8006c5e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d11c      	bne.n	8006c5e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	689a      	ldr	r2, [r3, #8]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006c32:	609a      	str	r2, [r3, #8]
 8006c34:	e013      	b.n	8006c5e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a11      	ldr	r2, [pc, #68]	; (8006c80 <HAL_ADC_Start_DMA+0x1d8>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d10e      	bne.n	8006c5e <HAL_ADC_Start_DMA+0x1b6>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d107      	bne.n	8006c5e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006c5c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3718      	adds	r7, #24
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}
 8006c68:	20000034 	.word	0x20000034
 8006c6c:	431bde83 	.word	0x431bde83
 8006c70:	40012300 	.word	0x40012300
 8006c74:	08007105 	.word	0x08007105
 8006c78:	080071bf 	.word	0x080071bf
 8006c7c:	080071db 	.word	0x080071db
 8006c80:	40012000 	.word	0x40012000
 8006c84:	40012100 	.word	0x40012100
 8006c88:	40012200 	.word	0x40012200

08006c8c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006c94:	bf00      	nop
 8006c96:	370c      	adds	r7, #12
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d101      	bne.n	8006ce4 <HAL_ADC_ConfigChannel+0x1c>
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	e105      	b.n	8006ef0 <HAL_ADC_ConfigChannel+0x228>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2b09      	cmp	r3, #9
 8006cf2:	d925      	bls.n	8006d40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68d9      	ldr	r1, [r3, #12]
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	461a      	mov	r2, r3
 8006d02:	4613      	mov	r3, r2
 8006d04:	005b      	lsls	r3, r3, #1
 8006d06:	4413      	add	r3, r2
 8006d08:	3b1e      	subs	r3, #30
 8006d0a:	2207      	movs	r2, #7
 8006d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d10:	43da      	mvns	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	400a      	ands	r2, r1
 8006d18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68d9      	ldr	r1, [r3, #12]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	005b      	lsls	r3, r3, #1
 8006d30:	4403      	add	r3, r0
 8006d32:	3b1e      	subs	r3, #30
 8006d34:	409a      	lsls	r2, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	430a      	orrs	r2, r1
 8006d3c:	60da      	str	r2, [r3, #12]
 8006d3e:	e022      	b.n	8006d86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	6919      	ldr	r1, [r3, #16]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	4613      	mov	r3, r2
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	4413      	add	r3, r2
 8006d54:	2207      	movs	r2, #7
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	43da      	mvns	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	400a      	ands	r2, r1
 8006d62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	6919      	ldr	r1, [r3, #16]
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	4618      	mov	r0, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	4403      	add	r3, r0
 8006d7c:	409a      	lsls	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	2b06      	cmp	r3, #6
 8006d8c:	d824      	bhi.n	8006dd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	3b05      	subs	r3, #5
 8006da0:	221f      	movs	r2, #31
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	43da      	mvns	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	400a      	ands	r2, r1
 8006dae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	3b05      	subs	r3, #5
 8006dca:	fa00 f203 	lsl.w	r2, r0, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	430a      	orrs	r2, r1
 8006dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8006dd6:	e04c      	b.n	8006e72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b0c      	cmp	r3, #12
 8006dde:	d824      	bhi.n	8006e2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	4413      	add	r3, r2
 8006df0:	3b23      	subs	r3, #35	; 0x23
 8006df2:	221f      	movs	r2, #31
 8006df4:	fa02 f303 	lsl.w	r3, r2, r3
 8006df8:	43da      	mvns	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	400a      	ands	r2, r1
 8006e00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	4618      	mov	r0, r3
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	3b23      	subs	r3, #35	; 0x23
 8006e1c:	fa00 f203 	lsl.w	r2, r0, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	430a      	orrs	r2, r1
 8006e26:	631a      	str	r2, [r3, #48]	; 0x30
 8006e28:	e023      	b.n	8006e72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685a      	ldr	r2, [r3, #4]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	3b41      	subs	r3, #65	; 0x41
 8006e3c:	221f      	movs	r2, #31
 8006e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e42:	43da      	mvns	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	400a      	ands	r2, r1
 8006e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	4618      	mov	r0, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	3b41      	subs	r3, #65	; 0x41
 8006e66:	fa00 f203 	lsl.w	r2, r0, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006e72:	4b22      	ldr	r3, [pc, #136]	; (8006efc <HAL_ADC_ConfigChannel+0x234>)
 8006e74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a21      	ldr	r2, [pc, #132]	; (8006f00 <HAL_ADC_ConfigChannel+0x238>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d109      	bne.n	8006e94 <HAL_ADC_ConfigChannel+0x1cc>
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b12      	cmp	r3, #18
 8006e86:	d105      	bne.n	8006e94 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a19      	ldr	r2, [pc, #100]	; (8006f00 <HAL_ADC_ConfigChannel+0x238>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d123      	bne.n	8006ee6 <HAL_ADC_ConfigChannel+0x21e>
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b10      	cmp	r3, #16
 8006ea4:	d003      	beq.n	8006eae <HAL_ADC_ConfigChannel+0x1e6>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b11      	cmp	r3, #17
 8006eac:	d11b      	bne.n	8006ee6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b10      	cmp	r3, #16
 8006ec0:	d111      	bne.n	8006ee6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ec2:	4b10      	ldr	r3, [pc, #64]	; (8006f04 <HAL_ADC_ConfigChannel+0x23c>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a10      	ldr	r2, [pc, #64]	; (8006f08 <HAL_ADC_ConfigChannel+0x240>)
 8006ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ecc:	0c9a      	lsrs	r2, r3, #18
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ed8:	e002      	b.n	8006ee0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f9      	bne.n	8006eda <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr
 8006efc:	40012300 	.word	0x40012300
 8006f00:	40012000 	.word	0x40012000
 8006f04:	20000034 	.word	0x20000034
 8006f08:	431bde83 	.word	0x431bde83

08006f0c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f14:	4b79      	ldr	r3, [pc, #484]	; (80070fc <ADC_Init+0x1f0>)
 8006f16:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	431a      	orrs	r2, r3
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	685a      	ldr	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6859      	ldr	r1, [r3, #4]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
 8006f4c:	021a      	lsls	r2, r3, #8
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	430a      	orrs	r2, r1
 8006f54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685a      	ldr	r2, [r3, #4]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6859      	ldr	r1, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689a      	ldr	r2, [r3, #8]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6899      	ldr	r1, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68da      	ldr	r2, [r3, #12]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	4a58      	ldr	r2, [pc, #352]	; (8007100 <ADC_Init+0x1f4>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d022      	beq.n	8006fea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689a      	ldr	r2, [r3, #8]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006fb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6899      	ldr	r1, [r3, #8]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6899      	ldr	r1, [r3, #8]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	430a      	orrs	r2, r1
 8006fe6:	609a      	str	r2, [r3, #8]
 8006fe8:	e00f      	b.n	800700a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	689a      	ldr	r2, [r3, #8]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007008:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	689a      	ldr	r2, [r3, #8]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f022 0202 	bic.w	r2, r2, #2
 8007018:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6899      	ldr	r1, [r3, #8]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	7e1b      	ldrb	r3, [r3, #24]
 8007024:	005a      	lsls	r2, r3, #1
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	430a      	orrs	r2, r1
 800702c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d01b      	beq.n	8007070 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007046:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	685a      	ldr	r2, [r3, #4]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007056:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6859      	ldr	r1, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	3b01      	subs	r3, #1
 8007064:	035a      	lsls	r2, r3, #13
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
 800706e:	e007      	b.n	8007080 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685a      	ldr	r2, [r3, #4]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800707e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800708e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	3b01      	subs	r3, #1
 800709c:	051a      	lsls	r2, r3, #20
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	689a      	ldr	r2, [r3, #8]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80070b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6899      	ldr	r1, [r3, #8]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80070c2:	025a      	lsls	r2, r3, #9
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	689a      	ldr	r2, [r3, #8]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	6899      	ldr	r1, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	029a      	lsls	r2, r3, #10
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	609a      	str	r2, [r3, #8]
}
 80070f0:	bf00      	nop
 80070f2:	3714      	adds	r7, #20
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	40012300 	.word	0x40012300
 8007100:	0f000001 	.word	0x0f000001

08007104 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800711a:	2b00      	cmp	r3, #0
 800711c:	d13c      	bne.n	8007198 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007122:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d12b      	bne.n	8007190 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800713c:	2b00      	cmp	r3, #0
 800713e:	d127      	bne.n	8007190 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007146:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800714a:	2b00      	cmp	r3, #0
 800714c:	d006      	beq.n	800715c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007158:	2b00      	cmp	r3, #0
 800715a:	d119      	bne.n	8007190 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685a      	ldr	r2, [r3, #4]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0220 	bic.w	r2, r2, #32
 800716a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007170:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007180:	2b00      	cmp	r3, #0
 8007182:	d105      	bne.n	8007190 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007188:	f043 0201 	orr.w	r2, r3, #1
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f7ff fd7b 	bl	8006c8c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007196:	e00e      	b.n	80071b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	f003 0310 	and.w	r3, r3, #16
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d003      	beq.n	80071ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff fd85 	bl	8006cb4 <HAL_ADC_ErrorCallback>
}
 80071aa:	e004      	b.n	80071b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
}
 80071b6:	bf00      	nop
 80071b8:	3710      	adds	r7, #16
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7ff fd67 	bl	8006ca0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80071d2:	bf00      	nop
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2240      	movs	r2, #64	; 0x40
 80071ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f2:	f043 0204 	orr.w	r2, r3, #4
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f7ff fd5a 	bl	8006cb4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007200:	bf00      	nop
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f003 0307 	and.w	r3, r3, #7
 8007216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007218:	4b0c      	ldr	r3, [pc, #48]	; (800724c <__NVIC_SetPriorityGrouping+0x44>)
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007224:	4013      	ands	r3, r2
 8007226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800723a:	4a04      	ldr	r2, [pc, #16]	; (800724c <__NVIC_SetPriorityGrouping+0x44>)
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	60d3      	str	r3, [r2, #12]
}
 8007240:	bf00      	nop
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	e000ed00 	.word	0xe000ed00

08007250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007254:	4b04      	ldr	r3, [pc, #16]	; (8007268 <__NVIC_GetPriorityGrouping+0x18>)
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	0a1b      	lsrs	r3, r3, #8
 800725a:	f003 0307 	and.w	r3, r3, #7
}
 800725e:	4618      	mov	r0, r3
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	e000ed00 	.word	0xe000ed00

0800726c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800726c:	b480      	push	{r7}
 800726e:	b083      	sub	sp, #12
 8007270:	af00      	add	r7, sp, #0
 8007272:	4603      	mov	r3, r0
 8007274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800727a:	2b00      	cmp	r3, #0
 800727c:	db0b      	blt.n	8007296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800727e:	79fb      	ldrb	r3, [r7, #7]
 8007280:	f003 021f 	and.w	r2, r3, #31
 8007284:	4907      	ldr	r1, [pc, #28]	; (80072a4 <__NVIC_EnableIRQ+0x38>)
 8007286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	2001      	movs	r0, #1
 800728e:	fa00 f202 	lsl.w	r2, r0, r2
 8007292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	e000e100 	.word	0xe000e100

080072a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	4603      	mov	r3, r0
 80072b0:	6039      	str	r1, [r7, #0]
 80072b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	db0a      	blt.n	80072d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	b2da      	uxtb	r2, r3
 80072c0:	490c      	ldr	r1, [pc, #48]	; (80072f4 <__NVIC_SetPriority+0x4c>)
 80072c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072c6:	0112      	lsls	r2, r2, #4
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	440b      	add	r3, r1
 80072cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80072d0:	e00a      	b.n	80072e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	b2da      	uxtb	r2, r3
 80072d6:	4908      	ldr	r1, [pc, #32]	; (80072f8 <__NVIC_SetPriority+0x50>)
 80072d8:	79fb      	ldrb	r3, [r7, #7]
 80072da:	f003 030f 	and.w	r3, r3, #15
 80072de:	3b04      	subs	r3, #4
 80072e0:	0112      	lsls	r2, r2, #4
 80072e2:	b2d2      	uxtb	r2, r2
 80072e4:	440b      	add	r3, r1
 80072e6:	761a      	strb	r2, [r3, #24]
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	e000e100 	.word	0xe000e100
 80072f8:	e000ed00 	.word	0xe000ed00

080072fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b089      	sub	sp, #36	; 0x24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f003 0307 	and.w	r3, r3, #7
 800730e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	f1c3 0307 	rsb	r3, r3, #7
 8007316:	2b04      	cmp	r3, #4
 8007318:	bf28      	it	cs
 800731a:	2304      	movcs	r3, #4
 800731c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	3304      	adds	r3, #4
 8007322:	2b06      	cmp	r3, #6
 8007324:	d902      	bls.n	800732c <NVIC_EncodePriority+0x30>
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	3b03      	subs	r3, #3
 800732a:	e000      	b.n	800732e <NVIC_EncodePriority+0x32>
 800732c:	2300      	movs	r3, #0
 800732e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007330:	f04f 32ff 	mov.w	r2, #4294967295
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	fa02 f303 	lsl.w	r3, r2, r3
 800733a:	43da      	mvns	r2, r3
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	401a      	ands	r2, r3
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007344:	f04f 31ff 	mov.w	r1, #4294967295
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	fa01 f303 	lsl.w	r3, r1, r3
 800734e:	43d9      	mvns	r1, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007354:	4313      	orrs	r3, r2
         );
}
 8007356:	4618      	mov	r0, r3
 8007358:	3724      	adds	r7, #36	; 0x24
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
	...

08007364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3b01      	subs	r3, #1
 8007370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007374:	d301      	bcc.n	800737a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007376:	2301      	movs	r3, #1
 8007378:	e00f      	b.n	800739a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800737a:	4a0a      	ldr	r2, [pc, #40]	; (80073a4 <SysTick_Config+0x40>)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	3b01      	subs	r3, #1
 8007380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007382:	210f      	movs	r1, #15
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	f7ff ff8e 	bl	80072a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <SysTick_Config+0x40>)
 800738e:	2200      	movs	r2, #0
 8007390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007392:	4b04      	ldr	r3, [pc, #16]	; (80073a4 <SysTick_Config+0x40>)
 8007394:	2207      	movs	r2, #7
 8007396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3708      	adds	r7, #8
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	e000e010 	.word	0xe000e010

080073a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff ff29 	bl	8007208 <__NVIC_SetPriorityGrouping>
}
 80073b6:	bf00      	nop
 80073b8:	3708      	adds	r7, #8
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}

080073be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80073be:	b580      	push	{r7, lr}
 80073c0:	b086      	sub	sp, #24
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	4603      	mov	r3, r0
 80073c6:	60b9      	str	r1, [r7, #8]
 80073c8:	607a      	str	r2, [r7, #4]
 80073ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80073cc:	2300      	movs	r3, #0
 80073ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80073d0:	f7ff ff3e 	bl	8007250 <__NVIC_GetPriorityGrouping>
 80073d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	68b9      	ldr	r1, [r7, #8]
 80073da:	6978      	ldr	r0, [r7, #20]
 80073dc:	f7ff ff8e 	bl	80072fc <NVIC_EncodePriority>
 80073e0:	4602      	mov	r2, r0
 80073e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073e6:	4611      	mov	r1, r2
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7ff ff5d 	bl	80072a8 <__NVIC_SetPriority>
}
 80073ee:	bf00      	nop
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b082      	sub	sp, #8
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	4603      	mov	r3, r0
 80073fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff ff31 	bl	800726c <__NVIC_EnableIRQ>
}
 800740a:	bf00      	nop
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff ffa2 	bl	8007364 <SysTick_Config>
 8007420:	4603      	mov	r3, r0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
	...

0800742c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b086      	sub	sp, #24
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007438:	f7ff fac4 	bl	80069c4 <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e099      	b.n	800757c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2202      	movs	r2, #2
 8007454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	681a      	ldr	r2, [r3, #0]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f022 0201 	bic.w	r2, r2, #1
 8007466:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007468:	e00f      	b.n	800748a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800746a:	f7ff faab 	bl	80069c4 <HAL_GetTick>
 800746e:	4602      	mov	r2, r0
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	2b05      	cmp	r3, #5
 8007476:	d908      	bls.n	800748a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2220      	movs	r2, #32
 800747c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2203      	movs	r2, #3
 8007482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007486:	2303      	movs	r3, #3
 8007488:	e078      	b.n	800757c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f003 0301 	and.w	r3, r3, #1
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e8      	bne.n	800746a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4b38      	ldr	r3, [pc, #224]	; (8007584 <HAL_DMA_Init+0x158>)
 80074a4:	4013      	ands	r3, r2
 80074a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80074c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80074ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d107      	bne.n	80074f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ec:	4313      	orrs	r3, r2
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695b      	ldr	r3, [r3, #20]
 8007502:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f023 0307 	bic.w	r3, r3, #7
 800750a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751a:	2b04      	cmp	r3, #4
 800751c:	d117      	bne.n	800754e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	2b00      	cmp	r3, #0
 800752e:	d00e      	beq.n	800754e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fa6f 	bl	8007a14 <DMA_CheckFifoParam>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2240      	movs	r2, #64	; 0x40
 8007540:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800754a:	2301      	movs	r3, #1
 800754c:	e016      	b.n	800757c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa26 	bl	80079a8 <DMA_CalcBaseAndBitshift>
 800755c:	4603      	mov	r3, r0
 800755e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007564:	223f      	movs	r2, #63	; 0x3f
 8007566:	409a      	lsls	r2, r3
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3718      	adds	r7, #24
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	f010803f 	.word	0xf010803f

08007588 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800759e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d101      	bne.n	80075ae <HAL_DMA_Start_IT+0x26>
 80075aa:	2302      	movs	r3, #2
 80075ac:	e040      	b.n	8007630 <HAL_DMA_Start_IT+0xa8>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d12f      	bne.n	8007622 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2202      	movs	r2, #2
 80075c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	687a      	ldr	r2, [r7, #4]
 80075d4:	68b9      	ldr	r1, [r7, #8]
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 f9b8 	bl	800794c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e0:	223f      	movs	r2, #63	; 0x3f
 80075e2:	409a      	lsls	r2, r3
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0216 	orr.w	r2, r2, #22
 80075f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d007      	beq.n	8007610 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f042 0208 	orr.w	r2, r2, #8
 800760e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	e005      	b.n	800762e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800762a:	2302      	movs	r3, #2
 800762c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800762e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3718      	adds	r7, #24
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007640:	2300      	movs	r3, #0
 8007642:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007644:	4b92      	ldr	r3, [pc, #584]	; (8007890 <HAL_DMA_IRQHandler+0x258>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a92      	ldr	r2, [pc, #584]	; (8007894 <HAL_DMA_IRQHandler+0x25c>)
 800764a:	fba2 2303 	umull	r2, r3, r2, r3
 800764e:	0a9b      	lsrs	r3, r3, #10
 8007650:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007656:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007662:	2208      	movs	r2, #8
 8007664:	409a      	lsls	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4013      	ands	r3, r2
 800766a:	2b00      	cmp	r3, #0
 800766c:	d01a      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 0304 	and.w	r3, r3, #4
 8007678:	2b00      	cmp	r3, #0
 800767a:	d013      	beq.n	80076a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681a      	ldr	r2, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0204 	bic.w	r2, r2, #4
 800768a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007690:	2208      	movs	r2, #8
 8007692:	409a      	lsls	r2, r3
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800769c:	f043 0201 	orr.w	r2, r3, #1
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076a8:	2201      	movs	r2, #1
 80076aa:	409a      	lsls	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	4013      	ands	r3, r2
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d012      	beq.n	80076da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d00b      	beq.n	80076da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c6:	2201      	movs	r2, #1
 80076c8:	409a      	lsls	r2, r3
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d2:	f043 0202 	orr.w	r2, r3, #2
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076de:	2204      	movs	r2, #4
 80076e0:	409a      	lsls	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4013      	ands	r3, r2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d012      	beq.n	8007710 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076fc:	2204      	movs	r2, #4
 80076fe:	409a      	lsls	r2, r3
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007708:	f043 0204 	orr.w	r2, r3, #4
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007714:	2210      	movs	r2, #16
 8007716:	409a      	lsls	r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	4013      	ands	r3, r2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d043      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f003 0308 	and.w	r3, r3, #8
 800772a:	2b00      	cmp	r3, #0
 800772c:	d03c      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007732:	2210      	movs	r2, #16
 8007734:	409a      	lsls	r2, r3
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d018      	beq.n	800777a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d108      	bne.n	8007768 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775a:	2b00      	cmp	r3, #0
 800775c:	d024      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	4798      	blx	r3
 8007766:	e01f      	b.n	80077a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01b      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
 8007778:	e016      	b.n	80077a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007784:	2b00      	cmp	r3, #0
 8007786:	d107      	bne.n	8007798 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0208 	bic.w	r2, r2, #8
 8007796:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	2b00      	cmp	r3, #0
 800779e:	d003      	beq.n	80077a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ac:	2220      	movs	r2, #32
 80077ae:	409a      	lsls	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	4013      	ands	r3, r2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 808e 	beq.w	80078d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0310 	and.w	r3, r3, #16
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8086 	beq.w	80078d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077ce:	2220      	movs	r2, #32
 80077d0:	409a      	lsls	r2, r3
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d136      	bne.n	8007850 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0216 	bic.w	r2, r2, #22
 80077f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	695a      	ldr	r2, [r3, #20]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007800:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d103      	bne.n	8007812 <HAL_DMA_IRQHandler+0x1da>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780e:	2b00      	cmp	r3, #0
 8007810:	d007      	beq.n	8007822 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0208 	bic.w	r2, r2, #8
 8007820:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007826:	223f      	movs	r2, #63	; 0x3f
 8007828:	409a      	lsls	r2, r3
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007842:	2b00      	cmp	r3, #0
 8007844:	d07d      	beq.n	8007942 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	4798      	blx	r3
        }
        return;
 800784e:	e078      	b.n	8007942 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d01c      	beq.n	8007898 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007868:	2b00      	cmp	r3, #0
 800786a:	d108      	bne.n	800787e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007870:	2b00      	cmp	r3, #0
 8007872:	d030      	beq.n	80078d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	4798      	blx	r3
 800787c:	e02b      	b.n	80078d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007882:	2b00      	cmp	r3, #0
 8007884:	d027      	beq.n	80078d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	4798      	blx	r3
 800788e:	e022      	b.n	80078d6 <HAL_DMA_IRQHandler+0x29e>
 8007890:	20000034 	.word	0x20000034
 8007894:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d10f      	bne.n	80078c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0210 	bic.w	r2, r2, #16
 80078b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d032      	beq.n	8007944 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d022      	beq.n	8007930 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2205      	movs	r2, #5
 80078ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f022 0201 	bic.w	r2, r2, #1
 8007900:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	3301      	adds	r3, #1
 8007906:	60bb      	str	r3, [r7, #8]
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	429a      	cmp	r2, r3
 800790c:	d307      	bcc.n	800791e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0301 	and.w	r3, r3, #1
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f2      	bne.n	8007902 <HAL_DMA_IRQHandler+0x2ca>
 800791c:	e000      	b.n	8007920 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800791e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	4798      	blx	r3
 8007940:	e000      	b.n	8007944 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007942:	bf00      	nop
    }
  }
}
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop

0800794c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007968:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	2b40      	cmp	r3, #64	; 0x40
 8007978:	d108      	bne.n	800798c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800798a:	e007      	b.n	800799c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	60da      	str	r2, [r3, #12]
}
 800799c:	bf00      	nop
 800799e:	3714      	adds	r7, #20
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b085      	sub	sp, #20
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	3b10      	subs	r3, #16
 80079b8:	4a14      	ldr	r2, [pc, #80]	; (8007a0c <DMA_CalcBaseAndBitshift+0x64>)
 80079ba:	fba2 2303 	umull	r2, r3, r2, r3
 80079be:	091b      	lsrs	r3, r3, #4
 80079c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80079c2:	4a13      	ldr	r2, [pc, #76]	; (8007a10 <DMA_CalcBaseAndBitshift+0x68>)
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	4413      	add	r3, r2
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d909      	bls.n	80079ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80079de:	f023 0303 	bic.w	r3, r3, #3
 80079e2:	1d1a      	adds	r2, r3, #4
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	659a      	str	r2, [r3, #88]	; 0x58
 80079e8:	e007      	b.n	80079fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80079f2:	f023 0303 	bic.w	r3, r3, #3
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3714      	adds	r7, #20
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr
 8007a0a:	bf00      	nop
 8007a0c:	aaaaaaab 	.word	0xaaaaaaab
 8007a10:	0800f468 	.word	0x0800f468

08007a14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d11f      	bne.n	8007a6e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b03      	cmp	r3, #3
 8007a32:	d855      	bhi.n	8007ae0 <DMA_CheckFifoParam+0xcc>
 8007a34:	a201      	add	r2, pc, #4	; (adr r2, 8007a3c <DMA_CheckFifoParam+0x28>)
 8007a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a3a:	bf00      	nop
 8007a3c:	08007a4d 	.word	0x08007a4d
 8007a40:	08007a5f 	.word	0x08007a5f
 8007a44:	08007a4d 	.word	0x08007a4d
 8007a48:	08007ae1 	.word	0x08007ae1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d045      	beq.n	8007ae4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a5c:	e042      	b.n	8007ae4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007a66:	d13f      	bne.n	8007ae8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007a6c:	e03c      	b.n	8007ae8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	699b      	ldr	r3, [r3, #24]
 8007a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a76:	d121      	bne.n	8007abc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2b03      	cmp	r3, #3
 8007a7c:	d836      	bhi.n	8007aec <DMA_CheckFifoParam+0xd8>
 8007a7e:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <DMA_CheckFifoParam+0x70>)
 8007a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a84:	08007a95 	.word	0x08007a95
 8007a88:	08007a9b 	.word	0x08007a9b
 8007a8c:	08007a95 	.word	0x08007a95
 8007a90:	08007aad 	.word	0x08007aad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	73fb      	strb	r3, [r7, #15]
      break;
 8007a98:	e02f      	b.n	8007afa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d024      	beq.n	8007af0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007aaa:	e021      	b.n	8007af0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007ab4:	d11e      	bne.n	8007af4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007aba:	e01b      	b.n	8007af4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d902      	bls.n	8007ac8 <DMA_CheckFifoParam+0xb4>
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d003      	beq.n	8007ace <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007ac6:	e018      	b.n	8007afa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
      break;
 8007acc:	e015      	b.n	8007afa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00e      	beq.n	8007af8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ade:	e00b      	b.n	8007af8 <DMA_CheckFifoParam+0xe4>
      break;
 8007ae0:	bf00      	nop
 8007ae2:	e00a      	b.n	8007afa <DMA_CheckFifoParam+0xe6>
      break;
 8007ae4:	bf00      	nop
 8007ae6:	e008      	b.n	8007afa <DMA_CheckFifoParam+0xe6>
      break;
 8007ae8:	bf00      	nop
 8007aea:	e006      	b.n	8007afa <DMA_CheckFifoParam+0xe6>
      break;
 8007aec:	bf00      	nop
 8007aee:	e004      	b.n	8007afa <DMA_CheckFifoParam+0xe6>
      break;
 8007af0:	bf00      	nop
 8007af2:	e002      	b.n	8007afa <DMA_CheckFifoParam+0xe6>
      break;   
 8007af4:	bf00      	nop
 8007af6:	e000      	b.n	8007afa <DMA_CheckFifoParam+0xe6>
      break;
 8007af8:	bf00      	nop
    }
  } 
  
  return status; 
 8007afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b12:	4b0b      	ldr	r3, [pc, #44]	; (8007b40 <HAL_FLASH_Unlock+0x38>)
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	da0b      	bge.n	8007b32 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <HAL_FLASH_Unlock+0x38>)
 8007b1c:	4a09      	ldr	r2, [pc, #36]	; (8007b44 <HAL_FLASH_Unlock+0x3c>)
 8007b1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <HAL_FLASH_Unlock+0x38>)
 8007b22:	4a09      	ldr	r2, [pc, #36]	; (8007b48 <HAL_FLASH_Unlock+0x40>)
 8007b24:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007b26:	4b06      	ldr	r3, [pc, #24]	; (8007b40 <HAL_FLASH_Unlock+0x38>)
 8007b28:	691b      	ldr	r3, [r3, #16]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	da01      	bge.n	8007b32 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007b32:	79fb      	ldrb	r3, [r7, #7]
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	370c      	adds	r7, #12
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	40023c00 	.word	0x40023c00
 8007b44:	45670123 	.word	0x45670123
 8007b48:	cdef89ab 	.word	0xcdef89ab

08007b4c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007b50:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <HAL_FLASH_Lock+0x1c>)
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	4a04      	ldr	r2, [pc, #16]	; (8007b68 <HAL_FLASH_Lock+0x1c>)
 8007b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b5a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007b5c:	2300      	movs	r3, #0
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr
 8007b68:	40023c00 	.word	0x40023c00

08007b6c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b74:	2300      	movs	r3, #0
 8007b76:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007b78:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <FLASH_WaitForLastOperation+0x78>)
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007b7e:	f7fe ff21 	bl	80069c4 <HAL_GetTick>
 8007b82:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007b84:	e010      	b.n	8007ba8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b8c:	d00c      	beq.n	8007ba8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <FLASH_WaitForLastOperation+0x38>
 8007b94:	f7fe ff16 	bl	80069c4 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d201      	bcs.n	8007ba8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e019      	b.n	8007bdc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007ba8:	4b0f      	ldr	r3, [pc, #60]	; (8007be8 <FLASH_WaitForLastOperation+0x7c>)
 8007baa:	68db      	ldr	r3, [r3, #12]
 8007bac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d1e8      	bne.n	8007b86 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007bb4:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <FLASH_WaitForLastOperation+0x7c>)
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007bc0:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <FLASH_WaitForLastOperation+0x7c>)
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007bc6:	4b08      	ldr	r3, [pc, #32]	; (8007be8 <FLASH_WaitForLastOperation+0x7c>)
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007bd2:	f000 f80b 	bl	8007bec <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e000      	b.n	8007bdc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007bda:	2300      	movs	r3, #0
  
}  
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3710      	adds	r7, #16
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	2001f4bc 	.word	0x2001f4bc
 8007be8:	40023c00 	.word	0x40023c00

08007bec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007bec:	b480      	push	{r7}
 8007bee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007bf0:	4b27      	ldr	r3, [pc, #156]	; (8007c90 <FLASH_SetErrorCode+0xa4>)
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d008      	beq.n	8007c0e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007bfc:	4b25      	ldr	r3, [pc, #148]	; (8007c94 <FLASH_SetErrorCode+0xa8>)
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	f043 0310 	orr.w	r3, r3, #16
 8007c04:	4a23      	ldr	r2, [pc, #140]	; (8007c94 <FLASH_SetErrorCode+0xa8>)
 8007c06:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007c08:	4b21      	ldr	r3, [pc, #132]	; (8007c90 <FLASH_SetErrorCode+0xa4>)
 8007c0a:	2210      	movs	r2, #16
 8007c0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007c0e:	4b20      	ldr	r3, [pc, #128]	; (8007c90 <FLASH_SetErrorCode+0xa4>)
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f003 0320 	and.w	r3, r3, #32
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d008      	beq.n	8007c2c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007c1a:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <FLASH_SetErrorCode+0xa8>)
 8007c1c:	69db      	ldr	r3, [r3, #28]
 8007c1e:	f043 0308 	orr.w	r3, r3, #8
 8007c22:	4a1c      	ldr	r2, [pc, #112]	; (8007c94 <FLASH_SetErrorCode+0xa8>)
 8007c24:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007c26:	4b1a      	ldr	r3, [pc, #104]	; (8007c90 <FLASH_SetErrorCode+0xa4>)
 8007c28:	2220      	movs	r2, #32
 8007c2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007c2c:	4b18      	ldr	r3, [pc, #96]	; (8007c90 <FLASH_SetErrorCode+0xa4>)
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d008      	beq.n	8007c4a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007c38:	4b16      	ldr	r3, [pc, #88]	; (8007c94 <FLASH_SetErrorCode+0xa8>)
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	f043 0304 	orr.w	r3, r3, #4
 8007c40:	4a14      	ldr	r2, [pc, #80]	; (8007c94 <FLASH_SetErrorCode+0xa8>)
 8007c42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007c44:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <FLASH_SetErrorCode+0xa4>)
 8007c46:	2240      	movs	r2, #64	; 0x40
 8007c48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007c4a:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <FLASH_SetErrorCode+0xa4>)
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d008      	beq.n	8007c68 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007c56:	4b0f      	ldr	r3, [pc, #60]	; (8007c94 <FLASH_SetErrorCode+0xa8>)
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	f043 0302 	orr.w	r3, r3, #2
 8007c5e:	4a0d      	ldr	r2, [pc, #52]	; (8007c94 <FLASH_SetErrorCode+0xa8>)
 8007c60:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007c62:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <FLASH_SetErrorCode+0xa4>)
 8007c64:	2280      	movs	r2, #128	; 0x80
 8007c66:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007c68:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <FLASH_SetErrorCode+0xa4>)
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	f003 0302 	and.w	r3, r3, #2
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d008      	beq.n	8007c86 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007c74:	4b07      	ldr	r3, [pc, #28]	; (8007c94 <FLASH_SetErrorCode+0xa8>)
 8007c76:	69db      	ldr	r3, [r3, #28]
 8007c78:	f043 0320 	orr.w	r3, r3, #32
 8007c7c:	4a05      	ldr	r2, [pc, #20]	; (8007c94 <FLASH_SetErrorCode+0xa8>)
 8007c7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007c80:	4b03      	ldr	r3, [pc, #12]	; (8007c90 <FLASH_SetErrorCode+0xa4>)
 8007c82:	2202      	movs	r2, #2
 8007c84:	60da      	str	r2, [r3, #12]
  }
}
 8007c86:	bf00      	nop
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	40023c00 	.word	0x40023c00
 8007c94:	2001f4bc 	.word	0x2001f4bc

08007c98 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007caa:	4b31      	ldr	r3, [pc, #196]	; (8007d70 <HAL_FLASHEx_Erase+0xd8>)
 8007cac:	7e1b      	ldrb	r3, [r3, #24]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d101      	bne.n	8007cb6 <HAL_FLASHEx_Erase+0x1e>
 8007cb2:	2302      	movs	r3, #2
 8007cb4:	e058      	b.n	8007d68 <HAL_FLASHEx_Erase+0xd0>
 8007cb6:	4b2e      	ldr	r3, [pc, #184]	; (8007d70 <HAL_FLASHEx_Erase+0xd8>)
 8007cb8:	2201      	movs	r2, #1
 8007cba:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007cbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007cc0:	f7ff ff54 	bl	8007b6c <FLASH_WaitForLastOperation>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d148      	bne.n	8007d60 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d115      	bne.n	8007d0a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	685b      	ldr	r3, [r3, #4]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4610      	mov	r0, r2
 8007cec:	f000 f844 	bl	8007d78 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007cf0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007cf4:	f7ff ff3a 	bl	8007b6c <FLASH_WaitForLastOperation>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007cfc:	4b1d      	ldr	r3, [pc, #116]	; (8007d74 <HAL_FLASHEx_Erase+0xdc>)
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	4a1c      	ldr	r2, [pc, #112]	; (8007d74 <HAL_FLASHEx_Erase+0xdc>)
 8007d02:	f023 0304 	bic.w	r3, r3, #4
 8007d06:	6113      	str	r3, [r2, #16]
 8007d08:	e028      	b.n	8007d5c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	60bb      	str	r3, [r7, #8]
 8007d10:	e01c      	b.n	8007d4c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	4619      	mov	r1, r3
 8007d1a:	68b8      	ldr	r0, [r7, #8]
 8007d1c:	f000 f850 	bl	8007dc0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007d24:	f7ff ff22 	bl	8007b6c <FLASH_WaitForLastOperation>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007d2c:	4b11      	ldr	r3, [pc, #68]	; (8007d74 <HAL_FLASHEx_Erase+0xdc>)
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	4a10      	ldr	r2, [pc, #64]	; (8007d74 <HAL_FLASHEx_Erase+0xdc>)
 8007d32:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007d36:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	68ba      	ldr	r2, [r7, #8]
 8007d42:	601a      	str	r2, [r3, #0]
          break;
 8007d44:	e00a      	b.n	8007d5c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	60bb      	str	r3, [r7, #8]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68da      	ldr	r2, [r3, #12]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	4413      	add	r3, r2
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d3da      	bcc.n	8007d12 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8007d5c:	f000 f878 	bl	8007e50 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007d60:	4b03      	ldr	r3, [pc, #12]	; (8007d70 <HAL_FLASHEx_Erase+0xd8>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	761a      	strb	r2, [r3, #24]

  return status;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}
 8007d70:	2001f4bc 	.word	0x2001f4bc
 8007d74:	40023c00 	.word	0x40023c00

08007d78 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	6039      	str	r1, [r7, #0]
 8007d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d84:	4b0d      	ldr	r3, [pc, #52]	; (8007dbc <FLASH_MassErase+0x44>)
 8007d86:	691b      	ldr	r3, [r3, #16]
 8007d88:	4a0c      	ldr	r2, [pc, #48]	; (8007dbc <FLASH_MassErase+0x44>)
 8007d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007d90:	4b0a      	ldr	r3, [pc, #40]	; (8007dbc <FLASH_MassErase+0x44>)
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	4a09      	ldr	r2, [pc, #36]	; (8007dbc <FLASH_MassErase+0x44>)
 8007d96:	f043 0304 	orr.w	r3, r3, #4
 8007d9a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8007d9c:	4b07      	ldr	r3, [pc, #28]	; (8007dbc <FLASH_MassErase+0x44>)
 8007d9e:	691a      	ldr	r2, [r3, #16]
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	021b      	lsls	r3, r3, #8
 8007da4:	4313      	orrs	r3, r2
 8007da6:	4a05      	ldr	r2, [pc, #20]	; (8007dbc <FLASH_MassErase+0x44>)
 8007da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dac:	6113      	str	r3, [r2, #16]
}
 8007dae:	bf00      	nop
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	40023c00 	.word	0x40023c00

08007dc0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d102      	bne.n	8007ddc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	e010      	b.n	8007dfe <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d103      	bne.n	8007dea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	e009      	b.n	8007dfe <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007dea:	78fb      	ldrb	r3, [r7, #3]
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d103      	bne.n	8007df8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007df0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	e002      	b.n	8007dfe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007df8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007dfc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007dfe:	4b13      	ldr	r3, [pc, #76]	; (8007e4c <FLASH_Erase_Sector+0x8c>)
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	4a12      	ldr	r2, [pc, #72]	; (8007e4c <FLASH_Erase_Sector+0x8c>)
 8007e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e08:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <FLASH_Erase_Sector+0x8c>)
 8007e0c:	691a      	ldr	r2, [r3, #16]
 8007e0e:	490f      	ldr	r1, [pc, #60]	; (8007e4c <FLASH_Erase_Sector+0x8c>)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007e16:	4b0d      	ldr	r3, [pc, #52]	; (8007e4c <FLASH_Erase_Sector+0x8c>)
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	4a0c      	ldr	r2, [pc, #48]	; (8007e4c <FLASH_Erase_Sector+0x8c>)
 8007e1c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e20:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007e22:	4b0a      	ldr	r3, [pc, #40]	; (8007e4c <FLASH_Erase_Sector+0x8c>)
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	00db      	lsls	r3, r3, #3
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	4a07      	ldr	r2, [pc, #28]	; (8007e4c <FLASH_Erase_Sector+0x8c>)
 8007e2e:	f043 0302 	orr.w	r3, r3, #2
 8007e32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007e34:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <FLASH_Erase_Sector+0x8c>)
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	4a04      	ldr	r2, [pc, #16]	; (8007e4c <FLASH_Erase_Sector+0x8c>)
 8007e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e3e:	6113      	str	r3, [r2, #16]
}
 8007e40:	bf00      	nop
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	40023c00 	.word	0x40023c00

08007e50 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8007e54:	4b20      	ldr	r3, [pc, #128]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d017      	beq.n	8007e90 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007e60:	4b1d      	ldr	r3, [pc, #116]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a1c      	ldr	r2, [pc, #112]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007e66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e6a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007e6c:	4b1a      	ldr	r3, [pc, #104]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a19      	ldr	r2, [pc, #100]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007e72:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007e76:	6013      	str	r3, [r2, #0]
 8007e78:	4b17      	ldr	r3, [pc, #92]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a16      	ldr	r2, [pc, #88]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007e7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e82:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007e84:	4b14      	ldr	r3, [pc, #80]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a13      	ldr	r2, [pc, #76]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007e8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e8e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007e90:	4b11      	ldr	r3, [pc, #68]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d017      	beq.n	8007ecc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007e9c:	4b0e      	ldr	r3, [pc, #56]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a0d      	ldr	r2, [pc, #52]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ea6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007ea8:	4b0b      	ldr	r3, [pc, #44]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a0a      	ldr	r2, [pc, #40]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007eae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	4b08      	ldr	r3, [pc, #32]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a07      	ldr	r2, [pc, #28]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007eba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ebe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007ec0:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a04      	ldr	r2, [pc, #16]	; (8007ed8 <FLASH_FlushCaches+0x88>)
 8007ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007eca:	6013      	str	r3, [r2, #0]
  }
}
 8007ecc:	bf00      	nop
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40023c00 	.word	0x40023c00

08007edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b089      	sub	sp, #36	; 0x24
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007eea:	2300      	movs	r3, #0
 8007eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	e16b      	b.n	80081d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007ef8:	2201      	movs	r2, #1
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	fa02 f303 	lsl.w	r3, r2, r3
 8007f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	697a      	ldr	r2, [r7, #20]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	f040 815a 	bne.w	80081ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d00b      	beq.n	8007f36 <HAL_GPIO_Init+0x5a>
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2b02      	cmp	r3, #2
 8007f24:	d007      	beq.n	8007f36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f2a:	2b11      	cmp	r3, #17
 8007f2c:	d003      	beq.n	8007f36 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	2b12      	cmp	r3, #18
 8007f34:	d130      	bne.n	8007f98 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	689b      	ldr	r3, [r3, #8]
 8007f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	2203      	movs	r2, #3
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	43db      	mvns	r3, r3
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	005b      	lsls	r3, r3, #1
 8007f56:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	43db      	mvns	r3, r3
 8007f76:	69ba      	ldr	r2, [r7, #24]
 8007f78:	4013      	ands	r3, r2
 8007f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	091b      	lsrs	r3, r3, #4
 8007f82:	f003 0201 	and.w	r2, r3, #1
 8007f86:	69fb      	ldr	r3, [r7, #28]
 8007f88:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	005b      	lsls	r3, r3, #1
 8007fa2:	2203      	movs	r2, #3
 8007fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa8:	43db      	mvns	r3, r3
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	4013      	ands	r3, r2
 8007fae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	005b      	lsls	r3, r3, #1
 8007fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fbc:	69ba      	ldr	r2, [r7, #24]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	69ba      	ldr	r2, [r7, #24]
 8007fc6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d003      	beq.n	8007fd8 <HAL_GPIO_Init+0xfc>
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b12      	cmp	r3, #18
 8007fd6:	d123      	bne.n	8008020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007fd8:	69fb      	ldr	r3, [r7, #28]
 8007fda:	08da      	lsrs	r2, r3, #3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	3208      	adds	r2, #8
 8007fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	f003 0307 	and.w	r3, r3, #7
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	220f      	movs	r2, #15
 8007ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff4:	43db      	mvns	r3, r3
 8007ff6:	69ba      	ldr	r2, [r7, #24]
 8007ff8:	4013      	ands	r3, r2
 8007ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	691a      	ldr	r2, [r3, #16]
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	fa02 f303 	lsl.w	r3, r2, r3
 800800c:	69ba      	ldr	r2, [r7, #24]
 800800e:	4313      	orrs	r3, r2
 8008010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008012:	69fb      	ldr	r3, [r7, #28]
 8008014:	08da      	lsrs	r2, r3, #3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3208      	adds	r2, #8
 800801a:	69b9      	ldr	r1, [r7, #24]
 800801c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	005b      	lsls	r3, r3, #1
 800802a:	2203      	movs	r2, #3
 800802c:	fa02 f303 	lsl.w	r3, r2, r3
 8008030:	43db      	mvns	r3, r3
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	4013      	ands	r3, r2
 8008036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f003 0203 	and.w	r2, r3, #3
 8008040:	69fb      	ldr	r3, [r7, #28]
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	fa02 f303 	lsl.w	r3, r2, r3
 8008048:	69ba      	ldr	r2, [r7, #24]
 800804a:	4313      	orrs	r3, r2
 800804c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	69ba      	ldr	r2, [r7, #24]
 8008052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 80b4 	beq.w	80081ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	4b5f      	ldr	r3, [pc, #380]	; (80081e4 <HAL_GPIO_Init+0x308>)
 8008068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806a:	4a5e      	ldr	r2, [pc, #376]	; (80081e4 <HAL_GPIO_Init+0x308>)
 800806c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008070:	6453      	str	r3, [r2, #68]	; 0x44
 8008072:	4b5c      	ldr	r3, [pc, #368]	; (80081e4 <HAL_GPIO_Init+0x308>)
 8008074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800807e:	4a5a      	ldr	r2, [pc, #360]	; (80081e8 <HAL_GPIO_Init+0x30c>)
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	089b      	lsrs	r3, r3, #2
 8008084:	3302      	adds	r3, #2
 8008086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800808a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	220f      	movs	r2, #15
 8008096:	fa02 f303 	lsl.w	r3, r2, r3
 800809a:	43db      	mvns	r3, r3
 800809c:	69ba      	ldr	r2, [r7, #24]
 800809e:	4013      	ands	r3, r2
 80080a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a51      	ldr	r2, [pc, #324]	; (80081ec <HAL_GPIO_Init+0x310>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d02b      	beq.n	8008102 <HAL_GPIO_Init+0x226>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	4a50      	ldr	r2, [pc, #320]	; (80081f0 <HAL_GPIO_Init+0x314>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d025      	beq.n	80080fe <HAL_GPIO_Init+0x222>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a4f      	ldr	r2, [pc, #316]	; (80081f4 <HAL_GPIO_Init+0x318>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d01f      	beq.n	80080fa <HAL_GPIO_Init+0x21e>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a4e      	ldr	r2, [pc, #312]	; (80081f8 <HAL_GPIO_Init+0x31c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d019      	beq.n	80080f6 <HAL_GPIO_Init+0x21a>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a4d      	ldr	r2, [pc, #308]	; (80081fc <HAL_GPIO_Init+0x320>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d013      	beq.n	80080f2 <HAL_GPIO_Init+0x216>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a4c      	ldr	r2, [pc, #304]	; (8008200 <HAL_GPIO_Init+0x324>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d00d      	beq.n	80080ee <HAL_GPIO_Init+0x212>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a4b      	ldr	r2, [pc, #300]	; (8008204 <HAL_GPIO_Init+0x328>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d007      	beq.n	80080ea <HAL_GPIO_Init+0x20e>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a4a      	ldr	r2, [pc, #296]	; (8008208 <HAL_GPIO_Init+0x32c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d101      	bne.n	80080e6 <HAL_GPIO_Init+0x20a>
 80080e2:	2307      	movs	r3, #7
 80080e4:	e00e      	b.n	8008104 <HAL_GPIO_Init+0x228>
 80080e6:	2308      	movs	r3, #8
 80080e8:	e00c      	b.n	8008104 <HAL_GPIO_Init+0x228>
 80080ea:	2306      	movs	r3, #6
 80080ec:	e00a      	b.n	8008104 <HAL_GPIO_Init+0x228>
 80080ee:	2305      	movs	r3, #5
 80080f0:	e008      	b.n	8008104 <HAL_GPIO_Init+0x228>
 80080f2:	2304      	movs	r3, #4
 80080f4:	e006      	b.n	8008104 <HAL_GPIO_Init+0x228>
 80080f6:	2303      	movs	r3, #3
 80080f8:	e004      	b.n	8008104 <HAL_GPIO_Init+0x228>
 80080fa:	2302      	movs	r3, #2
 80080fc:	e002      	b.n	8008104 <HAL_GPIO_Init+0x228>
 80080fe:	2301      	movs	r3, #1
 8008100:	e000      	b.n	8008104 <HAL_GPIO_Init+0x228>
 8008102:	2300      	movs	r3, #0
 8008104:	69fa      	ldr	r2, [r7, #28]
 8008106:	f002 0203 	and.w	r2, r2, #3
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	4093      	lsls	r3, r2
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	4313      	orrs	r3, r2
 8008112:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008114:	4934      	ldr	r1, [pc, #208]	; (80081e8 <HAL_GPIO_Init+0x30c>)
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	089b      	lsrs	r3, r3, #2
 800811a:	3302      	adds	r3, #2
 800811c:	69ba      	ldr	r2, [r7, #24]
 800811e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008122:	4b3a      	ldr	r3, [pc, #232]	; (800820c <HAL_GPIO_Init+0x330>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	43db      	mvns	r3, r3
 800812c:	69ba      	ldr	r2, [r7, #24]
 800812e:	4013      	ands	r3, r2
 8008130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	4313      	orrs	r3, r2
 8008144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008146:	4a31      	ldr	r2, [pc, #196]	; (800820c <HAL_GPIO_Init+0x330>)
 8008148:	69bb      	ldr	r3, [r7, #24]
 800814a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800814c:	4b2f      	ldr	r3, [pc, #188]	; (800820c <HAL_GPIO_Init+0x330>)
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	43db      	mvns	r3, r3
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	4013      	ands	r3, r2
 800815a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008168:	69ba      	ldr	r2, [r7, #24]
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008170:	4a26      	ldr	r2, [pc, #152]	; (800820c <HAL_GPIO_Init+0x330>)
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008176:	4b25      	ldr	r3, [pc, #148]	; (800820c <HAL_GPIO_Init+0x330>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	43db      	mvns	r3, r3
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	4013      	ands	r3, r2
 8008184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008192:	69ba      	ldr	r2, [r7, #24]
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	4313      	orrs	r3, r2
 8008198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800819a:	4a1c      	ldr	r2, [pc, #112]	; (800820c <HAL_GPIO_Init+0x330>)
 800819c:	69bb      	ldr	r3, [r7, #24]
 800819e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80081a0:	4b1a      	ldr	r3, [pc, #104]	; (800820c <HAL_GPIO_Init+0x330>)
 80081a2:	68db      	ldr	r3, [r3, #12]
 80081a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	43db      	mvns	r3, r3
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	4013      	ands	r3, r2
 80081ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80081c4:	4a11      	ldr	r2, [pc, #68]	; (800820c <HAL_GPIO_Init+0x330>)
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80081ca:	69fb      	ldr	r3, [r7, #28]
 80081cc:	3301      	adds	r3, #1
 80081ce:	61fb      	str	r3, [r7, #28]
 80081d0:	69fb      	ldr	r3, [r7, #28]
 80081d2:	2b0f      	cmp	r3, #15
 80081d4:	f67f ae90 	bls.w	8007ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80081d8:	bf00      	nop
 80081da:	3724      	adds	r7, #36	; 0x24
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	40023800 	.word	0x40023800
 80081e8:	40013800 	.word	0x40013800
 80081ec:	40020000 	.word	0x40020000
 80081f0:	40020400 	.word	0x40020400
 80081f4:	40020800 	.word	0x40020800
 80081f8:	40020c00 	.word	0x40020c00
 80081fc:	40021000 	.word	0x40021000
 8008200:	40021400 	.word	0x40021400
 8008204:	40021800 	.word	0x40021800
 8008208:	40021c00 	.word	0x40021c00
 800820c:	40013c00 	.word	0x40013c00

08008210 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008210:	b480      	push	{r7}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	460b      	mov	r3, r1
 800821a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	887b      	ldrh	r3, [r7, #2]
 8008222:	4013      	ands	r3, r2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008228:	2301      	movs	r3, #1
 800822a:	73fb      	strb	r3, [r7, #15]
 800822c:	e001      	b.n	8008232 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800822e:	2300      	movs	r3, #0
 8008230:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008232:	7bfb      	ldrb	r3, [r7, #15]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3714      	adds	r7, #20
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
 8008248:	460b      	mov	r3, r1
 800824a:	807b      	strh	r3, [r7, #2]
 800824c:	4613      	mov	r3, r2
 800824e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008250:	787b      	ldrb	r3, [r7, #1]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008256:	887a      	ldrh	r2, [r7, #2]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800825c:	e003      	b.n	8008266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800825e:	887b      	ldrh	r3, [r7, #2]
 8008260:	041a      	lsls	r2, r3, #16
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	619a      	str	r2, [r3, #24]
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
	...

08008274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d101      	bne.n	8008286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	e11f      	b.n	80084c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d106      	bne.n	80082a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f7fd ff96 	bl	80061cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2224      	movs	r2, #36	; 0x24
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f022 0201 	bic.w	r2, r2, #1
 80082b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	681a      	ldr	r2, [r3, #0]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80082d8:	f000 fd18 	bl	8008d0c <HAL_RCC_GetPCLK1Freq>
 80082dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	4a7b      	ldr	r2, [pc, #492]	; (80084d0 <HAL_I2C_Init+0x25c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d807      	bhi.n	80082f8 <HAL_I2C_Init+0x84>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4a7a      	ldr	r2, [pc, #488]	; (80084d4 <HAL_I2C_Init+0x260>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	bf94      	ite	ls
 80082f0:	2301      	movls	r3, #1
 80082f2:	2300      	movhi	r3, #0
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	e006      	b.n	8008306 <HAL_I2C_Init+0x92>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	4a77      	ldr	r2, [pc, #476]	; (80084d8 <HAL_I2C_Init+0x264>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	bf94      	ite	ls
 8008300:	2301      	movls	r3, #1
 8008302:	2300      	movhi	r3, #0
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	e0db      	b.n	80084c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	4a72      	ldr	r2, [pc, #456]	; (80084dc <HAL_I2C_Init+0x268>)
 8008312:	fba2 2303 	umull	r2, r3, r2, r3
 8008316:	0c9b      	lsrs	r3, r3, #18
 8008318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	430a      	orrs	r2, r1
 800832c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6a1b      	ldr	r3, [r3, #32]
 8008334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	4a64      	ldr	r2, [pc, #400]	; (80084d0 <HAL_I2C_Init+0x25c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d802      	bhi.n	8008348 <HAL_I2C_Init+0xd4>
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	3301      	adds	r3, #1
 8008346:	e009      	b.n	800835c <HAL_I2C_Init+0xe8>
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800834e:	fb02 f303 	mul.w	r3, r2, r3
 8008352:	4a63      	ldr	r2, [pc, #396]	; (80084e0 <HAL_I2C_Init+0x26c>)
 8008354:	fba2 2303 	umull	r2, r3, r2, r3
 8008358:	099b      	lsrs	r3, r3, #6
 800835a:	3301      	adds	r3, #1
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	6812      	ldr	r2, [r2, #0]
 8008360:	430b      	orrs	r3, r1
 8008362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800836e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	4956      	ldr	r1, [pc, #344]	; (80084d0 <HAL_I2C_Init+0x25c>)
 8008378:	428b      	cmp	r3, r1
 800837a:	d80d      	bhi.n	8008398 <HAL_I2C_Init+0x124>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	1e59      	subs	r1, r3, #1
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	fbb1 f3f3 	udiv	r3, r1, r3
 800838a:	3301      	adds	r3, #1
 800838c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008390:	2b04      	cmp	r3, #4
 8008392:	bf38      	it	cc
 8008394:	2304      	movcc	r3, #4
 8008396:	e04f      	b.n	8008438 <HAL_I2C_Init+0x1c4>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d111      	bne.n	80083c4 <HAL_I2C_Init+0x150>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	1e58      	subs	r0, r3, #1
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6859      	ldr	r1, [r3, #4]
 80083a8:	460b      	mov	r3, r1
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	440b      	add	r3, r1
 80083ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80083b2:	3301      	adds	r3, #1
 80083b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	bf0c      	ite	eq
 80083bc:	2301      	moveq	r3, #1
 80083be:	2300      	movne	r3, #0
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	e012      	b.n	80083ea <HAL_I2C_Init+0x176>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	1e58      	subs	r0, r3, #1
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6859      	ldr	r1, [r3, #4]
 80083cc:	460b      	mov	r3, r1
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	440b      	add	r3, r1
 80083d2:	0099      	lsls	r1, r3, #2
 80083d4:	440b      	add	r3, r1
 80083d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80083da:	3301      	adds	r3, #1
 80083dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	bf0c      	ite	eq
 80083e4:	2301      	moveq	r3, #1
 80083e6:	2300      	movne	r3, #0
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d001      	beq.n	80083f2 <HAL_I2C_Init+0x17e>
 80083ee:	2301      	movs	r3, #1
 80083f0:	e022      	b.n	8008438 <HAL_I2C_Init+0x1c4>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10e      	bne.n	8008418 <HAL_I2C_Init+0x1a4>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	1e58      	subs	r0, r3, #1
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6859      	ldr	r1, [r3, #4]
 8008402:	460b      	mov	r3, r1
 8008404:	005b      	lsls	r3, r3, #1
 8008406:	440b      	add	r3, r1
 8008408:	fbb0 f3f3 	udiv	r3, r0, r3
 800840c:	3301      	adds	r3, #1
 800840e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008412:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008416:	e00f      	b.n	8008438 <HAL_I2C_Init+0x1c4>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	1e58      	subs	r0, r3, #1
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6859      	ldr	r1, [r3, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	440b      	add	r3, r1
 8008426:	0099      	lsls	r1, r3, #2
 8008428:	440b      	add	r3, r1
 800842a:	fbb0 f3f3 	udiv	r3, r0, r3
 800842e:	3301      	adds	r3, #1
 8008430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008434:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	6809      	ldr	r1, [r1, #0]
 800843c:	4313      	orrs	r3, r2
 800843e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	69da      	ldr	r2, [r3, #28]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	431a      	orrs	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	6911      	ldr	r1, [r2, #16]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	68d2      	ldr	r2, [r2, #12]
 8008472:	4311      	orrs	r1, r2
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6812      	ldr	r2, [r2, #0]
 8008478:	430b      	orrs	r3, r1
 800847a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	695a      	ldr	r2, [r3, #20]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	431a      	orrs	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f042 0201 	orr.w	r2, r2, #1
 80084a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2220      	movs	r2, #32
 80084b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084c4:	2300      	movs	r3, #0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	000186a0 	.word	0x000186a0
 80084d4:	001e847f 	.word	0x001e847f
 80084d8:	003d08ff 	.word	0x003d08ff
 80084dc:	431bde83 	.word	0x431bde83
 80084e0:	10624dd3 	.word	0x10624dd3

080084e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b086      	sub	sp, #24
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d101      	bne.n	80084f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e25b      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d075      	beq.n	80085ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008502:	4ba3      	ldr	r3, [pc, #652]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f003 030c 	and.w	r3, r3, #12
 800850a:	2b04      	cmp	r3, #4
 800850c:	d00c      	beq.n	8008528 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800850e:	4ba0      	ldr	r3, [pc, #640]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008516:	2b08      	cmp	r3, #8
 8008518:	d112      	bne.n	8008540 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800851a:	4b9d      	ldr	r3, [pc, #628]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008526:	d10b      	bne.n	8008540 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008528:	4b99      	ldr	r3, [pc, #612]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008530:	2b00      	cmp	r3, #0
 8008532:	d05b      	beq.n	80085ec <HAL_RCC_OscConfig+0x108>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d157      	bne.n	80085ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e236      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008548:	d106      	bne.n	8008558 <HAL_RCC_OscConfig+0x74>
 800854a:	4b91      	ldr	r3, [pc, #580]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a90      	ldr	r2, [pc, #576]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e01d      	b.n	8008594 <HAL_RCC_OscConfig+0xb0>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	685b      	ldr	r3, [r3, #4]
 800855c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008560:	d10c      	bne.n	800857c <HAL_RCC_OscConfig+0x98>
 8008562:	4b8b      	ldr	r3, [pc, #556]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a8a      	ldr	r2, [pc, #552]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800856c:	6013      	str	r3, [r2, #0]
 800856e:	4b88      	ldr	r3, [pc, #544]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a87      	ldr	r2, [pc, #540]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008578:	6013      	str	r3, [r2, #0]
 800857a:	e00b      	b.n	8008594 <HAL_RCC_OscConfig+0xb0>
 800857c:	4b84      	ldr	r3, [pc, #528]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a83      	ldr	r2, [pc, #524]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008586:	6013      	str	r3, [r2, #0]
 8008588:	4b81      	ldr	r3, [pc, #516]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a80      	ldr	r2, [pc, #512]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 800858e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d013      	beq.n	80085c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800859c:	f7fe fa12 	bl	80069c4 <HAL_GetTick>
 80085a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085a2:	e008      	b.n	80085b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085a4:	f7fe fa0e 	bl	80069c4 <HAL_GetTick>
 80085a8:	4602      	mov	r2, r0
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	2b64      	cmp	r3, #100	; 0x64
 80085b0:	d901      	bls.n	80085b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085b2:	2303      	movs	r3, #3
 80085b4:	e1fb      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085b6:	4b76      	ldr	r3, [pc, #472]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d0f0      	beq.n	80085a4 <HAL_RCC_OscConfig+0xc0>
 80085c2:	e014      	b.n	80085ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085c4:	f7fe f9fe 	bl	80069c4 <HAL_GetTick>
 80085c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085ca:	e008      	b.n	80085de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085cc:	f7fe f9fa 	bl	80069c4 <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b64      	cmp	r3, #100	; 0x64
 80085d8:	d901      	bls.n	80085de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e1e7      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085de:	4b6c      	ldr	r3, [pc, #432]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d1f0      	bne.n	80085cc <HAL_RCC_OscConfig+0xe8>
 80085ea:	e000      	b.n	80085ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80085ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0302 	and.w	r3, r3, #2
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d063      	beq.n	80086c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80085fa:	4b65      	ldr	r3, [pc, #404]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	f003 030c 	and.w	r3, r3, #12
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008606:	4b62      	ldr	r3, [pc, #392]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800860e:	2b08      	cmp	r3, #8
 8008610:	d11c      	bne.n	800864c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008612:	4b5f      	ldr	r3, [pc, #380]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d116      	bne.n	800864c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800861e:	4b5c      	ldr	r3, [pc, #368]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f003 0302 	and.w	r3, r3, #2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d005      	beq.n	8008636 <HAL_RCC_OscConfig+0x152>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d001      	beq.n	8008636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e1bb      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008636:	4b56      	ldr	r3, [pc, #344]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	00db      	lsls	r3, r3, #3
 8008644:	4952      	ldr	r1, [pc, #328]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008646:	4313      	orrs	r3, r2
 8008648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800864a:	e03a      	b.n	80086c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d020      	beq.n	8008696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008654:	4b4f      	ldr	r3, [pc, #316]	; (8008794 <HAL_RCC_OscConfig+0x2b0>)
 8008656:	2201      	movs	r2, #1
 8008658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800865a:	f7fe f9b3 	bl	80069c4 <HAL_GetTick>
 800865e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008660:	e008      	b.n	8008674 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008662:	f7fe f9af 	bl	80069c4 <HAL_GetTick>
 8008666:	4602      	mov	r2, r0
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	2b02      	cmp	r3, #2
 800866e:	d901      	bls.n	8008674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008670:	2303      	movs	r3, #3
 8008672:	e19c      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008674:	4b46      	ldr	r3, [pc, #280]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f003 0302 	and.w	r3, r3, #2
 800867c:	2b00      	cmp	r3, #0
 800867e:	d0f0      	beq.n	8008662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008680:	4b43      	ldr	r3, [pc, #268]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	691b      	ldr	r3, [r3, #16]
 800868c:	00db      	lsls	r3, r3, #3
 800868e:	4940      	ldr	r1, [pc, #256]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008690:	4313      	orrs	r3, r2
 8008692:	600b      	str	r3, [r1, #0]
 8008694:	e015      	b.n	80086c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008696:	4b3f      	ldr	r3, [pc, #252]	; (8008794 <HAL_RCC_OscConfig+0x2b0>)
 8008698:	2200      	movs	r2, #0
 800869a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869c:	f7fe f992 	bl	80069c4 <HAL_GetTick>
 80086a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086a2:	e008      	b.n	80086b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086a4:	f7fe f98e 	bl	80069c4 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	d901      	bls.n	80086b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	e17b      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086b6:	4b36      	ldr	r3, [pc, #216]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1f0      	bne.n	80086a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0308 	and.w	r3, r3, #8
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d030      	beq.n	8008730 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d016      	beq.n	8008704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80086d6:	4b30      	ldr	r3, [pc, #192]	; (8008798 <HAL_RCC_OscConfig+0x2b4>)
 80086d8:	2201      	movs	r2, #1
 80086da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086dc:	f7fe f972 	bl	80069c4 <HAL_GetTick>
 80086e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80086e4:	f7fe f96e 	bl	80069c4 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b02      	cmp	r3, #2
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e15b      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80086f6:	4b26      	ldr	r3, [pc, #152]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 80086f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086fa:	f003 0302 	and.w	r3, r3, #2
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d0f0      	beq.n	80086e4 <HAL_RCC_OscConfig+0x200>
 8008702:	e015      	b.n	8008730 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008704:	4b24      	ldr	r3, [pc, #144]	; (8008798 <HAL_RCC_OscConfig+0x2b4>)
 8008706:	2200      	movs	r2, #0
 8008708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800870a:	f7fe f95b 	bl	80069c4 <HAL_GetTick>
 800870e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008710:	e008      	b.n	8008724 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008712:	f7fe f957 	bl	80069c4 <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b02      	cmp	r3, #2
 800871e:	d901      	bls.n	8008724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e144      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008724:	4b1a      	ldr	r3, [pc, #104]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1f0      	bne.n	8008712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0304 	and.w	r3, r3, #4
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 80a0 	beq.w	800887e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800873e:	2300      	movs	r3, #0
 8008740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008742:	4b13      	ldr	r3, [pc, #76]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10f      	bne.n	800876e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800874e:	2300      	movs	r3, #0
 8008750:	60bb      	str	r3, [r7, #8]
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008756:	4a0e      	ldr	r2, [pc, #56]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800875c:	6413      	str	r3, [r2, #64]	; 0x40
 800875e:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <HAL_RCC_OscConfig+0x2ac>)
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008766:	60bb      	str	r3, [r7, #8]
 8008768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800876a:	2301      	movs	r3, #1
 800876c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800876e:	4b0b      	ldr	r3, [pc, #44]	; (800879c <HAL_RCC_OscConfig+0x2b8>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008776:	2b00      	cmp	r3, #0
 8008778:	d121      	bne.n	80087be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800877a:	4b08      	ldr	r3, [pc, #32]	; (800879c <HAL_RCC_OscConfig+0x2b8>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a07      	ldr	r2, [pc, #28]	; (800879c <HAL_RCC_OscConfig+0x2b8>)
 8008780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008786:	f7fe f91d 	bl	80069c4 <HAL_GetTick>
 800878a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800878c:	e011      	b.n	80087b2 <HAL_RCC_OscConfig+0x2ce>
 800878e:	bf00      	nop
 8008790:	40023800 	.word	0x40023800
 8008794:	42470000 	.word	0x42470000
 8008798:	42470e80 	.word	0x42470e80
 800879c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087a0:	f7fe f910 	bl	80069c4 <HAL_GetTick>
 80087a4:	4602      	mov	r2, r0
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	1ad3      	subs	r3, r2, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d901      	bls.n	80087b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80087ae:	2303      	movs	r3, #3
 80087b0:	e0fd      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087b2:	4b81      	ldr	r3, [pc, #516]	; (80089b8 <HAL_RCC_OscConfig+0x4d4>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0f0      	beq.n	80087a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d106      	bne.n	80087d4 <HAL_RCC_OscConfig+0x2f0>
 80087c6:	4b7d      	ldr	r3, [pc, #500]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 80087c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ca:	4a7c      	ldr	r2, [pc, #496]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 80087cc:	f043 0301 	orr.w	r3, r3, #1
 80087d0:	6713      	str	r3, [r2, #112]	; 0x70
 80087d2:	e01c      	b.n	800880e <HAL_RCC_OscConfig+0x32a>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	2b05      	cmp	r3, #5
 80087da:	d10c      	bne.n	80087f6 <HAL_RCC_OscConfig+0x312>
 80087dc:	4b77      	ldr	r3, [pc, #476]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 80087de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087e0:	4a76      	ldr	r2, [pc, #472]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 80087e2:	f043 0304 	orr.w	r3, r3, #4
 80087e6:	6713      	str	r3, [r2, #112]	; 0x70
 80087e8:	4b74      	ldr	r3, [pc, #464]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 80087ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ec:	4a73      	ldr	r2, [pc, #460]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 80087ee:	f043 0301 	orr.w	r3, r3, #1
 80087f2:	6713      	str	r3, [r2, #112]	; 0x70
 80087f4:	e00b      	b.n	800880e <HAL_RCC_OscConfig+0x32a>
 80087f6:	4b71      	ldr	r3, [pc, #452]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 80087f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087fa:	4a70      	ldr	r2, [pc, #448]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 80087fc:	f023 0301 	bic.w	r3, r3, #1
 8008800:	6713      	str	r3, [r2, #112]	; 0x70
 8008802:	4b6e      	ldr	r3, [pc, #440]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 8008804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008806:	4a6d      	ldr	r2, [pc, #436]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 8008808:	f023 0304 	bic.w	r3, r3, #4
 800880c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d015      	beq.n	8008842 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008816:	f7fe f8d5 	bl	80069c4 <HAL_GetTick>
 800881a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800881c:	e00a      	b.n	8008834 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800881e:	f7fe f8d1 	bl	80069c4 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	f241 3288 	movw	r2, #5000	; 0x1388
 800882c:	4293      	cmp	r3, r2
 800882e:	d901      	bls.n	8008834 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008830:	2303      	movs	r3, #3
 8008832:	e0bc      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008834:	4b61      	ldr	r3, [pc, #388]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 8008836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008838:	f003 0302 	and.w	r3, r3, #2
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0ee      	beq.n	800881e <HAL_RCC_OscConfig+0x33a>
 8008840:	e014      	b.n	800886c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008842:	f7fe f8bf 	bl	80069c4 <HAL_GetTick>
 8008846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008848:	e00a      	b.n	8008860 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800884a:	f7fe f8bb 	bl	80069c4 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	f241 3288 	movw	r2, #5000	; 0x1388
 8008858:	4293      	cmp	r3, r2
 800885a:	d901      	bls.n	8008860 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e0a6      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008860:	4b56      	ldr	r3, [pc, #344]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 8008862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1ee      	bne.n	800884a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800886c:	7dfb      	ldrb	r3, [r7, #23]
 800886e:	2b01      	cmp	r3, #1
 8008870:	d105      	bne.n	800887e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008872:	4b52      	ldr	r3, [pc, #328]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	4a51      	ldr	r2, [pc, #324]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 8008878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800887c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 8092 	beq.w	80089ac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008888:	4b4c      	ldr	r3, [pc, #304]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	f003 030c 	and.w	r3, r3, #12
 8008890:	2b08      	cmp	r3, #8
 8008892:	d05c      	beq.n	800894e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	2b02      	cmp	r3, #2
 800889a:	d141      	bne.n	8008920 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800889c:	4b48      	ldr	r3, [pc, #288]	; (80089c0 <HAL_RCC_OscConfig+0x4dc>)
 800889e:	2200      	movs	r2, #0
 80088a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088a2:	f7fe f88f 	bl	80069c4 <HAL_GetTick>
 80088a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088a8:	e008      	b.n	80088bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088aa:	f7fe f88b 	bl	80069c4 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d901      	bls.n	80088bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e078      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088bc:	4b3f      	ldr	r3, [pc, #252]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1f0      	bne.n	80088aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	69da      	ldr	r2, [r3, #28]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6a1b      	ldr	r3, [r3, #32]
 80088d0:	431a      	orrs	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d6:	019b      	lsls	r3, r3, #6
 80088d8:	431a      	orrs	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088de:	085b      	lsrs	r3, r3, #1
 80088e0:	3b01      	subs	r3, #1
 80088e2:	041b      	lsls	r3, r3, #16
 80088e4:	431a      	orrs	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	061b      	lsls	r3, r3, #24
 80088ec:	4933      	ldr	r1, [pc, #204]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80088f2:	4b33      	ldr	r3, [pc, #204]	; (80089c0 <HAL_RCC_OscConfig+0x4dc>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088f8:	f7fe f864 	bl	80069c4 <HAL_GetTick>
 80088fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008900:	f7fe f860 	bl	80069c4 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e04d      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008912:	4b2a      	ldr	r3, [pc, #168]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0f0      	beq.n	8008900 <HAL_RCC_OscConfig+0x41c>
 800891e:	e045      	b.n	80089ac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008920:	4b27      	ldr	r3, [pc, #156]	; (80089c0 <HAL_RCC_OscConfig+0x4dc>)
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008926:	f7fe f84d 	bl	80069c4 <HAL_GetTick>
 800892a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800892c:	e008      	b.n	8008940 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800892e:	f7fe f849 	bl	80069c4 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e036      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008940:	4b1e      	ldr	r3, [pc, #120]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d1f0      	bne.n	800892e <HAL_RCC_OscConfig+0x44a>
 800894c:	e02e      	b.n	80089ac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	699b      	ldr	r3, [r3, #24]
 8008952:	2b01      	cmp	r3, #1
 8008954:	d101      	bne.n	800895a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8008956:	2301      	movs	r3, #1
 8008958:	e029      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800895a:	4b18      	ldr	r3, [pc, #96]	; (80089bc <HAL_RCC_OscConfig+0x4d8>)
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	69db      	ldr	r3, [r3, #28]
 800896a:	429a      	cmp	r2, r3
 800896c:	d11c      	bne.n	80089a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008978:	429a      	cmp	r2, r3
 800897a:	d115      	bne.n	80089a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008982:	4013      	ands	r3, r2
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008988:	4293      	cmp	r3, r2
 800898a:	d10d      	bne.n	80089a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8008996:	429a      	cmp	r2, r3
 8008998:	d106      	bne.n	80089a8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80089a4:	429a      	cmp	r2, r3
 80089a6:	d001      	beq.n	80089ac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3718      	adds	r7, #24
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	40007000 	.word	0x40007000
 80089bc:	40023800 	.word	0x40023800
 80089c0:	42470060 	.word	0x42470060

080089c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d101      	bne.n	80089d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80089d4:	2301      	movs	r3, #1
 80089d6:	e0cc      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80089d8:	4b68      	ldr	r3, [pc, #416]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 030f 	and.w	r3, r3, #15
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d90c      	bls.n	8008a00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089e6:	4b65      	ldr	r3, [pc, #404]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	b2d2      	uxtb	r2, r2
 80089ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ee:	4b63      	ldr	r3, [pc, #396]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 030f 	and.w	r3, r3, #15
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d001      	beq.n	8008a00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e0b8      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d020      	beq.n	8008a4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0304 	and.w	r3, r3, #4
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d005      	beq.n	8008a24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a18:	4b59      	ldr	r3, [pc, #356]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	4a58      	ldr	r2, [pc, #352]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 0308 	and.w	r3, r3, #8
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a30:	4b53      	ldr	r3, [pc, #332]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	4a52      	ldr	r2, [pc, #328]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a3c:	4b50      	ldr	r3, [pc, #320]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	494d      	ldr	r1, [pc, #308]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0301 	and.w	r3, r3, #1
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d044      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d107      	bne.n	8008a72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a62:	4b47      	ldr	r3, [pc, #284]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d119      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e07f      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d003      	beq.n	8008a82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d107      	bne.n	8008a92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a82:	4b3f      	ldr	r3, [pc, #252]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d109      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a8e:	2301      	movs	r3, #1
 8008a90:	e06f      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a92:	4b3b      	ldr	r3, [pc, #236]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0302 	and.w	r3, r3, #2
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e067      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008aa2:	4b37      	ldr	r3, [pc, #220]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f023 0203 	bic.w	r2, r3, #3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	4934      	ldr	r1, [pc, #208]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ab4:	f7fd ff86 	bl	80069c4 <HAL_GetTick>
 8008ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aba:	e00a      	b.n	8008ad2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008abc:	f7fd ff82 	bl	80069c4 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e04f      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ad2:	4b2b      	ldr	r3, [pc, #172]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 020c 	and.w	r2, r3, #12
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d1eb      	bne.n	8008abc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008ae4:	4b25      	ldr	r3, [pc, #148]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 030f 	and.w	r3, r3, #15
 8008aec:	683a      	ldr	r2, [r7, #0]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d20c      	bcs.n	8008b0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008af2:	4b22      	ldr	r3, [pc, #136]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 8008af4:	683a      	ldr	r2, [r7, #0]
 8008af6:	b2d2      	uxtb	r2, r2
 8008af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008afa:	4b20      	ldr	r3, [pc, #128]	; (8008b7c <HAL_RCC_ClockConfig+0x1b8>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 030f 	and.w	r3, r3, #15
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d001      	beq.n	8008b0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e032      	b.n	8008b72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0304 	and.w	r3, r3, #4
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d008      	beq.n	8008b2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b18:	4b19      	ldr	r3, [pc, #100]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	4916      	ldr	r1, [pc, #88]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b26:	4313      	orrs	r3, r2
 8008b28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d009      	beq.n	8008b4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b36:	4b12      	ldr	r3, [pc, #72]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	490e      	ldr	r1, [pc, #56]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b46:	4313      	orrs	r3, r2
 8008b48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b4a:	f000 f821 	bl	8008b90 <HAL_RCC_GetSysClockFreq>
 8008b4e:	4601      	mov	r1, r0
 8008b50:	4b0b      	ldr	r3, [pc, #44]	; (8008b80 <HAL_RCC_ClockConfig+0x1bc>)
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	091b      	lsrs	r3, r3, #4
 8008b56:	f003 030f 	and.w	r3, r3, #15
 8008b5a:	4a0a      	ldr	r2, [pc, #40]	; (8008b84 <HAL_RCC_ClockConfig+0x1c0>)
 8008b5c:	5cd3      	ldrb	r3, [r2, r3]
 8008b5e:	fa21 f303 	lsr.w	r3, r1, r3
 8008b62:	4a09      	ldr	r2, [pc, #36]	; (8008b88 <HAL_RCC_ClockConfig+0x1c4>)
 8008b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008b66:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <HAL_RCC_ClockConfig+0x1c8>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f7fd fee6 	bl	800693c <HAL_InitTick>

  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	40023c00 	.word	0x40023c00
 8008b80:	40023800 	.word	0x40023800
 8008b84:	0800f450 	.word	0x0800f450
 8008b88:	20000034 	.word	0x20000034
 8008b8c:	20000038 	.word	0x20000038

08008b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008b96:	2300      	movs	r3, #0
 8008b98:	607b      	str	r3, [r7, #4]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	60fb      	str	r3, [r7, #12]
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ba6:	4b50      	ldr	r3, [pc, #320]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 030c 	and.w	r3, r3, #12
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d007      	beq.n	8008bc2 <HAL_RCC_GetSysClockFreq+0x32>
 8008bb2:	2b08      	cmp	r3, #8
 8008bb4:	d008      	beq.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x38>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f040 808d 	bne.w	8008cd6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008bbc:	4b4b      	ldr	r3, [pc, #300]	; (8008cec <HAL_RCC_GetSysClockFreq+0x15c>)
 8008bbe:	60bb      	str	r3, [r7, #8]
       break;
 8008bc0:	e08c      	b.n	8008cdc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008bc2:	4b4b      	ldr	r3, [pc, #300]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bc4:	60bb      	str	r3, [r7, #8]
      break;
 8008bc6:	e089      	b.n	8008cdc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008bc8:	4b47      	ldr	r3, [pc, #284]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008bd2:	4b45      	ldr	r3, [pc, #276]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d023      	beq.n	8008c26 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008bde:	4b42      	ldr	r3, [pc, #264]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	099b      	lsrs	r3, r3, #6
 8008be4:	f04f 0400 	mov.w	r4, #0
 8008be8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	ea03 0501 	and.w	r5, r3, r1
 8008bf4:	ea04 0602 	and.w	r6, r4, r2
 8008bf8:	4a3d      	ldr	r2, [pc, #244]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008bfa:	fb02 f106 	mul.w	r1, r2, r6
 8008bfe:	2200      	movs	r2, #0
 8008c00:	fb02 f205 	mul.w	r2, r2, r5
 8008c04:	440a      	add	r2, r1
 8008c06:	493a      	ldr	r1, [pc, #232]	; (8008cf0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008c08:	fba5 0101 	umull	r0, r1, r5, r1
 8008c0c:	1853      	adds	r3, r2, r1
 8008c0e:	4619      	mov	r1, r3
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f04f 0400 	mov.w	r4, #0
 8008c16:	461a      	mov	r2, r3
 8008c18:	4623      	mov	r3, r4
 8008c1a:	f7f8 f835 	bl	8000c88 <__aeabi_uldivmod>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	460c      	mov	r4, r1
 8008c22:	60fb      	str	r3, [r7, #12]
 8008c24:	e049      	b.n	8008cba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c26:	4b30      	ldr	r3, [pc, #192]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	099b      	lsrs	r3, r3, #6
 8008c2c:	f04f 0400 	mov.w	r4, #0
 8008c30:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	ea03 0501 	and.w	r5, r3, r1
 8008c3c:	ea04 0602 	and.w	r6, r4, r2
 8008c40:	4629      	mov	r1, r5
 8008c42:	4632      	mov	r2, r6
 8008c44:	f04f 0300 	mov.w	r3, #0
 8008c48:	f04f 0400 	mov.w	r4, #0
 8008c4c:	0154      	lsls	r4, r2, #5
 8008c4e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008c52:	014b      	lsls	r3, r1, #5
 8008c54:	4619      	mov	r1, r3
 8008c56:	4622      	mov	r2, r4
 8008c58:	1b49      	subs	r1, r1, r5
 8008c5a:	eb62 0206 	sbc.w	r2, r2, r6
 8008c5e:	f04f 0300 	mov.w	r3, #0
 8008c62:	f04f 0400 	mov.w	r4, #0
 8008c66:	0194      	lsls	r4, r2, #6
 8008c68:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008c6c:	018b      	lsls	r3, r1, #6
 8008c6e:	1a5b      	subs	r3, r3, r1
 8008c70:	eb64 0402 	sbc.w	r4, r4, r2
 8008c74:	f04f 0100 	mov.w	r1, #0
 8008c78:	f04f 0200 	mov.w	r2, #0
 8008c7c:	00e2      	lsls	r2, r4, #3
 8008c7e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008c82:	00d9      	lsls	r1, r3, #3
 8008c84:	460b      	mov	r3, r1
 8008c86:	4614      	mov	r4, r2
 8008c88:	195b      	adds	r3, r3, r5
 8008c8a:	eb44 0406 	adc.w	r4, r4, r6
 8008c8e:	f04f 0100 	mov.w	r1, #0
 8008c92:	f04f 0200 	mov.w	r2, #0
 8008c96:	02a2      	lsls	r2, r4, #10
 8008c98:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008c9c:	0299      	lsls	r1, r3, #10
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4614      	mov	r4, r2
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	4621      	mov	r1, r4
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f04f 0400 	mov.w	r4, #0
 8008cac:	461a      	mov	r2, r3
 8008cae:	4623      	mov	r3, r4
 8008cb0:	f7f7 ffea 	bl	8000c88 <__aeabi_uldivmod>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	460c      	mov	r4, r1
 8008cb8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008cba:	4b0b      	ldr	r3, [pc, #44]	; (8008ce8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	0c1b      	lsrs	r3, r3, #16
 8008cc0:	f003 0303 	and.w	r3, r3, #3
 8008cc4:	3301      	adds	r3, #1
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008cca:	68fa      	ldr	r2, [r7, #12]
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd2:	60bb      	str	r3, [r7, #8]
      break;
 8008cd4:	e002      	b.n	8008cdc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008cd6:	4b05      	ldr	r3, [pc, #20]	; (8008cec <HAL_RCC_GetSysClockFreq+0x15c>)
 8008cd8:	60bb      	str	r3, [r7, #8]
      break;
 8008cda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008cdc:	68bb      	ldr	r3, [r7, #8]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3714      	adds	r7, #20
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ce6:	bf00      	nop
 8008ce8:	40023800 	.word	0x40023800
 8008cec:	00f42400 	.word	0x00f42400
 8008cf0:	00bebc20 	.word	0x00bebc20

08008cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008cf8:	4b03      	ldr	r3, [pc, #12]	; (8008d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	20000034 	.word	0x20000034

08008d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d10:	f7ff fff0 	bl	8008cf4 <HAL_RCC_GetHCLKFreq>
 8008d14:	4601      	mov	r1, r0
 8008d16:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	0a9b      	lsrs	r3, r3, #10
 8008d1c:	f003 0307 	and.w	r3, r3, #7
 8008d20:	4a03      	ldr	r2, [pc, #12]	; (8008d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d22:	5cd3      	ldrb	r3, [r2, r3]
 8008d24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	40023800 	.word	0x40023800
 8008d30:	0800f460 	.word	0x0800f460

08008d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008d38:	f7ff ffdc 	bl	8008cf4 <HAL_RCC_GetHCLKFreq>
 8008d3c:	4601      	mov	r1, r0
 8008d3e:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	0b5b      	lsrs	r3, r3, #13
 8008d44:	f003 0307 	and.w	r3, r3, #7
 8008d48:	4a03      	ldr	r2, [pc, #12]	; (8008d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d4a:	5cd3      	ldrb	r3, [r2, r3]
 8008d4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	40023800 	.word	0x40023800
 8008d58:	0800f460 	.word	0x0800f460

08008d5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b082      	sub	sp, #8
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d101      	bne.n	8008d6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	e056      	b.n	8008e1c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d106      	bne.n	8008d8e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7fd fa67 	bl	800625c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2202      	movs	r2, #2
 8008d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008da4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	685a      	ldr	r2, [r3, #4]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	431a      	orrs	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	431a      	orrs	r2, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	431a      	orrs	r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	695b      	ldr	r3, [r3, #20]
 8008dc0:	431a      	orrs	r2, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	431a      	orrs	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6a1b      	ldr	r3, [r3, #32]
 8008dd6:	ea42 0103 	orr.w	r1, r2, r3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	0c1b      	lsrs	r3, r3, #16
 8008dec:	f003 0104 	and.w	r1, r3, #4
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	430a      	orrs	r2, r1
 8008dfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	69da      	ldr	r2, [r3, #28]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008e1a:	2300      	movs	r3, #0
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	4613      	mov	r3, r2
 8008e32:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008e34:	2300      	movs	r3, #0
 8008e36:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	d101      	bne.n	8008e46 <HAL_SPI_Transmit+0x22>
 8008e42:	2302      	movs	r3, #2
 8008e44:	e11e      	b.n	8009084 <HAL_SPI_Transmit+0x260>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008e4e:	f7fd fdb9 	bl	80069c4 <HAL_GetTick>
 8008e52:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008e54:	88fb      	ldrh	r3, [r7, #6]
 8008e56:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d002      	beq.n	8008e6a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008e64:	2302      	movs	r3, #2
 8008e66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e68:	e103      	b.n	8009072 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d002      	beq.n	8008e76 <HAL_SPI_Transmit+0x52>
 8008e70:	88fb      	ldrh	r3, [r7, #6]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d102      	bne.n	8008e7c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008e7a:	e0fa      	b.n	8009072 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2203      	movs	r2, #3
 8008e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	88fa      	ldrh	r2, [r7, #6]
 8008e94:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	88fa      	ldrh	r2, [r7, #6]
 8008e9a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ec2:	d107      	bne.n	8008ed4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ed2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ede:	2b40      	cmp	r3, #64	; 0x40
 8008ee0:	d007      	beq.n	8008ef2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681a      	ldr	r2, [r3, #0]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ef0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008efa:	d14b      	bne.n	8008f94 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d002      	beq.n	8008f0a <HAL_SPI_Transmit+0xe6>
 8008f04:	8afb      	ldrh	r3, [r7, #22]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d13e      	bne.n	8008f88 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0e:	881a      	ldrh	r2, [r3, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f1a:	1c9a      	adds	r2, r3, #2
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	3b01      	subs	r3, #1
 8008f28:	b29a      	uxth	r2, r3
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008f2e:	e02b      	b.n	8008f88 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d112      	bne.n	8008f64 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f42:	881a      	ldrh	r2, [r3, #0]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f4e:	1c9a      	adds	r2, r3, #2
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	86da      	strh	r2, [r3, #54]	; 0x36
 8008f62:	e011      	b.n	8008f88 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f64:	f7fd fd2e 	bl	80069c4 <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d803      	bhi.n	8008f7c <HAL_SPI_Transmit+0x158>
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f7a:	d102      	bne.n	8008f82 <HAL_SPI_Transmit+0x15e>
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008f82:	2303      	movs	r3, #3
 8008f84:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008f86:	e074      	b.n	8009072 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1ce      	bne.n	8008f30 <HAL_SPI_Transmit+0x10c>
 8008f92:	e04c      	b.n	800902e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d002      	beq.n	8008fa2 <HAL_SPI_Transmit+0x17e>
 8008f9c:	8afb      	ldrh	r3, [r7, #22]
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d140      	bne.n	8009024 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	330c      	adds	r3, #12
 8008fac:	7812      	ldrb	r2, [r2, #0]
 8008fae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb4:	1c5a      	adds	r2, r3, #1
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008fc8:	e02c      	b.n	8009024 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	f003 0302 	and.w	r3, r3, #2
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d113      	bne.n	8009000 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	330c      	adds	r3, #12
 8008fe2:	7812      	ldrb	r2, [r2, #0]
 8008fe4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008ff4:	b29b      	uxth	r3, r3
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	b29a      	uxth	r2, r3
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	86da      	strh	r2, [r3, #54]	; 0x36
 8008ffe:	e011      	b.n	8009024 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009000:	f7fd fce0 	bl	80069c4 <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	1ad3      	subs	r3, r2, r3
 800900a:	683a      	ldr	r2, [r7, #0]
 800900c:	429a      	cmp	r2, r3
 800900e:	d803      	bhi.n	8009018 <HAL_SPI_Transmit+0x1f4>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009016:	d102      	bne.n	800901e <HAL_SPI_Transmit+0x1fa>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d102      	bne.n	8009024 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800901e:	2303      	movs	r3, #3
 8009020:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009022:	e026      	b.n	8009072 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009028:	b29b      	uxth	r3, r3
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1cd      	bne.n	8008fca <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800902e:	69ba      	ldr	r2, [r7, #24]
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	68f8      	ldr	r0, [r7, #12]
 8009034:	f000 fba4 	bl	8009780 <SPI_EndRxTxTransaction>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d002      	beq.n	8009044 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2220      	movs	r2, #32
 8009042:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800904c:	2300      	movs	r3, #0
 800904e:	613b      	str	r3, [r7, #16]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	613b      	str	r3, [r7, #16]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689b      	ldr	r3, [r3, #8]
 800905e:	613b      	str	r3, [r7, #16]
 8009060:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800906a:	2301      	movs	r3, #1
 800906c:	77fb      	strb	r3, [r7, #31]
 800906e:	e000      	b.n	8009072 <HAL_SPI_Transmit+0x24e>
  }

error:
 8009070:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2201      	movs	r2, #1
 8009076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009082:	7ffb      	ldrb	r3, [r7, #31]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3720      	adds	r7, #32
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b088      	sub	sp, #32
 8009090:	af02      	add	r7, sp, #8
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	603b      	str	r3, [r7, #0]
 8009098:	4613      	mov	r3, r2
 800909a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800909c:	2300      	movs	r3, #0
 800909e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80090a8:	d112      	bne.n	80090d0 <HAL_SPI_Receive+0x44>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10e      	bne.n	80090d0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2204      	movs	r2, #4
 80090b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80090ba:	88fa      	ldrh	r2, [r7, #6]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	4613      	mov	r3, r2
 80090c2:	68ba      	ldr	r2, [r7, #8]
 80090c4:	68b9      	ldr	r1, [r7, #8]
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 f8e9 	bl	800929e <HAL_SPI_TransmitReceive>
 80090cc:	4603      	mov	r3, r0
 80090ce:	e0e2      	b.n	8009296 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d101      	bne.n	80090de <HAL_SPI_Receive+0x52>
 80090da:	2302      	movs	r3, #2
 80090dc:	e0db      	b.n	8009296 <HAL_SPI_Receive+0x20a>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2201      	movs	r2, #1
 80090e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80090e6:	f7fd fc6d 	bl	80069c4 <HAL_GetTick>
 80090ea:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80090f2:	b2db      	uxtb	r3, r3
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d002      	beq.n	80090fe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80090f8:	2302      	movs	r3, #2
 80090fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80090fc:	e0c2      	b.n	8009284 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <HAL_SPI_Receive+0x7e>
 8009104:	88fb      	ldrh	r3, [r7, #6]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d102      	bne.n	8009110 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800910e:	e0b9      	b.n	8009284 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2204      	movs	r2, #4
 8009114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	88fa      	ldrh	r2, [r7, #6]
 8009128:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	88fa      	ldrh	r2, [r7, #6]
 800912e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	2200      	movs	r2, #0
 8009140:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	689b      	ldr	r3, [r3, #8]
 8009152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009156:	d107      	bne.n	8009168 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009166:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009172:	2b40      	cmp	r3, #64	; 0x40
 8009174:	d007      	beq.n	8009186 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009184:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d162      	bne.n	8009254 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800918e:	e02e      	b.n	80091ee <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	2b01      	cmp	r3, #1
 800919c:	d115      	bne.n	80091ca <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f103 020c 	add.w	r2, r3, #12
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091aa:	7812      	ldrb	r2, [r2, #0]
 80091ac:	b2d2      	uxtb	r2, r2
 80091ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b4:	1c5a      	adds	r2, r3, #1
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091be:	b29b      	uxth	r3, r3
 80091c0:	3b01      	subs	r3, #1
 80091c2:	b29a      	uxth	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091c8:	e011      	b.n	80091ee <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80091ca:	f7fd fbfb 	bl	80069c4 <HAL_GetTick>
 80091ce:	4602      	mov	r2, r0
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	1ad3      	subs	r3, r2, r3
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	429a      	cmp	r2, r3
 80091d8:	d803      	bhi.n	80091e2 <HAL_SPI_Receive+0x156>
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091e0:	d102      	bne.n	80091e8 <HAL_SPI_Receive+0x15c>
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d102      	bne.n	80091ee <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80091e8:	2303      	movs	r3, #3
 80091ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80091ec:	e04a      	b.n	8009284 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1cb      	bne.n	8009190 <HAL_SPI_Receive+0x104>
 80091f8:	e031      	b.n	800925e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f003 0301 	and.w	r3, r3, #1
 8009204:	2b01      	cmp	r3, #1
 8009206:	d113      	bne.n	8009230 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009212:	b292      	uxth	r2, r2
 8009214:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921a:	1c9a      	adds	r2, r3, #2
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009224:	b29b      	uxth	r3, r3
 8009226:	3b01      	subs	r3, #1
 8009228:	b29a      	uxth	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800922e:	e011      	b.n	8009254 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009230:	f7fd fbc8 	bl	80069c4 <HAL_GetTick>
 8009234:	4602      	mov	r2, r0
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	1ad3      	subs	r3, r2, r3
 800923a:	683a      	ldr	r2, [r7, #0]
 800923c:	429a      	cmp	r2, r3
 800923e:	d803      	bhi.n	8009248 <HAL_SPI_Receive+0x1bc>
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009246:	d102      	bne.n	800924e <HAL_SPI_Receive+0x1c2>
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d102      	bne.n	8009254 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800924e:	2303      	movs	r3, #3
 8009250:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009252:	e017      	b.n	8009284 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009258:	b29b      	uxth	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d1cd      	bne.n	80091fa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 fa27 	bl	80096b6 <SPI_EndRxTransaction>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d002      	beq.n	8009274 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2220      	movs	r2, #32
 8009272:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009278:	2b00      	cmp	r3, #0
 800927a:	d002      	beq.n	8009282 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	75fb      	strb	r3, [r7, #23]
 8009280:	e000      	b.n	8009284 <HAL_SPI_Receive+0x1f8>
  }

error :
 8009282:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009294:	7dfb      	ldrb	r3, [r7, #23]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b08c      	sub	sp, #48	; 0x30
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
 80092aa:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80092ac:	2301      	movs	r3, #1
 80092ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d101      	bne.n	80092c4 <HAL_SPI_TransmitReceive+0x26>
 80092c0:	2302      	movs	r3, #2
 80092c2:	e18a      	b.n	80095da <HAL_SPI_TransmitReceive+0x33c>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092cc:	f7fd fb7a 	bl	80069c4 <HAL_GetTick>
 80092d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80092e2:	887b      	ldrh	r3, [r7, #2]
 80092e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80092e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d00f      	beq.n	800930e <HAL_SPI_TransmitReceive+0x70>
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092f4:	d107      	bne.n	8009306 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d103      	bne.n	8009306 <HAL_SPI_TransmitReceive+0x68>
 80092fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009302:	2b04      	cmp	r3, #4
 8009304:	d003      	beq.n	800930e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009306:	2302      	movs	r3, #2
 8009308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800930c:	e15b      	b.n	80095c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d005      	beq.n	8009320 <HAL_SPI_TransmitReceive+0x82>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d002      	beq.n	8009320 <HAL_SPI_TransmitReceive+0x82>
 800931a:	887b      	ldrh	r3, [r7, #2]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d103      	bne.n	8009328 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009326:	e14e      	b.n	80095c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800932e:	b2db      	uxtb	r3, r3
 8009330:	2b04      	cmp	r3, #4
 8009332:	d003      	beq.n	800933c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2205      	movs	r2, #5
 8009338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2200      	movs	r2, #0
 8009340:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	687a      	ldr	r2, [r7, #4]
 8009346:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	887a      	ldrh	r2, [r7, #2]
 800934c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	887a      	ldrh	r2, [r7, #2]
 8009352:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	68ba      	ldr	r2, [r7, #8]
 8009358:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	887a      	ldrh	r2, [r7, #2]
 800935e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	887a      	ldrh	r2, [r7, #2]
 8009364:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2200      	movs	r2, #0
 800936a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	2200      	movs	r2, #0
 8009370:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937c:	2b40      	cmp	r3, #64	; 0x40
 800937e:	d007      	beq.n	8009390 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800938e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009398:	d178      	bne.n	800948c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d002      	beq.n	80093a8 <HAL_SPI_TransmitReceive+0x10a>
 80093a2:	8b7b      	ldrh	r3, [r7, #26]
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d166      	bne.n	8009476 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ac:	881a      	ldrh	r2, [r3, #0]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093b8:	1c9a      	adds	r2, r3, #2
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	3b01      	subs	r3, #1
 80093c6:	b29a      	uxth	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80093cc:	e053      	b.n	8009476 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f003 0302 	and.w	r3, r3, #2
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d11b      	bne.n	8009414 <HAL_SPI_TransmitReceive+0x176>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d016      	beq.n	8009414 <HAL_SPI_TransmitReceive+0x176>
 80093e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d113      	bne.n	8009414 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093f0:	881a      	ldrh	r2, [r3, #0]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fc:	1c9a      	adds	r2, r3, #2
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009406:	b29b      	uxth	r3, r3
 8009408:	3b01      	subs	r3, #1
 800940a:	b29a      	uxth	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009410:	2300      	movs	r3, #0
 8009412:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	689b      	ldr	r3, [r3, #8]
 800941a:	f003 0301 	and.w	r3, r3, #1
 800941e:	2b01      	cmp	r3, #1
 8009420:	d119      	bne.n	8009456 <HAL_SPI_TransmitReceive+0x1b8>
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009426:	b29b      	uxth	r3, r3
 8009428:	2b00      	cmp	r3, #0
 800942a:	d014      	beq.n	8009456 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	68da      	ldr	r2, [r3, #12]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009436:	b292      	uxth	r2, r2
 8009438:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	1c9a      	adds	r2, r3, #2
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009448:	b29b      	uxth	r3, r3
 800944a:	3b01      	subs	r3, #1
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009452:	2301      	movs	r3, #1
 8009454:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009456:	f7fd fab5 	bl	80069c4 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009462:	429a      	cmp	r2, r3
 8009464:	d807      	bhi.n	8009476 <HAL_SPI_TransmitReceive+0x1d8>
 8009466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946c:	d003      	beq.n	8009476 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009474:	e0a7      	b.n	80095c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800947a:	b29b      	uxth	r3, r3
 800947c:	2b00      	cmp	r3, #0
 800947e:	d1a6      	bne.n	80093ce <HAL_SPI_TransmitReceive+0x130>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009484:	b29b      	uxth	r3, r3
 8009486:	2b00      	cmp	r3, #0
 8009488:	d1a1      	bne.n	80093ce <HAL_SPI_TransmitReceive+0x130>
 800948a:	e07c      	b.n	8009586 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d002      	beq.n	800949a <HAL_SPI_TransmitReceive+0x1fc>
 8009494:	8b7b      	ldrh	r3, [r7, #26]
 8009496:	2b01      	cmp	r3, #1
 8009498:	d16b      	bne.n	8009572 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	330c      	adds	r3, #12
 80094a4:	7812      	ldrb	r2, [r2, #0]
 80094a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ac:	1c5a      	adds	r2, r3, #1
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	3b01      	subs	r3, #1
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80094c0:	e057      	b.n	8009572 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	f003 0302 	and.w	r3, r3, #2
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d11c      	bne.n	800950a <HAL_SPI_TransmitReceive+0x26c>
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d017      	beq.n	800950a <HAL_SPI_TransmitReceive+0x26c>
 80094da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d114      	bne.n	800950a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	330c      	adds	r3, #12
 80094ea:	7812      	ldrb	r2, [r2, #0]
 80094ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f2:	1c5a      	adds	r2, r3, #1
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	3b01      	subs	r3, #1
 8009500:	b29a      	uxth	r2, r3
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009506:	2300      	movs	r3, #0
 8009508:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	f003 0301 	and.w	r3, r3, #1
 8009514:	2b01      	cmp	r3, #1
 8009516:	d119      	bne.n	800954c <HAL_SPI_TransmitReceive+0x2ae>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800951c:	b29b      	uxth	r3, r3
 800951e:	2b00      	cmp	r3, #0
 8009520:	d014      	beq.n	800954c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68da      	ldr	r2, [r3, #12]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800952c:	b2d2      	uxtb	r2, r2
 800952e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800953e:	b29b      	uxth	r3, r3
 8009540:	3b01      	subs	r3, #1
 8009542:	b29a      	uxth	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009548:	2301      	movs	r3, #1
 800954a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800954c:	f7fd fa3a 	bl	80069c4 <HAL_GetTick>
 8009550:	4602      	mov	r2, r0
 8009552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009558:	429a      	cmp	r2, r3
 800955a:	d803      	bhi.n	8009564 <HAL_SPI_TransmitReceive+0x2c6>
 800955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009562:	d102      	bne.n	800956a <HAL_SPI_TransmitReceive+0x2cc>
 8009564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009566:	2b00      	cmp	r3, #0
 8009568:	d103      	bne.n	8009572 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009570:	e029      	b.n	80095c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009576:	b29b      	uxth	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1a2      	bne.n	80094c2 <HAL_SPI_TransmitReceive+0x224>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009580:	b29b      	uxth	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	d19d      	bne.n	80094c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009588:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800958a:	68f8      	ldr	r0, [r7, #12]
 800958c:	f000 f8f8 	bl	8009780 <SPI_EndRxTxTransaction>
 8009590:	4603      	mov	r3, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	d006      	beq.n	80095a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009596:	2301      	movs	r3, #1
 8009598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2220      	movs	r2, #32
 80095a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80095a2:	e010      	b.n	80095c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10b      	bne.n	80095c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095ac:	2300      	movs	r3, #0
 80095ae:	617b      	str	r3, [r7, #20]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68db      	ldr	r3, [r3, #12]
 80095b6:	617b      	str	r3, [r7, #20]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	617b      	str	r3, [r7, #20]
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	e000      	b.n	80095c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80095c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	2201      	movs	r2, #1
 80095ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80095d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3730      	adds	r7, #48	; 0x30
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	60f8      	str	r0, [r7, #12]
 80095ea:	60b9      	str	r1, [r7, #8]
 80095ec:	603b      	str	r3, [r7, #0]
 80095ee:	4613      	mov	r3, r2
 80095f0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80095f2:	e04c      	b.n	800968e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095fa:	d048      	beq.n	800968e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80095fc:	f7fd f9e2 	bl	80069c4 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	429a      	cmp	r2, r3
 800960a:	d902      	bls.n	8009612 <SPI_WaitFlagStateUntilTimeout+0x30>
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d13d      	bne.n	800968e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	685a      	ldr	r2, [r3, #4]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009620:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800962a:	d111      	bne.n	8009650 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009634:	d004      	beq.n	8009640 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800963e:	d107      	bne.n	8009650 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800964e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009658:	d10f      	bne.n	800967a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009678:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2201      	movs	r2, #1
 800967e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800968a:	2303      	movs	r3, #3
 800968c:	e00f      	b.n	80096ae <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	689a      	ldr	r2, [r3, #8]
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	4013      	ands	r3, r2
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	429a      	cmp	r2, r3
 800969c:	bf0c      	ite	eq
 800969e:	2301      	moveq	r3, #1
 80096a0:	2300      	movne	r3, #0
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	461a      	mov	r2, r3
 80096a6:	79fb      	ldrb	r3, [r7, #7]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d1a3      	bne.n	80095f4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b086      	sub	sp, #24
 80096ba:	af02      	add	r7, sp, #8
 80096bc:	60f8      	str	r0, [r7, #12]
 80096be:	60b9      	str	r1, [r7, #8]
 80096c0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096ca:	d111      	bne.n	80096f0 <SPI_EndRxTransaction+0x3a>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096d4:	d004      	beq.n	80096e0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096de:	d107      	bne.n	80096f0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681a      	ldr	r2, [r3, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096ee:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096f8:	d12a      	bne.n	8009750 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009702:	d012      	beq.n	800972a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2200      	movs	r2, #0
 800970c:	2180      	movs	r1, #128	; 0x80
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f7ff ff67 	bl	80095e2 <SPI_WaitFlagStateUntilTimeout>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d02d      	beq.n	8009776 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971e:	f043 0220 	orr.w	r2, r3, #32
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e026      	b.n	8009778 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	9300      	str	r3, [sp, #0]
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	2200      	movs	r2, #0
 8009732:	2101      	movs	r1, #1
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f7ff ff54 	bl	80095e2 <SPI_WaitFlagStateUntilTimeout>
 800973a:	4603      	mov	r3, r0
 800973c:	2b00      	cmp	r3, #0
 800973e:	d01a      	beq.n	8009776 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009744:	f043 0220 	orr.w	r2, r3, #32
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800974c:	2303      	movs	r3, #3
 800974e:	e013      	b.n	8009778 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	2200      	movs	r2, #0
 8009758:	2101      	movs	r1, #1
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f7ff ff41 	bl	80095e2 <SPI_WaitFlagStateUntilTimeout>
 8009760:	4603      	mov	r3, r0
 8009762:	2b00      	cmp	r3, #0
 8009764:	d007      	beq.n	8009776 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800976a:	f043 0220 	orr.w	r2, r3, #32
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009772:	2303      	movs	r3, #3
 8009774:	e000      	b.n	8009778 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b088      	sub	sp, #32
 8009784:	af02      	add	r7, sp, #8
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800978c:	4b1b      	ldr	r3, [pc, #108]	; (80097fc <SPI_EndRxTxTransaction+0x7c>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a1b      	ldr	r2, [pc, #108]	; (8009800 <SPI_EndRxTxTransaction+0x80>)
 8009792:	fba2 2303 	umull	r2, r3, r2, r3
 8009796:	0d5b      	lsrs	r3, r3, #21
 8009798:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800979c:	fb02 f303 	mul.w	r3, r2, r3
 80097a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097aa:	d112      	bne.n	80097d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	9300      	str	r3, [sp, #0]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	2200      	movs	r2, #0
 80097b4:	2180      	movs	r1, #128	; 0x80
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f7ff ff13 	bl	80095e2 <SPI_WaitFlagStateUntilTimeout>
 80097bc:	4603      	mov	r3, r0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d016      	beq.n	80097f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c6:	f043 0220 	orr.w	r2, r3, #32
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e00f      	b.n	80097f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00a      	beq.n	80097ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	3b01      	subs	r3, #1
 80097dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e8:	2b80      	cmp	r3, #128	; 0x80
 80097ea:	d0f2      	beq.n	80097d2 <SPI_EndRxTxTransaction+0x52>
 80097ec:	e000      	b.n	80097f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80097ee:	bf00      	nop
  }

  return HAL_OK;
 80097f0:	2300      	movs	r3, #0
}
 80097f2:	4618      	mov	r0, r3
 80097f4:	3718      	adds	r7, #24
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20000034 	.word	0x20000034
 8009800:	165e9f81 	.word	0x165e9f81

08009804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b082      	sub	sp, #8
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d101      	bne.n	8009816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009812:	2301      	movs	r3, #1
 8009814:	e01d      	b.n	8009852 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800981c:	b2db      	uxtb	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d106      	bne.n	8009830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7fc fe12 	bl	8006454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2202      	movs	r2, #2
 8009834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	3304      	adds	r3, #4
 8009840:	4619      	mov	r1, r3
 8009842:	4610      	mov	r0, r2
 8009844:	f000 fb56 	bl	8009ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	3708      	adds	r7, #8
 8009856:	46bd      	mov	sp, r7
 8009858:	bd80      	pop	{r7, pc}

0800985a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800985a:	b480      	push	{r7}
 800985c:	b085      	sub	sp, #20
 800985e:	af00      	add	r7, sp, #0
 8009860:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f042 0201 	orr.w	r2, r2, #1
 8009870:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f003 0307 	and.w	r3, r3, #7
 800987c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b06      	cmp	r3, #6
 8009882:	d007      	beq.n	8009894 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f042 0201 	orr.w	r2, r2, #1
 8009892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b082      	sub	sp, #8
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d101      	bne.n	80098b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80098b0:	2301      	movs	r3, #1
 80098b2:	e01d      	b.n	80098f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d106      	bne.n	80098ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7fc fd0f 	bl	80062ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2202      	movs	r2, #2
 80098d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	3304      	adds	r3, #4
 80098de:	4619      	mov	r1, r3
 80098e0:	4610      	mov	r0, r2
 80098e2:	f000 fb07 	bl	8009ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	2201      	movs	r2, #1
 8009908:	6839      	ldr	r1, [r7, #0]
 800990a:	4618      	mov	r0, r3
 800990c:	f000 fd42 	bl	800a394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a15      	ldr	r2, [pc, #84]	; (800996c <HAL_TIM_PWM_Start+0x74>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d004      	beq.n	8009924 <HAL_TIM_PWM_Start+0x2c>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a14      	ldr	r2, [pc, #80]	; (8009970 <HAL_TIM_PWM_Start+0x78>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d101      	bne.n	8009928 <HAL_TIM_PWM_Start+0x30>
 8009924:	2301      	movs	r3, #1
 8009926:	e000      	b.n	800992a <HAL_TIM_PWM_Start+0x32>
 8009928:	2300      	movs	r3, #0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d007      	beq.n	800993e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800993c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2b06      	cmp	r3, #6
 800994e:	d007      	beq.n	8009960 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681a      	ldr	r2, [r3, #0]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f042 0201 	orr.w	r2, r2, #1
 800995e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009960:	2300      	movs	r3, #0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	40010000 	.word	0x40010000
 8009970:	40010400 	.word	0x40010400

08009974 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b086      	sub	sp, #24
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e083      	b.n	8009a90 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800998e:	b2db      	uxtb	r3, r3
 8009990:	2b00      	cmp	r3, #0
 8009992:	d106      	bne.n	80099a2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7fc fcdd 	bl	800635c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2202      	movs	r2, #2
 80099a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	687a      	ldr	r2, [r7, #4]
 80099b2:	6812      	ldr	r2, [r2, #0]
 80099b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099b8:	f023 0307 	bic.w	r3, r3, #7
 80099bc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	3304      	adds	r3, #4
 80099c6:	4619      	mov	r1, r3
 80099c8:	4610      	mov	r0, r2
 80099ca:	f000 fa93 	bl	8009ef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	689b      	ldr	r3, [r3, #8]
 80099d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	699b      	ldr	r3, [r3, #24]
 80099dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	6a1b      	ldr	r3, [r3, #32]
 80099e4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	4313      	orrs	r3, r2
 80099ee:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099f6:	f023 0303 	bic.w	r3, r3, #3
 80099fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	699b      	ldr	r3, [r3, #24]
 8009a04:	021b      	lsls	r3, r3, #8
 8009a06:	4313      	orrs	r3, r2
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009a14:	f023 030c 	bic.w	r3, r3, #12
 8009a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	69db      	ldr	r3, [r3, #28]
 8009a2e:	021b      	lsls	r3, r3, #8
 8009a30:	4313      	orrs	r3, r2
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	691b      	ldr	r3, [r3, #16]
 8009a3c:	011a      	lsls	r2, r3, #4
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	031b      	lsls	r3, r3, #12
 8009a44:	4313      	orrs	r3, r2
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009a52:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009a5a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	685a      	ldr	r2, [r3, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	011b      	lsls	r3, r3, #4
 8009a66:	4313      	orrs	r3, r2
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	697a      	ldr	r2, [r7, #20]
 8009a74:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	693a      	ldr	r2, [r7, #16]
 8009a7c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2201      	movs	r2, #1
 8009a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3718      	adds	r7, #24
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b082      	sub	sp, #8
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d002      	beq.n	8009aae <HAL_TIM_Encoder_Start+0x16>
 8009aa8:	2b04      	cmp	r3, #4
 8009aaa:	d008      	beq.n	8009abe <HAL_TIM_Encoder_Start+0x26>
 8009aac:	e00f      	b.n	8009ace <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	2100      	movs	r1, #0
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 fc6c 	bl	800a394 <TIM_CCxChannelCmd>
      break;
 8009abc:	e016      	b.n	8009aec <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	2104      	movs	r1, #4
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 fc64 	bl	800a394 <TIM_CCxChannelCmd>
      break;
 8009acc:	e00e      	b.n	8009aec <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 fc5c 	bl	800a394 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	2104      	movs	r1, #4
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f000 fc55 	bl	800a394 <TIM_CCxChannelCmd>
      break;
 8009aea:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f042 0201 	orr.w	r2, r2, #1
 8009afa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b082      	sub	sp, #8
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	f003 0302 	and.w	r3, r3, #2
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d122      	bne.n	8009b62 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b02      	cmp	r3, #2
 8009b28:	d11b      	bne.n	8009b62 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f06f 0202 	mvn.w	r2, #2
 8009b32:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	699b      	ldr	r3, [r3, #24]
 8009b40:	f003 0303 	and.w	r3, r3, #3
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d003      	beq.n	8009b50 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f9b5 	bl	8009eb8 <HAL_TIM_IC_CaptureCallback>
 8009b4e:	e005      	b.n	8009b5c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f9a7 	bl	8009ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f000 f9b8 	bl	8009ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b04      	cmp	r3, #4
 8009b6e:	d122      	bne.n	8009bb6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	f003 0304 	and.w	r3, r3, #4
 8009b7a:	2b04      	cmp	r3, #4
 8009b7c:	d11b      	bne.n	8009bb6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f06f 0204 	mvn.w	r2, #4
 8009b86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d003      	beq.n	8009ba4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b9c:	6878      	ldr	r0, [r7, #4]
 8009b9e:	f000 f98b 	bl	8009eb8 <HAL_TIM_IC_CaptureCallback>
 8009ba2:	e005      	b.n	8009bb0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 f97d 	bl	8009ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f98e 	bl	8009ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	691b      	ldr	r3, [r3, #16]
 8009bbc:	f003 0308 	and.w	r3, r3, #8
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d122      	bne.n	8009c0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	f003 0308 	and.w	r3, r3, #8
 8009bce:	2b08      	cmp	r3, #8
 8009bd0:	d11b      	bne.n	8009c0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f06f 0208 	mvn.w	r2, #8
 8009bda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2204      	movs	r2, #4
 8009be0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	69db      	ldr	r3, [r3, #28]
 8009be8:	f003 0303 	and.w	r3, r3, #3
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d003      	beq.n	8009bf8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 f961 	bl	8009eb8 <HAL_TIM_IC_CaptureCallback>
 8009bf6:	e005      	b.n	8009c04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f953 	bl	8009ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f964 	bl	8009ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	f003 0310 	and.w	r3, r3, #16
 8009c14:	2b10      	cmp	r3, #16
 8009c16:	d122      	bne.n	8009c5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	f003 0310 	and.w	r3, r3, #16
 8009c22:	2b10      	cmp	r3, #16
 8009c24:	d11b      	bne.n	8009c5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f06f 0210 	mvn.w	r2, #16
 8009c2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2208      	movs	r2, #8
 8009c34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f937 	bl	8009eb8 <HAL_TIM_IC_CaptureCallback>
 8009c4a:	e005      	b.n	8009c58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f929 	bl	8009ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f000 f93a 	bl	8009ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	f003 0301 	and.w	r3, r3, #1
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	d10e      	bne.n	8009c8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d107      	bne.n	8009c8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f06f 0201 	mvn.w	r2, #1
 8009c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f7f9 fdf7 	bl	8003878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	691b      	ldr	r3, [r3, #16]
 8009c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c94:	2b80      	cmp	r3, #128	; 0x80
 8009c96:	d10e      	bne.n	8009cb6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca2:	2b80      	cmp	r3, #128	; 0x80
 8009ca4:	d107      	bne.n	8009cb6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fc6d 	bl	800a590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	691b      	ldr	r3, [r3, #16]
 8009cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cc0:	2b40      	cmp	r3, #64	; 0x40
 8009cc2:	d10e      	bne.n	8009ce2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cce:	2b40      	cmp	r3, #64	; 0x40
 8009cd0:	d107      	bne.n	8009ce2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f8ff 	bl	8009ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	f003 0320 	and.w	r3, r3, #32
 8009cec:	2b20      	cmp	r3, #32
 8009cee:	d10e      	bne.n	8009d0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	f003 0320 	and.w	r3, r3, #32
 8009cfa:	2b20      	cmp	r3, #32
 8009cfc:	d107      	bne.n	8009d0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f06f 0220 	mvn.w	r2, #32
 8009d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fc37 	bl	800a57c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d0e:	bf00      	nop
 8009d10:	3708      	adds	r7, #8
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
	...

08009d18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d101      	bne.n	8009d32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	e0b4      	b.n	8009e9c <HAL_TIM_PWM_ConfigChannel+0x184>
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2202      	movs	r2, #2
 8009d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2b0c      	cmp	r3, #12
 8009d46:	f200 809f 	bhi.w	8009e88 <HAL_TIM_PWM_ConfigChannel+0x170>
 8009d4a:	a201      	add	r2, pc, #4	; (adr r2, 8009d50 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d50:	08009d85 	.word	0x08009d85
 8009d54:	08009e89 	.word	0x08009e89
 8009d58:	08009e89 	.word	0x08009e89
 8009d5c:	08009e89 	.word	0x08009e89
 8009d60:	08009dc5 	.word	0x08009dc5
 8009d64:	08009e89 	.word	0x08009e89
 8009d68:	08009e89 	.word	0x08009e89
 8009d6c:	08009e89 	.word	0x08009e89
 8009d70:	08009e07 	.word	0x08009e07
 8009d74:	08009e89 	.word	0x08009e89
 8009d78:	08009e89 	.word	0x08009e89
 8009d7c:	08009e89 	.word	0x08009e89
 8009d80:	08009e47 	.word	0x08009e47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68b9      	ldr	r1, [r7, #8]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 f952 	bl	800a034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	699a      	ldr	r2, [r3, #24]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f042 0208 	orr.w	r2, r2, #8
 8009d9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	699a      	ldr	r2, [r3, #24]
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f022 0204 	bic.w	r2, r2, #4
 8009dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	6999      	ldr	r1, [r3, #24]
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	691a      	ldr	r2, [r3, #16]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	430a      	orrs	r2, r1
 8009dc0:	619a      	str	r2, [r3, #24]
      break;
 8009dc2:	e062      	b.n	8009e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f000 f9a2 	bl	800a114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	699a      	ldr	r2, [r3, #24]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009dde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	699a      	ldr	r2, [r3, #24]
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6999      	ldr	r1, [r3, #24]
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	021a      	lsls	r2, r3, #8
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	430a      	orrs	r2, r1
 8009e02:	619a      	str	r2, [r3, #24]
      break;
 8009e04:	e041      	b.n	8009e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 f9f7 	bl	800a200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	69da      	ldr	r2, [r3, #28]
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0208 	orr.w	r2, r2, #8
 8009e20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	69da      	ldr	r2, [r3, #28]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f022 0204 	bic.w	r2, r2, #4
 8009e30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	69d9      	ldr	r1, [r3, #28]
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	691a      	ldr	r2, [r3, #16]
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	430a      	orrs	r2, r1
 8009e42:	61da      	str	r2, [r3, #28]
      break;
 8009e44:	e021      	b.n	8009e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68b9      	ldr	r1, [r7, #8]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 fa4b 	bl	800a2e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	69da      	ldr	r2, [r3, #28]
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	69da      	ldr	r2, [r3, #28]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	69d9      	ldr	r1, [r3, #28]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	021a      	lsls	r2, r3, #8
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	430a      	orrs	r2, r1
 8009e84:	61da      	str	r2, [r3, #28]
      break;
 8009e86:	e000      	b.n	8009e8a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8009e88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3710      	adds	r7, #16
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009eac:	bf00      	nop
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ec0:	bf00      	nop
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009ee8:	bf00      	nop
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	4a40      	ldr	r2, [pc, #256]	; (800a008 <TIM_Base_SetConfig+0x114>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d013      	beq.n	8009f34 <TIM_Base_SetConfig+0x40>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f12:	d00f      	beq.n	8009f34 <TIM_Base_SetConfig+0x40>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a3d      	ldr	r2, [pc, #244]	; (800a00c <TIM_Base_SetConfig+0x118>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d00b      	beq.n	8009f34 <TIM_Base_SetConfig+0x40>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a3c      	ldr	r2, [pc, #240]	; (800a010 <TIM_Base_SetConfig+0x11c>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d007      	beq.n	8009f34 <TIM_Base_SetConfig+0x40>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a3b      	ldr	r2, [pc, #236]	; (800a014 <TIM_Base_SetConfig+0x120>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d003      	beq.n	8009f34 <TIM_Base_SetConfig+0x40>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a3a      	ldr	r2, [pc, #232]	; (800a018 <TIM_Base_SetConfig+0x124>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d108      	bne.n	8009f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	68fa      	ldr	r2, [r7, #12]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a2f      	ldr	r2, [pc, #188]	; (800a008 <TIM_Base_SetConfig+0x114>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d02b      	beq.n	8009fa6 <TIM_Base_SetConfig+0xb2>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f54:	d027      	beq.n	8009fa6 <TIM_Base_SetConfig+0xb2>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	4a2c      	ldr	r2, [pc, #176]	; (800a00c <TIM_Base_SetConfig+0x118>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d023      	beq.n	8009fa6 <TIM_Base_SetConfig+0xb2>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	4a2b      	ldr	r2, [pc, #172]	; (800a010 <TIM_Base_SetConfig+0x11c>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d01f      	beq.n	8009fa6 <TIM_Base_SetConfig+0xb2>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	4a2a      	ldr	r2, [pc, #168]	; (800a014 <TIM_Base_SetConfig+0x120>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d01b      	beq.n	8009fa6 <TIM_Base_SetConfig+0xb2>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a29      	ldr	r2, [pc, #164]	; (800a018 <TIM_Base_SetConfig+0x124>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d017      	beq.n	8009fa6 <TIM_Base_SetConfig+0xb2>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a28      	ldr	r2, [pc, #160]	; (800a01c <TIM_Base_SetConfig+0x128>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d013      	beq.n	8009fa6 <TIM_Base_SetConfig+0xb2>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	4a27      	ldr	r2, [pc, #156]	; (800a020 <TIM_Base_SetConfig+0x12c>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d00f      	beq.n	8009fa6 <TIM_Base_SetConfig+0xb2>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a26      	ldr	r2, [pc, #152]	; (800a024 <TIM_Base_SetConfig+0x130>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d00b      	beq.n	8009fa6 <TIM_Base_SetConfig+0xb2>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	4a25      	ldr	r2, [pc, #148]	; (800a028 <TIM_Base_SetConfig+0x134>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d007      	beq.n	8009fa6 <TIM_Base_SetConfig+0xb2>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	4a24      	ldr	r2, [pc, #144]	; (800a02c <TIM_Base_SetConfig+0x138>)
 8009f9a:	4293      	cmp	r3, r2
 8009f9c:	d003      	beq.n	8009fa6 <TIM_Base_SetConfig+0xb2>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	4a23      	ldr	r2, [pc, #140]	; (800a030 <TIM_Base_SetConfig+0x13c>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d108      	bne.n	8009fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	695b      	ldr	r3, [r3, #20]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	689a      	ldr	r2, [r3, #8]
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	4a0a      	ldr	r2, [pc, #40]	; (800a008 <TIM_Base_SetConfig+0x114>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d003      	beq.n	8009fec <TIM_Base_SetConfig+0xf8>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a0c      	ldr	r2, [pc, #48]	; (800a018 <TIM_Base_SetConfig+0x124>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d103      	bne.n	8009ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	691a      	ldr	r2, [r3, #16]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	615a      	str	r2, [r3, #20]
}
 8009ffa:	bf00      	nop
 8009ffc:	3714      	adds	r7, #20
 8009ffe:	46bd      	mov	sp, r7
 800a000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop
 800a008:	40010000 	.word	0x40010000
 800a00c:	40000400 	.word	0x40000400
 800a010:	40000800 	.word	0x40000800
 800a014:	40000c00 	.word	0x40000c00
 800a018:	40010400 	.word	0x40010400
 800a01c:	40014000 	.word	0x40014000
 800a020:	40014400 	.word	0x40014400
 800a024:	40014800 	.word	0x40014800
 800a028:	40001800 	.word	0x40001800
 800a02c:	40001c00 	.word	0x40001c00
 800a030:	40002000 	.word	0x40002000

0800a034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a034:	b480      	push	{r7}
 800a036:	b087      	sub	sp, #28
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6a1b      	ldr	r3, [r3, #32]
 800a042:	f023 0201 	bic.w	r2, r3, #1
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	685b      	ldr	r3, [r3, #4]
 800a054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f023 0303 	bic.w	r3, r3, #3
 800a06a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	68fa      	ldr	r2, [r7, #12]
 800a072:	4313      	orrs	r3, r2
 800a074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f023 0302 	bic.w	r3, r3, #2
 800a07c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	697a      	ldr	r2, [r7, #20]
 800a084:	4313      	orrs	r3, r2
 800a086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	4a20      	ldr	r2, [pc, #128]	; (800a10c <TIM_OC1_SetConfig+0xd8>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d003      	beq.n	800a098 <TIM_OC1_SetConfig+0x64>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	4a1f      	ldr	r2, [pc, #124]	; (800a110 <TIM_OC1_SetConfig+0xdc>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d10c      	bne.n	800a0b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a098:	697b      	ldr	r3, [r7, #20]
 800a09a:	f023 0308 	bic.w	r3, r3, #8
 800a09e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	697a      	ldr	r2, [r7, #20]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	f023 0304 	bic.w	r3, r3, #4
 800a0b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a15      	ldr	r2, [pc, #84]	; (800a10c <TIM_OC1_SetConfig+0xd8>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d003      	beq.n	800a0c2 <TIM_OC1_SetConfig+0x8e>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a14      	ldr	r2, [pc, #80]	; (800a110 <TIM_OC1_SetConfig+0xdc>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d111      	bne.n	800a0e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a0d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	699b      	ldr	r3, [r3, #24]
 800a0e0:	693a      	ldr	r2, [r7, #16]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	693a      	ldr	r2, [r7, #16]
 800a0ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68fa      	ldr	r2, [r7, #12]
 800a0f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	697a      	ldr	r2, [r7, #20]
 800a0fe:	621a      	str	r2, [r3, #32]
}
 800a100:	bf00      	nop
 800a102:	371c      	adds	r7, #28
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	40010000 	.word	0x40010000
 800a110:	40010400 	.word	0x40010400

0800a114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6a1b      	ldr	r3, [r3, #32]
 800a122:	f023 0210 	bic.w	r2, r3, #16
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6a1b      	ldr	r3, [r3, #32]
 800a12e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	685b      	ldr	r3, [r3, #4]
 800a134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a14a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	021b      	lsls	r3, r3, #8
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	4313      	orrs	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	f023 0320 	bic.w	r3, r3, #32
 800a15e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	011b      	lsls	r3, r3, #4
 800a166:	697a      	ldr	r2, [r7, #20]
 800a168:	4313      	orrs	r3, r2
 800a16a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a22      	ldr	r2, [pc, #136]	; (800a1f8 <TIM_OC2_SetConfig+0xe4>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d003      	beq.n	800a17c <TIM_OC2_SetConfig+0x68>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a21      	ldr	r2, [pc, #132]	; (800a1fc <TIM_OC2_SetConfig+0xe8>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d10d      	bne.n	800a198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	68db      	ldr	r3, [r3, #12]
 800a188:	011b      	lsls	r3, r3, #4
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a17      	ldr	r2, [pc, #92]	; (800a1f8 <TIM_OC2_SetConfig+0xe4>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d003      	beq.n	800a1a8 <TIM_OC2_SetConfig+0x94>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a16      	ldr	r2, [pc, #88]	; (800a1fc <TIM_OC2_SetConfig+0xe8>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d113      	bne.n	800a1d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	4313      	orrs	r3, r2
 800a1c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	699b      	ldr	r3, [r3, #24]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	693a      	ldr	r2, [r7, #16]
 800a1cc:	4313      	orrs	r3, r2
 800a1ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	621a      	str	r2, [r3, #32]
}
 800a1ea:	bf00      	nop
 800a1ec:	371c      	adds	r7, #28
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr
 800a1f6:	bf00      	nop
 800a1f8:	40010000 	.word	0x40010000
 800a1fc:	40010400 	.word	0x40010400

0800a200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a200:	b480      	push	{r7}
 800a202:	b087      	sub	sp, #28
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	69db      	ldr	r3, [r3, #28]
 800a226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a22e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f023 0303 	bic.w	r3, r3, #3
 800a236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	4313      	orrs	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	021b      	lsls	r3, r3, #8
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	4313      	orrs	r3, r2
 800a254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	4a21      	ldr	r2, [pc, #132]	; (800a2e0 <TIM_OC3_SetConfig+0xe0>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d003      	beq.n	800a266 <TIM_OC3_SetConfig+0x66>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	4a20      	ldr	r2, [pc, #128]	; (800a2e4 <TIM_OC3_SetConfig+0xe4>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d10d      	bne.n	800a282 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a26c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	021b      	lsls	r3, r3, #8
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	4313      	orrs	r3, r2
 800a278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a16      	ldr	r2, [pc, #88]	; (800a2e0 <TIM_OC3_SetConfig+0xe0>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d003      	beq.n	800a292 <TIM_OC3_SetConfig+0x92>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a15      	ldr	r2, [pc, #84]	; (800a2e4 <TIM_OC3_SetConfig+0xe4>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d113      	bne.n	800a2ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	011b      	lsls	r3, r3, #4
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	699b      	ldr	r3, [r3, #24]
 800a2b2:	011b      	lsls	r3, r3, #4
 800a2b4:	693a      	ldr	r2, [r7, #16]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	693a      	ldr	r2, [r7, #16]
 800a2be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685a      	ldr	r2, [r3, #4]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	621a      	str	r2, [r3, #32]
}
 800a2d4:	bf00      	nop
 800a2d6:	371c      	adds	r7, #28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	40010000 	.word	0x40010000
 800a2e4:	40010400 	.word	0x40010400

0800a2e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	685b      	ldr	r3, [r3, #4]
 800a308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	69db      	ldr	r3, [r3, #28]
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a31e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	021b      	lsls	r3, r3, #8
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	4313      	orrs	r3, r2
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	031b      	lsls	r3, r3, #12
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	4a12      	ldr	r2, [pc, #72]	; (800a38c <TIM_OC4_SetConfig+0xa4>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d003      	beq.n	800a350 <TIM_OC4_SetConfig+0x68>
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a11      	ldr	r2, [pc, #68]	; (800a390 <TIM_OC4_SetConfig+0xa8>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d109      	bne.n	800a364 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	695b      	ldr	r3, [r3, #20]
 800a35c:	019b      	lsls	r3, r3, #6
 800a35e:	697a      	ldr	r2, [r7, #20]
 800a360:	4313      	orrs	r3, r2
 800a362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	621a      	str	r2, [r3, #32]
}
 800a37e:	bf00      	nop
 800a380:	371c      	adds	r7, #28
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	40010000 	.word	0x40010000
 800a390:	40010400 	.word	0x40010400

0800a394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a394:	b480      	push	{r7}
 800a396:	b087      	sub	sp, #28
 800a398:	af00      	add	r7, sp, #0
 800a39a:	60f8      	str	r0, [r7, #12]
 800a39c:	60b9      	str	r1, [r7, #8]
 800a39e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	f003 031f 	and.w	r3, r3, #31
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a1a      	ldr	r2, [r3, #32]
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	43db      	mvns	r3, r3
 800a3b6:	401a      	ands	r2, r3
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	6a1a      	ldr	r2, [r3, #32]
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f003 031f 	and.w	r3, r3, #31
 800a3c6:	6879      	ldr	r1, [r7, #4]
 800a3c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3cc:	431a      	orrs	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	621a      	str	r2, [r3, #32]
}
 800a3d2:	bf00      	nop
 800a3d4:	371c      	adds	r7, #28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr
	...

0800a3e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f0:	2b01      	cmp	r3, #1
 800a3f2:	d101      	bne.n	800a3f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	e05a      	b.n	800a4ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2201      	movs	r2, #1
 800a3fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2202      	movs	r2, #2
 800a404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	689b      	ldr	r3, [r3, #8]
 800a416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a41e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	4313      	orrs	r3, r2
 800a428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a21      	ldr	r2, [pc, #132]	; (800a4bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d022      	beq.n	800a482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a444:	d01d      	beq.n	800a482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a1d      	ldr	r2, [pc, #116]	; (800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d018      	beq.n	800a482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	4a1b      	ldr	r2, [pc, #108]	; (800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d013      	beq.n	800a482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a1a      	ldr	r2, [pc, #104]	; (800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d00e      	beq.n	800a482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a18      	ldr	r2, [pc, #96]	; (800a4cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d009      	beq.n	800a482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4a17      	ldr	r2, [pc, #92]	; (800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d004      	beq.n	800a482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a15      	ldr	r2, [pc, #84]	; (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d10c      	bne.n	800a49c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	4313      	orrs	r3, r2
 800a492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68ba      	ldr	r2, [r7, #8]
 800a49a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4ac:	2300      	movs	r3, #0
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	40010000 	.word	0x40010000
 800a4c0:	40000400 	.word	0x40000400
 800a4c4:	40000800 	.word	0x40000800
 800a4c8:	40000c00 	.word	0x40000c00
 800a4cc:	40010400 	.word	0x40010400
 800a4d0:	40014000 	.word	0x40014000
 800a4d4:	40001800 	.word	0x40001800

0800a4d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
 800a4e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4ec:	2b01      	cmp	r3, #1
 800a4ee:	d101      	bne.n	800a4f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a4f0:	2302      	movs	r3, #2
 800a4f2:	e03d      	b.n	800a570 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	4313      	orrs	r3, r2
 800a508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	4313      	orrs	r3, r2
 800a516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	4313      	orrs	r3, r2
 800a524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4313      	orrs	r3, r2
 800a532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	4313      	orrs	r3, r2
 800a540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	695b      	ldr	r3, [r3, #20]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	69db      	ldr	r3, [r3, #28]
 800a55a:	4313      	orrs	r3, r2
 800a55c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2200      	movs	r2, #0
 800a56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3714      	adds	r7, #20
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a584:	bf00      	nop
 800a586:	370c      	adds	r7, #12
 800a588:	46bd      	mov	sp, r7
 800a58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58e:	4770      	bx	lr

0800a590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a590:	b480      	push	{r7}
 800a592:	b083      	sub	sp, #12
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a598:	bf00      	nop
 800a59a:	370c      	adds	r7, #12
 800a59c:	46bd      	mov	sp, r7
 800a59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a2:	4770      	bx	lr

0800a5a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e03f      	b.n	800a636 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d106      	bne.n	800a5d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f7fb ffec 	bl	80065a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2224      	movs	r2, #36	; 0x24
 800a5d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68da      	ldr	r2, [r3, #12]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f000 f90b 	bl	800a804 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	691a      	ldr	r2, [r3, #16]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a5fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	695a      	ldr	r2, [r3, #20]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a60c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68da      	ldr	r2, [r3, #12]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a61c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2200      	movs	r2, #0
 800a622:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2220      	movs	r2, #32
 800a628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2220      	movs	r2, #32
 800a630:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b088      	sub	sp, #32
 800a642:	af02      	add	r7, sp, #8
 800a644:	60f8      	str	r0, [r7, #12]
 800a646:	60b9      	str	r1, [r7, #8]
 800a648:	603b      	str	r3, [r7, #0]
 800a64a:	4613      	mov	r3, r2
 800a64c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800a64e:	2300      	movs	r3, #0
 800a650:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800a658:	b2db      	uxtb	r3, r3
 800a65a:	2b20      	cmp	r3, #32
 800a65c:	f040 8083 	bne.w	800a766 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d002      	beq.n	800a66c <HAL_UART_Transmit+0x2e>
 800a666:	88fb      	ldrh	r3, [r7, #6]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d101      	bne.n	800a670 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	e07b      	b.n	800a768 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a676:	2b01      	cmp	r3, #1
 800a678:	d101      	bne.n	800a67e <HAL_UART_Transmit+0x40>
 800a67a:	2302      	movs	r3, #2
 800a67c:	e074      	b.n	800a768 <HAL_UART_Transmit+0x12a>
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2221      	movs	r2, #33	; 0x21
 800a690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800a694:	f7fc f996 	bl	80069c4 <HAL_GetTick>
 800a698:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	88fa      	ldrh	r2, [r7, #6]
 800a69e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	88fa      	ldrh	r2, [r7, #6]
 800a6a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800a6ae:	e042      	b.n	800a736 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	3b01      	subs	r3, #1
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6c6:	d122      	bne.n	800a70e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2180      	movs	r1, #128	; 0x80
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f000 f84c 	bl	800a770 <UART_WaitOnFlagUntilTimeout>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	e042      	b.n	800a768 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	881b      	ldrh	r3, [r3, #0]
 800a6ea:	461a      	mov	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	691b      	ldr	r3, [r3, #16]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d103      	bne.n	800a706 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	3302      	adds	r3, #2
 800a702:	60bb      	str	r3, [r7, #8]
 800a704:	e017      	b.n	800a736 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	3301      	adds	r3, #1
 800a70a:	60bb      	str	r3, [r7, #8]
 800a70c:	e013      	b.n	800a736 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2200      	movs	r2, #0
 800a716:	2180      	movs	r1, #128	; 0x80
 800a718:	68f8      	ldr	r0, [r7, #12]
 800a71a:	f000 f829 	bl	800a770 <UART_WaitOnFlagUntilTimeout>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d001      	beq.n	800a728 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800a724:	2303      	movs	r3, #3
 800a726:	e01f      	b.n	800a768 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	1c5a      	adds	r2, r3, #1
 800a72c:	60ba      	str	r2, [r7, #8]
 800a72e:	781a      	ldrb	r2, [r3, #0]
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d1b7      	bne.n	800a6b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	9300      	str	r3, [sp, #0]
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	2200      	movs	r2, #0
 800a748:	2140      	movs	r1, #64	; 0x40
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	f000 f810 	bl	800a770 <UART_WaitOnFlagUntilTimeout>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800a756:	2303      	movs	r3, #3
 800a758:	e006      	b.n	800a768 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2220      	movs	r2, #32
 800a75e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	e000      	b.n	800a768 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800a766:	2302      	movs	r3, #2
  }
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3718      	adds	r7, #24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	603b      	str	r3, [r7, #0]
 800a77c:	4613      	mov	r3, r2
 800a77e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a780:	e02c      	b.n	800a7dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a788:	d028      	beq.n	800a7dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a78a:	69bb      	ldr	r3, [r7, #24]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d007      	beq.n	800a7a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a790:	f7fc f918 	bl	80069c4 <HAL_GetTick>
 800a794:	4602      	mov	r2, r0
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	1ad3      	subs	r3, r2, r3
 800a79a:	69ba      	ldr	r2, [r7, #24]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d21d      	bcs.n	800a7dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68da      	ldr	r2, [r3, #12]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	695a      	ldr	r2, [r3, #20]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f022 0201 	bic.w	r2, r2, #1
 800a7be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e00f      	b.n	800a7fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68bb      	ldr	r3, [r7, #8]
 800a7e4:	4013      	ands	r3, r2
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	429a      	cmp	r2, r3
 800a7ea:	bf0c      	ite	eq
 800a7ec:	2301      	moveq	r3, #1
 800a7ee:	2300      	movne	r3, #0
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	79fb      	ldrb	r3, [r7, #7]
 800a7f6:	429a      	cmp	r2, r3
 800a7f8:	d0c3      	beq.n	800a782 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a7fa:	2300      	movs	r3, #0
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	3710      	adds	r7, #16
 800a800:	46bd      	mov	sp, r7
 800a802:	bd80      	pop	{r7, pc}

0800a804 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68da      	ldr	r2, [r3, #12]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	430a      	orrs	r2, r1
 800a822:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	689a      	ldr	r2, [r3, #8]
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	431a      	orrs	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	431a      	orrs	r2, r3
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	4313      	orrs	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800a846:	f023 030c 	bic.w	r3, r3, #12
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	6812      	ldr	r2, [r2, #0]
 800a84e:	68f9      	ldr	r1, [r7, #12]
 800a850:	430b      	orrs	r3, r1
 800a852:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	699a      	ldr	r2, [r3, #24]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	430a      	orrs	r2, r1
 800a868:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	69db      	ldr	r3, [r3, #28]
 800a86e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a872:	f040 818b 	bne.w	800ab8c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4ac1      	ldr	r2, [pc, #772]	; (800ab80 <UART_SetConfig+0x37c>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d005      	beq.n	800a88c <UART_SetConfig+0x88>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	4abf      	ldr	r2, [pc, #764]	; (800ab84 <UART_SetConfig+0x380>)
 800a886:	4293      	cmp	r3, r2
 800a888:	f040 80bd 	bne.w	800aa06 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a88c:	f7fe fa52 	bl	8008d34 <HAL_RCC_GetPCLK2Freq>
 800a890:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	461d      	mov	r5, r3
 800a896:	f04f 0600 	mov.w	r6, #0
 800a89a:	46a8      	mov	r8, r5
 800a89c:	46b1      	mov	r9, r6
 800a89e:	eb18 0308 	adds.w	r3, r8, r8
 800a8a2:	eb49 0409 	adc.w	r4, r9, r9
 800a8a6:	4698      	mov	r8, r3
 800a8a8:	46a1      	mov	r9, r4
 800a8aa:	eb18 0805 	adds.w	r8, r8, r5
 800a8ae:	eb49 0906 	adc.w	r9, r9, r6
 800a8b2:	f04f 0100 	mov.w	r1, #0
 800a8b6:	f04f 0200 	mov.w	r2, #0
 800a8ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a8be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a8c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a8c6:	4688      	mov	r8, r1
 800a8c8:	4691      	mov	r9, r2
 800a8ca:	eb18 0005 	adds.w	r0, r8, r5
 800a8ce:	eb49 0106 	adc.w	r1, r9, r6
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	685b      	ldr	r3, [r3, #4]
 800a8d6:	461d      	mov	r5, r3
 800a8d8:	f04f 0600 	mov.w	r6, #0
 800a8dc:	196b      	adds	r3, r5, r5
 800a8de:	eb46 0406 	adc.w	r4, r6, r6
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	4623      	mov	r3, r4
 800a8e6:	f7f6 f9cf 	bl	8000c88 <__aeabi_uldivmod>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	461a      	mov	r2, r3
 800a8f0:	4ba5      	ldr	r3, [pc, #660]	; (800ab88 <UART_SetConfig+0x384>)
 800a8f2:	fba3 2302 	umull	r2, r3, r3, r2
 800a8f6:	095b      	lsrs	r3, r3, #5
 800a8f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	461d      	mov	r5, r3
 800a900:	f04f 0600 	mov.w	r6, #0
 800a904:	46a9      	mov	r9, r5
 800a906:	46b2      	mov	sl, r6
 800a908:	eb19 0309 	adds.w	r3, r9, r9
 800a90c:	eb4a 040a 	adc.w	r4, sl, sl
 800a910:	4699      	mov	r9, r3
 800a912:	46a2      	mov	sl, r4
 800a914:	eb19 0905 	adds.w	r9, r9, r5
 800a918:	eb4a 0a06 	adc.w	sl, sl, r6
 800a91c:	f04f 0100 	mov.w	r1, #0
 800a920:	f04f 0200 	mov.w	r2, #0
 800a924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a928:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a92c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a930:	4689      	mov	r9, r1
 800a932:	4692      	mov	sl, r2
 800a934:	eb19 0005 	adds.w	r0, r9, r5
 800a938:	eb4a 0106 	adc.w	r1, sl, r6
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	461d      	mov	r5, r3
 800a942:	f04f 0600 	mov.w	r6, #0
 800a946:	196b      	adds	r3, r5, r5
 800a948:	eb46 0406 	adc.w	r4, r6, r6
 800a94c:	461a      	mov	r2, r3
 800a94e:	4623      	mov	r3, r4
 800a950:	f7f6 f99a 	bl	8000c88 <__aeabi_uldivmod>
 800a954:	4603      	mov	r3, r0
 800a956:	460c      	mov	r4, r1
 800a958:	461a      	mov	r2, r3
 800a95a:	4b8b      	ldr	r3, [pc, #556]	; (800ab88 <UART_SetConfig+0x384>)
 800a95c:	fba3 1302 	umull	r1, r3, r3, r2
 800a960:	095b      	lsrs	r3, r3, #5
 800a962:	2164      	movs	r1, #100	; 0x64
 800a964:	fb01 f303 	mul.w	r3, r1, r3
 800a968:	1ad3      	subs	r3, r2, r3
 800a96a:	00db      	lsls	r3, r3, #3
 800a96c:	3332      	adds	r3, #50	; 0x32
 800a96e:	4a86      	ldr	r2, [pc, #536]	; (800ab88 <UART_SetConfig+0x384>)
 800a970:	fba2 2303 	umull	r2, r3, r2, r3
 800a974:	095b      	lsrs	r3, r3, #5
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a97c:	4498      	add	r8, r3
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	461d      	mov	r5, r3
 800a982:	f04f 0600 	mov.w	r6, #0
 800a986:	46a9      	mov	r9, r5
 800a988:	46b2      	mov	sl, r6
 800a98a:	eb19 0309 	adds.w	r3, r9, r9
 800a98e:	eb4a 040a 	adc.w	r4, sl, sl
 800a992:	4699      	mov	r9, r3
 800a994:	46a2      	mov	sl, r4
 800a996:	eb19 0905 	adds.w	r9, r9, r5
 800a99a:	eb4a 0a06 	adc.w	sl, sl, r6
 800a99e:	f04f 0100 	mov.w	r1, #0
 800a9a2:	f04f 0200 	mov.w	r2, #0
 800a9a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a9aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a9ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a9b2:	4689      	mov	r9, r1
 800a9b4:	4692      	mov	sl, r2
 800a9b6:	eb19 0005 	adds.w	r0, r9, r5
 800a9ba:	eb4a 0106 	adc.w	r1, sl, r6
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	461d      	mov	r5, r3
 800a9c4:	f04f 0600 	mov.w	r6, #0
 800a9c8:	196b      	adds	r3, r5, r5
 800a9ca:	eb46 0406 	adc.w	r4, r6, r6
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	4623      	mov	r3, r4
 800a9d2:	f7f6 f959 	bl	8000c88 <__aeabi_uldivmod>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	460c      	mov	r4, r1
 800a9da:	461a      	mov	r2, r3
 800a9dc:	4b6a      	ldr	r3, [pc, #424]	; (800ab88 <UART_SetConfig+0x384>)
 800a9de:	fba3 1302 	umull	r1, r3, r3, r2
 800a9e2:	095b      	lsrs	r3, r3, #5
 800a9e4:	2164      	movs	r1, #100	; 0x64
 800a9e6:	fb01 f303 	mul.w	r3, r1, r3
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	00db      	lsls	r3, r3, #3
 800a9ee:	3332      	adds	r3, #50	; 0x32
 800a9f0:	4a65      	ldr	r2, [pc, #404]	; (800ab88 <UART_SetConfig+0x384>)
 800a9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f6:	095b      	lsrs	r3, r3, #5
 800a9f8:	f003 0207 	and.w	r2, r3, #7
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4442      	add	r2, r8
 800aa02:	609a      	str	r2, [r3, #8]
 800aa04:	e26f      	b.n	800aee6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800aa06:	f7fe f981 	bl	8008d0c <HAL_RCC_GetPCLK1Freq>
 800aa0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	461d      	mov	r5, r3
 800aa10:	f04f 0600 	mov.w	r6, #0
 800aa14:	46a8      	mov	r8, r5
 800aa16:	46b1      	mov	r9, r6
 800aa18:	eb18 0308 	adds.w	r3, r8, r8
 800aa1c:	eb49 0409 	adc.w	r4, r9, r9
 800aa20:	4698      	mov	r8, r3
 800aa22:	46a1      	mov	r9, r4
 800aa24:	eb18 0805 	adds.w	r8, r8, r5
 800aa28:	eb49 0906 	adc.w	r9, r9, r6
 800aa2c:	f04f 0100 	mov.w	r1, #0
 800aa30:	f04f 0200 	mov.w	r2, #0
 800aa34:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800aa38:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800aa3c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800aa40:	4688      	mov	r8, r1
 800aa42:	4691      	mov	r9, r2
 800aa44:	eb18 0005 	adds.w	r0, r8, r5
 800aa48:	eb49 0106 	adc.w	r1, r9, r6
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	461d      	mov	r5, r3
 800aa52:	f04f 0600 	mov.w	r6, #0
 800aa56:	196b      	adds	r3, r5, r5
 800aa58:	eb46 0406 	adc.w	r4, r6, r6
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	4623      	mov	r3, r4
 800aa60:	f7f6 f912 	bl	8000c88 <__aeabi_uldivmod>
 800aa64:	4603      	mov	r3, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	461a      	mov	r2, r3
 800aa6a:	4b47      	ldr	r3, [pc, #284]	; (800ab88 <UART_SetConfig+0x384>)
 800aa6c:	fba3 2302 	umull	r2, r3, r3, r2
 800aa70:	095b      	lsrs	r3, r3, #5
 800aa72:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	461d      	mov	r5, r3
 800aa7a:	f04f 0600 	mov.w	r6, #0
 800aa7e:	46a9      	mov	r9, r5
 800aa80:	46b2      	mov	sl, r6
 800aa82:	eb19 0309 	adds.w	r3, r9, r9
 800aa86:	eb4a 040a 	adc.w	r4, sl, sl
 800aa8a:	4699      	mov	r9, r3
 800aa8c:	46a2      	mov	sl, r4
 800aa8e:	eb19 0905 	adds.w	r9, r9, r5
 800aa92:	eb4a 0a06 	adc.w	sl, sl, r6
 800aa96:	f04f 0100 	mov.w	r1, #0
 800aa9a:	f04f 0200 	mov.w	r2, #0
 800aa9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aaa2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800aaa6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800aaaa:	4689      	mov	r9, r1
 800aaac:	4692      	mov	sl, r2
 800aaae:	eb19 0005 	adds.w	r0, r9, r5
 800aab2:	eb4a 0106 	adc.w	r1, sl, r6
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	461d      	mov	r5, r3
 800aabc:	f04f 0600 	mov.w	r6, #0
 800aac0:	196b      	adds	r3, r5, r5
 800aac2:	eb46 0406 	adc.w	r4, r6, r6
 800aac6:	461a      	mov	r2, r3
 800aac8:	4623      	mov	r3, r4
 800aaca:	f7f6 f8dd 	bl	8000c88 <__aeabi_uldivmod>
 800aace:	4603      	mov	r3, r0
 800aad0:	460c      	mov	r4, r1
 800aad2:	461a      	mov	r2, r3
 800aad4:	4b2c      	ldr	r3, [pc, #176]	; (800ab88 <UART_SetConfig+0x384>)
 800aad6:	fba3 1302 	umull	r1, r3, r3, r2
 800aada:	095b      	lsrs	r3, r3, #5
 800aadc:	2164      	movs	r1, #100	; 0x64
 800aade:	fb01 f303 	mul.w	r3, r1, r3
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	00db      	lsls	r3, r3, #3
 800aae6:	3332      	adds	r3, #50	; 0x32
 800aae8:	4a27      	ldr	r2, [pc, #156]	; (800ab88 <UART_SetConfig+0x384>)
 800aaea:	fba2 2303 	umull	r2, r3, r2, r3
 800aaee:	095b      	lsrs	r3, r3, #5
 800aaf0:	005b      	lsls	r3, r3, #1
 800aaf2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aaf6:	4498      	add	r8, r3
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	461d      	mov	r5, r3
 800aafc:	f04f 0600 	mov.w	r6, #0
 800ab00:	46a9      	mov	r9, r5
 800ab02:	46b2      	mov	sl, r6
 800ab04:	eb19 0309 	adds.w	r3, r9, r9
 800ab08:	eb4a 040a 	adc.w	r4, sl, sl
 800ab0c:	4699      	mov	r9, r3
 800ab0e:	46a2      	mov	sl, r4
 800ab10:	eb19 0905 	adds.w	r9, r9, r5
 800ab14:	eb4a 0a06 	adc.w	sl, sl, r6
 800ab18:	f04f 0100 	mov.w	r1, #0
 800ab1c:	f04f 0200 	mov.w	r2, #0
 800ab20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ab24:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ab28:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ab2c:	4689      	mov	r9, r1
 800ab2e:	4692      	mov	sl, r2
 800ab30:	eb19 0005 	adds.w	r0, r9, r5
 800ab34:	eb4a 0106 	adc.w	r1, sl, r6
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	461d      	mov	r5, r3
 800ab3e:	f04f 0600 	mov.w	r6, #0
 800ab42:	196b      	adds	r3, r5, r5
 800ab44:	eb46 0406 	adc.w	r4, r6, r6
 800ab48:	461a      	mov	r2, r3
 800ab4a:	4623      	mov	r3, r4
 800ab4c:	f7f6 f89c 	bl	8000c88 <__aeabi_uldivmod>
 800ab50:	4603      	mov	r3, r0
 800ab52:	460c      	mov	r4, r1
 800ab54:	461a      	mov	r2, r3
 800ab56:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <UART_SetConfig+0x384>)
 800ab58:	fba3 1302 	umull	r1, r3, r3, r2
 800ab5c:	095b      	lsrs	r3, r3, #5
 800ab5e:	2164      	movs	r1, #100	; 0x64
 800ab60:	fb01 f303 	mul.w	r3, r1, r3
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	00db      	lsls	r3, r3, #3
 800ab68:	3332      	adds	r3, #50	; 0x32
 800ab6a:	4a07      	ldr	r2, [pc, #28]	; (800ab88 <UART_SetConfig+0x384>)
 800ab6c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab70:	095b      	lsrs	r3, r3, #5
 800ab72:	f003 0207 	and.w	r2, r3, #7
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4442      	add	r2, r8
 800ab7c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ab7e:	e1b2      	b.n	800aee6 <UART_SetConfig+0x6e2>
 800ab80:	40011000 	.word	0x40011000
 800ab84:	40011400 	.word	0x40011400
 800ab88:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4ad7      	ldr	r2, [pc, #860]	; (800aef0 <UART_SetConfig+0x6ec>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d005      	beq.n	800aba2 <UART_SetConfig+0x39e>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4ad6      	ldr	r2, [pc, #856]	; (800aef4 <UART_SetConfig+0x6f0>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	f040 80d1 	bne.w	800ad44 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800aba2:	f7fe f8c7 	bl	8008d34 <HAL_RCC_GetPCLK2Freq>
 800aba6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	469a      	mov	sl, r3
 800abac:	f04f 0b00 	mov.w	fp, #0
 800abb0:	46d0      	mov	r8, sl
 800abb2:	46d9      	mov	r9, fp
 800abb4:	eb18 0308 	adds.w	r3, r8, r8
 800abb8:	eb49 0409 	adc.w	r4, r9, r9
 800abbc:	4698      	mov	r8, r3
 800abbe:	46a1      	mov	r9, r4
 800abc0:	eb18 080a 	adds.w	r8, r8, sl
 800abc4:	eb49 090b 	adc.w	r9, r9, fp
 800abc8:	f04f 0100 	mov.w	r1, #0
 800abcc:	f04f 0200 	mov.w	r2, #0
 800abd0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800abd4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800abd8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800abdc:	4688      	mov	r8, r1
 800abde:	4691      	mov	r9, r2
 800abe0:	eb1a 0508 	adds.w	r5, sl, r8
 800abe4:	eb4b 0609 	adc.w	r6, fp, r9
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	4619      	mov	r1, r3
 800abee:	f04f 0200 	mov.w	r2, #0
 800abf2:	f04f 0300 	mov.w	r3, #0
 800abf6:	f04f 0400 	mov.w	r4, #0
 800abfa:	0094      	lsls	r4, r2, #2
 800abfc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac00:	008b      	lsls	r3, r1, #2
 800ac02:	461a      	mov	r2, r3
 800ac04:	4623      	mov	r3, r4
 800ac06:	4628      	mov	r0, r5
 800ac08:	4631      	mov	r1, r6
 800ac0a:	f7f6 f83d 	bl	8000c88 <__aeabi_uldivmod>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	460c      	mov	r4, r1
 800ac12:	461a      	mov	r2, r3
 800ac14:	4bb8      	ldr	r3, [pc, #736]	; (800aef8 <UART_SetConfig+0x6f4>)
 800ac16:	fba3 2302 	umull	r2, r3, r3, r2
 800ac1a:	095b      	lsrs	r3, r3, #5
 800ac1c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ac20:	68bb      	ldr	r3, [r7, #8]
 800ac22:	469b      	mov	fp, r3
 800ac24:	f04f 0c00 	mov.w	ip, #0
 800ac28:	46d9      	mov	r9, fp
 800ac2a:	46e2      	mov	sl, ip
 800ac2c:	eb19 0309 	adds.w	r3, r9, r9
 800ac30:	eb4a 040a 	adc.w	r4, sl, sl
 800ac34:	4699      	mov	r9, r3
 800ac36:	46a2      	mov	sl, r4
 800ac38:	eb19 090b 	adds.w	r9, r9, fp
 800ac3c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ac40:	f04f 0100 	mov.w	r1, #0
 800ac44:	f04f 0200 	mov.w	r2, #0
 800ac48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ac4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ac50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ac54:	4689      	mov	r9, r1
 800ac56:	4692      	mov	sl, r2
 800ac58:	eb1b 0509 	adds.w	r5, fp, r9
 800ac5c:	eb4c 060a 	adc.w	r6, ip, sl
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	4619      	mov	r1, r3
 800ac66:	f04f 0200 	mov.w	r2, #0
 800ac6a:	f04f 0300 	mov.w	r3, #0
 800ac6e:	f04f 0400 	mov.w	r4, #0
 800ac72:	0094      	lsls	r4, r2, #2
 800ac74:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ac78:	008b      	lsls	r3, r1, #2
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	4623      	mov	r3, r4
 800ac7e:	4628      	mov	r0, r5
 800ac80:	4631      	mov	r1, r6
 800ac82:	f7f6 f801 	bl	8000c88 <__aeabi_uldivmod>
 800ac86:	4603      	mov	r3, r0
 800ac88:	460c      	mov	r4, r1
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	4b9a      	ldr	r3, [pc, #616]	; (800aef8 <UART_SetConfig+0x6f4>)
 800ac8e:	fba3 1302 	umull	r1, r3, r3, r2
 800ac92:	095b      	lsrs	r3, r3, #5
 800ac94:	2164      	movs	r1, #100	; 0x64
 800ac96:	fb01 f303 	mul.w	r3, r1, r3
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	011b      	lsls	r3, r3, #4
 800ac9e:	3332      	adds	r3, #50	; 0x32
 800aca0:	4a95      	ldr	r2, [pc, #596]	; (800aef8 <UART_SetConfig+0x6f4>)
 800aca2:	fba2 2303 	umull	r2, r3, r2, r3
 800aca6:	095b      	lsrs	r3, r3, #5
 800aca8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acac:	4498      	add	r8, r3
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	469b      	mov	fp, r3
 800acb2:	f04f 0c00 	mov.w	ip, #0
 800acb6:	46d9      	mov	r9, fp
 800acb8:	46e2      	mov	sl, ip
 800acba:	eb19 0309 	adds.w	r3, r9, r9
 800acbe:	eb4a 040a 	adc.w	r4, sl, sl
 800acc2:	4699      	mov	r9, r3
 800acc4:	46a2      	mov	sl, r4
 800acc6:	eb19 090b 	adds.w	r9, r9, fp
 800acca:	eb4a 0a0c 	adc.w	sl, sl, ip
 800acce:	f04f 0100 	mov.w	r1, #0
 800acd2:	f04f 0200 	mov.w	r2, #0
 800acd6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800acda:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800acde:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ace2:	4689      	mov	r9, r1
 800ace4:	4692      	mov	sl, r2
 800ace6:	eb1b 0509 	adds.w	r5, fp, r9
 800acea:	eb4c 060a 	adc.w	r6, ip, sl
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	4619      	mov	r1, r3
 800acf4:	f04f 0200 	mov.w	r2, #0
 800acf8:	f04f 0300 	mov.w	r3, #0
 800acfc:	f04f 0400 	mov.w	r4, #0
 800ad00:	0094      	lsls	r4, r2, #2
 800ad02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ad06:	008b      	lsls	r3, r1, #2
 800ad08:	461a      	mov	r2, r3
 800ad0a:	4623      	mov	r3, r4
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	4631      	mov	r1, r6
 800ad10:	f7f5 ffba 	bl	8000c88 <__aeabi_uldivmod>
 800ad14:	4603      	mov	r3, r0
 800ad16:	460c      	mov	r4, r1
 800ad18:	461a      	mov	r2, r3
 800ad1a:	4b77      	ldr	r3, [pc, #476]	; (800aef8 <UART_SetConfig+0x6f4>)
 800ad1c:	fba3 1302 	umull	r1, r3, r3, r2
 800ad20:	095b      	lsrs	r3, r3, #5
 800ad22:	2164      	movs	r1, #100	; 0x64
 800ad24:	fb01 f303 	mul.w	r3, r1, r3
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	011b      	lsls	r3, r3, #4
 800ad2c:	3332      	adds	r3, #50	; 0x32
 800ad2e:	4a72      	ldr	r2, [pc, #456]	; (800aef8 <UART_SetConfig+0x6f4>)
 800ad30:	fba2 2303 	umull	r2, r3, r2, r3
 800ad34:	095b      	lsrs	r3, r3, #5
 800ad36:	f003 020f 	and.w	r2, r3, #15
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	4442      	add	r2, r8
 800ad40:	609a      	str	r2, [r3, #8]
 800ad42:	e0d0      	b.n	800aee6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800ad44:	f7fd ffe2 	bl	8008d0c <HAL_RCC_GetPCLK1Freq>
 800ad48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	469a      	mov	sl, r3
 800ad4e:	f04f 0b00 	mov.w	fp, #0
 800ad52:	46d0      	mov	r8, sl
 800ad54:	46d9      	mov	r9, fp
 800ad56:	eb18 0308 	adds.w	r3, r8, r8
 800ad5a:	eb49 0409 	adc.w	r4, r9, r9
 800ad5e:	4698      	mov	r8, r3
 800ad60:	46a1      	mov	r9, r4
 800ad62:	eb18 080a 	adds.w	r8, r8, sl
 800ad66:	eb49 090b 	adc.w	r9, r9, fp
 800ad6a:	f04f 0100 	mov.w	r1, #0
 800ad6e:	f04f 0200 	mov.w	r2, #0
 800ad72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800ad76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800ad7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800ad7e:	4688      	mov	r8, r1
 800ad80:	4691      	mov	r9, r2
 800ad82:	eb1a 0508 	adds.w	r5, sl, r8
 800ad86:	eb4b 0609 	adc.w	r6, fp, r9
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	4619      	mov	r1, r3
 800ad90:	f04f 0200 	mov.w	r2, #0
 800ad94:	f04f 0300 	mov.w	r3, #0
 800ad98:	f04f 0400 	mov.w	r4, #0
 800ad9c:	0094      	lsls	r4, r2, #2
 800ad9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ada2:	008b      	lsls	r3, r1, #2
 800ada4:	461a      	mov	r2, r3
 800ada6:	4623      	mov	r3, r4
 800ada8:	4628      	mov	r0, r5
 800adaa:	4631      	mov	r1, r6
 800adac:	f7f5 ff6c 	bl	8000c88 <__aeabi_uldivmod>
 800adb0:	4603      	mov	r3, r0
 800adb2:	460c      	mov	r4, r1
 800adb4:	461a      	mov	r2, r3
 800adb6:	4b50      	ldr	r3, [pc, #320]	; (800aef8 <UART_SetConfig+0x6f4>)
 800adb8:	fba3 2302 	umull	r2, r3, r3, r2
 800adbc:	095b      	lsrs	r3, r3, #5
 800adbe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	469b      	mov	fp, r3
 800adc6:	f04f 0c00 	mov.w	ip, #0
 800adca:	46d9      	mov	r9, fp
 800adcc:	46e2      	mov	sl, ip
 800adce:	eb19 0309 	adds.w	r3, r9, r9
 800add2:	eb4a 040a 	adc.w	r4, sl, sl
 800add6:	4699      	mov	r9, r3
 800add8:	46a2      	mov	sl, r4
 800adda:	eb19 090b 	adds.w	r9, r9, fp
 800adde:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ade2:	f04f 0100 	mov.w	r1, #0
 800ade6:	f04f 0200 	mov.w	r2, #0
 800adea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800adee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800adf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800adf6:	4689      	mov	r9, r1
 800adf8:	4692      	mov	sl, r2
 800adfa:	eb1b 0509 	adds.w	r5, fp, r9
 800adfe:	eb4c 060a 	adc.w	r6, ip, sl
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	4619      	mov	r1, r3
 800ae08:	f04f 0200 	mov.w	r2, #0
 800ae0c:	f04f 0300 	mov.w	r3, #0
 800ae10:	f04f 0400 	mov.w	r4, #0
 800ae14:	0094      	lsls	r4, r2, #2
 800ae16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ae1a:	008b      	lsls	r3, r1, #2
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	4623      	mov	r3, r4
 800ae20:	4628      	mov	r0, r5
 800ae22:	4631      	mov	r1, r6
 800ae24:	f7f5 ff30 	bl	8000c88 <__aeabi_uldivmod>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	460c      	mov	r4, r1
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	4b32      	ldr	r3, [pc, #200]	; (800aef8 <UART_SetConfig+0x6f4>)
 800ae30:	fba3 1302 	umull	r1, r3, r3, r2
 800ae34:	095b      	lsrs	r3, r3, #5
 800ae36:	2164      	movs	r1, #100	; 0x64
 800ae38:	fb01 f303 	mul.w	r3, r1, r3
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	011b      	lsls	r3, r3, #4
 800ae40:	3332      	adds	r3, #50	; 0x32
 800ae42:	4a2d      	ldr	r2, [pc, #180]	; (800aef8 <UART_SetConfig+0x6f4>)
 800ae44:	fba2 2303 	umull	r2, r3, r2, r3
 800ae48:	095b      	lsrs	r3, r3, #5
 800ae4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae4e:	4498      	add	r8, r3
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	469b      	mov	fp, r3
 800ae54:	f04f 0c00 	mov.w	ip, #0
 800ae58:	46d9      	mov	r9, fp
 800ae5a:	46e2      	mov	sl, ip
 800ae5c:	eb19 0309 	adds.w	r3, r9, r9
 800ae60:	eb4a 040a 	adc.w	r4, sl, sl
 800ae64:	4699      	mov	r9, r3
 800ae66:	46a2      	mov	sl, r4
 800ae68:	eb19 090b 	adds.w	r9, r9, fp
 800ae6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ae70:	f04f 0100 	mov.w	r1, #0
 800ae74:	f04f 0200 	mov.w	r2, #0
 800ae78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ae7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ae80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ae84:	4689      	mov	r9, r1
 800ae86:	4692      	mov	sl, r2
 800ae88:	eb1b 0509 	adds.w	r5, fp, r9
 800ae8c:	eb4c 060a 	adc.w	r6, ip, sl
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	4619      	mov	r1, r3
 800ae96:	f04f 0200 	mov.w	r2, #0
 800ae9a:	f04f 0300 	mov.w	r3, #0
 800ae9e:	f04f 0400 	mov.w	r4, #0
 800aea2:	0094      	lsls	r4, r2, #2
 800aea4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800aea8:	008b      	lsls	r3, r1, #2
 800aeaa:	461a      	mov	r2, r3
 800aeac:	4623      	mov	r3, r4
 800aeae:	4628      	mov	r0, r5
 800aeb0:	4631      	mov	r1, r6
 800aeb2:	f7f5 fee9 	bl	8000c88 <__aeabi_uldivmod>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	460c      	mov	r4, r1
 800aeba:	461a      	mov	r2, r3
 800aebc:	4b0e      	ldr	r3, [pc, #56]	; (800aef8 <UART_SetConfig+0x6f4>)
 800aebe:	fba3 1302 	umull	r1, r3, r3, r2
 800aec2:	095b      	lsrs	r3, r3, #5
 800aec4:	2164      	movs	r1, #100	; 0x64
 800aec6:	fb01 f303 	mul.w	r3, r1, r3
 800aeca:	1ad3      	subs	r3, r2, r3
 800aecc:	011b      	lsls	r3, r3, #4
 800aece:	3332      	adds	r3, #50	; 0x32
 800aed0:	4a09      	ldr	r2, [pc, #36]	; (800aef8 <UART_SetConfig+0x6f4>)
 800aed2:	fba2 2303 	umull	r2, r3, r2, r3
 800aed6:	095b      	lsrs	r3, r3, #5
 800aed8:	f003 020f 	and.w	r2, r3, #15
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4442      	add	r2, r8
 800aee2:	609a      	str	r2, [r3, #8]
}
 800aee4:	e7ff      	b.n	800aee6 <UART_SetConfig+0x6e2>
 800aee6:	bf00      	nop
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef0:	40011000 	.word	0x40011000
 800aef4:	40011400 	.word	0x40011400
 800aef8:	51eb851f 	.word	0x51eb851f

0800aefc <__errno>:
 800aefc:	4b01      	ldr	r3, [pc, #4]	; (800af04 <__errno+0x8>)
 800aefe:	6818      	ldr	r0, [r3, #0]
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	20000040 	.word	0x20000040

0800af08 <__libc_init_array>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	4e0d      	ldr	r6, [pc, #52]	; (800af40 <__libc_init_array+0x38>)
 800af0c:	4c0d      	ldr	r4, [pc, #52]	; (800af44 <__libc_init_array+0x3c>)
 800af0e:	1ba4      	subs	r4, r4, r6
 800af10:	10a4      	asrs	r4, r4, #2
 800af12:	2500      	movs	r5, #0
 800af14:	42a5      	cmp	r5, r4
 800af16:	d109      	bne.n	800af2c <__libc_init_array+0x24>
 800af18:	4e0b      	ldr	r6, [pc, #44]	; (800af48 <__libc_init_array+0x40>)
 800af1a:	4c0c      	ldr	r4, [pc, #48]	; (800af4c <__libc_init_array+0x44>)
 800af1c:	f004 fa5e 	bl	800f3dc <_init>
 800af20:	1ba4      	subs	r4, r4, r6
 800af22:	10a4      	asrs	r4, r4, #2
 800af24:	2500      	movs	r5, #0
 800af26:	42a5      	cmp	r5, r4
 800af28:	d105      	bne.n	800af36 <__libc_init_array+0x2e>
 800af2a:	bd70      	pop	{r4, r5, r6, pc}
 800af2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af30:	4798      	blx	r3
 800af32:	3501      	adds	r5, #1
 800af34:	e7ee      	b.n	800af14 <__libc_init_array+0xc>
 800af36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800af3a:	4798      	blx	r3
 800af3c:	3501      	adds	r5, #1
 800af3e:	e7f2      	b.n	800af26 <__libc_init_array+0x1e>
 800af40:	0800f798 	.word	0x0800f798
 800af44:	0800f798 	.word	0x0800f798
 800af48:	0800f798 	.word	0x0800f798
 800af4c:	0800f79c 	.word	0x0800f79c

0800af50 <memcpy>:
 800af50:	b510      	push	{r4, lr}
 800af52:	1e43      	subs	r3, r0, #1
 800af54:	440a      	add	r2, r1
 800af56:	4291      	cmp	r1, r2
 800af58:	d100      	bne.n	800af5c <memcpy+0xc>
 800af5a:	bd10      	pop	{r4, pc}
 800af5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af64:	e7f7      	b.n	800af56 <memcpy+0x6>

0800af66 <memset>:
 800af66:	4402      	add	r2, r0
 800af68:	4603      	mov	r3, r0
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d100      	bne.n	800af70 <memset+0xa>
 800af6e:	4770      	bx	lr
 800af70:	f803 1b01 	strb.w	r1, [r3], #1
 800af74:	e7f9      	b.n	800af6a <memset+0x4>

0800af76 <__cvt>:
 800af76:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af7a:	ec55 4b10 	vmov	r4, r5, d0
 800af7e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800af80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af84:	2d00      	cmp	r5, #0
 800af86:	460e      	mov	r6, r1
 800af88:	4691      	mov	r9, r2
 800af8a:	4619      	mov	r1, r3
 800af8c:	bfb8      	it	lt
 800af8e:	4622      	movlt	r2, r4
 800af90:	462b      	mov	r3, r5
 800af92:	f027 0720 	bic.w	r7, r7, #32
 800af96:	bfbb      	ittet	lt
 800af98:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800af9c:	461d      	movlt	r5, r3
 800af9e:	2300      	movge	r3, #0
 800afa0:	232d      	movlt	r3, #45	; 0x2d
 800afa2:	bfb8      	it	lt
 800afa4:	4614      	movlt	r4, r2
 800afa6:	2f46      	cmp	r7, #70	; 0x46
 800afa8:	700b      	strb	r3, [r1, #0]
 800afaa:	d004      	beq.n	800afb6 <__cvt+0x40>
 800afac:	2f45      	cmp	r7, #69	; 0x45
 800afae:	d100      	bne.n	800afb2 <__cvt+0x3c>
 800afb0:	3601      	adds	r6, #1
 800afb2:	2102      	movs	r1, #2
 800afb4:	e000      	b.n	800afb8 <__cvt+0x42>
 800afb6:	2103      	movs	r1, #3
 800afb8:	ab03      	add	r3, sp, #12
 800afba:	9301      	str	r3, [sp, #4]
 800afbc:	ab02      	add	r3, sp, #8
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	4632      	mov	r2, r6
 800afc2:	4653      	mov	r3, sl
 800afc4:	ec45 4b10 	vmov	d0, r4, r5
 800afc8:	f001 feb2 	bl	800cd30 <_dtoa_r>
 800afcc:	2f47      	cmp	r7, #71	; 0x47
 800afce:	4680      	mov	r8, r0
 800afd0:	d102      	bne.n	800afd8 <__cvt+0x62>
 800afd2:	f019 0f01 	tst.w	r9, #1
 800afd6:	d026      	beq.n	800b026 <__cvt+0xb0>
 800afd8:	2f46      	cmp	r7, #70	; 0x46
 800afda:	eb08 0906 	add.w	r9, r8, r6
 800afde:	d111      	bne.n	800b004 <__cvt+0x8e>
 800afe0:	f898 3000 	ldrb.w	r3, [r8]
 800afe4:	2b30      	cmp	r3, #48	; 0x30
 800afe6:	d10a      	bne.n	800affe <__cvt+0x88>
 800afe8:	2200      	movs	r2, #0
 800afea:	2300      	movs	r3, #0
 800afec:	4620      	mov	r0, r4
 800afee:	4629      	mov	r1, r5
 800aff0:	f7f5 fd6a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aff4:	b918      	cbnz	r0, 800affe <__cvt+0x88>
 800aff6:	f1c6 0601 	rsb	r6, r6, #1
 800affa:	f8ca 6000 	str.w	r6, [sl]
 800affe:	f8da 3000 	ldr.w	r3, [sl]
 800b002:	4499      	add	r9, r3
 800b004:	2200      	movs	r2, #0
 800b006:	2300      	movs	r3, #0
 800b008:	4620      	mov	r0, r4
 800b00a:	4629      	mov	r1, r5
 800b00c:	f7f5 fd5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b010:	b938      	cbnz	r0, 800b022 <__cvt+0xac>
 800b012:	2230      	movs	r2, #48	; 0x30
 800b014:	9b03      	ldr	r3, [sp, #12]
 800b016:	454b      	cmp	r3, r9
 800b018:	d205      	bcs.n	800b026 <__cvt+0xb0>
 800b01a:	1c59      	adds	r1, r3, #1
 800b01c:	9103      	str	r1, [sp, #12]
 800b01e:	701a      	strb	r2, [r3, #0]
 800b020:	e7f8      	b.n	800b014 <__cvt+0x9e>
 800b022:	f8cd 900c 	str.w	r9, [sp, #12]
 800b026:	9b03      	ldr	r3, [sp, #12]
 800b028:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b02a:	eba3 0308 	sub.w	r3, r3, r8
 800b02e:	4640      	mov	r0, r8
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	b004      	add	sp, #16
 800b034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b038 <__exponent>:
 800b038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b03a:	2900      	cmp	r1, #0
 800b03c:	4604      	mov	r4, r0
 800b03e:	bfba      	itte	lt
 800b040:	4249      	neglt	r1, r1
 800b042:	232d      	movlt	r3, #45	; 0x2d
 800b044:	232b      	movge	r3, #43	; 0x2b
 800b046:	2909      	cmp	r1, #9
 800b048:	f804 2b02 	strb.w	r2, [r4], #2
 800b04c:	7043      	strb	r3, [r0, #1]
 800b04e:	dd20      	ble.n	800b092 <__exponent+0x5a>
 800b050:	f10d 0307 	add.w	r3, sp, #7
 800b054:	461f      	mov	r7, r3
 800b056:	260a      	movs	r6, #10
 800b058:	fb91 f5f6 	sdiv	r5, r1, r6
 800b05c:	fb06 1115 	mls	r1, r6, r5, r1
 800b060:	3130      	adds	r1, #48	; 0x30
 800b062:	2d09      	cmp	r5, #9
 800b064:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b068:	f103 32ff 	add.w	r2, r3, #4294967295
 800b06c:	4629      	mov	r1, r5
 800b06e:	dc09      	bgt.n	800b084 <__exponent+0x4c>
 800b070:	3130      	adds	r1, #48	; 0x30
 800b072:	3b02      	subs	r3, #2
 800b074:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b078:	42bb      	cmp	r3, r7
 800b07a:	4622      	mov	r2, r4
 800b07c:	d304      	bcc.n	800b088 <__exponent+0x50>
 800b07e:	1a10      	subs	r0, r2, r0
 800b080:	b003      	add	sp, #12
 800b082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b084:	4613      	mov	r3, r2
 800b086:	e7e7      	b.n	800b058 <__exponent+0x20>
 800b088:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b08c:	f804 2b01 	strb.w	r2, [r4], #1
 800b090:	e7f2      	b.n	800b078 <__exponent+0x40>
 800b092:	2330      	movs	r3, #48	; 0x30
 800b094:	4419      	add	r1, r3
 800b096:	7083      	strb	r3, [r0, #2]
 800b098:	1d02      	adds	r2, r0, #4
 800b09a:	70c1      	strb	r1, [r0, #3]
 800b09c:	e7ef      	b.n	800b07e <__exponent+0x46>
	...

0800b0a0 <_printf_float>:
 800b0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0a4:	b08d      	sub	sp, #52	; 0x34
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b0ac:	4616      	mov	r6, r2
 800b0ae:	461f      	mov	r7, r3
 800b0b0:	4605      	mov	r5, r0
 800b0b2:	f003 f89b 	bl	800e1ec <_localeconv_r>
 800b0b6:	6803      	ldr	r3, [r0, #0]
 800b0b8:	9304      	str	r3, [sp, #16]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f7f5 f888 	bl	80001d0 <strlen>
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	930a      	str	r3, [sp, #40]	; 0x28
 800b0c4:	f8d8 3000 	ldr.w	r3, [r8]
 800b0c8:	9005      	str	r0, [sp, #20]
 800b0ca:	3307      	adds	r3, #7
 800b0cc:	f023 0307 	bic.w	r3, r3, #7
 800b0d0:	f103 0208 	add.w	r2, r3, #8
 800b0d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b0d8:	f8d4 b000 	ldr.w	fp, [r4]
 800b0dc:	f8c8 2000 	str.w	r2, [r8]
 800b0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b0e8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b0ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b0f0:	9307      	str	r3, [sp, #28]
 800b0f2:	f8cd 8018 	str.w	r8, [sp, #24]
 800b0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b0fa:	4ba7      	ldr	r3, [pc, #668]	; (800b398 <_printf_float+0x2f8>)
 800b0fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b100:	f7f5 fd14 	bl	8000b2c <__aeabi_dcmpun>
 800b104:	bb70      	cbnz	r0, 800b164 <_printf_float+0xc4>
 800b106:	f04f 32ff 	mov.w	r2, #4294967295
 800b10a:	4ba3      	ldr	r3, [pc, #652]	; (800b398 <_printf_float+0x2f8>)
 800b10c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b110:	f7f5 fcee 	bl	8000af0 <__aeabi_dcmple>
 800b114:	bb30      	cbnz	r0, 800b164 <_printf_float+0xc4>
 800b116:	2200      	movs	r2, #0
 800b118:	2300      	movs	r3, #0
 800b11a:	4640      	mov	r0, r8
 800b11c:	4649      	mov	r1, r9
 800b11e:	f7f5 fcdd 	bl	8000adc <__aeabi_dcmplt>
 800b122:	b110      	cbz	r0, 800b12a <_printf_float+0x8a>
 800b124:	232d      	movs	r3, #45	; 0x2d
 800b126:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b12a:	4a9c      	ldr	r2, [pc, #624]	; (800b39c <_printf_float+0x2fc>)
 800b12c:	4b9c      	ldr	r3, [pc, #624]	; (800b3a0 <_printf_float+0x300>)
 800b12e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b132:	bf8c      	ite	hi
 800b134:	4690      	movhi	r8, r2
 800b136:	4698      	movls	r8, r3
 800b138:	2303      	movs	r3, #3
 800b13a:	f02b 0204 	bic.w	r2, fp, #4
 800b13e:	6123      	str	r3, [r4, #16]
 800b140:	6022      	str	r2, [r4, #0]
 800b142:	f04f 0900 	mov.w	r9, #0
 800b146:	9700      	str	r7, [sp, #0]
 800b148:	4633      	mov	r3, r6
 800b14a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b14c:	4621      	mov	r1, r4
 800b14e:	4628      	mov	r0, r5
 800b150:	f000 f9e6 	bl	800b520 <_printf_common>
 800b154:	3001      	adds	r0, #1
 800b156:	f040 808d 	bne.w	800b274 <_printf_float+0x1d4>
 800b15a:	f04f 30ff 	mov.w	r0, #4294967295
 800b15e:	b00d      	add	sp, #52	; 0x34
 800b160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b164:	4642      	mov	r2, r8
 800b166:	464b      	mov	r3, r9
 800b168:	4640      	mov	r0, r8
 800b16a:	4649      	mov	r1, r9
 800b16c:	f7f5 fcde 	bl	8000b2c <__aeabi_dcmpun>
 800b170:	b110      	cbz	r0, 800b178 <_printf_float+0xd8>
 800b172:	4a8c      	ldr	r2, [pc, #560]	; (800b3a4 <_printf_float+0x304>)
 800b174:	4b8c      	ldr	r3, [pc, #560]	; (800b3a8 <_printf_float+0x308>)
 800b176:	e7da      	b.n	800b12e <_printf_float+0x8e>
 800b178:	6861      	ldr	r1, [r4, #4]
 800b17a:	1c4b      	adds	r3, r1, #1
 800b17c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b180:	a80a      	add	r0, sp, #40	; 0x28
 800b182:	d13e      	bne.n	800b202 <_printf_float+0x162>
 800b184:	2306      	movs	r3, #6
 800b186:	6063      	str	r3, [r4, #4]
 800b188:	2300      	movs	r3, #0
 800b18a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b18e:	ab09      	add	r3, sp, #36	; 0x24
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	ec49 8b10 	vmov	d0, r8, r9
 800b196:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b19a:	6022      	str	r2, [r4, #0]
 800b19c:	f8cd a004 	str.w	sl, [sp, #4]
 800b1a0:	6861      	ldr	r1, [r4, #4]
 800b1a2:	4628      	mov	r0, r5
 800b1a4:	f7ff fee7 	bl	800af76 <__cvt>
 800b1a8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b1ac:	2b47      	cmp	r3, #71	; 0x47
 800b1ae:	4680      	mov	r8, r0
 800b1b0:	d109      	bne.n	800b1c6 <_printf_float+0x126>
 800b1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b4:	1cd8      	adds	r0, r3, #3
 800b1b6:	db02      	blt.n	800b1be <_printf_float+0x11e>
 800b1b8:	6862      	ldr	r2, [r4, #4]
 800b1ba:	4293      	cmp	r3, r2
 800b1bc:	dd47      	ble.n	800b24e <_printf_float+0x1ae>
 800b1be:	f1aa 0a02 	sub.w	sl, sl, #2
 800b1c2:	fa5f fa8a 	uxtb.w	sl, sl
 800b1c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b1ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1cc:	d824      	bhi.n	800b218 <_printf_float+0x178>
 800b1ce:	3901      	subs	r1, #1
 800b1d0:	4652      	mov	r2, sl
 800b1d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b1d6:	9109      	str	r1, [sp, #36]	; 0x24
 800b1d8:	f7ff ff2e 	bl	800b038 <__exponent>
 800b1dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1de:	1813      	adds	r3, r2, r0
 800b1e0:	2a01      	cmp	r2, #1
 800b1e2:	4681      	mov	r9, r0
 800b1e4:	6123      	str	r3, [r4, #16]
 800b1e6:	dc02      	bgt.n	800b1ee <_printf_float+0x14e>
 800b1e8:	6822      	ldr	r2, [r4, #0]
 800b1ea:	07d1      	lsls	r1, r2, #31
 800b1ec:	d501      	bpl.n	800b1f2 <_printf_float+0x152>
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	6123      	str	r3, [r4, #16]
 800b1f2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d0a5      	beq.n	800b146 <_printf_float+0xa6>
 800b1fa:	232d      	movs	r3, #45	; 0x2d
 800b1fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b200:	e7a1      	b.n	800b146 <_printf_float+0xa6>
 800b202:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b206:	f000 8177 	beq.w	800b4f8 <_printf_float+0x458>
 800b20a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b20e:	d1bb      	bne.n	800b188 <_printf_float+0xe8>
 800b210:	2900      	cmp	r1, #0
 800b212:	d1b9      	bne.n	800b188 <_printf_float+0xe8>
 800b214:	2301      	movs	r3, #1
 800b216:	e7b6      	b.n	800b186 <_printf_float+0xe6>
 800b218:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b21c:	d119      	bne.n	800b252 <_printf_float+0x1b2>
 800b21e:	2900      	cmp	r1, #0
 800b220:	6863      	ldr	r3, [r4, #4]
 800b222:	dd0c      	ble.n	800b23e <_printf_float+0x19e>
 800b224:	6121      	str	r1, [r4, #16]
 800b226:	b913      	cbnz	r3, 800b22e <_printf_float+0x18e>
 800b228:	6822      	ldr	r2, [r4, #0]
 800b22a:	07d2      	lsls	r2, r2, #31
 800b22c:	d502      	bpl.n	800b234 <_printf_float+0x194>
 800b22e:	3301      	adds	r3, #1
 800b230:	440b      	add	r3, r1
 800b232:	6123      	str	r3, [r4, #16]
 800b234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b236:	65a3      	str	r3, [r4, #88]	; 0x58
 800b238:	f04f 0900 	mov.w	r9, #0
 800b23c:	e7d9      	b.n	800b1f2 <_printf_float+0x152>
 800b23e:	b913      	cbnz	r3, 800b246 <_printf_float+0x1a6>
 800b240:	6822      	ldr	r2, [r4, #0]
 800b242:	07d0      	lsls	r0, r2, #31
 800b244:	d501      	bpl.n	800b24a <_printf_float+0x1aa>
 800b246:	3302      	adds	r3, #2
 800b248:	e7f3      	b.n	800b232 <_printf_float+0x192>
 800b24a:	2301      	movs	r3, #1
 800b24c:	e7f1      	b.n	800b232 <_printf_float+0x192>
 800b24e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b252:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b256:	4293      	cmp	r3, r2
 800b258:	db05      	blt.n	800b266 <_printf_float+0x1c6>
 800b25a:	6822      	ldr	r2, [r4, #0]
 800b25c:	6123      	str	r3, [r4, #16]
 800b25e:	07d1      	lsls	r1, r2, #31
 800b260:	d5e8      	bpl.n	800b234 <_printf_float+0x194>
 800b262:	3301      	adds	r3, #1
 800b264:	e7e5      	b.n	800b232 <_printf_float+0x192>
 800b266:	2b00      	cmp	r3, #0
 800b268:	bfd4      	ite	le
 800b26a:	f1c3 0302 	rsble	r3, r3, #2
 800b26e:	2301      	movgt	r3, #1
 800b270:	4413      	add	r3, r2
 800b272:	e7de      	b.n	800b232 <_printf_float+0x192>
 800b274:	6823      	ldr	r3, [r4, #0]
 800b276:	055a      	lsls	r2, r3, #21
 800b278:	d407      	bmi.n	800b28a <_printf_float+0x1ea>
 800b27a:	6923      	ldr	r3, [r4, #16]
 800b27c:	4642      	mov	r2, r8
 800b27e:	4631      	mov	r1, r6
 800b280:	4628      	mov	r0, r5
 800b282:	47b8      	blx	r7
 800b284:	3001      	adds	r0, #1
 800b286:	d12b      	bne.n	800b2e0 <_printf_float+0x240>
 800b288:	e767      	b.n	800b15a <_printf_float+0xba>
 800b28a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b28e:	f240 80dc 	bls.w	800b44a <_printf_float+0x3aa>
 800b292:	2200      	movs	r2, #0
 800b294:	2300      	movs	r3, #0
 800b296:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b29a:	f7f5 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d033      	beq.n	800b30a <_printf_float+0x26a>
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	4a41      	ldr	r2, [pc, #260]	; (800b3ac <_printf_float+0x30c>)
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	47b8      	blx	r7
 800b2ac:	3001      	adds	r0, #1
 800b2ae:	f43f af54 	beq.w	800b15a <_printf_float+0xba>
 800b2b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	db02      	blt.n	800b2c0 <_printf_float+0x220>
 800b2ba:	6823      	ldr	r3, [r4, #0]
 800b2bc:	07d8      	lsls	r0, r3, #31
 800b2be:	d50f      	bpl.n	800b2e0 <_printf_float+0x240>
 800b2c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2c4:	4631      	mov	r1, r6
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	47b8      	blx	r7
 800b2ca:	3001      	adds	r0, #1
 800b2cc:	f43f af45 	beq.w	800b15a <_printf_float+0xba>
 800b2d0:	f04f 0800 	mov.w	r8, #0
 800b2d4:	f104 091a 	add.w	r9, r4, #26
 800b2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	4543      	cmp	r3, r8
 800b2de:	dc09      	bgt.n	800b2f4 <_printf_float+0x254>
 800b2e0:	6823      	ldr	r3, [r4, #0]
 800b2e2:	079b      	lsls	r3, r3, #30
 800b2e4:	f100 8103 	bmi.w	800b4ee <_printf_float+0x44e>
 800b2e8:	68e0      	ldr	r0, [r4, #12]
 800b2ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2ec:	4298      	cmp	r0, r3
 800b2ee:	bfb8      	it	lt
 800b2f0:	4618      	movlt	r0, r3
 800b2f2:	e734      	b.n	800b15e <_printf_float+0xbe>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	464a      	mov	r2, r9
 800b2f8:	4631      	mov	r1, r6
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	47b8      	blx	r7
 800b2fe:	3001      	adds	r0, #1
 800b300:	f43f af2b 	beq.w	800b15a <_printf_float+0xba>
 800b304:	f108 0801 	add.w	r8, r8, #1
 800b308:	e7e6      	b.n	800b2d8 <_printf_float+0x238>
 800b30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	dc2b      	bgt.n	800b368 <_printf_float+0x2c8>
 800b310:	2301      	movs	r3, #1
 800b312:	4a26      	ldr	r2, [pc, #152]	; (800b3ac <_printf_float+0x30c>)
 800b314:	4631      	mov	r1, r6
 800b316:	4628      	mov	r0, r5
 800b318:	47b8      	blx	r7
 800b31a:	3001      	adds	r0, #1
 800b31c:	f43f af1d 	beq.w	800b15a <_printf_float+0xba>
 800b320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b322:	b923      	cbnz	r3, 800b32e <_printf_float+0x28e>
 800b324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b326:	b913      	cbnz	r3, 800b32e <_printf_float+0x28e>
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	07d9      	lsls	r1, r3, #31
 800b32c:	d5d8      	bpl.n	800b2e0 <_printf_float+0x240>
 800b32e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b332:	4631      	mov	r1, r6
 800b334:	4628      	mov	r0, r5
 800b336:	47b8      	blx	r7
 800b338:	3001      	adds	r0, #1
 800b33a:	f43f af0e 	beq.w	800b15a <_printf_float+0xba>
 800b33e:	f04f 0900 	mov.w	r9, #0
 800b342:	f104 0a1a 	add.w	sl, r4, #26
 800b346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b348:	425b      	negs	r3, r3
 800b34a:	454b      	cmp	r3, r9
 800b34c:	dc01      	bgt.n	800b352 <_printf_float+0x2b2>
 800b34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b350:	e794      	b.n	800b27c <_printf_float+0x1dc>
 800b352:	2301      	movs	r3, #1
 800b354:	4652      	mov	r2, sl
 800b356:	4631      	mov	r1, r6
 800b358:	4628      	mov	r0, r5
 800b35a:	47b8      	blx	r7
 800b35c:	3001      	adds	r0, #1
 800b35e:	f43f aefc 	beq.w	800b15a <_printf_float+0xba>
 800b362:	f109 0901 	add.w	r9, r9, #1
 800b366:	e7ee      	b.n	800b346 <_printf_float+0x2a6>
 800b368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b36a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b36c:	429a      	cmp	r2, r3
 800b36e:	bfa8      	it	ge
 800b370:	461a      	movge	r2, r3
 800b372:	2a00      	cmp	r2, #0
 800b374:	4691      	mov	r9, r2
 800b376:	dd07      	ble.n	800b388 <_printf_float+0x2e8>
 800b378:	4613      	mov	r3, r2
 800b37a:	4631      	mov	r1, r6
 800b37c:	4642      	mov	r2, r8
 800b37e:	4628      	mov	r0, r5
 800b380:	47b8      	blx	r7
 800b382:	3001      	adds	r0, #1
 800b384:	f43f aee9 	beq.w	800b15a <_printf_float+0xba>
 800b388:	f104 031a 	add.w	r3, r4, #26
 800b38c:	f04f 0b00 	mov.w	fp, #0
 800b390:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b394:	9306      	str	r3, [sp, #24]
 800b396:	e015      	b.n	800b3c4 <_printf_float+0x324>
 800b398:	7fefffff 	.word	0x7fefffff
 800b39c:	0800f478 	.word	0x0800f478
 800b3a0:	0800f474 	.word	0x0800f474
 800b3a4:	0800f480 	.word	0x0800f480
 800b3a8:	0800f47c 	.word	0x0800f47c
 800b3ac:	0800f484 	.word	0x0800f484
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	9a06      	ldr	r2, [sp, #24]
 800b3b4:	4631      	mov	r1, r6
 800b3b6:	4628      	mov	r0, r5
 800b3b8:	47b8      	blx	r7
 800b3ba:	3001      	adds	r0, #1
 800b3bc:	f43f aecd 	beq.w	800b15a <_printf_float+0xba>
 800b3c0:	f10b 0b01 	add.w	fp, fp, #1
 800b3c4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b3c8:	ebaa 0309 	sub.w	r3, sl, r9
 800b3cc:	455b      	cmp	r3, fp
 800b3ce:	dcef      	bgt.n	800b3b0 <_printf_float+0x310>
 800b3d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	44d0      	add	r8, sl
 800b3d8:	db15      	blt.n	800b406 <_printf_float+0x366>
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	07da      	lsls	r2, r3, #31
 800b3de:	d412      	bmi.n	800b406 <_printf_float+0x366>
 800b3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b3e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3e4:	eba3 020a 	sub.w	r2, r3, sl
 800b3e8:	eba3 0a01 	sub.w	sl, r3, r1
 800b3ec:	4592      	cmp	sl, r2
 800b3ee:	bfa8      	it	ge
 800b3f0:	4692      	movge	sl, r2
 800b3f2:	f1ba 0f00 	cmp.w	sl, #0
 800b3f6:	dc0e      	bgt.n	800b416 <_printf_float+0x376>
 800b3f8:	f04f 0800 	mov.w	r8, #0
 800b3fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b400:	f104 091a 	add.w	r9, r4, #26
 800b404:	e019      	b.n	800b43a <_printf_float+0x39a>
 800b406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b40a:	4631      	mov	r1, r6
 800b40c:	4628      	mov	r0, r5
 800b40e:	47b8      	blx	r7
 800b410:	3001      	adds	r0, #1
 800b412:	d1e5      	bne.n	800b3e0 <_printf_float+0x340>
 800b414:	e6a1      	b.n	800b15a <_printf_float+0xba>
 800b416:	4653      	mov	r3, sl
 800b418:	4642      	mov	r2, r8
 800b41a:	4631      	mov	r1, r6
 800b41c:	4628      	mov	r0, r5
 800b41e:	47b8      	blx	r7
 800b420:	3001      	adds	r0, #1
 800b422:	d1e9      	bne.n	800b3f8 <_printf_float+0x358>
 800b424:	e699      	b.n	800b15a <_printf_float+0xba>
 800b426:	2301      	movs	r3, #1
 800b428:	464a      	mov	r2, r9
 800b42a:	4631      	mov	r1, r6
 800b42c:	4628      	mov	r0, r5
 800b42e:	47b8      	blx	r7
 800b430:	3001      	adds	r0, #1
 800b432:	f43f ae92 	beq.w	800b15a <_printf_float+0xba>
 800b436:	f108 0801 	add.w	r8, r8, #1
 800b43a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b43e:	1a9b      	subs	r3, r3, r2
 800b440:	eba3 030a 	sub.w	r3, r3, sl
 800b444:	4543      	cmp	r3, r8
 800b446:	dcee      	bgt.n	800b426 <_printf_float+0x386>
 800b448:	e74a      	b.n	800b2e0 <_printf_float+0x240>
 800b44a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b44c:	2a01      	cmp	r2, #1
 800b44e:	dc01      	bgt.n	800b454 <_printf_float+0x3b4>
 800b450:	07db      	lsls	r3, r3, #31
 800b452:	d53a      	bpl.n	800b4ca <_printf_float+0x42a>
 800b454:	2301      	movs	r3, #1
 800b456:	4642      	mov	r2, r8
 800b458:	4631      	mov	r1, r6
 800b45a:	4628      	mov	r0, r5
 800b45c:	47b8      	blx	r7
 800b45e:	3001      	adds	r0, #1
 800b460:	f43f ae7b 	beq.w	800b15a <_printf_float+0xba>
 800b464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b468:	4631      	mov	r1, r6
 800b46a:	4628      	mov	r0, r5
 800b46c:	47b8      	blx	r7
 800b46e:	3001      	adds	r0, #1
 800b470:	f108 0801 	add.w	r8, r8, #1
 800b474:	f43f ae71 	beq.w	800b15a <_printf_float+0xba>
 800b478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b47a:	2200      	movs	r2, #0
 800b47c:	f103 3aff 	add.w	sl, r3, #4294967295
 800b480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b484:	2300      	movs	r3, #0
 800b486:	f7f5 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800b48a:	b9c8      	cbnz	r0, 800b4c0 <_printf_float+0x420>
 800b48c:	4653      	mov	r3, sl
 800b48e:	4642      	mov	r2, r8
 800b490:	4631      	mov	r1, r6
 800b492:	4628      	mov	r0, r5
 800b494:	47b8      	blx	r7
 800b496:	3001      	adds	r0, #1
 800b498:	d10e      	bne.n	800b4b8 <_printf_float+0x418>
 800b49a:	e65e      	b.n	800b15a <_printf_float+0xba>
 800b49c:	2301      	movs	r3, #1
 800b49e:	4652      	mov	r2, sl
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	47b8      	blx	r7
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	f43f ae57 	beq.w	800b15a <_printf_float+0xba>
 800b4ac:	f108 0801 	add.w	r8, r8, #1
 800b4b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	4543      	cmp	r3, r8
 800b4b6:	dcf1      	bgt.n	800b49c <_printf_float+0x3fc>
 800b4b8:	464b      	mov	r3, r9
 800b4ba:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b4be:	e6de      	b.n	800b27e <_printf_float+0x1de>
 800b4c0:	f04f 0800 	mov.w	r8, #0
 800b4c4:	f104 0a1a 	add.w	sl, r4, #26
 800b4c8:	e7f2      	b.n	800b4b0 <_printf_float+0x410>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e7df      	b.n	800b48e <_printf_float+0x3ee>
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	464a      	mov	r2, r9
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	47b8      	blx	r7
 800b4d8:	3001      	adds	r0, #1
 800b4da:	f43f ae3e 	beq.w	800b15a <_printf_float+0xba>
 800b4de:	f108 0801 	add.w	r8, r8, #1
 800b4e2:	68e3      	ldr	r3, [r4, #12]
 800b4e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4e6:	1a9b      	subs	r3, r3, r2
 800b4e8:	4543      	cmp	r3, r8
 800b4ea:	dcf0      	bgt.n	800b4ce <_printf_float+0x42e>
 800b4ec:	e6fc      	b.n	800b2e8 <_printf_float+0x248>
 800b4ee:	f04f 0800 	mov.w	r8, #0
 800b4f2:	f104 0919 	add.w	r9, r4, #25
 800b4f6:	e7f4      	b.n	800b4e2 <_printf_float+0x442>
 800b4f8:	2900      	cmp	r1, #0
 800b4fa:	f43f ae8b 	beq.w	800b214 <_printf_float+0x174>
 800b4fe:	2300      	movs	r3, #0
 800b500:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b504:	ab09      	add	r3, sp, #36	; 0x24
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	ec49 8b10 	vmov	d0, r8, r9
 800b50c:	6022      	str	r2, [r4, #0]
 800b50e:	f8cd a004 	str.w	sl, [sp, #4]
 800b512:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b516:	4628      	mov	r0, r5
 800b518:	f7ff fd2d 	bl	800af76 <__cvt>
 800b51c:	4680      	mov	r8, r0
 800b51e:	e648      	b.n	800b1b2 <_printf_float+0x112>

0800b520 <_printf_common>:
 800b520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b524:	4691      	mov	r9, r2
 800b526:	461f      	mov	r7, r3
 800b528:	688a      	ldr	r2, [r1, #8]
 800b52a:	690b      	ldr	r3, [r1, #16]
 800b52c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b530:	4293      	cmp	r3, r2
 800b532:	bfb8      	it	lt
 800b534:	4613      	movlt	r3, r2
 800b536:	f8c9 3000 	str.w	r3, [r9]
 800b53a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b53e:	4606      	mov	r6, r0
 800b540:	460c      	mov	r4, r1
 800b542:	b112      	cbz	r2, 800b54a <_printf_common+0x2a>
 800b544:	3301      	adds	r3, #1
 800b546:	f8c9 3000 	str.w	r3, [r9]
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	0699      	lsls	r1, r3, #26
 800b54e:	bf42      	ittt	mi
 800b550:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b554:	3302      	addmi	r3, #2
 800b556:	f8c9 3000 	strmi.w	r3, [r9]
 800b55a:	6825      	ldr	r5, [r4, #0]
 800b55c:	f015 0506 	ands.w	r5, r5, #6
 800b560:	d107      	bne.n	800b572 <_printf_common+0x52>
 800b562:	f104 0a19 	add.w	sl, r4, #25
 800b566:	68e3      	ldr	r3, [r4, #12]
 800b568:	f8d9 2000 	ldr.w	r2, [r9]
 800b56c:	1a9b      	subs	r3, r3, r2
 800b56e:	42ab      	cmp	r3, r5
 800b570:	dc28      	bgt.n	800b5c4 <_printf_common+0xa4>
 800b572:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b576:	6822      	ldr	r2, [r4, #0]
 800b578:	3300      	adds	r3, #0
 800b57a:	bf18      	it	ne
 800b57c:	2301      	movne	r3, #1
 800b57e:	0692      	lsls	r2, r2, #26
 800b580:	d42d      	bmi.n	800b5de <_printf_common+0xbe>
 800b582:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b586:	4639      	mov	r1, r7
 800b588:	4630      	mov	r0, r6
 800b58a:	47c0      	blx	r8
 800b58c:	3001      	adds	r0, #1
 800b58e:	d020      	beq.n	800b5d2 <_printf_common+0xb2>
 800b590:	6823      	ldr	r3, [r4, #0]
 800b592:	68e5      	ldr	r5, [r4, #12]
 800b594:	f8d9 2000 	ldr.w	r2, [r9]
 800b598:	f003 0306 	and.w	r3, r3, #6
 800b59c:	2b04      	cmp	r3, #4
 800b59e:	bf08      	it	eq
 800b5a0:	1aad      	subeq	r5, r5, r2
 800b5a2:	68a3      	ldr	r3, [r4, #8]
 800b5a4:	6922      	ldr	r2, [r4, #16]
 800b5a6:	bf0c      	ite	eq
 800b5a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5ac:	2500      	movne	r5, #0
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	bfc4      	itt	gt
 800b5b2:	1a9b      	subgt	r3, r3, r2
 800b5b4:	18ed      	addgt	r5, r5, r3
 800b5b6:	f04f 0900 	mov.w	r9, #0
 800b5ba:	341a      	adds	r4, #26
 800b5bc:	454d      	cmp	r5, r9
 800b5be:	d11a      	bne.n	800b5f6 <_printf_common+0xd6>
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	e008      	b.n	800b5d6 <_printf_common+0xb6>
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	4652      	mov	r2, sl
 800b5c8:	4639      	mov	r1, r7
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	47c0      	blx	r8
 800b5ce:	3001      	adds	r0, #1
 800b5d0:	d103      	bne.n	800b5da <_printf_common+0xba>
 800b5d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5da:	3501      	adds	r5, #1
 800b5dc:	e7c3      	b.n	800b566 <_printf_common+0x46>
 800b5de:	18e1      	adds	r1, r4, r3
 800b5e0:	1c5a      	adds	r2, r3, #1
 800b5e2:	2030      	movs	r0, #48	; 0x30
 800b5e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b5e8:	4422      	add	r2, r4
 800b5ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b5ee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b5f2:	3302      	adds	r3, #2
 800b5f4:	e7c5      	b.n	800b582 <_printf_common+0x62>
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	4622      	mov	r2, r4
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	47c0      	blx	r8
 800b600:	3001      	adds	r0, #1
 800b602:	d0e6      	beq.n	800b5d2 <_printf_common+0xb2>
 800b604:	f109 0901 	add.w	r9, r9, #1
 800b608:	e7d8      	b.n	800b5bc <_printf_common+0x9c>
	...

0800b60c <_printf_i>:
 800b60c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b610:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b614:	460c      	mov	r4, r1
 800b616:	7e09      	ldrb	r1, [r1, #24]
 800b618:	b085      	sub	sp, #20
 800b61a:	296e      	cmp	r1, #110	; 0x6e
 800b61c:	4617      	mov	r7, r2
 800b61e:	4606      	mov	r6, r0
 800b620:	4698      	mov	r8, r3
 800b622:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b624:	f000 80b3 	beq.w	800b78e <_printf_i+0x182>
 800b628:	d822      	bhi.n	800b670 <_printf_i+0x64>
 800b62a:	2963      	cmp	r1, #99	; 0x63
 800b62c:	d036      	beq.n	800b69c <_printf_i+0x90>
 800b62e:	d80a      	bhi.n	800b646 <_printf_i+0x3a>
 800b630:	2900      	cmp	r1, #0
 800b632:	f000 80b9 	beq.w	800b7a8 <_printf_i+0x19c>
 800b636:	2958      	cmp	r1, #88	; 0x58
 800b638:	f000 8083 	beq.w	800b742 <_printf_i+0x136>
 800b63c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b640:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b644:	e032      	b.n	800b6ac <_printf_i+0xa0>
 800b646:	2964      	cmp	r1, #100	; 0x64
 800b648:	d001      	beq.n	800b64e <_printf_i+0x42>
 800b64a:	2969      	cmp	r1, #105	; 0x69
 800b64c:	d1f6      	bne.n	800b63c <_printf_i+0x30>
 800b64e:	6820      	ldr	r0, [r4, #0]
 800b650:	6813      	ldr	r3, [r2, #0]
 800b652:	0605      	lsls	r5, r0, #24
 800b654:	f103 0104 	add.w	r1, r3, #4
 800b658:	d52a      	bpl.n	800b6b0 <_printf_i+0xa4>
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	6011      	str	r1, [r2, #0]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	da03      	bge.n	800b66a <_printf_i+0x5e>
 800b662:	222d      	movs	r2, #45	; 0x2d
 800b664:	425b      	negs	r3, r3
 800b666:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b66a:	486f      	ldr	r0, [pc, #444]	; (800b828 <_printf_i+0x21c>)
 800b66c:	220a      	movs	r2, #10
 800b66e:	e039      	b.n	800b6e4 <_printf_i+0xd8>
 800b670:	2973      	cmp	r1, #115	; 0x73
 800b672:	f000 809d 	beq.w	800b7b0 <_printf_i+0x1a4>
 800b676:	d808      	bhi.n	800b68a <_printf_i+0x7e>
 800b678:	296f      	cmp	r1, #111	; 0x6f
 800b67a:	d020      	beq.n	800b6be <_printf_i+0xb2>
 800b67c:	2970      	cmp	r1, #112	; 0x70
 800b67e:	d1dd      	bne.n	800b63c <_printf_i+0x30>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	f043 0320 	orr.w	r3, r3, #32
 800b686:	6023      	str	r3, [r4, #0]
 800b688:	e003      	b.n	800b692 <_printf_i+0x86>
 800b68a:	2975      	cmp	r1, #117	; 0x75
 800b68c:	d017      	beq.n	800b6be <_printf_i+0xb2>
 800b68e:	2978      	cmp	r1, #120	; 0x78
 800b690:	d1d4      	bne.n	800b63c <_printf_i+0x30>
 800b692:	2378      	movs	r3, #120	; 0x78
 800b694:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b698:	4864      	ldr	r0, [pc, #400]	; (800b82c <_printf_i+0x220>)
 800b69a:	e055      	b.n	800b748 <_printf_i+0x13c>
 800b69c:	6813      	ldr	r3, [r2, #0]
 800b69e:	1d19      	adds	r1, r3, #4
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6011      	str	r1, [r2, #0]
 800b6a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e08c      	b.n	800b7ca <_printf_i+0x1be>
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	6011      	str	r1, [r2, #0]
 800b6b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b6b8:	bf18      	it	ne
 800b6ba:	b21b      	sxthne	r3, r3
 800b6bc:	e7cf      	b.n	800b65e <_printf_i+0x52>
 800b6be:	6813      	ldr	r3, [r2, #0]
 800b6c0:	6825      	ldr	r5, [r4, #0]
 800b6c2:	1d18      	adds	r0, r3, #4
 800b6c4:	6010      	str	r0, [r2, #0]
 800b6c6:	0628      	lsls	r0, r5, #24
 800b6c8:	d501      	bpl.n	800b6ce <_printf_i+0xc2>
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	e002      	b.n	800b6d4 <_printf_i+0xc8>
 800b6ce:	0668      	lsls	r0, r5, #25
 800b6d0:	d5fb      	bpl.n	800b6ca <_printf_i+0xbe>
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	4854      	ldr	r0, [pc, #336]	; (800b828 <_printf_i+0x21c>)
 800b6d6:	296f      	cmp	r1, #111	; 0x6f
 800b6d8:	bf14      	ite	ne
 800b6da:	220a      	movne	r2, #10
 800b6dc:	2208      	moveq	r2, #8
 800b6de:	2100      	movs	r1, #0
 800b6e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b6e4:	6865      	ldr	r5, [r4, #4]
 800b6e6:	60a5      	str	r5, [r4, #8]
 800b6e8:	2d00      	cmp	r5, #0
 800b6ea:	f2c0 8095 	blt.w	800b818 <_printf_i+0x20c>
 800b6ee:	6821      	ldr	r1, [r4, #0]
 800b6f0:	f021 0104 	bic.w	r1, r1, #4
 800b6f4:	6021      	str	r1, [r4, #0]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d13d      	bne.n	800b776 <_printf_i+0x16a>
 800b6fa:	2d00      	cmp	r5, #0
 800b6fc:	f040 808e 	bne.w	800b81c <_printf_i+0x210>
 800b700:	4665      	mov	r5, ip
 800b702:	2a08      	cmp	r2, #8
 800b704:	d10b      	bne.n	800b71e <_printf_i+0x112>
 800b706:	6823      	ldr	r3, [r4, #0]
 800b708:	07db      	lsls	r3, r3, #31
 800b70a:	d508      	bpl.n	800b71e <_printf_i+0x112>
 800b70c:	6923      	ldr	r3, [r4, #16]
 800b70e:	6862      	ldr	r2, [r4, #4]
 800b710:	429a      	cmp	r2, r3
 800b712:	bfde      	ittt	le
 800b714:	2330      	movle	r3, #48	; 0x30
 800b716:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b71a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b71e:	ebac 0305 	sub.w	r3, ip, r5
 800b722:	6123      	str	r3, [r4, #16]
 800b724:	f8cd 8000 	str.w	r8, [sp]
 800b728:	463b      	mov	r3, r7
 800b72a:	aa03      	add	r2, sp, #12
 800b72c:	4621      	mov	r1, r4
 800b72e:	4630      	mov	r0, r6
 800b730:	f7ff fef6 	bl	800b520 <_printf_common>
 800b734:	3001      	adds	r0, #1
 800b736:	d14d      	bne.n	800b7d4 <_printf_i+0x1c8>
 800b738:	f04f 30ff 	mov.w	r0, #4294967295
 800b73c:	b005      	add	sp, #20
 800b73e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b742:	4839      	ldr	r0, [pc, #228]	; (800b828 <_printf_i+0x21c>)
 800b744:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b748:	6813      	ldr	r3, [r2, #0]
 800b74a:	6821      	ldr	r1, [r4, #0]
 800b74c:	1d1d      	adds	r5, r3, #4
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6015      	str	r5, [r2, #0]
 800b752:	060a      	lsls	r2, r1, #24
 800b754:	d50b      	bpl.n	800b76e <_printf_i+0x162>
 800b756:	07ca      	lsls	r2, r1, #31
 800b758:	bf44      	itt	mi
 800b75a:	f041 0120 	orrmi.w	r1, r1, #32
 800b75e:	6021      	strmi	r1, [r4, #0]
 800b760:	b91b      	cbnz	r3, 800b76a <_printf_i+0x15e>
 800b762:	6822      	ldr	r2, [r4, #0]
 800b764:	f022 0220 	bic.w	r2, r2, #32
 800b768:	6022      	str	r2, [r4, #0]
 800b76a:	2210      	movs	r2, #16
 800b76c:	e7b7      	b.n	800b6de <_printf_i+0xd2>
 800b76e:	064d      	lsls	r5, r1, #25
 800b770:	bf48      	it	mi
 800b772:	b29b      	uxthmi	r3, r3
 800b774:	e7ef      	b.n	800b756 <_printf_i+0x14a>
 800b776:	4665      	mov	r5, ip
 800b778:	fbb3 f1f2 	udiv	r1, r3, r2
 800b77c:	fb02 3311 	mls	r3, r2, r1, r3
 800b780:	5cc3      	ldrb	r3, [r0, r3]
 800b782:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b786:	460b      	mov	r3, r1
 800b788:	2900      	cmp	r1, #0
 800b78a:	d1f5      	bne.n	800b778 <_printf_i+0x16c>
 800b78c:	e7b9      	b.n	800b702 <_printf_i+0xf6>
 800b78e:	6813      	ldr	r3, [r2, #0]
 800b790:	6825      	ldr	r5, [r4, #0]
 800b792:	6961      	ldr	r1, [r4, #20]
 800b794:	1d18      	adds	r0, r3, #4
 800b796:	6010      	str	r0, [r2, #0]
 800b798:	0628      	lsls	r0, r5, #24
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	d501      	bpl.n	800b7a2 <_printf_i+0x196>
 800b79e:	6019      	str	r1, [r3, #0]
 800b7a0:	e002      	b.n	800b7a8 <_printf_i+0x19c>
 800b7a2:	066a      	lsls	r2, r5, #25
 800b7a4:	d5fb      	bpl.n	800b79e <_printf_i+0x192>
 800b7a6:	8019      	strh	r1, [r3, #0]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	6123      	str	r3, [r4, #16]
 800b7ac:	4665      	mov	r5, ip
 800b7ae:	e7b9      	b.n	800b724 <_printf_i+0x118>
 800b7b0:	6813      	ldr	r3, [r2, #0]
 800b7b2:	1d19      	adds	r1, r3, #4
 800b7b4:	6011      	str	r1, [r2, #0]
 800b7b6:	681d      	ldr	r5, [r3, #0]
 800b7b8:	6862      	ldr	r2, [r4, #4]
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	4628      	mov	r0, r5
 800b7be:	f7f4 fd0f 	bl	80001e0 <memchr>
 800b7c2:	b108      	cbz	r0, 800b7c8 <_printf_i+0x1bc>
 800b7c4:	1b40      	subs	r0, r0, r5
 800b7c6:	6060      	str	r0, [r4, #4]
 800b7c8:	6863      	ldr	r3, [r4, #4]
 800b7ca:	6123      	str	r3, [r4, #16]
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b7d2:	e7a7      	b.n	800b724 <_printf_i+0x118>
 800b7d4:	6923      	ldr	r3, [r4, #16]
 800b7d6:	462a      	mov	r2, r5
 800b7d8:	4639      	mov	r1, r7
 800b7da:	4630      	mov	r0, r6
 800b7dc:	47c0      	blx	r8
 800b7de:	3001      	adds	r0, #1
 800b7e0:	d0aa      	beq.n	800b738 <_printf_i+0x12c>
 800b7e2:	6823      	ldr	r3, [r4, #0]
 800b7e4:	079b      	lsls	r3, r3, #30
 800b7e6:	d413      	bmi.n	800b810 <_printf_i+0x204>
 800b7e8:	68e0      	ldr	r0, [r4, #12]
 800b7ea:	9b03      	ldr	r3, [sp, #12]
 800b7ec:	4298      	cmp	r0, r3
 800b7ee:	bfb8      	it	lt
 800b7f0:	4618      	movlt	r0, r3
 800b7f2:	e7a3      	b.n	800b73c <_printf_i+0x130>
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	464a      	mov	r2, r9
 800b7f8:	4639      	mov	r1, r7
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	47c0      	blx	r8
 800b7fe:	3001      	adds	r0, #1
 800b800:	d09a      	beq.n	800b738 <_printf_i+0x12c>
 800b802:	3501      	adds	r5, #1
 800b804:	68e3      	ldr	r3, [r4, #12]
 800b806:	9a03      	ldr	r2, [sp, #12]
 800b808:	1a9b      	subs	r3, r3, r2
 800b80a:	42ab      	cmp	r3, r5
 800b80c:	dcf2      	bgt.n	800b7f4 <_printf_i+0x1e8>
 800b80e:	e7eb      	b.n	800b7e8 <_printf_i+0x1dc>
 800b810:	2500      	movs	r5, #0
 800b812:	f104 0919 	add.w	r9, r4, #25
 800b816:	e7f5      	b.n	800b804 <_printf_i+0x1f8>
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1ac      	bne.n	800b776 <_printf_i+0x16a>
 800b81c:	7803      	ldrb	r3, [r0, #0]
 800b81e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b822:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b826:	e76c      	b.n	800b702 <_printf_i+0xf6>
 800b828:	0800f486 	.word	0x0800f486
 800b82c:	0800f497 	.word	0x0800f497

0800b830 <_scanf_float>:
 800b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b834:	469a      	mov	sl, r3
 800b836:	688b      	ldr	r3, [r1, #8]
 800b838:	4616      	mov	r6, r2
 800b83a:	1e5a      	subs	r2, r3, #1
 800b83c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b840:	b087      	sub	sp, #28
 800b842:	bf83      	ittte	hi
 800b844:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800b848:	189b      	addhi	r3, r3, r2
 800b84a:	9301      	strhi	r3, [sp, #4]
 800b84c:	2300      	movls	r3, #0
 800b84e:	bf86      	itte	hi
 800b850:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b854:	608b      	strhi	r3, [r1, #8]
 800b856:	9301      	strls	r3, [sp, #4]
 800b858:	680b      	ldr	r3, [r1, #0]
 800b85a:	4688      	mov	r8, r1
 800b85c:	f04f 0b00 	mov.w	fp, #0
 800b860:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b864:	f848 3b1c 	str.w	r3, [r8], #28
 800b868:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800b86c:	4607      	mov	r7, r0
 800b86e:	460c      	mov	r4, r1
 800b870:	4645      	mov	r5, r8
 800b872:	465a      	mov	r2, fp
 800b874:	46d9      	mov	r9, fp
 800b876:	f8cd b008 	str.w	fp, [sp, #8]
 800b87a:	68a1      	ldr	r1, [r4, #8]
 800b87c:	b181      	cbz	r1, 800b8a0 <_scanf_float+0x70>
 800b87e:	6833      	ldr	r3, [r6, #0]
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	2b49      	cmp	r3, #73	; 0x49
 800b884:	d071      	beq.n	800b96a <_scanf_float+0x13a>
 800b886:	d84d      	bhi.n	800b924 <_scanf_float+0xf4>
 800b888:	2b39      	cmp	r3, #57	; 0x39
 800b88a:	d840      	bhi.n	800b90e <_scanf_float+0xde>
 800b88c:	2b31      	cmp	r3, #49	; 0x31
 800b88e:	f080 8088 	bcs.w	800b9a2 <_scanf_float+0x172>
 800b892:	2b2d      	cmp	r3, #45	; 0x2d
 800b894:	f000 8090 	beq.w	800b9b8 <_scanf_float+0x188>
 800b898:	d815      	bhi.n	800b8c6 <_scanf_float+0x96>
 800b89a:	2b2b      	cmp	r3, #43	; 0x2b
 800b89c:	f000 808c 	beq.w	800b9b8 <_scanf_float+0x188>
 800b8a0:	f1b9 0f00 	cmp.w	r9, #0
 800b8a4:	d003      	beq.n	800b8ae <_scanf_float+0x7e>
 800b8a6:	6823      	ldr	r3, [r4, #0]
 800b8a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8ac:	6023      	str	r3, [r4, #0]
 800b8ae:	3a01      	subs	r2, #1
 800b8b0:	2a01      	cmp	r2, #1
 800b8b2:	f200 80ea 	bhi.w	800ba8a <_scanf_float+0x25a>
 800b8b6:	4545      	cmp	r5, r8
 800b8b8:	f200 80dc 	bhi.w	800ba74 <_scanf_float+0x244>
 800b8bc:	2601      	movs	r6, #1
 800b8be:	4630      	mov	r0, r6
 800b8c0:	b007      	add	sp, #28
 800b8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c6:	2b2e      	cmp	r3, #46	; 0x2e
 800b8c8:	f000 809f 	beq.w	800ba0a <_scanf_float+0x1da>
 800b8cc:	2b30      	cmp	r3, #48	; 0x30
 800b8ce:	d1e7      	bne.n	800b8a0 <_scanf_float+0x70>
 800b8d0:	6820      	ldr	r0, [r4, #0]
 800b8d2:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b8d6:	d064      	beq.n	800b9a2 <_scanf_float+0x172>
 800b8d8:	9b01      	ldr	r3, [sp, #4]
 800b8da:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800b8de:	6020      	str	r0, [r4, #0]
 800b8e0:	f109 0901 	add.w	r9, r9, #1
 800b8e4:	b11b      	cbz	r3, 800b8ee <_scanf_float+0xbe>
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	3101      	adds	r1, #1
 800b8ea:	9301      	str	r3, [sp, #4]
 800b8ec:	60a1      	str	r1, [r4, #8]
 800b8ee:	68a3      	ldr	r3, [r4, #8]
 800b8f0:	3b01      	subs	r3, #1
 800b8f2:	60a3      	str	r3, [r4, #8]
 800b8f4:	6923      	ldr	r3, [r4, #16]
 800b8f6:	3301      	adds	r3, #1
 800b8f8:	6123      	str	r3, [r4, #16]
 800b8fa:	6873      	ldr	r3, [r6, #4]
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	6073      	str	r3, [r6, #4]
 800b902:	f340 80ac 	ble.w	800ba5e <_scanf_float+0x22e>
 800b906:	6833      	ldr	r3, [r6, #0]
 800b908:	3301      	adds	r3, #1
 800b90a:	6033      	str	r3, [r6, #0]
 800b90c:	e7b5      	b.n	800b87a <_scanf_float+0x4a>
 800b90e:	2b45      	cmp	r3, #69	; 0x45
 800b910:	f000 8085 	beq.w	800ba1e <_scanf_float+0x1ee>
 800b914:	2b46      	cmp	r3, #70	; 0x46
 800b916:	d06a      	beq.n	800b9ee <_scanf_float+0x1be>
 800b918:	2b41      	cmp	r3, #65	; 0x41
 800b91a:	d1c1      	bne.n	800b8a0 <_scanf_float+0x70>
 800b91c:	2a01      	cmp	r2, #1
 800b91e:	d1bf      	bne.n	800b8a0 <_scanf_float+0x70>
 800b920:	2202      	movs	r2, #2
 800b922:	e046      	b.n	800b9b2 <_scanf_float+0x182>
 800b924:	2b65      	cmp	r3, #101	; 0x65
 800b926:	d07a      	beq.n	800ba1e <_scanf_float+0x1ee>
 800b928:	d818      	bhi.n	800b95c <_scanf_float+0x12c>
 800b92a:	2b54      	cmp	r3, #84	; 0x54
 800b92c:	d066      	beq.n	800b9fc <_scanf_float+0x1cc>
 800b92e:	d811      	bhi.n	800b954 <_scanf_float+0x124>
 800b930:	2b4e      	cmp	r3, #78	; 0x4e
 800b932:	d1b5      	bne.n	800b8a0 <_scanf_float+0x70>
 800b934:	2a00      	cmp	r2, #0
 800b936:	d146      	bne.n	800b9c6 <_scanf_float+0x196>
 800b938:	f1b9 0f00 	cmp.w	r9, #0
 800b93c:	d145      	bne.n	800b9ca <_scanf_float+0x19a>
 800b93e:	6821      	ldr	r1, [r4, #0]
 800b940:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b944:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b948:	d13f      	bne.n	800b9ca <_scanf_float+0x19a>
 800b94a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b94e:	6021      	str	r1, [r4, #0]
 800b950:	2201      	movs	r2, #1
 800b952:	e02e      	b.n	800b9b2 <_scanf_float+0x182>
 800b954:	2b59      	cmp	r3, #89	; 0x59
 800b956:	d01e      	beq.n	800b996 <_scanf_float+0x166>
 800b958:	2b61      	cmp	r3, #97	; 0x61
 800b95a:	e7de      	b.n	800b91a <_scanf_float+0xea>
 800b95c:	2b6e      	cmp	r3, #110	; 0x6e
 800b95e:	d0e9      	beq.n	800b934 <_scanf_float+0x104>
 800b960:	d815      	bhi.n	800b98e <_scanf_float+0x15e>
 800b962:	2b66      	cmp	r3, #102	; 0x66
 800b964:	d043      	beq.n	800b9ee <_scanf_float+0x1be>
 800b966:	2b69      	cmp	r3, #105	; 0x69
 800b968:	d19a      	bne.n	800b8a0 <_scanf_float+0x70>
 800b96a:	f1bb 0f00 	cmp.w	fp, #0
 800b96e:	d138      	bne.n	800b9e2 <_scanf_float+0x1b2>
 800b970:	f1b9 0f00 	cmp.w	r9, #0
 800b974:	d197      	bne.n	800b8a6 <_scanf_float+0x76>
 800b976:	6821      	ldr	r1, [r4, #0]
 800b978:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800b97c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800b980:	d195      	bne.n	800b8ae <_scanf_float+0x7e>
 800b982:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800b986:	6021      	str	r1, [r4, #0]
 800b988:	f04f 0b01 	mov.w	fp, #1
 800b98c:	e011      	b.n	800b9b2 <_scanf_float+0x182>
 800b98e:	2b74      	cmp	r3, #116	; 0x74
 800b990:	d034      	beq.n	800b9fc <_scanf_float+0x1cc>
 800b992:	2b79      	cmp	r3, #121	; 0x79
 800b994:	d184      	bne.n	800b8a0 <_scanf_float+0x70>
 800b996:	f1bb 0f07 	cmp.w	fp, #7
 800b99a:	d181      	bne.n	800b8a0 <_scanf_float+0x70>
 800b99c:	f04f 0b08 	mov.w	fp, #8
 800b9a0:	e007      	b.n	800b9b2 <_scanf_float+0x182>
 800b9a2:	eb12 0f0b 	cmn.w	r2, fp
 800b9a6:	f47f af7b 	bne.w	800b8a0 <_scanf_float+0x70>
 800b9aa:	6821      	ldr	r1, [r4, #0]
 800b9ac:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800b9b0:	6021      	str	r1, [r4, #0]
 800b9b2:	702b      	strb	r3, [r5, #0]
 800b9b4:	3501      	adds	r5, #1
 800b9b6:	e79a      	b.n	800b8ee <_scanf_float+0xbe>
 800b9b8:	6821      	ldr	r1, [r4, #0]
 800b9ba:	0608      	lsls	r0, r1, #24
 800b9bc:	f57f af70 	bpl.w	800b8a0 <_scanf_float+0x70>
 800b9c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b9c4:	e7f4      	b.n	800b9b0 <_scanf_float+0x180>
 800b9c6:	2a02      	cmp	r2, #2
 800b9c8:	d047      	beq.n	800ba5a <_scanf_float+0x22a>
 800b9ca:	f1bb 0f01 	cmp.w	fp, #1
 800b9ce:	d003      	beq.n	800b9d8 <_scanf_float+0x1a8>
 800b9d0:	f1bb 0f04 	cmp.w	fp, #4
 800b9d4:	f47f af64 	bne.w	800b8a0 <_scanf_float+0x70>
 800b9d8:	f10b 0b01 	add.w	fp, fp, #1
 800b9dc:	fa5f fb8b 	uxtb.w	fp, fp
 800b9e0:	e7e7      	b.n	800b9b2 <_scanf_float+0x182>
 800b9e2:	f1bb 0f03 	cmp.w	fp, #3
 800b9e6:	d0f7      	beq.n	800b9d8 <_scanf_float+0x1a8>
 800b9e8:	f1bb 0f05 	cmp.w	fp, #5
 800b9ec:	e7f2      	b.n	800b9d4 <_scanf_float+0x1a4>
 800b9ee:	f1bb 0f02 	cmp.w	fp, #2
 800b9f2:	f47f af55 	bne.w	800b8a0 <_scanf_float+0x70>
 800b9f6:	f04f 0b03 	mov.w	fp, #3
 800b9fa:	e7da      	b.n	800b9b2 <_scanf_float+0x182>
 800b9fc:	f1bb 0f06 	cmp.w	fp, #6
 800ba00:	f47f af4e 	bne.w	800b8a0 <_scanf_float+0x70>
 800ba04:	f04f 0b07 	mov.w	fp, #7
 800ba08:	e7d3      	b.n	800b9b2 <_scanf_float+0x182>
 800ba0a:	6821      	ldr	r1, [r4, #0]
 800ba0c:	0588      	lsls	r0, r1, #22
 800ba0e:	f57f af47 	bpl.w	800b8a0 <_scanf_float+0x70>
 800ba12:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ba16:	6021      	str	r1, [r4, #0]
 800ba18:	f8cd 9008 	str.w	r9, [sp, #8]
 800ba1c:	e7c9      	b.n	800b9b2 <_scanf_float+0x182>
 800ba1e:	6821      	ldr	r1, [r4, #0]
 800ba20:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ba24:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ba28:	d006      	beq.n	800ba38 <_scanf_float+0x208>
 800ba2a:	0548      	lsls	r0, r1, #21
 800ba2c:	f57f af38 	bpl.w	800b8a0 <_scanf_float+0x70>
 800ba30:	f1b9 0f00 	cmp.w	r9, #0
 800ba34:	f43f af3b 	beq.w	800b8ae <_scanf_float+0x7e>
 800ba38:	0588      	lsls	r0, r1, #22
 800ba3a:	bf58      	it	pl
 800ba3c:	9802      	ldrpl	r0, [sp, #8]
 800ba3e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ba42:	bf58      	it	pl
 800ba44:	eba9 0000 	subpl.w	r0, r9, r0
 800ba48:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800ba4c:	bf58      	it	pl
 800ba4e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800ba52:	6021      	str	r1, [r4, #0]
 800ba54:	f04f 0900 	mov.w	r9, #0
 800ba58:	e7ab      	b.n	800b9b2 <_scanf_float+0x182>
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	e7a9      	b.n	800b9b2 <_scanf_float+0x182>
 800ba5e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ba62:	9205      	str	r2, [sp, #20]
 800ba64:	4631      	mov	r1, r6
 800ba66:	4638      	mov	r0, r7
 800ba68:	4798      	blx	r3
 800ba6a:	9a05      	ldr	r2, [sp, #20]
 800ba6c:	2800      	cmp	r0, #0
 800ba6e:	f43f af04 	beq.w	800b87a <_scanf_float+0x4a>
 800ba72:	e715      	b.n	800b8a0 <_scanf_float+0x70>
 800ba74:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ba78:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ba7c:	4632      	mov	r2, r6
 800ba7e:	4638      	mov	r0, r7
 800ba80:	4798      	blx	r3
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	3b01      	subs	r3, #1
 800ba86:	6123      	str	r3, [r4, #16]
 800ba88:	e715      	b.n	800b8b6 <_scanf_float+0x86>
 800ba8a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ba8e:	2b06      	cmp	r3, #6
 800ba90:	d80a      	bhi.n	800baa8 <_scanf_float+0x278>
 800ba92:	f1bb 0f02 	cmp.w	fp, #2
 800ba96:	d968      	bls.n	800bb6a <_scanf_float+0x33a>
 800ba98:	f1ab 0b03 	sub.w	fp, fp, #3
 800ba9c:	fa5f fb8b 	uxtb.w	fp, fp
 800baa0:	eba5 0b0b 	sub.w	fp, r5, fp
 800baa4:	455d      	cmp	r5, fp
 800baa6:	d14b      	bne.n	800bb40 <_scanf_float+0x310>
 800baa8:	6823      	ldr	r3, [r4, #0]
 800baaa:	05da      	lsls	r2, r3, #23
 800baac:	d51f      	bpl.n	800baee <_scanf_float+0x2be>
 800baae:	055b      	lsls	r3, r3, #21
 800bab0:	d468      	bmi.n	800bb84 <_scanf_float+0x354>
 800bab2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800bab6:	6923      	ldr	r3, [r4, #16]
 800bab8:	2965      	cmp	r1, #101	; 0x65
 800baba:	f103 33ff 	add.w	r3, r3, #4294967295
 800babe:	f105 3bff 	add.w	fp, r5, #4294967295
 800bac2:	6123      	str	r3, [r4, #16]
 800bac4:	d00d      	beq.n	800bae2 <_scanf_float+0x2b2>
 800bac6:	2945      	cmp	r1, #69	; 0x45
 800bac8:	d00b      	beq.n	800bae2 <_scanf_float+0x2b2>
 800baca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bace:	4632      	mov	r2, r6
 800bad0:	4638      	mov	r0, r7
 800bad2:	4798      	blx	r3
 800bad4:	6923      	ldr	r3, [r4, #16]
 800bad6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800bada:	3b01      	subs	r3, #1
 800badc:	f1a5 0b02 	sub.w	fp, r5, #2
 800bae0:	6123      	str	r3, [r4, #16]
 800bae2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bae6:	4632      	mov	r2, r6
 800bae8:	4638      	mov	r0, r7
 800baea:	4798      	blx	r3
 800baec:	465d      	mov	r5, fp
 800baee:	6826      	ldr	r6, [r4, #0]
 800baf0:	f016 0610 	ands.w	r6, r6, #16
 800baf4:	d17a      	bne.n	800bbec <_scanf_float+0x3bc>
 800baf6:	702e      	strb	r6, [r5, #0]
 800baf8:	6823      	ldr	r3, [r4, #0]
 800bafa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800bafe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb02:	d142      	bne.n	800bb8a <_scanf_float+0x35a>
 800bb04:	9b02      	ldr	r3, [sp, #8]
 800bb06:	eba9 0303 	sub.w	r3, r9, r3
 800bb0a:	425a      	negs	r2, r3
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d149      	bne.n	800bba4 <_scanf_float+0x374>
 800bb10:	2200      	movs	r2, #0
 800bb12:	4641      	mov	r1, r8
 800bb14:	4638      	mov	r0, r7
 800bb16:	f000 ff1f 	bl	800c958 <_strtod_r>
 800bb1a:	6825      	ldr	r5, [r4, #0]
 800bb1c:	f8da 3000 	ldr.w	r3, [sl]
 800bb20:	f015 0f02 	tst.w	r5, #2
 800bb24:	f103 0204 	add.w	r2, r3, #4
 800bb28:	ec59 8b10 	vmov	r8, r9, d0
 800bb2c:	f8ca 2000 	str.w	r2, [sl]
 800bb30:	d043      	beq.n	800bbba <_scanf_float+0x38a>
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	e9c3 8900 	strd	r8, r9, [r3]
 800bb38:	68e3      	ldr	r3, [r4, #12]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	60e3      	str	r3, [r4, #12]
 800bb3e:	e6be      	b.n	800b8be <_scanf_float+0x8e>
 800bb40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bb48:	4632      	mov	r2, r6
 800bb4a:	4638      	mov	r0, r7
 800bb4c:	4798      	blx	r3
 800bb4e:	6923      	ldr	r3, [r4, #16]
 800bb50:	3b01      	subs	r3, #1
 800bb52:	6123      	str	r3, [r4, #16]
 800bb54:	e7a6      	b.n	800baa4 <_scanf_float+0x274>
 800bb56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb5a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bb5e:	4632      	mov	r2, r6
 800bb60:	4638      	mov	r0, r7
 800bb62:	4798      	blx	r3
 800bb64:	6923      	ldr	r3, [r4, #16]
 800bb66:	3b01      	subs	r3, #1
 800bb68:	6123      	str	r3, [r4, #16]
 800bb6a:	4545      	cmp	r5, r8
 800bb6c:	d8f3      	bhi.n	800bb56 <_scanf_float+0x326>
 800bb6e:	e6a5      	b.n	800b8bc <_scanf_float+0x8c>
 800bb70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bb74:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800bb78:	4632      	mov	r2, r6
 800bb7a:	4638      	mov	r0, r7
 800bb7c:	4798      	blx	r3
 800bb7e:	6923      	ldr	r3, [r4, #16]
 800bb80:	3b01      	subs	r3, #1
 800bb82:	6123      	str	r3, [r4, #16]
 800bb84:	4545      	cmp	r5, r8
 800bb86:	d8f3      	bhi.n	800bb70 <_scanf_float+0x340>
 800bb88:	e698      	b.n	800b8bc <_scanf_float+0x8c>
 800bb8a:	9b03      	ldr	r3, [sp, #12]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d0bf      	beq.n	800bb10 <_scanf_float+0x2e0>
 800bb90:	9904      	ldr	r1, [sp, #16]
 800bb92:	230a      	movs	r3, #10
 800bb94:	4632      	mov	r2, r6
 800bb96:	3101      	adds	r1, #1
 800bb98:	4638      	mov	r0, r7
 800bb9a:	f000 ff69 	bl	800ca70 <_strtol_r>
 800bb9e:	9b03      	ldr	r3, [sp, #12]
 800bba0:	9d04      	ldr	r5, [sp, #16]
 800bba2:	1ac2      	subs	r2, r0, r3
 800bba4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bba8:	429d      	cmp	r5, r3
 800bbaa:	bf28      	it	cs
 800bbac:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800bbb0:	490f      	ldr	r1, [pc, #60]	; (800bbf0 <_scanf_float+0x3c0>)
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	f000 f8a0 	bl	800bcf8 <siprintf>
 800bbb8:	e7aa      	b.n	800bb10 <_scanf_float+0x2e0>
 800bbba:	f015 0504 	ands.w	r5, r5, #4
 800bbbe:	d1b8      	bne.n	800bb32 <_scanf_float+0x302>
 800bbc0:	681f      	ldr	r7, [r3, #0]
 800bbc2:	ee10 2a10 	vmov	r2, s0
 800bbc6:	464b      	mov	r3, r9
 800bbc8:	ee10 0a10 	vmov	r0, s0
 800bbcc:	4649      	mov	r1, r9
 800bbce:	f7f4 ffad 	bl	8000b2c <__aeabi_dcmpun>
 800bbd2:	b128      	cbz	r0, 800bbe0 <_scanf_float+0x3b0>
 800bbd4:	4628      	mov	r0, r5
 800bbd6:	f000 f889 	bl	800bcec <nanf>
 800bbda:	ed87 0a00 	vstr	s0, [r7]
 800bbde:	e7ab      	b.n	800bb38 <_scanf_float+0x308>
 800bbe0:	4640      	mov	r0, r8
 800bbe2:	4649      	mov	r1, r9
 800bbe4:	f7f5 f800 	bl	8000be8 <__aeabi_d2f>
 800bbe8:	6038      	str	r0, [r7, #0]
 800bbea:	e7a5      	b.n	800bb38 <_scanf_float+0x308>
 800bbec:	2600      	movs	r6, #0
 800bbee:	e666      	b.n	800b8be <_scanf_float+0x8e>
 800bbf0:	0800f4a8 	.word	0x0800f4a8

0800bbf4 <iprintf>:
 800bbf4:	b40f      	push	{r0, r1, r2, r3}
 800bbf6:	4b0a      	ldr	r3, [pc, #40]	; (800bc20 <iprintf+0x2c>)
 800bbf8:	b513      	push	{r0, r1, r4, lr}
 800bbfa:	681c      	ldr	r4, [r3, #0]
 800bbfc:	b124      	cbz	r4, 800bc08 <iprintf+0x14>
 800bbfe:	69a3      	ldr	r3, [r4, #24]
 800bc00:	b913      	cbnz	r3, 800bc08 <iprintf+0x14>
 800bc02:	4620      	mov	r0, r4
 800bc04:	f001 ff3c 	bl	800da80 <__sinit>
 800bc08:	ab05      	add	r3, sp, #20
 800bc0a:	9a04      	ldr	r2, [sp, #16]
 800bc0c:	68a1      	ldr	r1, [r4, #8]
 800bc0e:	9301      	str	r3, [sp, #4]
 800bc10:	4620      	mov	r0, r4
 800bc12:	f003 f9a9 	bl	800ef68 <_vfiprintf_r>
 800bc16:	b002      	add	sp, #8
 800bc18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc1c:	b004      	add	sp, #16
 800bc1e:	4770      	bx	lr
 800bc20:	20000040 	.word	0x20000040

0800bc24 <_puts_r>:
 800bc24:	b570      	push	{r4, r5, r6, lr}
 800bc26:	460e      	mov	r6, r1
 800bc28:	4605      	mov	r5, r0
 800bc2a:	b118      	cbz	r0, 800bc34 <_puts_r+0x10>
 800bc2c:	6983      	ldr	r3, [r0, #24]
 800bc2e:	b90b      	cbnz	r3, 800bc34 <_puts_r+0x10>
 800bc30:	f001 ff26 	bl	800da80 <__sinit>
 800bc34:	69ab      	ldr	r3, [r5, #24]
 800bc36:	68ac      	ldr	r4, [r5, #8]
 800bc38:	b913      	cbnz	r3, 800bc40 <_puts_r+0x1c>
 800bc3a:	4628      	mov	r0, r5
 800bc3c:	f001 ff20 	bl	800da80 <__sinit>
 800bc40:	4b23      	ldr	r3, [pc, #140]	; (800bcd0 <_puts_r+0xac>)
 800bc42:	429c      	cmp	r4, r3
 800bc44:	d117      	bne.n	800bc76 <_puts_r+0x52>
 800bc46:	686c      	ldr	r4, [r5, #4]
 800bc48:	89a3      	ldrh	r3, [r4, #12]
 800bc4a:	071b      	lsls	r3, r3, #28
 800bc4c:	d51d      	bpl.n	800bc8a <_puts_r+0x66>
 800bc4e:	6923      	ldr	r3, [r4, #16]
 800bc50:	b1db      	cbz	r3, 800bc8a <_puts_r+0x66>
 800bc52:	3e01      	subs	r6, #1
 800bc54:	68a3      	ldr	r3, [r4, #8]
 800bc56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bc5a:	3b01      	subs	r3, #1
 800bc5c:	60a3      	str	r3, [r4, #8]
 800bc5e:	b9e9      	cbnz	r1, 800bc9c <_puts_r+0x78>
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	da2e      	bge.n	800bcc2 <_puts_r+0x9e>
 800bc64:	4622      	mov	r2, r4
 800bc66:	210a      	movs	r1, #10
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f000 ff13 	bl	800ca94 <__swbuf_r>
 800bc6e:	3001      	adds	r0, #1
 800bc70:	d011      	beq.n	800bc96 <_puts_r+0x72>
 800bc72:	200a      	movs	r0, #10
 800bc74:	e011      	b.n	800bc9a <_puts_r+0x76>
 800bc76:	4b17      	ldr	r3, [pc, #92]	; (800bcd4 <_puts_r+0xb0>)
 800bc78:	429c      	cmp	r4, r3
 800bc7a:	d101      	bne.n	800bc80 <_puts_r+0x5c>
 800bc7c:	68ac      	ldr	r4, [r5, #8]
 800bc7e:	e7e3      	b.n	800bc48 <_puts_r+0x24>
 800bc80:	4b15      	ldr	r3, [pc, #84]	; (800bcd8 <_puts_r+0xb4>)
 800bc82:	429c      	cmp	r4, r3
 800bc84:	bf08      	it	eq
 800bc86:	68ec      	ldreq	r4, [r5, #12]
 800bc88:	e7de      	b.n	800bc48 <_puts_r+0x24>
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	f000 ff53 	bl	800cb38 <__swsetup_r>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	d0dd      	beq.n	800bc52 <_puts_r+0x2e>
 800bc96:	f04f 30ff 	mov.w	r0, #4294967295
 800bc9a:	bd70      	pop	{r4, r5, r6, pc}
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	da04      	bge.n	800bcaa <_puts_r+0x86>
 800bca0:	69a2      	ldr	r2, [r4, #24]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	dc06      	bgt.n	800bcb4 <_puts_r+0x90>
 800bca6:	290a      	cmp	r1, #10
 800bca8:	d004      	beq.n	800bcb4 <_puts_r+0x90>
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	1c5a      	adds	r2, r3, #1
 800bcae:	6022      	str	r2, [r4, #0]
 800bcb0:	7019      	strb	r1, [r3, #0]
 800bcb2:	e7cf      	b.n	800bc54 <_puts_r+0x30>
 800bcb4:	4622      	mov	r2, r4
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	f000 feec 	bl	800ca94 <__swbuf_r>
 800bcbc:	3001      	adds	r0, #1
 800bcbe:	d1c9      	bne.n	800bc54 <_puts_r+0x30>
 800bcc0:	e7e9      	b.n	800bc96 <_puts_r+0x72>
 800bcc2:	6823      	ldr	r3, [r4, #0]
 800bcc4:	200a      	movs	r0, #10
 800bcc6:	1c5a      	adds	r2, r3, #1
 800bcc8:	6022      	str	r2, [r4, #0]
 800bcca:	7018      	strb	r0, [r3, #0]
 800bccc:	e7e5      	b.n	800bc9a <_puts_r+0x76>
 800bcce:	bf00      	nop
 800bcd0:	0800f530 	.word	0x0800f530
 800bcd4:	0800f550 	.word	0x0800f550
 800bcd8:	0800f510 	.word	0x0800f510

0800bcdc <puts>:
 800bcdc:	4b02      	ldr	r3, [pc, #8]	; (800bce8 <puts+0xc>)
 800bcde:	4601      	mov	r1, r0
 800bce0:	6818      	ldr	r0, [r3, #0]
 800bce2:	f7ff bf9f 	b.w	800bc24 <_puts_r>
 800bce6:	bf00      	nop
 800bce8:	20000040 	.word	0x20000040

0800bcec <nanf>:
 800bcec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bcf4 <nanf+0x8>
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	7fc00000 	.word	0x7fc00000

0800bcf8 <siprintf>:
 800bcf8:	b40e      	push	{r1, r2, r3}
 800bcfa:	b500      	push	{lr}
 800bcfc:	b09c      	sub	sp, #112	; 0x70
 800bcfe:	ab1d      	add	r3, sp, #116	; 0x74
 800bd00:	9002      	str	r0, [sp, #8]
 800bd02:	9006      	str	r0, [sp, #24]
 800bd04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd08:	4809      	ldr	r0, [pc, #36]	; (800bd30 <siprintf+0x38>)
 800bd0a:	9107      	str	r1, [sp, #28]
 800bd0c:	9104      	str	r1, [sp, #16]
 800bd0e:	4909      	ldr	r1, [pc, #36]	; (800bd34 <siprintf+0x3c>)
 800bd10:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd14:	9105      	str	r1, [sp, #20]
 800bd16:	6800      	ldr	r0, [r0, #0]
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	a902      	add	r1, sp, #8
 800bd1c:	f003 f802 	bl	800ed24 <_svfiprintf_r>
 800bd20:	9b02      	ldr	r3, [sp, #8]
 800bd22:	2200      	movs	r2, #0
 800bd24:	701a      	strb	r2, [r3, #0]
 800bd26:	b01c      	add	sp, #112	; 0x70
 800bd28:	f85d eb04 	ldr.w	lr, [sp], #4
 800bd2c:	b003      	add	sp, #12
 800bd2e:	4770      	bx	lr
 800bd30:	20000040 	.word	0x20000040
 800bd34:	ffff0208 	.word	0xffff0208

0800bd38 <sulp>:
 800bd38:	b570      	push	{r4, r5, r6, lr}
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	460d      	mov	r5, r1
 800bd3e:	ec45 4b10 	vmov	d0, r4, r5
 800bd42:	4616      	mov	r6, r2
 800bd44:	f002 fdaa 	bl	800e89c <__ulp>
 800bd48:	ec51 0b10 	vmov	r0, r1, d0
 800bd4c:	b17e      	cbz	r6, 800bd6e <sulp+0x36>
 800bd4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	dd09      	ble.n	800bd6e <sulp+0x36>
 800bd5a:	051b      	lsls	r3, r3, #20
 800bd5c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800bd60:	2400      	movs	r4, #0
 800bd62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800bd66:	4622      	mov	r2, r4
 800bd68:	462b      	mov	r3, r5
 800bd6a:	f7f4 fc45 	bl	80005f8 <__aeabi_dmul>
 800bd6e:	bd70      	pop	{r4, r5, r6, pc}

0800bd70 <_strtod_l>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	461f      	mov	r7, r3
 800bd76:	b0a1      	sub	sp, #132	; 0x84
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4681      	mov	r9, r0
 800bd7c:	4638      	mov	r0, r7
 800bd7e:	460e      	mov	r6, r1
 800bd80:	9217      	str	r2, [sp, #92]	; 0x5c
 800bd82:	931c      	str	r3, [sp, #112]	; 0x70
 800bd84:	f002 fa2f 	bl	800e1e6 <__localeconv_l>
 800bd88:	4680      	mov	r8, r0
 800bd8a:	6800      	ldr	r0, [r0, #0]
 800bd8c:	f7f4 fa20 	bl	80001d0 <strlen>
 800bd90:	f04f 0a00 	mov.w	sl, #0
 800bd94:	4604      	mov	r4, r0
 800bd96:	f04f 0b00 	mov.w	fp, #0
 800bd9a:	961b      	str	r6, [sp, #108]	; 0x6c
 800bd9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd9e:	781a      	ldrb	r2, [r3, #0]
 800bda0:	2a0d      	cmp	r2, #13
 800bda2:	d832      	bhi.n	800be0a <_strtod_l+0x9a>
 800bda4:	2a09      	cmp	r2, #9
 800bda6:	d236      	bcs.n	800be16 <_strtod_l+0xa6>
 800bda8:	2a00      	cmp	r2, #0
 800bdaa:	d03e      	beq.n	800be2a <_strtod_l+0xba>
 800bdac:	2300      	movs	r3, #0
 800bdae:	930d      	str	r3, [sp, #52]	; 0x34
 800bdb0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800bdb2:	782b      	ldrb	r3, [r5, #0]
 800bdb4:	2b30      	cmp	r3, #48	; 0x30
 800bdb6:	f040 80ac 	bne.w	800bf12 <_strtod_l+0x1a2>
 800bdba:	786b      	ldrb	r3, [r5, #1]
 800bdbc:	2b58      	cmp	r3, #88	; 0x58
 800bdbe:	d001      	beq.n	800bdc4 <_strtod_l+0x54>
 800bdc0:	2b78      	cmp	r3, #120	; 0x78
 800bdc2:	d167      	bne.n	800be94 <_strtod_l+0x124>
 800bdc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdc6:	9301      	str	r3, [sp, #4]
 800bdc8:	ab1c      	add	r3, sp, #112	; 0x70
 800bdca:	9300      	str	r3, [sp, #0]
 800bdcc:	9702      	str	r7, [sp, #8]
 800bdce:	ab1d      	add	r3, sp, #116	; 0x74
 800bdd0:	4a88      	ldr	r2, [pc, #544]	; (800bff4 <_strtod_l+0x284>)
 800bdd2:	a91b      	add	r1, sp, #108	; 0x6c
 800bdd4:	4648      	mov	r0, r9
 800bdd6:	f001 ff2c 	bl	800dc32 <__gethex>
 800bdda:	f010 0407 	ands.w	r4, r0, #7
 800bdde:	4606      	mov	r6, r0
 800bde0:	d005      	beq.n	800bdee <_strtod_l+0x7e>
 800bde2:	2c06      	cmp	r4, #6
 800bde4:	d12b      	bne.n	800be3e <_strtod_l+0xce>
 800bde6:	3501      	adds	r5, #1
 800bde8:	2300      	movs	r3, #0
 800bdea:	951b      	str	r5, [sp, #108]	; 0x6c
 800bdec:	930d      	str	r3, [sp, #52]	; 0x34
 800bdee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f040 859a 	bne.w	800c92a <_strtod_l+0xbba>
 800bdf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdf8:	b1e3      	cbz	r3, 800be34 <_strtod_l+0xc4>
 800bdfa:	4652      	mov	r2, sl
 800bdfc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800be00:	ec43 2b10 	vmov	d0, r2, r3
 800be04:	b021      	add	sp, #132	; 0x84
 800be06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be0a:	2a2b      	cmp	r2, #43	; 0x2b
 800be0c:	d015      	beq.n	800be3a <_strtod_l+0xca>
 800be0e:	2a2d      	cmp	r2, #45	; 0x2d
 800be10:	d004      	beq.n	800be1c <_strtod_l+0xac>
 800be12:	2a20      	cmp	r2, #32
 800be14:	d1ca      	bne.n	800bdac <_strtod_l+0x3c>
 800be16:	3301      	adds	r3, #1
 800be18:	931b      	str	r3, [sp, #108]	; 0x6c
 800be1a:	e7bf      	b.n	800bd9c <_strtod_l+0x2c>
 800be1c:	2201      	movs	r2, #1
 800be1e:	920d      	str	r2, [sp, #52]	; 0x34
 800be20:	1c5a      	adds	r2, r3, #1
 800be22:	921b      	str	r2, [sp, #108]	; 0x6c
 800be24:	785b      	ldrb	r3, [r3, #1]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d1c2      	bne.n	800bdb0 <_strtod_l+0x40>
 800be2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800be2c:	961b      	str	r6, [sp, #108]	; 0x6c
 800be2e:	2b00      	cmp	r3, #0
 800be30:	f040 8579 	bne.w	800c926 <_strtod_l+0xbb6>
 800be34:	4652      	mov	r2, sl
 800be36:	465b      	mov	r3, fp
 800be38:	e7e2      	b.n	800be00 <_strtod_l+0x90>
 800be3a:	2200      	movs	r2, #0
 800be3c:	e7ef      	b.n	800be1e <_strtod_l+0xae>
 800be3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800be40:	b13a      	cbz	r2, 800be52 <_strtod_l+0xe2>
 800be42:	2135      	movs	r1, #53	; 0x35
 800be44:	a81e      	add	r0, sp, #120	; 0x78
 800be46:	f002 fe21 	bl	800ea8c <__copybits>
 800be4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800be4c:	4648      	mov	r0, r9
 800be4e:	f002 fa8d 	bl	800e36c <_Bfree>
 800be52:	3c01      	subs	r4, #1
 800be54:	2c04      	cmp	r4, #4
 800be56:	d806      	bhi.n	800be66 <_strtod_l+0xf6>
 800be58:	e8df f004 	tbb	[pc, r4]
 800be5c:	1714030a 	.word	0x1714030a
 800be60:	0a          	.byte	0x0a
 800be61:	00          	.byte	0x00
 800be62:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800be66:	0730      	lsls	r0, r6, #28
 800be68:	d5c1      	bpl.n	800bdee <_strtod_l+0x7e>
 800be6a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800be6e:	e7be      	b.n	800bdee <_strtod_l+0x7e>
 800be70:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800be74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800be76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be7a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be7e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800be82:	e7f0      	b.n	800be66 <_strtod_l+0xf6>
 800be84:	f8df b170 	ldr.w	fp, [pc, #368]	; 800bff8 <_strtod_l+0x288>
 800be88:	e7ed      	b.n	800be66 <_strtod_l+0xf6>
 800be8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800be8e:	f04f 3aff 	mov.w	sl, #4294967295
 800be92:	e7e8      	b.n	800be66 <_strtod_l+0xf6>
 800be94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	921b      	str	r2, [sp, #108]	; 0x6c
 800be9a:	785b      	ldrb	r3, [r3, #1]
 800be9c:	2b30      	cmp	r3, #48	; 0x30
 800be9e:	d0f9      	beq.n	800be94 <_strtod_l+0x124>
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d0a4      	beq.n	800bdee <_strtod_l+0x7e>
 800bea4:	2301      	movs	r3, #1
 800bea6:	2500      	movs	r5, #0
 800bea8:	9306      	str	r3, [sp, #24]
 800beaa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800beac:	9308      	str	r3, [sp, #32]
 800beae:	9507      	str	r5, [sp, #28]
 800beb0:	9505      	str	r5, [sp, #20]
 800beb2:	220a      	movs	r2, #10
 800beb4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800beb6:	7807      	ldrb	r7, [r0, #0]
 800beb8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800bebc:	b2d9      	uxtb	r1, r3
 800bebe:	2909      	cmp	r1, #9
 800bec0:	d929      	bls.n	800bf16 <_strtod_l+0x1a6>
 800bec2:	4622      	mov	r2, r4
 800bec4:	f8d8 1000 	ldr.w	r1, [r8]
 800bec8:	f003 f9b7 	bl	800f23a <strncmp>
 800becc:	2800      	cmp	r0, #0
 800bece:	d031      	beq.n	800bf34 <_strtod_l+0x1c4>
 800bed0:	2000      	movs	r0, #0
 800bed2:	9c05      	ldr	r4, [sp, #20]
 800bed4:	9004      	str	r0, [sp, #16]
 800bed6:	463b      	mov	r3, r7
 800bed8:	4602      	mov	r2, r0
 800beda:	2b65      	cmp	r3, #101	; 0x65
 800bedc:	d001      	beq.n	800bee2 <_strtod_l+0x172>
 800bede:	2b45      	cmp	r3, #69	; 0x45
 800bee0:	d114      	bne.n	800bf0c <_strtod_l+0x19c>
 800bee2:	b924      	cbnz	r4, 800beee <_strtod_l+0x17e>
 800bee4:	b910      	cbnz	r0, 800beec <_strtod_l+0x17c>
 800bee6:	9b06      	ldr	r3, [sp, #24]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d09e      	beq.n	800be2a <_strtod_l+0xba>
 800beec:	2400      	movs	r4, #0
 800beee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800bef0:	1c73      	adds	r3, r6, #1
 800bef2:	931b      	str	r3, [sp, #108]	; 0x6c
 800bef4:	7873      	ldrb	r3, [r6, #1]
 800bef6:	2b2b      	cmp	r3, #43	; 0x2b
 800bef8:	d078      	beq.n	800bfec <_strtod_l+0x27c>
 800befa:	2b2d      	cmp	r3, #45	; 0x2d
 800befc:	d070      	beq.n	800bfe0 <_strtod_l+0x270>
 800befe:	f04f 0c00 	mov.w	ip, #0
 800bf02:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800bf06:	2f09      	cmp	r7, #9
 800bf08:	d97c      	bls.n	800c004 <_strtod_l+0x294>
 800bf0a:	961b      	str	r6, [sp, #108]	; 0x6c
 800bf0c:	f04f 0e00 	mov.w	lr, #0
 800bf10:	e09a      	b.n	800c048 <_strtod_l+0x2d8>
 800bf12:	2300      	movs	r3, #0
 800bf14:	e7c7      	b.n	800bea6 <_strtod_l+0x136>
 800bf16:	9905      	ldr	r1, [sp, #20]
 800bf18:	2908      	cmp	r1, #8
 800bf1a:	bfdd      	ittte	le
 800bf1c:	9907      	ldrle	r1, [sp, #28]
 800bf1e:	fb02 3301 	mlale	r3, r2, r1, r3
 800bf22:	9307      	strle	r3, [sp, #28]
 800bf24:	fb02 3505 	mlagt	r5, r2, r5, r3
 800bf28:	9b05      	ldr	r3, [sp, #20]
 800bf2a:	3001      	adds	r0, #1
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	9305      	str	r3, [sp, #20]
 800bf30:	901b      	str	r0, [sp, #108]	; 0x6c
 800bf32:	e7bf      	b.n	800beb4 <_strtod_l+0x144>
 800bf34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf36:	191a      	adds	r2, r3, r4
 800bf38:	921b      	str	r2, [sp, #108]	; 0x6c
 800bf3a:	9a05      	ldr	r2, [sp, #20]
 800bf3c:	5d1b      	ldrb	r3, [r3, r4]
 800bf3e:	2a00      	cmp	r2, #0
 800bf40:	d037      	beq.n	800bfb2 <_strtod_l+0x242>
 800bf42:	9c05      	ldr	r4, [sp, #20]
 800bf44:	4602      	mov	r2, r0
 800bf46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bf4a:	2909      	cmp	r1, #9
 800bf4c:	d913      	bls.n	800bf76 <_strtod_l+0x206>
 800bf4e:	2101      	movs	r1, #1
 800bf50:	9104      	str	r1, [sp, #16]
 800bf52:	e7c2      	b.n	800beda <_strtod_l+0x16a>
 800bf54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bf56:	1c5a      	adds	r2, r3, #1
 800bf58:	921b      	str	r2, [sp, #108]	; 0x6c
 800bf5a:	785b      	ldrb	r3, [r3, #1]
 800bf5c:	3001      	adds	r0, #1
 800bf5e:	2b30      	cmp	r3, #48	; 0x30
 800bf60:	d0f8      	beq.n	800bf54 <_strtod_l+0x1e4>
 800bf62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800bf66:	2a08      	cmp	r2, #8
 800bf68:	f200 84e4 	bhi.w	800c934 <_strtod_l+0xbc4>
 800bf6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800bf6e:	9208      	str	r2, [sp, #32]
 800bf70:	4602      	mov	r2, r0
 800bf72:	2000      	movs	r0, #0
 800bf74:	4604      	mov	r4, r0
 800bf76:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800bf7a:	f100 0101 	add.w	r1, r0, #1
 800bf7e:	d012      	beq.n	800bfa6 <_strtod_l+0x236>
 800bf80:	440a      	add	r2, r1
 800bf82:	eb00 0c04 	add.w	ip, r0, r4
 800bf86:	4621      	mov	r1, r4
 800bf88:	270a      	movs	r7, #10
 800bf8a:	458c      	cmp	ip, r1
 800bf8c:	d113      	bne.n	800bfb6 <_strtod_l+0x246>
 800bf8e:	1821      	adds	r1, r4, r0
 800bf90:	2908      	cmp	r1, #8
 800bf92:	f104 0401 	add.w	r4, r4, #1
 800bf96:	4404      	add	r4, r0
 800bf98:	dc19      	bgt.n	800bfce <_strtod_l+0x25e>
 800bf9a:	9b07      	ldr	r3, [sp, #28]
 800bf9c:	210a      	movs	r1, #10
 800bf9e:	fb01 e303 	mla	r3, r1, r3, lr
 800bfa2:	9307      	str	r3, [sp, #28]
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bfa8:	1c58      	adds	r0, r3, #1
 800bfaa:	901b      	str	r0, [sp, #108]	; 0x6c
 800bfac:	785b      	ldrb	r3, [r3, #1]
 800bfae:	4608      	mov	r0, r1
 800bfb0:	e7c9      	b.n	800bf46 <_strtod_l+0x1d6>
 800bfb2:	9805      	ldr	r0, [sp, #20]
 800bfb4:	e7d3      	b.n	800bf5e <_strtod_l+0x1ee>
 800bfb6:	2908      	cmp	r1, #8
 800bfb8:	f101 0101 	add.w	r1, r1, #1
 800bfbc:	dc03      	bgt.n	800bfc6 <_strtod_l+0x256>
 800bfbe:	9b07      	ldr	r3, [sp, #28]
 800bfc0:	437b      	muls	r3, r7
 800bfc2:	9307      	str	r3, [sp, #28]
 800bfc4:	e7e1      	b.n	800bf8a <_strtod_l+0x21a>
 800bfc6:	2910      	cmp	r1, #16
 800bfc8:	bfd8      	it	le
 800bfca:	437d      	mulle	r5, r7
 800bfcc:	e7dd      	b.n	800bf8a <_strtod_l+0x21a>
 800bfce:	2c10      	cmp	r4, #16
 800bfd0:	bfdc      	itt	le
 800bfd2:	210a      	movle	r1, #10
 800bfd4:	fb01 e505 	mlale	r5, r1, r5, lr
 800bfd8:	e7e4      	b.n	800bfa4 <_strtod_l+0x234>
 800bfda:	2301      	movs	r3, #1
 800bfdc:	9304      	str	r3, [sp, #16]
 800bfde:	e781      	b.n	800bee4 <_strtod_l+0x174>
 800bfe0:	f04f 0c01 	mov.w	ip, #1
 800bfe4:	1cb3      	adds	r3, r6, #2
 800bfe6:	931b      	str	r3, [sp, #108]	; 0x6c
 800bfe8:	78b3      	ldrb	r3, [r6, #2]
 800bfea:	e78a      	b.n	800bf02 <_strtod_l+0x192>
 800bfec:	f04f 0c00 	mov.w	ip, #0
 800bff0:	e7f8      	b.n	800bfe4 <_strtod_l+0x274>
 800bff2:	bf00      	nop
 800bff4:	0800f4b0 	.word	0x0800f4b0
 800bff8:	7ff00000 	.word	0x7ff00000
 800bffc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bffe:	1c5f      	adds	r7, r3, #1
 800c000:	971b      	str	r7, [sp, #108]	; 0x6c
 800c002:	785b      	ldrb	r3, [r3, #1]
 800c004:	2b30      	cmp	r3, #48	; 0x30
 800c006:	d0f9      	beq.n	800bffc <_strtod_l+0x28c>
 800c008:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c00c:	2f08      	cmp	r7, #8
 800c00e:	f63f af7d 	bhi.w	800bf0c <_strtod_l+0x19c>
 800c012:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c016:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c018:	930a      	str	r3, [sp, #40]	; 0x28
 800c01a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c01c:	1c5f      	adds	r7, r3, #1
 800c01e:	971b      	str	r7, [sp, #108]	; 0x6c
 800c020:	785b      	ldrb	r3, [r3, #1]
 800c022:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c026:	f1b8 0f09 	cmp.w	r8, #9
 800c02a:	d937      	bls.n	800c09c <_strtod_l+0x32c>
 800c02c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c02e:	1a7f      	subs	r7, r7, r1
 800c030:	2f08      	cmp	r7, #8
 800c032:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c036:	dc37      	bgt.n	800c0a8 <_strtod_l+0x338>
 800c038:	45be      	cmp	lr, r7
 800c03a:	bfa8      	it	ge
 800c03c:	46be      	movge	lr, r7
 800c03e:	f1bc 0f00 	cmp.w	ip, #0
 800c042:	d001      	beq.n	800c048 <_strtod_l+0x2d8>
 800c044:	f1ce 0e00 	rsb	lr, lr, #0
 800c048:	2c00      	cmp	r4, #0
 800c04a:	d151      	bne.n	800c0f0 <_strtod_l+0x380>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	f47f aece 	bne.w	800bdee <_strtod_l+0x7e>
 800c052:	9a06      	ldr	r2, [sp, #24]
 800c054:	2a00      	cmp	r2, #0
 800c056:	f47f aeca 	bne.w	800bdee <_strtod_l+0x7e>
 800c05a:	9a04      	ldr	r2, [sp, #16]
 800c05c:	2a00      	cmp	r2, #0
 800c05e:	f47f aee4 	bne.w	800be2a <_strtod_l+0xba>
 800c062:	2b4e      	cmp	r3, #78	; 0x4e
 800c064:	d027      	beq.n	800c0b6 <_strtod_l+0x346>
 800c066:	dc21      	bgt.n	800c0ac <_strtod_l+0x33c>
 800c068:	2b49      	cmp	r3, #73	; 0x49
 800c06a:	f47f aede 	bne.w	800be2a <_strtod_l+0xba>
 800c06e:	49a0      	ldr	r1, [pc, #640]	; (800c2f0 <_strtod_l+0x580>)
 800c070:	a81b      	add	r0, sp, #108	; 0x6c
 800c072:	f002 f811 	bl	800e098 <__match>
 800c076:	2800      	cmp	r0, #0
 800c078:	f43f aed7 	beq.w	800be2a <_strtod_l+0xba>
 800c07c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c07e:	499d      	ldr	r1, [pc, #628]	; (800c2f4 <_strtod_l+0x584>)
 800c080:	3b01      	subs	r3, #1
 800c082:	a81b      	add	r0, sp, #108	; 0x6c
 800c084:	931b      	str	r3, [sp, #108]	; 0x6c
 800c086:	f002 f807 	bl	800e098 <__match>
 800c08a:	b910      	cbnz	r0, 800c092 <_strtod_l+0x322>
 800c08c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c08e:	3301      	adds	r3, #1
 800c090:	931b      	str	r3, [sp, #108]	; 0x6c
 800c092:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c308 <_strtod_l+0x598>
 800c096:	f04f 0a00 	mov.w	sl, #0
 800c09a:	e6a8      	b.n	800bdee <_strtod_l+0x7e>
 800c09c:	210a      	movs	r1, #10
 800c09e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c0a2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c0a6:	e7b8      	b.n	800c01a <_strtod_l+0x2aa>
 800c0a8:	46be      	mov	lr, r7
 800c0aa:	e7c8      	b.n	800c03e <_strtod_l+0x2ce>
 800c0ac:	2b69      	cmp	r3, #105	; 0x69
 800c0ae:	d0de      	beq.n	800c06e <_strtod_l+0x2fe>
 800c0b0:	2b6e      	cmp	r3, #110	; 0x6e
 800c0b2:	f47f aeba 	bne.w	800be2a <_strtod_l+0xba>
 800c0b6:	4990      	ldr	r1, [pc, #576]	; (800c2f8 <_strtod_l+0x588>)
 800c0b8:	a81b      	add	r0, sp, #108	; 0x6c
 800c0ba:	f001 ffed 	bl	800e098 <__match>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f43f aeb3 	beq.w	800be2a <_strtod_l+0xba>
 800c0c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	2b28      	cmp	r3, #40	; 0x28
 800c0ca:	d10e      	bne.n	800c0ea <_strtod_l+0x37a>
 800c0cc:	aa1e      	add	r2, sp, #120	; 0x78
 800c0ce:	498b      	ldr	r1, [pc, #556]	; (800c2fc <_strtod_l+0x58c>)
 800c0d0:	a81b      	add	r0, sp, #108	; 0x6c
 800c0d2:	f001 fff5 	bl	800e0c0 <__hexnan>
 800c0d6:	2805      	cmp	r0, #5
 800c0d8:	d107      	bne.n	800c0ea <_strtod_l+0x37a>
 800c0da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c0dc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800c0e0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c0e4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c0e8:	e681      	b.n	800bdee <_strtod_l+0x7e>
 800c0ea:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c310 <_strtod_l+0x5a0>
 800c0ee:	e7d2      	b.n	800c096 <_strtod_l+0x326>
 800c0f0:	ebae 0302 	sub.w	r3, lr, r2
 800c0f4:	9306      	str	r3, [sp, #24]
 800c0f6:	9b05      	ldr	r3, [sp, #20]
 800c0f8:	9807      	ldr	r0, [sp, #28]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	bf08      	it	eq
 800c0fe:	4623      	moveq	r3, r4
 800c100:	2c10      	cmp	r4, #16
 800c102:	9305      	str	r3, [sp, #20]
 800c104:	46a0      	mov	r8, r4
 800c106:	bfa8      	it	ge
 800c108:	f04f 0810 	movge.w	r8, #16
 800c10c:	f7f4 f9fa 	bl	8000504 <__aeabi_ui2d>
 800c110:	2c09      	cmp	r4, #9
 800c112:	4682      	mov	sl, r0
 800c114:	468b      	mov	fp, r1
 800c116:	dc13      	bgt.n	800c140 <_strtod_l+0x3d0>
 800c118:	9b06      	ldr	r3, [sp, #24]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f43f ae67 	beq.w	800bdee <_strtod_l+0x7e>
 800c120:	9b06      	ldr	r3, [sp, #24]
 800c122:	dd7a      	ble.n	800c21a <_strtod_l+0x4aa>
 800c124:	2b16      	cmp	r3, #22
 800c126:	dc61      	bgt.n	800c1ec <_strtod_l+0x47c>
 800c128:	4a75      	ldr	r2, [pc, #468]	; (800c300 <_strtod_l+0x590>)
 800c12a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c12e:	e9de 0100 	ldrd	r0, r1, [lr]
 800c132:	4652      	mov	r2, sl
 800c134:	465b      	mov	r3, fp
 800c136:	f7f4 fa5f 	bl	80005f8 <__aeabi_dmul>
 800c13a:	4682      	mov	sl, r0
 800c13c:	468b      	mov	fp, r1
 800c13e:	e656      	b.n	800bdee <_strtod_l+0x7e>
 800c140:	4b6f      	ldr	r3, [pc, #444]	; (800c300 <_strtod_l+0x590>)
 800c142:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c146:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c14a:	f7f4 fa55 	bl	80005f8 <__aeabi_dmul>
 800c14e:	4606      	mov	r6, r0
 800c150:	4628      	mov	r0, r5
 800c152:	460f      	mov	r7, r1
 800c154:	f7f4 f9d6 	bl	8000504 <__aeabi_ui2d>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	4630      	mov	r0, r6
 800c15e:	4639      	mov	r1, r7
 800c160:	f7f4 f894 	bl	800028c <__adddf3>
 800c164:	2c0f      	cmp	r4, #15
 800c166:	4682      	mov	sl, r0
 800c168:	468b      	mov	fp, r1
 800c16a:	ddd5      	ble.n	800c118 <_strtod_l+0x3a8>
 800c16c:	9b06      	ldr	r3, [sp, #24]
 800c16e:	eba4 0808 	sub.w	r8, r4, r8
 800c172:	4498      	add	r8, r3
 800c174:	f1b8 0f00 	cmp.w	r8, #0
 800c178:	f340 8096 	ble.w	800c2a8 <_strtod_l+0x538>
 800c17c:	f018 030f 	ands.w	r3, r8, #15
 800c180:	d00a      	beq.n	800c198 <_strtod_l+0x428>
 800c182:	495f      	ldr	r1, [pc, #380]	; (800c300 <_strtod_l+0x590>)
 800c184:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c188:	4652      	mov	r2, sl
 800c18a:	465b      	mov	r3, fp
 800c18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c190:	f7f4 fa32 	bl	80005f8 <__aeabi_dmul>
 800c194:	4682      	mov	sl, r0
 800c196:	468b      	mov	fp, r1
 800c198:	f038 080f 	bics.w	r8, r8, #15
 800c19c:	d073      	beq.n	800c286 <_strtod_l+0x516>
 800c19e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c1a2:	dd47      	ble.n	800c234 <_strtod_l+0x4c4>
 800c1a4:	2400      	movs	r4, #0
 800c1a6:	46a0      	mov	r8, r4
 800c1a8:	9407      	str	r4, [sp, #28]
 800c1aa:	9405      	str	r4, [sp, #20]
 800c1ac:	2322      	movs	r3, #34	; 0x22
 800c1ae:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c308 <_strtod_l+0x598>
 800c1b2:	f8c9 3000 	str.w	r3, [r9]
 800c1b6:	f04f 0a00 	mov.w	sl, #0
 800c1ba:	9b07      	ldr	r3, [sp, #28]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f43f ae16 	beq.w	800bdee <_strtod_l+0x7e>
 800c1c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c1c4:	4648      	mov	r0, r9
 800c1c6:	f002 f8d1 	bl	800e36c <_Bfree>
 800c1ca:	9905      	ldr	r1, [sp, #20]
 800c1cc:	4648      	mov	r0, r9
 800c1ce:	f002 f8cd 	bl	800e36c <_Bfree>
 800c1d2:	4641      	mov	r1, r8
 800c1d4:	4648      	mov	r0, r9
 800c1d6:	f002 f8c9 	bl	800e36c <_Bfree>
 800c1da:	9907      	ldr	r1, [sp, #28]
 800c1dc:	4648      	mov	r0, r9
 800c1de:	f002 f8c5 	bl	800e36c <_Bfree>
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	4648      	mov	r0, r9
 800c1e6:	f002 f8c1 	bl	800e36c <_Bfree>
 800c1ea:	e600      	b.n	800bdee <_strtod_l+0x7e>
 800c1ec:	9a06      	ldr	r2, [sp, #24]
 800c1ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c1f2:	4293      	cmp	r3, r2
 800c1f4:	dbba      	blt.n	800c16c <_strtod_l+0x3fc>
 800c1f6:	4d42      	ldr	r5, [pc, #264]	; (800c300 <_strtod_l+0x590>)
 800c1f8:	f1c4 040f 	rsb	r4, r4, #15
 800c1fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c200:	4652      	mov	r2, sl
 800c202:	465b      	mov	r3, fp
 800c204:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c208:	f7f4 f9f6 	bl	80005f8 <__aeabi_dmul>
 800c20c:	9b06      	ldr	r3, [sp, #24]
 800c20e:	1b1c      	subs	r4, r3, r4
 800c210:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c214:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c218:	e78d      	b.n	800c136 <_strtod_l+0x3c6>
 800c21a:	f113 0f16 	cmn.w	r3, #22
 800c21e:	dba5      	blt.n	800c16c <_strtod_l+0x3fc>
 800c220:	4a37      	ldr	r2, [pc, #220]	; (800c300 <_strtod_l+0x590>)
 800c222:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c226:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c22a:	4650      	mov	r0, sl
 800c22c:	4659      	mov	r1, fp
 800c22e:	f7f4 fb0d 	bl	800084c <__aeabi_ddiv>
 800c232:	e782      	b.n	800c13a <_strtod_l+0x3ca>
 800c234:	2300      	movs	r3, #0
 800c236:	4e33      	ldr	r6, [pc, #204]	; (800c304 <_strtod_l+0x594>)
 800c238:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c23c:	4650      	mov	r0, sl
 800c23e:	4659      	mov	r1, fp
 800c240:	461d      	mov	r5, r3
 800c242:	f1b8 0f01 	cmp.w	r8, #1
 800c246:	dc21      	bgt.n	800c28c <_strtod_l+0x51c>
 800c248:	b10b      	cbz	r3, 800c24e <_strtod_l+0x4de>
 800c24a:	4682      	mov	sl, r0
 800c24c:	468b      	mov	fp, r1
 800c24e:	4b2d      	ldr	r3, [pc, #180]	; (800c304 <_strtod_l+0x594>)
 800c250:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c254:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c258:	4652      	mov	r2, sl
 800c25a:	465b      	mov	r3, fp
 800c25c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c260:	f7f4 f9ca 	bl	80005f8 <__aeabi_dmul>
 800c264:	4b28      	ldr	r3, [pc, #160]	; (800c308 <_strtod_l+0x598>)
 800c266:	460a      	mov	r2, r1
 800c268:	400b      	ands	r3, r1
 800c26a:	4928      	ldr	r1, [pc, #160]	; (800c30c <_strtod_l+0x59c>)
 800c26c:	428b      	cmp	r3, r1
 800c26e:	4682      	mov	sl, r0
 800c270:	d898      	bhi.n	800c1a4 <_strtod_l+0x434>
 800c272:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c276:	428b      	cmp	r3, r1
 800c278:	bf86      	itte	hi
 800c27a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c314 <_strtod_l+0x5a4>
 800c27e:	f04f 3aff 	movhi.w	sl, #4294967295
 800c282:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c286:	2300      	movs	r3, #0
 800c288:	9304      	str	r3, [sp, #16]
 800c28a:	e077      	b.n	800c37c <_strtod_l+0x60c>
 800c28c:	f018 0f01 	tst.w	r8, #1
 800c290:	d006      	beq.n	800c2a0 <_strtod_l+0x530>
 800c292:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29a:	f7f4 f9ad 	bl	80005f8 <__aeabi_dmul>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	3501      	adds	r5, #1
 800c2a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c2a6:	e7cc      	b.n	800c242 <_strtod_l+0x4d2>
 800c2a8:	d0ed      	beq.n	800c286 <_strtod_l+0x516>
 800c2aa:	f1c8 0800 	rsb	r8, r8, #0
 800c2ae:	f018 020f 	ands.w	r2, r8, #15
 800c2b2:	d00a      	beq.n	800c2ca <_strtod_l+0x55a>
 800c2b4:	4b12      	ldr	r3, [pc, #72]	; (800c300 <_strtod_l+0x590>)
 800c2b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c2ba:	4650      	mov	r0, sl
 800c2bc:	4659      	mov	r1, fp
 800c2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c2:	f7f4 fac3 	bl	800084c <__aeabi_ddiv>
 800c2c6:	4682      	mov	sl, r0
 800c2c8:	468b      	mov	fp, r1
 800c2ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c2ce:	d0da      	beq.n	800c286 <_strtod_l+0x516>
 800c2d0:	f1b8 0f1f 	cmp.w	r8, #31
 800c2d4:	dd20      	ble.n	800c318 <_strtod_l+0x5a8>
 800c2d6:	2400      	movs	r4, #0
 800c2d8:	46a0      	mov	r8, r4
 800c2da:	9407      	str	r4, [sp, #28]
 800c2dc:	9405      	str	r4, [sp, #20]
 800c2de:	2322      	movs	r3, #34	; 0x22
 800c2e0:	f04f 0a00 	mov.w	sl, #0
 800c2e4:	f04f 0b00 	mov.w	fp, #0
 800c2e8:	f8c9 3000 	str.w	r3, [r9]
 800c2ec:	e765      	b.n	800c1ba <_strtod_l+0x44a>
 800c2ee:	bf00      	nop
 800c2f0:	0800f479 	.word	0x0800f479
 800c2f4:	0800f503 	.word	0x0800f503
 800c2f8:	0800f481 	.word	0x0800f481
 800c2fc:	0800f4c4 	.word	0x0800f4c4
 800c300:	0800f5a8 	.word	0x0800f5a8
 800c304:	0800f580 	.word	0x0800f580
 800c308:	7ff00000 	.word	0x7ff00000
 800c30c:	7ca00000 	.word	0x7ca00000
 800c310:	fff80000 	.word	0xfff80000
 800c314:	7fefffff 	.word	0x7fefffff
 800c318:	f018 0310 	ands.w	r3, r8, #16
 800c31c:	bf18      	it	ne
 800c31e:	236a      	movne	r3, #106	; 0x6a
 800c320:	4da0      	ldr	r5, [pc, #640]	; (800c5a4 <_strtod_l+0x834>)
 800c322:	9304      	str	r3, [sp, #16]
 800c324:	4650      	mov	r0, sl
 800c326:	4659      	mov	r1, fp
 800c328:	2300      	movs	r3, #0
 800c32a:	f1b8 0f00 	cmp.w	r8, #0
 800c32e:	f300 810a 	bgt.w	800c546 <_strtod_l+0x7d6>
 800c332:	b10b      	cbz	r3, 800c338 <_strtod_l+0x5c8>
 800c334:	4682      	mov	sl, r0
 800c336:	468b      	mov	fp, r1
 800c338:	9b04      	ldr	r3, [sp, #16]
 800c33a:	b1bb      	cbz	r3, 800c36c <_strtod_l+0x5fc>
 800c33c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c340:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c344:	2b00      	cmp	r3, #0
 800c346:	4659      	mov	r1, fp
 800c348:	dd10      	ble.n	800c36c <_strtod_l+0x5fc>
 800c34a:	2b1f      	cmp	r3, #31
 800c34c:	f340 8107 	ble.w	800c55e <_strtod_l+0x7ee>
 800c350:	2b34      	cmp	r3, #52	; 0x34
 800c352:	bfde      	ittt	le
 800c354:	3b20      	suble	r3, #32
 800c356:	f04f 32ff 	movle.w	r2, #4294967295
 800c35a:	fa02 f303 	lslle.w	r3, r2, r3
 800c35e:	f04f 0a00 	mov.w	sl, #0
 800c362:	bfcc      	ite	gt
 800c364:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c368:	ea03 0b01 	andle.w	fp, r3, r1
 800c36c:	2200      	movs	r2, #0
 800c36e:	2300      	movs	r3, #0
 800c370:	4650      	mov	r0, sl
 800c372:	4659      	mov	r1, fp
 800c374:	f7f4 fba8 	bl	8000ac8 <__aeabi_dcmpeq>
 800c378:	2800      	cmp	r0, #0
 800c37a:	d1ac      	bne.n	800c2d6 <_strtod_l+0x566>
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	9a05      	ldr	r2, [sp, #20]
 800c382:	9908      	ldr	r1, [sp, #32]
 800c384:	4623      	mov	r3, r4
 800c386:	4648      	mov	r0, r9
 800c388:	f002 f842 	bl	800e410 <__s2b>
 800c38c:	9007      	str	r0, [sp, #28]
 800c38e:	2800      	cmp	r0, #0
 800c390:	f43f af08 	beq.w	800c1a4 <_strtod_l+0x434>
 800c394:	9a06      	ldr	r2, [sp, #24]
 800c396:	9b06      	ldr	r3, [sp, #24]
 800c398:	2a00      	cmp	r2, #0
 800c39a:	f1c3 0300 	rsb	r3, r3, #0
 800c39e:	bfa8      	it	ge
 800c3a0:	2300      	movge	r3, #0
 800c3a2:	930e      	str	r3, [sp, #56]	; 0x38
 800c3a4:	2400      	movs	r4, #0
 800c3a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c3aa:	9316      	str	r3, [sp, #88]	; 0x58
 800c3ac:	46a0      	mov	r8, r4
 800c3ae:	9b07      	ldr	r3, [sp, #28]
 800c3b0:	4648      	mov	r0, r9
 800c3b2:	6859      	ldr	r1, [r3, #4]
 800c3b4:	f001 ffa6 	bl	800e304 <_Balloc>
 800c3b8:	9005      	str	r0, [sp, #20]
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	f43f aef6 	beq.w	800c1ac <_strtod_l+0x43c>
 800c3c0:	9b07      	ldr	r3, [sp, #28]
 800c3c2:	691a      	ldr	r2, [r3, #16]
 800c3c4:	3202      	adds	r2, #2
 800c3c6:	f103 010c 	add.w	r1, r3, #12
 800c3ca:	0092      	lsls	r2, r2, #2
 800c3cc:	300c      	adds	r0, #12
 800c3ce:	f7fe fdbf 	bl	800af50 <memcpy>
 800c3d2:	aa1e      	add	r2, sp, #120	; 0x78
 800c3d4:	a91d      	add	r1, sp, #116	; 0x74
 800c3d6:	ec4b ab10 	vmov	d0, sl, fp
 800c3da:	4648      	mov	r0, r9
 800c3dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c3e0:	f002 fad2 	bl	800e988 <__d2b>
 800c3e4:	901c      	str	r0, [sp, #112]	; 0x70
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	f43f aee0 	beq.w	800c1ac <_strtod_l+0x43c>
 800c3ec:	2101      	movs	r1, #1
 800c3ee:	4648      	mov	r0, r9
 800c3f0:	f002 f89a 	bl	800e528 <__i2b>
 800c3f4:	4680      	mov	r8, r0
 800c3f6:	2800      	cmp	r0, #0
 800c3f8:	f43f aed8 	beq.w	800c1ac <_strtod_l+0x43c>
 800c3fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c3fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c400:	2e00      	cmp	r6, #0
 800c402:	bfab      	itete	ge
 800c404:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c406:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c408:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c40a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c40c:	bfac      	ite	ge
 800c40e:	18f7      	addge	r7, r6, r3
 800c410:	1b9d      	sublt	r5, r3, r6
 800c412:	9b04      	ldr	r3, [sp, #16]
 800c414:	1af6      	subs	r6, r6, r3
 800c416:	4416      	add	r6, r2
 800c418:	4b63      	ldr	r3, [pc, #396]	; (800c5a8 <_strtod_l+0x838>)
 800c41a:	3e01      	subs	r6, #1
 800c41c:	429e      	cmp	r6, r3
 800c41e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c422:	f280 80af 	bge.w	800c584 <_strtod_l+0x814>
 800c426:	1b9b      	subs	r3, r3, r6
 800c428:	2b1f      	cmp	r3, #31
 800c42a:	eba2 0203 	sub.w	r2, r2, r3
 800c42e:	f04f 0101 	mov.w	r1, #1
 800c432:	f300 809b 	bgt.w	800c56c <_strtod_l+0x7fc>
 800c436:	fa01 f303 	lsl.w	r3, r1, r3
 800c43a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c43c:	2300      	movs	r3, #0
 800c43e:	930a      	str	r3, [sp, #40]	; 0x28
 800c440:	18be      	adds	r6, r7, r2
 800c442:	9b04      	ldr	r3, [sp, #16]
 800c444:	42b7      	cmp	r7, r6
 800c446:	4415      	add	r5, r2
 800c448:	441d      	add	r5, r3
 800c44a:	463b      	mov	r3, r7
 800c44c:	bfa8      	it	ge
 800c44e:	4633      	movge	r3, r6
 800c450:	42ab      	cmp	r3, r5
 800c452:	bfa8      	it	ge
 800c454:	462b      	movge	r3, r5
 800c456:	2b00      	cmp	r3, #0
 800c458:	bfc2      	ittt	gt
 800c45a:	1af6      	subgt	r6, r6, r3
 800c45c:	1aed      	subgt	r5, r5, r3
 800c45e:	1aff      	subgt	r7, r7, r3
 800c460:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c462:	b1bb      	cbz	r3, 800c494 <_strtod_l+0x724>
 800c464:	4641      	mov	r1, r8
 800c466:	461a      	mov	r2, r3
 800c468:	4648      	mov	r0, r9
 800c46a:	f002 f8fd 	bl	800e668 <__pow5mult>
 800c46e:	4680      	mov	r8, r0
 800c470:	2800      	cmp	r0, #0
 800c472:	f43f ae9b 	beq.w	800c1ac <_strtod_l+0x43c>
 800c476:	4601      	mov	r1, r0
 800c478:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c47a:	4648      	mov	r0, r9
 800c47c:	f002 f85d 	bl	800e53a <__multiply>
 800c480:	900c      	str	r0, [sp, #48]	; 0x30
 800c482:	2800      	cmp	r0, #0
 800c484:	f43f ae92 	beq.w	800c1ac <_strtod_l+0x43c>
 800c488:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c48a:	4648      	mov	r0, r9
 800c48c:	f001 ff6e 	bl	800e36c <_Bfree>
 800c490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c492:	931c      	str	r3, [sp, #112]	; 0x70
 800c494:	2e00      	cmp	r6, #0
 800c496:	dc7a      	bgt.n	800c58e <_strtod_l+0x81e>
 800c498:	9b06      	ldr	r3, [sp, #24]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	dd08      	ble.n	800c4b0 <_strtod_l+0x740>
 800c49e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c4a0:	9905      	ldr	r1, [sp, #20]
 800c4a2:	4648      	mov	r0, r9
 800c4a4:	f002 f8e0 	bl	800e668 <__pow5mult>
 800c4a8:	9005      	str	r0, [sp, #20]
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	f43f ae7e 	beq.w	800c1ac <_strtod_l+0x43c>
 800c4b0:	2d00      	cmp	r5, #0
 800c4b2:	dd08      	ble.n	800c4c6 <_strtod_l+0x756>
 800c4b4:	462a      	mov	r2, r5
 800c4b6:	9905      	ldr	r1, [sp, #20]
 800c4b8:	4648      	mov	r0, r9
 800c4ba:	f002 f923 	bl	800e704 <__lshift>
 800c4be:	9005      	str	r0, [sp, #20]
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	f43f ae73 	beq.w	800c1ac <_strtod_l+0x43c>
 800c4c6:	2f00      	cmp	r7, #0
 800c4c8:	dd08      	ble.n	800c4dc <_strtod_l+0x76c>
 800c4ca:	4641      	mov	r1, r8
 800c4cc:	463a      	mov	r2, r7
 800c4ce:	4648      	mov	r0, r9
 800c4d0:	f002 f918 	bl	800e704 <__lshift>
 800c4d4:	4680      	mov	r8, r0
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	f43f ae68 	beq.w	800c1ac <_strtod_l+0x43c>
 800c4dc:	9a05      	ldr	r2, [sp, #20]
 800c4de:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c4e0:	4648      	mov	r0, r9
 800c4e2:	f002 f97d 	bl	800e7e0 <__mdiff>
 800c4e6:	4604      	mov	r4, r0
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	f43f ae5f 	beq.w	800c1ac <_strtod_l+0x43c>
 800c4ee:	68c3      	ldr	r3, [r0, #12]
 800c4f0:	930c      	str	r3, [sp, #48]	; 0x30
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	60c3      	str	r3, [r0, #12]
 800c4f6:	4641      	mov	r1, r8
 800c4f8:	f002 f958 	bl	800e7ac <__mcmp>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	da55      	bge.n	800c5ac <_strtod_l+0x83c>
 800c500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c502:	b9e3      	cbnz	r3, 800c53e <_strtod_l+0x7ce>
 800c504:	f1ba 0f00 	cmp.w	sl, #0
 800c508:	d119      	bne.n	800c53e <_strtod_l+0x7ce>
 800c50a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c50e:	b9b3      	cbnz	r3, 800c53e <_strtod_l+0x7ce>
 800c510:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c514:	0d1b      	lsrs	r3, r3, #20
 800c516:	051b      	lsls	r3, r3, #20
 800c518:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c51c:	d90f      	bls.n	800c53e <_strtod_l+0x7ce>
 800c51e:	6963      	ldr	r3, [r4, #20]
 800c520:	b913      	cbnz	r3, 800c528 <_strtod_l+0x7b8>
 800c522:	6923      	ldr	r3, [r4, #16]
 800c524:	2b01      	cmp	r3, #1
 800c526:	dd0a      	ble.n	800c53e <_strtod_l+0x7ce>
 800c528:	4621      	mov	r1, r4
 800c52a:	2201      	movs	r2, #1
 800c52c:	4648      	mov	r0, r9
 800c52e:	f002 f8e9 	bl	800e704 <__lshift>
 800c532:	4641      	mov	r1, r8
 800c534:	4604      	mov	r4, r0
 800c536:	f002 f939 	bl	800e7ac <__mcmp>
 800c53a:	2800      	cmp	r0, #0
 800c53c:	dc67      	bgt.n	800c60e <_strtod_l+0x89e>
 800c53e:	9b04      	ldr	r3, [sp, #16]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d171      	bne.n	800c628 <_strtod_l+0x8b8>
 800c544:	e63d      	b.n	800c1c2 <_strtod_l+0x452>
 800c546:	f018 0f01 	tst.w	r8, #1
 800c54a:	d004      	beq.n	800c556 <_strtod_l+0x7e6>
 800c54c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c550:	f7f4 f852 	bl	80005f8 <__aeabi_dmul>
 800c554:	2301      	movs	r3, #1
 800c556:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c55a:	3508      	adds	r5, #8
 800c55c:	e6e5      	b.n	800c32a <_strtod_l+0x5ba>
 800c55e:	f04f 32ff 	mov.w	r2, #4294967295
 800c562:	fa02 f303 	lsl.w	r3, r2, r3
 800c566:	ea03 0a0a 	and.w	sl, r3, sl
 800c56a:	e6ff      	b.n	800c36c <_strtod_l+0x5fc>
 800c56c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c570:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c574:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c578:	36e2      	adds	r6, #226	; 0xe2
 800c57a:	fa01 f306 	lsl.w	r3, r1, r6
 800c57e:	930a      	str	r3, [sp, #40]	; 0x28
 800c580:	910f      	str	r1, [sp, #60]	; 0x3c
 800c582:	e75d      	b.n	800c440 <_strtod_l+0x6d0>
 800c584:	2300      	movs	r3, #0
 800c586:	930a      	str	r3, [sp, #40]	; 0x28
 800c588:	2301      	movs	r3, #1
 800c58a:	930f      	str	r3, [sp, #60]	; 0x3c
 800c58c:	e758      	b.n	800c440 <_strtod_l+0x6d0>
 800c58e:	4632      	mov	r2, r6
 800c590:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c592:	4648      	mov	r0, r9
 800c594:	f002 f8b6 	bl	800e704 <__lshift>
 800c598:	901c      	str	r0, [sp, #112]	; 0x70
 800c59a:	2800      	cmp	r0, #0
 800c59c:	f47f af7c 	bne.w	800c498 <_strtod_l+0x728>
 800c5a0:	e604      	b.n	800c1ac <_strtod_l+0x43c>
 800c5a2:	bf00      	nop
 800c5a4:	0800f4d8 	.word	0x0800f4d8
 800c5a8:	fffffc02 	.word	0xfffffc02
 800c5ac:	465d      	mov	r5, fp
 800c5ae:	f040 8086 	bne.w	800c6be <_strtod_l+0x94e>
 800c5b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c5b8:	b32a      	cbz	r2, 800c606 <_strtod_l+0x896>
 800c5ba:	4aaf      	ldr	r2, [pc, #700]	; (800c878 <_strtod_l+0xb08>)
 800c5bc:	4293      	cmp	r3, r2
 800c5be:	d153      	bne.n	800c668 <_strtod_l+0x8f8>
 800c5c0:	9b04      	ldr	r3, [sp, #16]
 800c5c2:	4650      	mov	r0, sl
 800c5c4:	b1d3      	cbz	r3, 800c5fc <_strtod_l+0x88c>
 800c5c6:	4aad      	ldr	r2, [pc, #692]	; (800c87c <_strtod_l+0xb0c>)
 800c5c8:	402a      	ands	r2, r5
 800c5ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800c5ce:	f04f 31ff 	mov.w	r1, #4294967295
 800c5d2:	d816      	bhi.n	800c602 <_strtod_l+0x892>
 800c5d4:	0d12      	lsrs	r2, r2, #20
 800c5d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c5da:	fa01 f303 	lsl.w	r3, r1, r3
 800c5de:	4298      	cmp	r0, r3
 800c5e0:	d142      	bne.n	800c668 <_strtod_l+0x8f8>
 800c5e2:	4ba7      	ldr	r3, [pc, #668]	; (800c880 <_strtod_l+0xb10>)
 800c5e4:	429d      	cmp	r5, r3
 800c5e6:	d102      	bne.n	800c5ee <_strtod_l+0x87e>
 800c5e8:	3001      	adds	r0, #1
 800c5ea:	f43f addf 	beq.w	800c1ac <_strtod_l+0x43c>
 800c5ee:	4ba3      	ldr	r3, [pc, #652]	; (800c87c <_strtod_l+0xb0c>)
 800c5f0:	402b      	ands	r3, r5
 800c5f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c5f6:	f04f 0a00 	mov.w	sl, #0
 800c5fa:	e7a0      	b.n	800c53e <_strtod_l+0x7ce>
 800c5fc:	f04f 33ff 	mov.w	r3, #4294967295
 800c600:	e7ed      	b.n	800c5de <_strtod_l+0x86e>
 800c602:	460b      	mov	r3, r1
 800c604:	e7eb      	b.n	800c5de <_strtod_l+0x86e>
 800c606:	bb7b      	cbnz	r3, 800c668 <_strtod_l+0x8f8>
 800c608:	f1ba 0f00 	cmp.w	sl, #0
 800c60c:	d12c      	bne.n	800c668 <_strtod_l+0x8f8>
 800c60e:	9904      	ldr	r1, [sp, #16]
 800c610:	4a9a      	ldr	r2, [pc, #616]	; (800c87c <_strtod_l+0xb0c>)
 800c612:	465b      	mov	r3, fp
 800c614:	b1f1      	cbz	r1, 800c654 <_strtod_l+0x8e4>
 800c616:	ea02 010b 	and.w	r1, r2, fp
 800c61a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c61e:	dc19      	bgt.n	800c654 <_strtod_l+0x8e4>
 800c620:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c624:	f77f ae5b 	ble.w	800c2de <_strtod_l+0x56e>
 800c628:	4a96      	ldr	r2, [pc, #600]	; (800c884 <_strtod_l+0xb14>)
 800c62a:	2300      	movs	r3, #0
 800c62c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800c630:	4650      	mov	r0, sl
 800c632:	4659      	mov	r1, fp
 800c634:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c638:	f7f3 ffde 	bl	80005f8 <__aeabi_dmul>
 800c63c:	4682      	mov	sl, r0
 800c63e:	468b      	mov	fp, r1
 800c640:	2900      	cmp	r1, #0
 800c642:	f47f adbe 	bne.w	800c1c2 <_strtod_l+0x452>
 800c646:	2800      	cmp	r0, #0
 800c648:	f47f adbb 	bne.w	800c1c2 <_strtod_l+0x452>
 800c64c:	2322      	movs	r3, #34	; 0x22
 800c64e:	f8c9 3000 	str.w	r3, [r9]
 800c652:	e5b6      	b.n	800c1c2 <_strtod_l+0x452>
 800c654:	4013      	ands	r3, r2
 800c656:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c65a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c65e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c662:	f04f 3aff 	mov.w	sl, #4294967295
 800c666:	e76a      	b.n	800c53e <_strtod_l+0x7ce>
 800c668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c66a:	b193      	cbz	r3, 800c692 <_strtod_l+0x922>
 800c66c:	422b      	tst	r3, r5
 800c66e:	f43f af66 	beq.w	800c53e <_strtod_l+0x7ce>
 800c672:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c674:	9a04      	ldr	r2, [sp, #16]
 800c676:	4650      	mov	r0, sl
 800c678:	4659      	mov	r1, fp
 800c67a:	b173      	cbz	r3, 800c69a <_strtod_l+0x92a>
 800c67c:	f7ff fb5c 	bl	800bd38 <sulp>
 800c680:	4602      	mov	r2, r0
 800c682:	460b      	mov	r3, r1
 800c684:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c688:	f7f3 fe00 	bl	800028c <__adddf3>
 800c68c:	4682      	mov	sl, r0
 800c68e:	468b      	mov	fp, r1
 800c690:	e755      	b.n	800c53e <_strtod_l+0x7ce>
 800c692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c694:	ea13 0f0a 	tst.w	r3, sl
 800c698:	e7e9      	b.n	800c66e <_strtod_l+0x8fe>
 800c69a:	f7ff fb4d 	bl	800bd38 <sulp>
 800c69e:	4602      	mov	r2, r0
 800c6a0:	460b      	mov	r3, r1
 800c6a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c6a6:	f7f3 fdef 	bl	8000288 <__aeabi_dsub>
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	4682      	mov	sl, r0
 800c6b0:	468b      	mov	fp, r1
 800c6b2:	f7f4 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	f47f ae11 	bne.w	800c2de <_strtod_l+0x56e>
 800c6bc:	e73f      	b.n	800c53e <_strtod_l+0x7ce>
 800c6be:	4641      	mov	r1, r8
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f002 f9b0 	bl	800ea26 <__ratio>
 800c6c6:	ec57 6b10 	vmov	r6, r7, d0
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c6d0:	ee10 0a10 	vmov	r0, s0
 800c6d4:	4639      	mov	r1, r7
 800c6d6:	f7f4 fa0b 	bl	8000af0 <__aeabi_dcmple>
 800c6da:	2800      	cmp	r0, #0
 800c6dc:	d077      	beq.n	800c7ce <_strtod_l+0xa5e>
 800c6de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d04a      	beq.n	800c77a <_strtod_l+0xa0a>
 800c6e4:	4b68      	ldr	r3, [pc, #416]	; (800c888 <_strtod_l+0xb18>)
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c6ec:	4f66      	ldr	r7, [pc, #408]	; (800c888 <_strtod_l+0xb18>)
 800c6ee:	2600      	movs	r6, #0
 800c6f0:	4b62      	ldr	r3, [pc, #392]	; (800c87c <_strtod_l+0xb0c>)
 800c6f2:	402b      	ands	r3, r5
 800c6f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c6f8:	4b64      	ldr	r3, [pc, #400]	; (800c88c <_strtod_l+0xb1c>)
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	f040 80ce 	bne.w	800c89c <_strtod_l+0xb2c>
 800c700:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c704:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c708:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800c70c:	ec4b ab10 	vmov	d0, sl, fp
 800c710:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c714:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c718:	f002 f8c0 	bl	800e89c <__ulp>
 800c71c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c720:	ec53 2b10 	vmov	r2, r3, d0
 800c724:	f7f3 ff68 	bl	80005f8 <__aeabi_dmul>
 800c728:	4652      	mov	r2, sl
 800c72a:	465b      	mov	r3, fp
 800c72c:	f7f3 fdae 	bl	800028c <__adddf3>
 800c730:	460b      	mov	r3, r1
 800c732:	4952      	ldr	r1, [pc, #328]	; (800c87c <_strtod_l+0xb0c>)
 800c734:	4a56      	ldr	r2, [pc, #344]	; (800c890 <_strtod_l+0xb20>)
 800c736:	4019      	ands	r1, r3
 800c738:	4291      	cmp	r1, r2
 800c73a:	4682      	mov	sl, r0
 800c73c:	d95b      	bls.n	800c7f6 <_strtod_l+0xa86>
 800c73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c740:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c744:	4293      	cmp	r3, r2
 800c746:	d103      	bne.n	800c750 <_strtod_l+0x9e0>
 800c748:	9b08      	ldr	r3, [sp, #32]
 800c74a:	3301      	adds	r3, #1
 800c74c:	f43f ad2e 	beq.w	800c1ac <_strtod_l+0x43c>
 800c750:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800c880 <_strtod_l+0xb10>
 800c754:	f04f 3aff 	mov.w	sl, #4294967295
 800c758:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c75a:	4648      	mov	r0, r9
 800c75c:	f001 fe06 	bl	800e36c <_Bfree>
 800c760:	9905      	ldr	r1, [sp, #20]
 800c762:	4648      	mov	r0, r9
 800c764:	f001 fe02 	bl	800e36c <_Bfree>
 800c768:	4641      	mov	r1, r8
 800c76a:	4648      	mov	r0, r9
 800c76c:	f001 fdfe 	bl	800e36c <_Bfree>
 800c770:	4621      	mov	r1, r4
 800c772:	4648      	mov	r0, r9
 800c774:	f001 fdfa 	bl	800e36c <_Bfree>
 800c778:	e619      	b.n	800c3ae <_strtod_l+0x63e>
 800c77a:	f1ba 0f00 	cmp.w	sl, #0
 800c77e:	d11a      	bne.n	800c7b6 <_strtod_l+0xa46>
 800c780:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c784:	b9eb      	cbnz	r3, 800c7c2 <_strtod_l+0xa52>
 800c786:	2200      	movs	r2, #0
 800c788:	4b3f      	ldr	r3, [pc, #252]	; (800c888 <_strtod_l+0xb18>)
 800c78a:	4630      	mov	r0, r6
 800c78c:	4639      	mov	r1, r7
 800c78e:	f7f4 f9a5 	bl	8000adc <__aeabi_dcmplt>
 800c792:	b9c8      	cbnz	r0, 800c7c8 <_strtod_l+0xa58>
 800c794:	4630      	mov	r0, r6
 800c796:	4639      	mov	r1, r7
 800c798:	2200      	movs	r2, #0
 800c79a:	4b3e      	ldr	r3, [pc, #248]	; (800c894 <_strtod_l+0xb24>)
 800c79c:	f7f3 ff2c 	bl	80005f8 <__aeabi_dmul>
 800c7a0:	4606      	mov	r6, r0
 800c7a2:	460f      	mov	r7, r1
 800c7a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c7a8:	9618      	str	r6, [sp, #96]	; 0x60
 800c7aa:	9319      	str	r3, [sp, #100]	; 0x64
 800c7ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c7b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c7b4:	e79c      	b.n	800c6f0 <_strtod_l+0x980>
 800c7b6:	f1ba 0f01 	cmp.w	sl, #1
 800c7ba:	d102      	bne.n	800c7c2 <_strtod_l+0xa52>
 800c7bc:	2d00      	cmp	r5, #0
 800c7be:	f43f ad8e 	beq.w	800c2de <_strtod_l+0x56e>
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	4b34      	ldr	r3, [pc, #208]	; (800c898 <_strtod_l+0xb28>)
 800c7c6:	e78f      	b.n	800c6e8 <_strtod_l+0x978>
 800c7c8:	2600      	movs	r6, #0
 800c7ca:	4f32      	ldr	r7, [pc, #200]	; (800c894 <_strtod_l+0xb24>)
 800c7cc:	e7ea      	b.n	800c7a4 <_strtod_l+0xa34>
 800c7ce:	4b31      	ldr	r3, [pc, #196]	; (800c894 <_strtod_l+0xb24>)
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	4639      	mov	r1, r7
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f7f3 ff0f 	bl	80005f8 <__aeabi_dmul>
 800c7da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7dc:	4606      	mov	r6, r0
 800c7de:	460f      	mov	r7, r1
 800c7e0:	b933      	cbnz	r3, 800c7f0 <_strtod_l+0xa80>
 800c7e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c7e6:	9010      	str	r0, [sp, #64]	; 0x40
 800c7e8:	9311      	str	r3, [sp, #68]	; 0x44
 800c7ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c7ee:	e7df      	b.n	800c7b0 <_strtod_l+0xa40>
 800c7f0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c7f4:	e7f9      	b.n	800c7ea <_strtod_l+0xa7a>
 800c7f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c7fa:	9b04      	ldr	r3, [sp, #16]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1ab      	bne.n	800c758 <_strtod_l+0x9e8>
 800c800:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c804:	0d1b      	lsrs	r3, r3, #20
 800c806:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c808:	051b      	lsls	r3, r3, #20
 800c80a:	429a      	cmp	r2, r3
 800c80c:	465d      	mov	r5, fp
 800c80e:	d1a3      	bne.n	800c758 <_strtod_l+0x9e8>
 800c810:	4639      	mov	r1, r7
 800c812:	4630      	mov	r0, r6
 800c814:	f7f4 f9a0 	bl	8000b58 <__aeabi_d2iz>
 800c818:	f7f3 fe84 	bl	8000524 <__aeabi_i2d>
 800c81c:	460b      	mov	r3, r1
 800c81e:	4602      	mov	r2, r0
 800c820:	4639      	mov	r1, r7
 800c822:	4630      	mov	r0, r6
 800c824:	f7f3 fd30 	bl	8000288 <__aeabi_dsub>
 800c828:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c82a:	4606      	mov	r6, r0
 800c82c:	460f      	mov	r7, r1
 800c82e:	b933      	cbnz	r3, 800c83e <_strtod_l+0xace>
 800c830:	f1ba 0f00 	cmp.w	sl, #0
 800c834:	d103      	bne.n	800c83e <_strtod_l+0xace>
 800c836:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800c83a:	2d00      	cmp	r5, #0
 800c83c:	d06d      	beq.n	800c91a <_strtod_l+0xbaa>
 800c83e:	a30a      	add	r3, pc, #40	; (adr r3, 800c868 <_strtod_l+0xaf8>)
 800c840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c844:	4630      	mov	r0, r6
 800c846:	4639      	mov	r1, r7
 800c848:	f7f4 f948 	bl	8000adc <__aeabi_dcmplt>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	f47f acb8 	bne.w	800c1c2 <_strtod_l+0x452>
 800c852:	a307      	add	r3, pc, #28	; (adr r3, 800c870 <_strtod_l+0xb00>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	4630      	mov	r0, r6
 800c85a:	4639      	mov	r1, r7
 800c85c:	f7f4 f95c 	bl	8000b18 <__aeabi_dcmpgt>
 800c860:	2800      	cmp	r0, #0
 800c862:	f43f af79 	beq.w	800c758 <_strtod_l+0x9e8>
 800c866:	e4ac      	b.n	800c1c2 <_strtod_l+0x452>
 800c868:	94a03595 	.word	0x94a03595
 800c86c:	3fdfffff 	.word	0x3fdfffff
 800c870:	35afe535 	.word	0x35afe535
 800c874:	3fe00000 	.word	0x3fe00000
 800c878:	000fffff 	.word	0x000fffff
 800c87c:	7ff00000 	.word	0x7ff00000
 800c880:	7fefffff 	.word	0x7fefffff
 800c884:	39500000 	.word	0x39500000
 800c888:	3ff00000 	.word	0x3ff00000
 800c88c:	7fe00000 	.word	0x7fe00000
 800c890:	7c9fffff 	.word	0x7c9fffff
 800c894:	3fe00000 	.word	0x3fe00000
 800c898:	bff00000 	.word	0xbff00000
 800c89c:	9b04      	ldr	r3, [sp, #16]
 800c89e:	b333      	cbz	r3, 800c8ee <_strtod_l+0xb7e>
 800c8a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c8a6:	d822      	bhi.n	800c8ee <_strtod_l+0xb7e>
 800c8a8:	a327      	add	r3, pc, #156	; (adr r3, 800c948 <_strtod_l+0xbd8>)
 800c8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ae:	4630      	mov	r0, r6
 800c8b0:	4639      	mov	r1, r7
 800c8b2:	f7f4 f91d 	bl	8000af0 <__aeabi_dcmple>
 800c8b6:	b1a0      	cbz	r0, 800c8e2 <_strtod_l+0xb72>
 800c8b8:	4639      	mov	r1, r7
 800c8ba:	4630      	mov	r0, r6
 800c8bc:	f7f4 f974 	bl	8000ba8 <__aeabi_d2uiz>
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	bf08      	it	eq
 800c8c4:	2001      	moveq	r0, #1
 800c8c6:	f7f3 fe1d 	bl	8000504 <__aeabi_ui2d>
 800c8ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8cc:	4606      	mov	r6, r0
 800c8ce:	460f      	mov	r7, r1
 800c8d0:	bb03      	cbnz	r3, 800c914 <_strtod_l+0xba4>
 800c8d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8d6:	9012      	str	r0, [sp, #72]	; 0x48
 800c8d8:	9313      	str	r3, [sp, #76]	; 0x4c
 800c8da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c8de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c8e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c8e6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c8ea:	1a9b      	subs	r3, r3, r2
 800c8ec:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8ee:	ed9d 0b08 	vldr	d0, [sp, #32]
 800c8f2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800c8f6:	f001 ffd1 	bl	800e89c <__ulp>
 800c8fa:	4650      	mov	r0, sl
 800c8fc:	ec53 2b10 	vmov	r2, r3, d0
 800c900:	4659      	mov	r1, fp
 800c902:	f7f3 fe79 	bl	80005f8 <__aeabi_dmul>
 800c906:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c90a:	f7f3 fcbf 	bl	800028c <__adddf3>
 800c90e:	4682      	mov	sl, r0
 800c910:	468b      	mov	fp, r1
 800c912:	e772      	b.n	800c7fa <_strtod_l+0xa8a>
 800c914:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800c918:	e7df      	b.n	800c8da <_strtod_l+0xb6a>
 800c91a:	a30d      	add	r3, pc, #52	; (adr r3, 800c950 <_strtod_l+0xbe0>)
 800c91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c920:	f7f4 f8dc 	bl	8000adc <__aeabi_dcmplt>
 800c924:	e79c      	b.n	800c860 <_strtod_l+0xaf0>
 800c926:	2300      	movs	r3, #0
 800c928:	930d      	str	r3, [sp, #52]	; 0x34
 800c92a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c92c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c92e:	6013      	str	r3, [r2, #0]
 800c930:	f7ff ba61 	b.w	800bdf6 <_strtod_l+0x86>
 800c934:	2b65      	cmp	r3, #101	; 0x65
 800c936:	f04f 0200 	mov.w	r2, #0
 800c93a:	f43f ab4e 	beq.w	800bfda <_strtod_l+0x26a>
 800c93e:	2101      	movs	r1, #1
 800c940:	4614      	mov	r4, r2
 800c942:	9104      	str	r1, [sp, #16]
 800c944:	f7ff bacb 	b.w	800bede <_strtod_l+0x16e>
 800c948:	ffc00000 	.word	0xffc00000
 800c94c:	41dfffff 	.word	0x41dfffff
 800c950:	94a03595 	.word	0x94a03595
 800c954:	3fcfffff 	.word	0x3fcfffff

0800c958 <_strtod_r>:
 800c958:	4b05      	ldr	r3, [pc, #20]	; (800c970 <_strtod_r+0x18>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	b410      	push	{r4}
 800c95e:	6a1b      	ldr	r3, [r3, #32]
 800c960:	4c04      	ldr	r4, [pc, #16]	; (800c974 <_strtod_r+0x1c>)
 800c962:	2b00      	cmp	r3, #0
 800c964:	bf08      	it	eq
 800c966:	4623      	moveq	r3, r4
 800c968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c96c:	f7ff ba00 	b.w	800bd70 <_strtod_l>
 800c970:	20000040 	.word	0x20000040
 800c974:	200000a4 	.word	0x200000a4

0800c978 <_strtol_l.isra.0>:
 800c978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c97c:	4680      	mov	r8, r0
 800c97e:	4689      	mov	r9, r1
 800c980:	4692      	mov	sl, r2
 800c982:	461e      	mov	r6, r3
 800c984:	460f      	mov	r7, r1
 800c986:	463d      	mov	r5, r7
 800c988:	9808      	ldr	r0, [sp, #32]
 800c98a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c98e:	f001 fc27 	bl	800e1e0 <__locale_ctype_ptr_l>
 800c992:	4420      	add	r0, r4
 800c994:	7843      	ldrb	r3, [r0, #1]
 800c996:	f013 0308 	ands.w	r3, r3, #8
 800c99a:	d132      	bne.n	800ca02 <_strtol_l.isra.0+0x8a>
 800c99c:	2c2d      	cmp	r4, #45	; 0x2d
 800c99e:	d132      	bne.n	800ca06 <_strtol_l.isra.0+0x8e>
 800c9a0:	787c      	ldrb	r4, [r7, #1]
 800c9a2:	1cbd      	adds	r5, r7, #2
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	2e00      	cmp	r6, #0
 800c9a8:	d05d      	beq.n	800ca66 <_strtol_l.isra.0+0xee>
 800c9aa:	2e10      	cmp	r6, #16
 800c9ac:	d109      	bne.n	800c9c2 <_strtol_l.isra.0+0x4a>
 800c9ae:	2c30      	cmp	r4, #48	; 0x30
 800c9b0:	d107      	bne.n	800c9c2 <_strtol_l.isra.0+0x4a>
 800c9b2:	782b      	ldrb	r3, [r5, #0]
 800c9b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c9b8:	2b58      	cmp	r3, #88	; 0x58
 800c9ba:	d14f      	bne.n	800ca5c <_strtol_l.isra.0+0xe4>
 800c9bc:	786c      	ldrb	r4, [r5, #1]
 800c9be:	2610      	movs	r6, #16
 800c9c0:	3502      	adds	r5, #2
 800c9c2:	2a00      	cmp	r2, #0
 800c9c4:	bf14      	ite	ne
 800c9c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800c9ca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800c9ce:	2700      	movs	r7, #0
 800c9d0:	fbb1 fcf6 	udiv	ip, r1, r6
 800c9d4:	4638      	mov	r0, r7
 800c9d6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800c9da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800c9de:	2b09      	cmp	r3, #9
 800c9e0:	d817      	bhi.n	800ca12 <_strtol_l.isra.0+0x9a>
 800c9e2:	461c      	mov	r4, r3
 800c9e4:	42a6      	cmp	r6, r4
 800c9e6:	dd23      	ble.n	800ca30 <_strtol_l.isra.0+0xb8>
 800c9e8:	1c7b      	adds	r3, r7, #1
 800c9ea:	d007      	beq.n	800c9fc <_strtol_l.isra.0+0x84>
 800c9ec:	4584      	cmp	ip, r0
 800c9ee:	d31c      	bcc.n	800ca2a <_strtol_l.isra.0+0xb2>
 800c9f0:	d101      	bne.n	800c9f6 <_strtol_l.isra.0+0x7e>
 800c9f2:	45a6      	cmp	lr, r4
 800c9f4:	db19      	blt.n	800ca2a <_strtol_l.isra.0+0xb2>
 800c9f6:	fb00 4006 	mla	r0, r0, r6, r4
 800c9fa:	2701      	movs	r7, #1
 800c9fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ca00:	e7eb      	b.n	800c9da <_strtol_l.isra.0+0x62>
 800ca02:	462f      	mov	r7, r5
 800ca04:	e7bf      	b.n	800c986 <_strtol_l.isra.0+0xe>
 800ca06:	2c2b      	cmp	r4, #43	; 0x2b
 800ca08:	bf04      	itt	eq
 800ca0a:	1cbd      	addeq	r5, r7, #2
 800ca0c:	787c      	ldrbeq	r4, [r7, #1]
 800ca0e:	461a      	mov	r2, r3
 800ca10:	e7c9      	b.n	800c9a6 <_strtol_l.isra.0+0x2e>
 800ca12:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ca16:	2b19      	cmp	r3, #25
 800ca18:	d801      	bhi.n	800ca1e <_strtol_l.isra.0+0xa6>
 800ca1a:	3c37      	subs	r4, #55	; 0x37
 800ca1c:	e7e2      	b.n	800c9e4 <_strtol_l.isra.0+0x6c>
 800ca1e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800ca22:	2b19      	cmp	r3, #25
 800ca24:	d804      	bhi.n	800ca30 <_strtol_l.isra.0+0xb8>
 800ca26:	3c57      	subs	r4, #87	; 0x57
 800ca28:	e7dc      	b.n	800c9e4 <_strtol_l.isra.0+0x6c>
 800ca2a:	f04f 37ff 	mov.w	r7, #4294967295
 800ca2e:	e7e5      	b.n	800c9fc <_strtol_l.isra.0+0x84>
 800ca30:	1c7b      	adds	r3, r7, #1
 800ca32:	d108      	bne.n	800ca46 <_strtol_l.isra.0+0xce>
 800ca34:	2322      	movs	r3, #34	; 0x22
 800ca36:	f8c8 3000 	str.w	r3, [r8]
 800ca3a:	4608      	mov	r0, r1
 800ca3c:	f1ba 0f00 	cmp.w	sl, #0
 800ca40:	d107      	bne.n	800ca52 <_strtol_l.isra.0+0xda>
 800ca42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca46:	b102      	cbz	r2, 800ca4a <_strtol_l.isra.0+0xd2>
 800ca48:	4240      	negs	r0, r0
 800ca4a:	f1ba 0f00 	cmp.w	sl, #0
 800ca4e:	d0f8      	beq.n	800ca42 <_strtol_l.isra.0+0xca>
 800ca50:	b10f      	cbz	r7, 800ca56 <_strtol_l.isra.0+0xde>
 800ca52:	f105 39ff 	add.w	r9, r5, #4294967295
 800ca56:	f8ca 9000 	str.w	r9, [sl]
 800ca5a:	e7f2      	b.n	800ca42 <_strtol_l.isra.0+0xca>
 800ca5c:	2430      	movs	r4, #48	; 0x30
 800ca5e:	2e00      	cmp	r6, #0
 800ca60:	d1af      	bne.n	800c9c2 <_strtol_l.isra.0+0x4a>
 800ca62:	2608      	movs	r6, #8
 800ca64:	e7ad      	b.n	800c9c2 <_strtol_l.isra.0+0x4a>
 800ca66:	2c30      	cmp	r4, #48	; 0x30
 800ca68:	d0a3      	beq.n	800c9b2 <_strtol_l.isra.0+0x3a>
 800ca6a:	260a      	movs	r6, #10
 800ca6c:	e7a9      	b.n	800c9c2 <_strtol_l.isra.0+0x4a>
	...

0800ca70 <_strtol_r>:
 800ca70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca72:	4c06      	ldr	r4, [pc, #24]	; (800ca8c <_strtol_r+0x1c>)
 800ca74:	4d06      	ldr	r5, [pc, #24]	; (800ca90 <_strtol_r+0x20>)
 800ca76:	6824      	ldr	r4, [r4, #0]
 800ca78:	6a24      	ldr	r4, [r4, #32]
 800ca7a:	2c00      	cmp	r4, #0
 800ca7c:	bf08      	it	eq
 800ca7e:	462c      	moveq	r4, r5
 800ca80:	9400      	str	r4, [sp, #0]
 800ca82:	f7ff ff79 	bl	800c978 <_strtol_l.isra.0>
 800ca86:	b003      	add	sp, #12
 800ca88:	bd30      	pop	{r4, r5, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20000040 	.word	0x20000040
 800ca90:	200000a4 	.word	0x200000a4

0800ca94 <__swbuf_r>:
 800ca94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca96:	460e      	mov	r6, r1
 800ca98:	4614      	mov	r4, r2
 800ca9a:	4605      	mov	r5, r0
 800ca9c:	b118      	cbz	r0, 800caa6 <__swbuf_r+0x12>
 800ca9e:	6983      	ldr	r3, [r0, #24]
 800caa0:	b90b      	cbnz	r3, 800caa6 <__swbuf_r+0x12>
 800caa2:	f000 ffed 	bl	800da80 <__sinit>
 800caa6:	4b21      	ldr	r3, [pc, #132]	; (800cb2c <__swbuf_r+0x98>)
 800caa8:	429c      	cmp	r4, r3
 800caaa:	d12a      	bne.n	800cb02 <__swbuf_r+0x6e>
 800caac:	686c      	ldr	r4, [r5, #4]
 800caae:	69a3      	ldr	r3, [r4, #24]
 800cab0:	60a3      	str	r3, [r4, #8]
 800cab2:	89a3      	ldrh	r3, [r4, #12]
 800cab4:	071a      	lsls	r2, r3, #28
 800cab6:	d52e      	bpl.n	800cb16 <__swbuf_r+0x82>
 800cab8:	6923      	ldr	r3, [r4, #16]
 800caba:	b363      	cbz	r3, 800cb16 <__swbuf_r+0x82>
 800cabc:	6923      	ldr	r3, [r4, #16]
 800cabe:	6820      	ldr	r0, [r4, #0]
 800cac0:	1ac0      	subs	r0, r0, r3
 800cac2:	6963      	ldr	r3, [r4, #20]
 800cac4:	b2f6      	uxtb	r6, r6
 800cac6:	4283      	cmp	r3, r0
 800cac8:	4637      	mov	r7, r6
 800caca:	dc04      	bgt.n	800cad6 <__swbuf_r+0x42>
 800cacc:	4621      	mov	r1, r4
 800cace:	4628      	mov	r0, r5
 800cad0:	f000 ff6c 	bl	800d9ac <_fflush_r>
 800cad4:	bb28      	cbnz	r0, 800cb22 <__swbuf_r+0x8e>
 800cad6:	68a3      	ldr	r3, [r4, #8]
 800cad8:	3b01      	subs	r3, #1
 800cada:	60a3      	str	r3, [r4, #8]
 800cadc:	6823      	ldr	r3, [r4, #0]
 800cade:	1c5a      	adds	r2, r3, #1
 800cae0:	6022      	str	r2, [r4, #0]
 800cae2:	701e      	strb	r6, [r3, #0]
 800cae4:	6963      	ldr	r3, [r4, #20]
 800cae6:	3001      	adds	r0, #1
 800cae8:	4283      	cmp	r3, r0
 800caea:	d004      	beq.n	800caf6 <__swbuf_r+0x62>
 800caec:	89a3      	ldrh	r3, [r4, #12]
 800caee:	07db      	lsls	r3, r3, #31
 800caf0:	d519      	bpl.n	800cb26 <__swbuf_r+0x92>
 800caf2:	2e0a      	cmp	r6, #10
 800caf4:	d117      	bne.n	800cb26 <__swbuf_r+0x92>
 800caf6:	4621      	mov	r1, r4
 800caf8:	4628      	mov	r0, r5
 800cafa:	f000 ff57 	bl	800d9ac <_fflush_r>
 800cafe:	b190      	cbz	r0, 800cb26 <__swbuf_r+0x92>
 800cb00:	e00f      	b.n	800cb22 <__swbuf_r+0x8e>
 800cb02:	4b0b      	ldr	r3, [pc, #44]	; (800cb30 <__swbuf_r+0x9c>)
 800cb04:	429c      	cmp	r4, r3
 800cb06:	d101      	bne.n	800cb0c <__swbuf_r+0x78>
 800cb08:	68ac      	ldr	r4, [r5, #8]
 800cb0a:	e7d0      	b.n	800caae <__swbuf_r+0x1a>
 800cb0c:	4b09      	ldr	r3, [pc, #36]	; (800cb34 <__swbuf_r+0xa0>)
 800cb0e:	429c      	cmp	r4, r3
 800cb10:	bf08      	it	eq
 800cb12:	68ec      	ldreq	r4, [r5, #12]
 800cb14:	e7cb      	b.n	800caae <__swbuf_r+0x1a>
 800cb16:	4621      	mov	r1, r4
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f000 f80d 	bl	800cb38 <__swsetup_r>
 800cb1e:	2800      	cmp	r0, #0
 800cb20:	d0cc      	beq.n	800cabc <__swbuf_r+0x28>
 800cb22:	f04f 37ff 	mov.w	r7, #4294967295
 800cb26:	4638      	mov	r0, r7
 800cb28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb2a:	bf00      	nop
 800cb2c:	0800f530 	.word	0x0800f530
 800cb30:	0800f550 	.word	0x0800f550
 800cb34:	0800f510 	.word	0x0800f510

0800cb38 <__swsetup_r>:
 800cb38:	4b32      	ldr	r3, [pc, #200]	; (800cc04 <__swsetup_r+0xcc>)
 800cb3a:	b570      	push	{r4, r5, r6, lr}
 800cb3c:	681d      	ldr	r5, [r3, #0]
 800cb3e:	4606      	mov	r6, r0
 800cb40:	460c      	mov	r4, r1
 800cb42:	b125      	cbz	r5, 800cb4e <__swsetup_r+0x16>
 800cb44:	69ab      	ldr	r3, [r5, #24]
 800cb46:	b913      	cbnz	r3, 800cb4e <__swsetup_r+0x16>
 800cb48:	4628      	mov	r0, r5
 800cb4a:	f000 ff99 	bl	800da80 <__sinit>
 800cb4e:	4b2e      	ldr	r3, [pc, #184]	; (800cc08 <__swsetup_r+0xd0>)
 800cb50:	429c      	cmp	r4, r3
 800cb52:	d10f      	bne.n	800cb74 <__swsetup_r+0x3c>
 800cb54:	686c      	ldr	r4, [r5, #4]
 800cb56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb5a:	b29a      	uxth	r2, r3
 800cb5c:	0715      	lsls	r5, r2, #28
 800cb5e:	d42c      	bmi.n	800cbba <__swsetup_r+0x82>
 800cb60:	06d0      	lsls	r0, r2, #27
 800cb62:	d411      	bmi.n	800cb88 <__swsetup_r+0x50>
 800cb64:	2209      	movs	r2, #9
 800cb66:	6032      	str	r2, [r6, #0]
 800cb68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb6c:	81a3      	strh	r3, [r4, #12]
 800cb6e:	f04f 30ff 	mov.w	r0, #4294967295
 800cb72:	e03e      	b.n	800cbf2 <__swsetup_r+0xba>
 800cb74:	4b25      	ldr	r3, [pc, #148]	; (800cc0c <__swsetup_r+0xd4>)
 800cb76:	429c      	cmp	r4, r3
 800cb78:	d101      	bne.n	800cb7e <__swsetup_r+0x46>
 800cb7a:	68ac      	ldr	r4, [r5, #8]
 800cb7c:	e7eb      	b.n	800cb56 <__swsetup_r+0x1e>
 800cb7e:	4b24      	ldr	r3, [pc, #144]	; (800cc10 <__swsetup_r+0xd8>)
 800cb80:	429c      	cmp	r4, r3
 800cb82:	bf08      	it	eq
 800cb84:	68ec      	ldreq	r4, [r5, #12]
 800cb86:	e7e6      	b.n	800cb56 <__swsetup_r+0x1e>
 800cb88:	0751      	lsls	r1, r2, #29
 800cb8a:	d512      	bpl.n	800cbb2 <__swsetup_r+0x7a>
 800cb8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb8e:	b141      	cbz	r1, 800cba2 <__swsetup_r+0x6a>
 800cb90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb94:	4299      	cmp	r1, r3
 800cb96:	d002      	beq.n	800cb9e <__swsetup_r+0x66>
 800cb98:	4630      	mov	r0, r6
 800cb9a:	f001 ffc1 	bl	800eb20 <_free_r>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	6363      	str	r3, [r4, #52]	; 0x34
 800cba2:	89a3      	ldrh	r3, [r4, #12]
 800cba4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cba8:	81a3      	strh	r3, [r4, #12]
 800cbaa:	2300      	movs	r3, #0
 800cbac:	6063      	str	r3, [r4, #4]
 800cbae:	6923      	ldr	r3, [r4, #16]
 800cbb0:	6023      	str	r3, [r4, #0]
 800cbb2:	89a3      	ldrh	r3, [r4, #12]
 800cbb4:	f043 0308 	orr.w	r3, r3, #8
 800cbb8:	81a3      	strh	r3, [r4, #12]
 800cbba:	6923      	ldr	r3, [r4, #16]
 800cbbc:	b94b      	cbnz	r3, 800cbd2 <__swsetup_r+0x9a>
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cbc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbc8:	d003      	beq.n	800cbd2 <__swsetup_r+0x9a>
 800cbca:	4621      	mov	r1, r4
 800cbcc:	4630      	mov	r0, r6
 800cbce:	f001 fb3f 	bl	800e250 <__smakebuf_r>
 800cbd2:	89a2      	ldrh	r2, [r4, #12]
 800cbd4:	f012 0301 	ands.w	r3, r2, #1
 800cbd8:	d00c      	beq.n	800cbf4 <__swsetup_r+0xbc>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	60a3      	str	r3, [r4, #8]
 800cbde:	6963      	ldr	r3, [r4, #20]
 800cbe0:	425b      	negs	r3, r3
 800cbe2:	61a3      	str	r3, [r4, #24]
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	b953      	cbnz	r3, 800cbfe <__swsetup_r+0xc6>
 800cbe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cbf0:	d1ba      	bne.n	800cb68 <__swsetup_r+0x30>
 800cbf2:	bd70      	pop	{r4, r5, r6, pc}
 800cbf4:	0792      	lsls	r2, r2, #30
 800cbf6:	bf58      	it	pl
 800cbf8:	6963      	ldrpl	r3, [r4, #20]
 800cbfa:	60a3      	str	r3, [r4, #8]
 800cbfc:	e7f2      	b.n	800cbe4 <__swsetup_r+0xac>
 800cbfe:	2000      	movs	r0, #0
 800cc00:	e7f7      	b.n	800cbf2 <__swsetup_r+0xba>
 800cc02:	bf00      	nop
 800cc04:	20000040 	.word	0x20000040
 800cc08:	0800f530 	.word	0x0800f530
 800cc0c:	0800f550 	.word	0x0800f550
 800cc10:	0800f510 	.word	0x0800f510

0800cc14 <quorem>:
 800cc14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc18:	6903      	ldr	r3, [r0, #16]
 800cc1a:	690c      	ldr	r4, [r1, #16]
 800cc1c:	42a3      	cmp	r3, r4
 800cc1e:	4680      	mov	r8, r0
 800cc20:	f2c0 8082 	blt.w	800cd28 <quorem+0x114>
 800cc24:	3c01      	subs	r4, #1
 800cc26:	f101 0714 	add.w	r7, r1, #20
 800cc2a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cc2e:	f100 0614 	add.w	r6, r0, #20
 800cc32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cc36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cc3a:	eb06 030c 	add.w	r3, r6, ip
 800cc3e:	3501      	adds	r5, #1
 800cc40:	eb07 090c 	add.w	r9, r7, ip
 800cc44:	9301      	str	r3, [sp, #4]
 800cc46:	fbb0 f5f5 	udiv	r5, r0, r5
 800cc4a:	b395      	cbz	r5, 800ccb2 <quorem+0x9e>
 800cc4c:	f04f 0a00 	mov.w	sl, #0
 800cc50:	4638      	mov	r0, r7
 800cc52:	46b6      	mov	lr, r6
 800cc54:	46d3      	mov	fp, sl
 800cc56:	f850 2b04 	ldr.w	r2, [r0], #4
 800cc5a:	b293      	uxth	r3, r2
 800cc5c:	fb05 a303 	mla	r3, r5, r3, sl
 800cc60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	ebab 0303 	sub.w	r3, fp, r3
 800cc6a:	0c12      	lsrs	r2, r2, #16
 800cc6c:	f8de b000 	ldr.w	fp, [lr]
 800cc70:	fb05 a202 	mla	r2, r5, r2, sl
 800cc74:	fa13 f38b 	uxtah	r3, r3, fp
 800cc78:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cc7c:	fa1f fb82 	uxth.w	fp, r2
 800cc80:	f8de 2000 	ldr.w	r2, [lr]
 800cc84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cc88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc92:	4581      	cmp	r9, r0
 800cc94:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cc98:	f84e 3b04 	str.w	r3, [lr], #4
 800cc9c:	d2db      	bcs.n	800cc56 <quorem+0x42>
 800cc9e:	f856 300c 	ldr.w	r3, [r6, ip]
 800cca2:	b933      	cbnz	r3, 800ccb2 <quorem+0x9e>
 800cca4:	9b01      	ldr	r3, [sp, #4]
 800cca6:	3b04      	subs	r3, #4
 800cca8:	429e      	cmp	r6, r3
 800ccaa:	461a      	mov	r2, r3
 800ccac:	d330      	bcc.n	800cd10 <quorem+0xfc>
 800ccae:	f8c8 4010 	str.w	r4, [r8, #16]
 800ccb2:	4640      	mov	r0, r8
 800ccb4:	f001 fd7a 	bl	800e7ac <__mcmp>
 800ccb8:	2800      	cmp	r0, #0
 800ccba:	db25      	blt.n	800cd08 <quorem+0xf4>
 800ccbc:	3501      	adds	r5, #1
 800ccbe:	4630      	mov	r0, r6
 800ccc0:	f04f 0c00 	mov.w	ip, #0
 800ccc4:	f857 2b04 	ldr.w	r2, [r7], #4
 800ccc8:	f8d0 e000 	ldr.w	lr, [r0]
 800cccc:	b293      	uxth	r3, r2
 800ccce:	ebac 0303 	sub.w	r3, ip, r3
 800ccd2:	0c12      	lsrs	r2, r2, #16
 800ccd4:	fa13 f38e 	uxtah	r3, r3, lr
 800ccd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ccdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cce6:	45b9      	cmp	r9, r7
 800cce8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ccec:	f840 3b04 	str.w	r3, [r0], #4
 800ccf0:	d2e8      	bcs.n	800ccc4 <quorem+0xb0>
 800ccf2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ccf6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ccfa:	b92a      	cbnz	r2, 800cd08 <quorem+0xf4>
 800ccfc:	3b04      	subs	r3, #4
 800ccfe:	429e      	cmp	r6, r3
 800cd00:	461a      	mov	r2, r3
 800cd02:	d30b      	bcc.n	800cd1c <quorem+0x108>
 800cd04:	f8c8 4010 	str.w	r4, [r8, #16]
 800cd08:	4628      	mov	r0, r5
 800cd0a:	b003      	add	sp, #12
 800cd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd10:	6812      	ldr	r2, [r2, #0]
 800cd12:	3b04      	subs	r3, #4
 800cd14:	2a00      	cmp	r2, #0
 800cd16:	d1ca      	bne.n	800ccae <quorem+0x9a>
 800cd18:	3c01      	subs	r4, #1
 800cd1a:	e7c5      	b.n	800cca8 <quorem+0x94>
 800cd1c:	6812      	ldr	r2, [r2, #0]
 800cd1e:	3b04      	subs	r3, #4
 800cd20:	2a00      	cmp	r2, #0
 800cd22:	d1ef      	bne.n	800cd04 <quorem+0xf0>
 800cd24:	3c01      	subs	r4, #1
 800cd26:	e7ea      	b.n	800ccfe <quorem+0xea>
 800cd28:	2000      	movs	r0, #0
 800cd2a:	e7ee      	b.n	800cd0a <quorem+0xf6>
 800cd2c:	0000      	movs	r0, r0
	...

0800cd30 <_dtoa_r>:
 800cd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd34:	ec57 6b10 	vmov	r6, r7, d0
 800cd38:	b097      	sub	sp, #92	; 0x5c
 800cd3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd3c:	9106      	str	r1, [sp, #24]
 800cd3e:	4604      	mov	r4, r0
 800cd40:	920b      	str	r2, [sp, #44]	; 0x2c
 800cd42:	9312      	str	r3, [sp, #72]	; 0x48
 800cd44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd48:	e9cd 6700 	strd	r6, r7, [sp]
 800cd4c:	b93d      	cbnz	r5, 800cd5e <_dtoa_r+0x2e>
 800cd4e:	2010      	movs	r0, #16
 800cd50:	f001 fabe 	bl	800e2d0 <malloc>
 800cd54:	6260      	str	r0, [r4, #36]	; 0x24
 800cd56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cd5a:	6005      	str	r5, [r0, #0]
 800cd5c:	60c5      	str	r5, [r0, #12]
 800cd5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd60:	6819      	ldr	r1, [r3, #0]
 800cd62:	b151      	cbz	r1, 800cd7a <_dtoa_r+0x4a>
 800cd64:	685a      	ldr	r2, [r3, #4]
 800cd66:	604a      	str	r2, [r1, #4]
 800cd68:	2301      	movs	r3, #1
 800cd6a:	4093      	lsls	r3, r2
 800cd6c:	608b      	str	r3, [r1, #8]
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f001 fafc 	bl	800e36c <_Bfree>
 800cd74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd76:	2200      	movs	r2, #0
 800cd78:	601a      	str	r2, [r3, #0]
 800cd7a:	1e3b      	subs	r3, r7, #0
 800cd7c:	bfbb      	ittet	lt
 800cd7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cd82:	9301      	strlt	r3, [sp, #4]
 800cd84:	2300      	movge	r3, #0
 800cd86:	2201      	movlt	r2, #1
 800cd88:	bfac      	ite	ge
 800cd8a:	f8c8 3000 	strge.w	r3, [r8]
 800cd8e:	f8c8 2000 	strlt.w	r2, [r8]
 800cd92:	4baf      	ldr	r3, [pc, #700]	; (800d050 <_dtoa_r+0x320>)
 800cd94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cd98:	ea33 0308 	bics.w	r3, r3, r8
 800cd9c:	d114      	bne.n	800cdc8 <_dtoa_r+0x98>
 800cd9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cda0:	f242 730f 	movw	r3, #9999	; 0x270f
 800cda4:	6013      	str	r3, [r2, #0]
 800cda6:	9b00      	ldr	r3, [sp, #0]
 800cda8:	b923      	cbnz	r3, 800cdb4 <_dtoa_r+0x84>
 800cdaa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cdae:	2800      	cmp	r0, #0
 800cdb0:	f000 8542 	beq.w	800d838 <_dtoa_r+0xb08>
 800cdb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdb6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d064 <_dtoa_r+0x334>
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	f000 8544 	beq.w	800d848 <_dtoa_r+0xb18>
 800cdc0:	f10b 0303 	add.w	r3, fp, #3
 800cdc4:	f000 bd3e 	b.w	800d844 <_dtoa_r+0xb14>
 800cdc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	2300      	movs	r3, #0
 800cdd0:	4630      	mov	r0, r6
 800cdd2:	4639      	mov	r1, r7
 800cdd4:	f7f3 fe78 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdd8:	4681      	mov	r9, r0
 800cdda:	b168      	cbz	r0, 800cdf8 <_dtoa_r+0xc8>
 800cddc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdde:	2301      	movs	r3, #1
 800cde0:	6013      	str	r3, [r2, #0]
 800cde2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f000 8524 	beq.w	800d832 <_dtoa_r+0xb02>
 800cdea:	4b9a      	ldr	r3, [pc, #616]	; (800d054 <_dtoa_r+0x324>)
 800cdec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cdee:	f103 3bff 	add.w	fp, r3, #4294967295
 800cdf2:	6013      	str	r3, [r2, #0]
 800cdf4:	f000 bd28 	b.w	800d848 <_dtoa_r+0xb18>
 800cdf8:	aa14      	add	r2, sp, #80	; 0x50
 800cdfa:	a915      	add	r1, sp, #84	; 0x54
 800cdfc:	ec47 6b10 	vmov	d0, r6, r7
 800ce00:	4620      	mov	r0, r4
 800ce02:	f001 fdc1 	bl	800e988 <__d2b>
 800ce06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ce0a:	9004      	str	r0, [sp, #16]
 800ce0c:	2d00      	cmp	r5, #0
 800ce0e:	d07c      	beq.n	800cf0a <_dtoa_r+0x1da>
 800ce10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ce14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ce18:	46b2      	mov	sl, r6
 800ce1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ce1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ce26:	2200      	movs	r2, #0
 800ce28:	4b8b      	ldr	r3, [pc, #556]	; (800d058 <_dtoa_r+0x328>)
 800ce2a:	4650      	mov	r0, sl
 800ce2c:	4659      	mov	r1, fp
 800ce2e:	f7f3 fa2b 	bl	8000288 <__aeabi_dsub>
 800ce32:	a381      	add	r3, pc, #516	; (adr r3, 800d038 <_dtoa_r+0x308>)
 800ce34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce38:	f7f3 fbde 	bl	80005f8 <__aeabi_dmul>
 800ce3c:	a380      	add	r3, pc, #512	; (adr r3, 800d040 <_dtoa_r+0x310>)
 800ce3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce42:	f7f3 fa23 	bl	800028c <__adddf3>
 800ce46:	4606      	mov	r6, r0
 800ce48:	4628      	mov	r0, r5
 800ce4a:	460f      	mov	r7, r1
 800ce4c:	f7f3 fb6a 	bl	8000524 <__aeabi_i2d>
 800ce50:	a37d      	add	r3, pc, #500	; (adr r3, 800d048 <_dtoa_r+0x318>)
 800ce52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce56:	f7f3 fbcf 	bl	80005f8 <__aeabi_dmul>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	4630      	mov	r0, r6
 800ce60:	4639      	mov	r1, r7
 800ce62:	f7f3 fa13 	bl	800028c <__adddf3>
 800ce66:	4606      	mov	r6, r0
 800ce68:	460f      	mov	r7, r1
 800ce6a:	f7f3 fe75 	bl	8000b58 <__aeabi_d2iz>
 800ce6e:	2200      	movs	r2, #0
 800ce70:	4682      	mov	sl, r0
 800ce72:	2300      	movs	r3, #0
 800ce74:	4630      	mov	r0, r6
 800ce76:	4639      	mov	r1, r7
 800ce78:	f7f3 fe30 	bl	8000adc <__aeabi_dcmplt>
 800ce7c:	b148      	cbz	r0, 800ce92 <_dtoa_r+0x162>
 800ce7e:	4650      	mov	r0, sl
 800ce80:	f7f3 fb50 	bl	8000524 <__aeabi_i2d>
 800ce84:	4632      	mov	r2, r6
 800ce86:	463b      	mov	r3, r7
 800ce88:	f7f3 fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce8c:	b908      	cbnz	r0, 800ce92 <_dtoa_r+0x162>
 800ce8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce92:	f1ba 0f16 	cmp.w	sl, #22
 800ce96:	d859      	bhi.n	800cf4c <_dtoa_r+0x21c>
 800ce98:	4970      	ldr	r1, [pc, #448]	; (800d05c <_dtoa_r+0x32c>)
 800ce9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ce9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cea2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cea6:	f7f3 fe37 	bl	8000b18 <__aeabi_dcmpgt>
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d050      	beq.n	800cf50 <_dtoa_r+0x220>
 800ceae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ceb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ceb8:	1b5d      	subs	r5, r3, r5
 800ceba:	f1b5 0801 	subs.w	r8, r5, #1
 800cebe:	bf49      	itett	mi
 800cec0:	f1c5 0301 	rsbmi	r3, r5, #1
 800cec4:	2300      	movpl	r3, #0
 800cec6:	9305      	strmi	r3, [sp, #20]
 800cec8:	f04f 0800 	movmi.w	r8, #0
 800cecc:	bf58      	it	pl
 800cece:	9305      	strpl	r3, [sp, #20]
 800ced0:	f1ba 0f00 	cmp.w	sl, #0
 800ced4:	db3e      	blt.n	800cf54 <_dtoa_r+0x224>
 800ced6:	2300      	movs	r3, #0
 800ced8:	44d0      	add	r8, sl
 800ceda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cede:	9307      	str	r3, [sp, #28]
 800cee0:	9b06      	ldr	r3, [sp, #24]
 800cee2:	2b09      	cmp	r3, #9
 800cee4:	f200 8090 	bhi.w	800d008 <_dtoa_r+0x2d8>
 800cee8:	2b05      	cmp	r3, #5
 800ceea:	bfc4      	itt	gt
 800ceec:	3b04      	subgt	r3, #4
 800ceee:	9306      	strgt	r3, [sp, #24]
 800cef0:	9b06      	ldr	r3, [sp, #24]
 800cef2:	f1a3 0302 	sub.w	r3, r3, #2
 800cef6:	bfcc      	ite	gt
 800cef8:	2500      	movgt	r5, #0
 800cefa:	2501      	movle	r5, #1
 800cefc:	2b03      	cmp	r3, #3
 800cefe:	f200 808f 	bhi.w	800d020 <_dtoa_r+0x2f0>
 800cf02:	e8df f003 	tbb	[pc, r3]
 800cf06:	7f7d      	.short	0x7f7d
 800cf08:	7131      	.short	0x7131
 800cf0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cf0e:	441d      	add	r5, r3
 800cf10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cf14:	2820      	cmp	r0, #32
 800cf16:	dd13      	ble.n	800cf40 <_dtoa_r+0x210>
 800cf18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cf1c:	9b00      	ldr	r3, [sp, #0]
 800cf1e:	fa08 f800 	lsl.w	r8, r8, r0
 800cf22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cf26:	fa23 f000 	lsr.w	r0, r3, r0
 800cf2a:	ea48 0000 	orr.w	r0, r8, r0
 800cf2e:	f7f3 fae9 	bl	8000504 <__aeabi_ui2d>
 800cf32:	2301      	movs	r3, #1
 800cf34:	4682      	mov	sl, r0
 800cf36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cf3a:	3d01      	subs	r5, #1
 800cf3c:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf3e:	e772      	b.n	800ce26 <_dtoa_r+0xf6>
 800cf40:	9b00      	ldr	r3, [sp, #0]
 800cf42:	f1c0 0020 	rsb	r0, r0, #32
 800cf46:	fa03 f000 	lsl.w	r0, r3, r0
 800cf4a:	e7f0      	b.n	800cf2e <_dtoa_r+0x1fe>
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e7b1      	b.n	800ceb4 <_dtoa_r+0x184>
 800cf50:	900f      	str	r0, [sp, #60]	; 0x3c
 800cf52:	e7b0      	b.n	800ceb6 <_dtoa_r+0x186>
 800cf54:	9b05      	ldr	r3, [sp, #20]
 800cf56:	eba3 030a 	sub.w	r3, r3, sl
 800cf5a:	9305      	str	r3, [sp, #20]
 800cf5c:	f1ca 0300 	rsb	r3, sl, #0
 800cf60:	9307      	str	r3, [sp, #28]
 800cf62:	2300      	movs	r3, #0
 800cf64:	930e      	str	r3, [sp, #56]	; 0x38
 800cf66:	e7bb      	b.n	800cee0 <_dtoa_r+0x1b0>
 800cf68:	2301      	movs	r3, #1
 800cf6a:	930a      	str	r3, [sp, #40]	; 0x28
 800cf6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	dd59      	ble.n	800d026 <_dtoa_r+0x2f6>
 800cf72:	9302      	str	r3, [sp, #8]
 800cf74:	4699      	mov	r9, r3
 800cf76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf78:	2200      	movs	r2, #0
 800cf7a:	6072      	str	r2, [r6, #4]
 800cf7c:	2204      	movs	r2, #4
 800cf7e:	f102 0014 	add.w	r0, r2, #20
 800cf82:	4298      	cmp	r0, r3
 800cf84:	6871      	ldr	r1, [r6, #4]
 800cf86:	d953      	bls.n	800d030 <_dtoa_r+0x300>
 800cf88:	4620      	mov	r0, r4
 800cf8a:	f001 f9bb 	bl	800e304 <_Balloc>
 800cf8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf90:	6030      	str	r0, [r6, #0]
 800cf92:	f1b9 0f0e 	cmp.w	r9, #14
 800cf96:	f8d3 b000 	ldr.w	fp, [r3]
 800cf9a:	f200 80e6 	bhi.w	800d16a <_dtoa_r+0x43a>
 800cf9e:	2d00      	cmp	r5, #0
 800cfa0:	f000 80e3 	beq.w	800d16a <_dtoa_r+0x43a>
 800cfa4:	ed9d 7b00 	vldr	d7, [sp]
 800cfa8:	f1ba 0f00 	cmp.w	sl, #0
 800cfac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cfb0:	dd74      	ble.n	800d09c <_dtoa_r+0x36c>
 800cfb2:	4a2a      	ldr	r2, [pc, #168]	; (800d05c <_dtoa_r+0x32c>)
 800cfb4:	f00a 030f 	and.w	r3, sl, #15
 800cfb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cfbc:	ed93 7b00 	vldr	d7, [r3]
 800cfc0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cfc4:	06f0      	lsls	r0, r6, #27
 800cfc6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cfca:	d565      	bpl.n	800d098 <_dtoa_r+0x368>
 800cfcc:	4b24      	ldr	r3, [pc, #144]	; (800d060 <_dtoa_r+0x330>)
 800cfce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cfd2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cfd6:	f7f3 fc39 	bl	800084c <__aeabi_ddiv>
 800cfda:	e9cd 0100 	strd	r0, r1, [sp]
 800cfde:	f006 060f 	and.w	r6, r6, #15
 800cfe2:	2503      	movs	r5, #3
 800cfe4:	4f1e      	ldr	r7, [pc, #120]	; (800d060 <_dtoa_r+0x330>)
 800cfe6:	e04c      	b.n	800d082 <_dtoa_r+0x352>
 800cfe8:	2301      	movs	r3, #1
 800cfea:	930a      	str	r3, [sp, #40]	; 0x28
 800cfec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfee:	4453      	add	r3, sl
 800cff0:	f103 0901 	add.w	r9, r3, #1
 800cff4:	9302      	str	r3, [sp, #8]
 800cff6:	464b      	mov	r3, r9
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	bfb8      	it	lt
 800cffc:	2301      	movlt	r3, #1
 800cffe:	e7ba      	b.n	800cf76 <_dtoa_r+0x246>
 800d000:	2300      	movs	r3, #0
 800d002:	e7b2      	b.n	800cf6a <_dtoa_r+0x23a>
 800d004:	2300      	movs	r3, #0
 800d006:	e7f0      	b.n	800cfea <_dtoa_r+0x2ba>
 800d008:	2501      	movs	r5, #1
 800d00a:	2300      	movs	r3, #0
 800d00c:	9306      	str	r3, [sp, #24]
 800d00e:	950a      	str	r5, [sp, #40]	; 0x28
 800d010:	f04f 33ff 	mov.w	r3, #4294967295
 800d014:	9302      	str	r3, [sp, #8]
 800d016:	4699      	mov	r9, r3
 800d018:	2200      	movs	r2, #0
 800d01a:	2312      	movs	r3, #18
 800d01c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d01e:	e7aa      	b.n	800cf76 <_dtoa_r+0x246>
 800d020:	2301      	movs	r3, #1
 800d022:	930a      	str	r3, [sp, #40]	; 0x28
 800d024:	e7f4      	b.n	800d010 <_dtoa_r+0x2e0>
 800d026:	2301      	movs	r3, #1
 800d028:	9302      	str	r3, [sp, #8]
 800d02a:	4699      	mov	r9, r3
 800d02c:	461a      	mov	r2, r3
 800d02e:	e7f5      	b.n	800d01c <_dtoa_r+0x2ec>
 800d030:	3101      	adds	r1, #1
 800d032:	6071      	str	r1, [r6, #4]
 800d034:	0052      	lsls	r2, r2, #1
 800d036:	e7a2      	b.n	800cf7e <_dtoa_r+0x24e>
 800d038:	636f4361 	.word	0x636f4361
 800d03c:	3fd287a7 	.word	0x3fd287a7
 800d040:	8b60c8b3 	.word	0x8b60c8b3
 800d044:	3fc68a28 	.word	0x3fc68a28
 800d048:	509f79fb 	.word	0x509f79fb
 800d04c:	3fd34413 	.word	0x3fd34413
 800d050:	7ff00000 	.word	0x7ff00000
 800d054:	0800f485 	.word	0x0800f485
 800d058:	3ff80000 	.word	0x3ff80000
 800d05c:	0800f5a8 	.word	0x0800f5a8
 800d060:	0800f580 	.word	0x0800f580
 800d064:	0800f509 	.word	0x0800f509
 800d068:	07f1      	lsls	r1, r6, #31
 800d06a:	d508      	bpl.n	800d07e <_dtoa_r+0x34e>
 800d06c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d070:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d074:	f7f3 fac0 	bl	80005f8 <__aeabi_dmul>
 800d078:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d07c:	3501      	adds	r5, #1
 800d07e:	1076      	asrs	r6, r6, #1
 800d080:	3708      	adds	r7, #8
 800d082:	2e00      	cmp	r6, #0
 800d084:	d1f0      	bne.n	800d068 <_dtoa_r+0x338>
 800d086:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d08a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d08e:	f7f3 fbdd 	bl	800084c <__aeabi_ddiv>
 800d092:	e9cd 0100 	strd	r0, r1, [sp]
 800d096:	e01a      	b.n	800d0ce <_dtoa_r+0x39e>
 800d098:	2502      	movs	r5, #2
 800d09a:	e7a3      	b.n	800cfe4 <_dtoa_r+0x2b4>
 800d09c:	f000 80a0 	beq.w	800d1e0 <_dtoa_r+0x4b0>
 800d0a0:	f1ca 0600 	rsb	r6, sl, #0
 800d0a4:	4b9f      	ldr	r3, [pc, #636]	; (800d324 <_dtoa_r+0x5f4>)
 800d0a6:	4fa0      	ldr	r7, [pc, #640]	; (800d328 <_dtoa_r+0x5f8>)
 800d0a8:	f006 020f 	and.w	r2, r6, #15
 800d0ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d0b8:	f7f3 fa9e 	bl	80005f8 <__aeabi_dmul>
 800d0bc:	e9cd 0100 	strd	r0, r1, [sp]
 800d0c0:	1136      	asrs	r6, r6, #4
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	2502      	movs	r5, #2
 800d0c6:	2e00      	cmp	r6, #0
 800d0c8:	d17f      	bne.n	800d1ca <_dtoa_r+0x49a>
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d1e1      	bne.n	800d092 <_dtoa_r+0x362>
 800d0ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f000 8087 	beq.w	800d1e4 <_dtoa_r+0x4b4>
 800d0d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	4b93      	ldr	r3, [pc, #588]	; (800d32c <_dtoa_r+0x5fc>)
 800d0de:	4630      	mov	r0, r6
 800d0e0:	4639      	mov	r1, r7
 800d0e2:	f7f3 fcfb 	bl	8000adc <__aeabi_dcmplt>
 800d0e6:	2800      	cmp	r0, #0
 800d0e8:	d07c      	beq.n	800d1e4 <_dtoa_r+0x4b4>
 800d0ea:	f1b9 0f00 	cmp.w	r9, #0
 800d0ee:	d079      	beq.n	800d1e4 <_dtoa_r+0x4b4>
 800d0f0:	9b02      	ldr	r3, [sp, #8]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	dd35      	ble.n	800d162 <_dtoa_r+0x432>
 800d0f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d0fa:	9308      	str	r3, [sp, #32]
 800d0fc:	4639      	mov	r1, r7
 800d0fe:	2200      	movs	r2, #0
 800d100:	4b8b      	ldr	r3, [pc, #556]	; (800d330 <_dtoa_r+0x600>)
 800d102:	4630      	mov	r0, r6
 800d104:	f7f3 fa78 	bl	80005f8 <__aeabi_dmul>
 800d108:	e9cd 0100 	strd	r0, r1, [sp]
 800d10c:	9f02      	ldr	r7, [sp, #8]
 800d10e:	3501      	adds	r5, #1
 800d110:	4628      	mov	r0, r5
 800d112:	f7f3 fa07 	bl	8000524 <__aeabi_i2d>
 800d116:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d11a:	f7f3 fa6d 	bl	80005f8 <__aeabi_dmul>
 800d11e:	2200      	movs	r2, #0
 800d120:	4b84      	ldr	r3, [pc, #528]	; (800d334 <_dtoa_r+0x604>)
 800d122:	f7f3 f8b3 	bl	800028c <__adddf3>
 800d126:	4605      	mov	r5, r0
 800d128:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d12c:	2f00      	cmp	r7, #0
 800d12e:	d15d      	bne.n	800d1ec <_dtoa_r+0x4bc>
 800d130:	2200      	movs	r2, #0
 800d132:	4b81      	ldr	r3, [pc, #516]	; (800d338 <_dtoa_r+0x608>)
 800d134:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d138:	f7f3 f8a6 	bl	8000288 <__aeabi_dsub>
 800d13c:	462a      	mov	r2, r5
 800d13e:	4633      	mov	r3, r6
 800d140:	e9cd 0100 	strd	r0, r1, [sp]
 800d144:	f7f3 fce8 	bl	8000b18 <__aeabi_dcmpgt>
 800d148:	2800      	cmp	r0, #0
 800d14a:	f040 8288 	bne.w	800d65e <_dtoa_r+0x92e>
 800d14e:	462a      	mov	r2, r5
 800d150:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d154:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d158:	f7f3 fcc0 	bl	8000adc <__aeabi_dcmplt>
 800d15c:	2800      	cmp	r0, #0
 800d15e:	f040 827c 	bne.w	800d65a <_dtoa_r+0x92a>
 800d162:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d166:	e9cd 2300 	strd	r2, r3, [sp]
 800d16a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f2c0 8150 	blt.w	800d412 <_dtoa_r+0x6e2>
 800d172:	f1ba 0f0e 	cmp.w	sl, #14
 800d176:	f300 814c 	bgt.w	800d412 <_dtoa_r+0x6e2>
 800d17a:	4b6a      	ldr	r3, [pc, #424]	; (800d324 <_dtoa_r+0x5f4>)
 800d17c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d180:	ed93 7b00 	vldr	d7, [r3]
 800d184:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d186:	2b00      	cmp	r3, #0
 800d188:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d18c:	f280 80d8 	bge.w	800d340 <_dtoa_r+0x610>
 800d190:	f1b9 0f00 	cmp.w	r9, #0
 800d194:	f300 80d4 	bgt.w	800d340 <_dtoa_r+0x610>
 800d198:	f040 825e 	bne.w	800d658 <_dtoa_r+0x928>
 800d19c:	2200      	movs	r2, #0
 800d19e:	4b66      	ldr	r3, [pc, #408]	; (800d338 <_dtoa_r+0x608>)
 800d1a0:	ec51 0b17 	vmov	r0, r1, d7
 800d1a4:	f7f3 fa28 	bl	80005f8 <__aeabi_dmul>
 800d1a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1ac:	f7f3 fcaa 	bl	8000b04 <__aeabi_dcmpge>
 800d1b0:	464f      	mov	r7, r9
 800d1b2:	464e      	mov	r6, r9
 800d1b4:	2800      	cmp	r0, #0
 800d1b6:	f040 8234 	bne.w	800d622 <_dtoa_r+0x8f2>
 800d1ba:	2331      	movs	r3, #49	; 0x31
 800d1bc:	f10b 0501 	add.w	r5, fp, #1
 800d1c0:	f88b 3000 	strb.w	r3, [fp]
 800d1c4:	f10a 0a01 	add.w	sl, sl, #1
 800d1c8:	e22f      	b.n	800d62a <_dtoa_r+0x8fa>
 800d1ca:	07f2      	lsls	r2, r6, #31
 800d1cc:	d505      	bpl.n	800d1da <_dtoa_r+0x4aa>
 800d1ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1d2:	f7f3 fa11 	bl	80005f8 <__aeabi_dmul>
 800d1d6:	3501      	adds	r5, #1
 800d1d8:	2301      	movs	r3, #1
 800d1da:	1076      	asrs	r6, r6, #1
 800d1dc:	3708      	adds	r7, #8
 800d1de:	e772      	b.n	800d0c6 <_dtoa_r+0x396>
 800d1e0:	2502      	movs	r5, #2
 800d1e2:	e774      	b.n	800d0ce <_dtoa_r+0x39e>
 800d1e4:	f8cd a020 	str.w	sl, [sp, #32]
 800d1e8:	464f      	mov	r7, r9
 800d1ea:	e791      	b.n	800d110 <_dtoa_r+0x3e0>
 800d1ec:	4b4d      	ldr	r3, [pc, #308]	; (800d324 <_dtoa_r+0x5f4>)
 800d1ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d1f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d047      	beq.n	800d28c <_dtoa_r+0x55c>
 800d1fc:	4602      	mov	r2, r0
 800d1fe:	460b      	mov	r3, r1
 800d200:	2000      	movs	r0, #0
 800d202:	494e      	ldr	r1, [pc, #312]	; (800d33c <_dtoa_r+0x60c>)
 800d204:	f7f3 fb22 	bl	800084c <__aeabi_ddiv>
 800d208:	462a      	mov	r2, r5
 800d20a:	4633      	mov	r3, r6
 800d20c:	f7f3 f83c 	bl	8000288 <__aeabi_dsub>
 800d210:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d214:	465d      	mov	r5, fp
 800d216:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d21a:	f7f3 fc9d 	bl	8000b58 <__aeabi_d2iz>
 800d21e:	4606      	mov	r6, r0
 800d220:	f7f3 f980 	bl	8000524 <__aeabi_i2d>
 800d224:	4602      	mov	r2, r0
 800d226:	460b      	mov	r3, r1
 800d228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d22c:	f7f3 f82c 	bl	8000288 <__aeabi_dsub>
 800d230:	3630      	adds	r6, #48	; 0x30
 800d232:	f805 6b01 	strb.w	r6, [r5], #1
 800d236:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d23a:	e9cd 0100 	strd	r0, r1, [sp]
 800d23e:	f7f3 fc4d 	bl	8000adc <__aeabi_dcmplt>
 800d242:	2800      	cmp	r0, #0
 800d244:	d163      	bne.n	800d30e <_dtoa_r+0x5de>
 800d246:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d24a:	2000      	movs	r0, #0
 800d24c:	4937      	ldr	r1, [pc, #220]	; (800d32c <_dtoa_r+0x5fc>)
 800d24e:	f7f3 f81b 	bl	8000288 <__aeabi_dsub>
 800d252:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d256:	f7f3 fc41 	bl	8000adc <__aeabi_dcmplt>
 800d25a:	2800      	cmp	r0, #0
 800d25c:	f040 80b7 	bne.w	800d3ce <_dtoa_r+0x69e>
 800d260:	eba5 030b 	sub.w	r3, r5, fp
 800d264:	429f      	cmp	r7, r3
 800d266:	f77f af7c 	ble.w	800d162 <_dtoa_r+0x432>
 800d26a:	2200      	movs	r2, #0
 800d26c:	4b30      	ldr	r3, [pc, #192]	; (800d330 <_dtoa_r+0x600>)
 800d26e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d272:	f7f3 f9c1 	bl	80005f8 <__aeabi_dmul>
 800d276:	2200      	movs	r2, #0
 800d278:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d27c:	4b2c      	ldr	r3, [pc, #176]	; (800d330 <_dtoa_r+0x600>)
 800d27e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d282:	f7f3 f9b9 	bl	80005f8 <__aeabi_dmul>
 800d286:	e9cd 0100 	strd	r0, r1, [sp]
 800d28a:	e7c4      	b.n	800d216 <_dtoa_r+0x4e6>
 800d28c:	462a      	mov	r2, r5
 800d28e:	4633      	mov	r3, r6
 800d290:	f7f3 f9b2 	bl	80005f8 <__aeabi_dmul>
 800d294:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d298:	eb0b 0507 	add.w	r5, fp, r7
 800d29c:	465e      	mov	r6, fp
 800d29e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2a2:	f7f3 fc59 	bl	8000b58 <__aeabi_d2iz>
 800d2a6:	4607      	mov	r7, r0
 800d2a8:	f7f3 f93c 	bl	8000524 <__aeabi_i2d>
 800d2ac:	3730      	adds	r7, #48	; 0x30
 800d2ae:	4602      	mov	r2, r0
 800d2b0:	460b      	mov	r3, r1
 800d2b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2b6:	f7f2 ffe7 	bl	8000288 <__aeabi_dsub>
 800d2ba:	f806 7b01 	strb.w	r7, [r6], #1
 800d2be:	42ae      	cmp	r6, r5
 800d2c0:	e9cd 0100 	strd	r0, r1, [sp]
 800d2c4:	f04f 0200 	mov.w	r2, #0
 800d2c8:	d126      	bne.n	800d318 <_dtoa_r+0x5e8>
 800d2ca:	4b1c      	ldr	r3, [pc, #112]	; (800d33c <_dtoa_r+0x60c>)
 800d2cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2d0:	f7f2 ffdc 	bl	800028c <__adddf3>
 800d2d4:	4602      	mov	r2, r0
 800d2d6:	460b      	mov	r3, r1
 800d2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2dc:	f7f3 fc1c 	bl	8000b18 <__aeabi_dcmpgt>
 800d2e0:	2800      	cmp	r0, #0
 800d2e2:	d174      	bne.n	800d3ce <_dtoa_r+0x69e>
 800d2e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d2e8:	2000      	movs	r0, #0
 800d2ea:	4914      	ldr	r1, [pc, #80]	; (800d33c <_dtoa_r+0x60c>)
 800d2ec:	f7f2 ffcc 	bl	8000288 <__aeabi_dsub>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2f8:	f7f3 fbf0 	bl	8000adc <__aeabi_dcmplt>
 800d2fc:	2800      	cmp	r0, #0
 800d2fe:	f43f af30 	beq.w	800d162 <_dtoa_r+0x432>
 800d302:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d306:	2b30      	cmp	r3, #48	; 0x30
 800d308:	f105 32ff 	add.w	r2, r5, #4294967295
 800d30c:	d002      	beq.n	800d314 <_dtoa_r+0x5e4>
 800d30e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d312:	e04a      	b.n	800d3aa <_dtoa_r+0x67a>
 800d314:	4615      	mov	r5, r2
 800d316:	e7f4      	b.n	800d302 <_dtoa_r+0x5d2>
 800d318:	4b05      	ldr	r3, [pc, #20]	; (800d330 <_dtoa_r+0x600>)
 800d31a:	f7f3 f96d 	bl	80005f8 <__aeabi_dmul>
 800d31e:	e9cd 0100 	strd	r0, r1, [sp]
 800d322:	e7bc      	b.n	800d29e <_dtoa_r+0x56e>
 800d324:	0800f5a8 	.word	0x0800f5a8
 800d328:	0800f580 	.word	0x0800f580
 800d32c:	3ff00000 	.word	0x3ff00000
 800d330:	40240000 	.word	0x40240000
 800d334:	401c0000 	.word	0x401c0000
 800d338:	40140000 	.word	0x40140000
 800d33c:	3fe00000 	.word	0x3fe00000
 800d340:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d344:	465d      	mov	r5, fp
 800d346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d34a:	4630      	mov	r0, r6
 800d34c:	4639      	mov	r1, r7
 800d34e:	f7f3 fa7d 	bl	800084c <__aeabi_ddiv>
 800d352:	f7f3 fc01 	bl	8000b58 <__aeabi_d2iz>
 800d356:	4680      	mov	r8, r0
 800d358:	f7f3 f8e4 	bl	8000524 <__aeabi_i2d>
 800d35c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d360:	f7f3 f94a 	bl	80005f8 <__aeabi_dmul>
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	4630      	mov	r0, r6
 800d36a:	4639      	mov	r1, r7
 800d36c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d370:	f7f2 ff8a 	bl	8000288 <__aeabi_dsub>
 800d374:	f805 6b01 	strb.w	r6, [r5], #1
 800d378:	eba5 060b 	sub.w	r6, r5, fp
 800d37c:	45b1      	cmp	r9, r6
 800d37e:	4602      	mov	r2, r0
 800d380:	460b      	mov	r3, r1
 800d382:	d139      	bne.n	800d3f8 <_dtoa_r+0x6c8>
 800d384:	f7f2 ff82 	bl	800028c <__adddf3>
 800d388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d38c:	4606      	mov	r6, r0
 800d38e:	460f      	mov	r7, r1
 800d390:	f7f3 fbc2 	bl	8000b18 <__aeabi_dcmpgt>
 800d394:	b9c8      	cbnz	r0, 800d3ca <_dtoa_r+0x69a>
 800d396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d39a:	4630      	mov	r0, r6
 800d39c:	4639      	mov	r1, r7
 800d39e:	f7f3 fb93 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3a2:	b110      	cbz	r0, 800d3aa <_dtoa_r+0x67a>
 800d3a4:	f018 0f01 	tst.w	r8, #1
 800d3a8:	d10f      	bne.n	800d3ca <_dtoa_r+0x69a>
 800d3aa:	9904      	ldr	r1, [sp, #16]
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f000 ffdd 	bl	800e36c <_Bfree>
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d3b6:	702b      	strb	r3, [r5, #0]
 800d3b8:	f10a 0301 	add.w	r3, sl, #1
 800d3bc:	6013      	str	r3, [r2, #0]
 800d3be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	f000 8241 	beq.w	800d848 <_dtoa_r+0xb18>
 800d3c6:	601d      	str	r5, [r3, #0]
 800d3c8:	e23e      	b.n	800d848 <_dtoa_r+0xb18>
 800d3ca:	f8cd a020 	str.w	sl, [sp, #32]
 800d3ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d3d2:	2a39      	cmp	r2, #57	; 0x39
 800d3d4:	f105 33ff 	add.w	r3, r5, #4294967295
 800d3d8:	d108      	bne.n	800d3ec <_dtoa_r+0x6bc>
 800d3da:	459b      	cmp	fp, r3
 800d3dc:	d10a      	bne.n	800d3f4 <_dtoa_r+0x6c4>
 800d3de:	9b08      	ldr	r3, [sp, #32]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	9308      	str	r3, [sp, #32]
 800d3e4:	2330      	movs	r3, #48	; 0x30
 800d3e6:	f88b 3000 	strb.w	r3, [fp]
 800d3ea:	465b      	mov	r3, fp
 800d3ec:	781a      	ldrb	r2, [r3, #0]
 800d3ee:	3201      	adds	r2, #1
 800d3f0:	701a      	strb	r2, [r3, #0]
 800d3f2:	e78c      	b.n	800d30e <_dtoa_r+0x5de>
 800d3f4:	461d      	mov	r5, r3
 800d3f6:	e7ea      	b.n	800d3ce <_dtoa_r+0x69e>
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	4b9b      	ldr	r3, [pc, #620]	; (800d668 <_dtoa_r+0x938>)
 800d3fc:	f7f3 f8fc 	bl	80005f8 <__aeabi_dmul>
 800d400:	2200      	movs	r2, #0
 800d402:	2300      	movs	r3, #0
 800d404:	4606      	mov	r6, r0
 800d406:	460f      	mov	r7, r1
 800d408:	f7f3 fb5e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	d09a      	beq.n	800d346 <_dtoa_r+0x616>
 800d410:	e7cb      	b.n	800d3aa <_dtoa_r+0x67a>
 800d412:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d414:	2a00      	cmp	r2, #0
 800d416:	f000 808b 	beq.w	800d530 <_dtoa_r+0x800>
 800d41a:	9a06      	ldr	r2, [sp, #24]
 800d41c:	2a01      	cmp	r2, #1
 800d41e:	dc6e      	bgt.n	800d4fe <_dtoa_r+0x7ce>
 800d420:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d422:	2a00      	cmp	r2, #0
 800d424:	d067      	beq.n	800d4f6 <_dtoa_r+0x7c6>
 800d426:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d42a:	9f07      	ldr	r7, [sp, #28]
 800d42c:	9d05      	ldr	r5, [sp, #20]
 800d42e:	9a05      	ldr	r2, [sp, #20]
 800d430:	2101      	movs	r1, #1
 800d432:	441a      	add	r2, r3
 800d434:	4620      	mov	r0, r4
 800d436:	9205      	str	r2, [sp, #20]
 800d438:	4498      	add	r8, r3
 800d43a:	f001 f875 	bl	800e528 <__i2b>
 800d43e:	4606      	mov	r6, r0
 800d440:	2d00      	cmp	r5, #0
 800d442:	dd0c      	ble.n	800d45e <_dtoa_r+0x72e>
 800d444:	f1b8 0f00 	cmp.w	r8, #0
 800d448:	dd09      	ble.n	800d45e <_dtoa_r+0x72e>
 800d44a:	4545      	cmp	r5, r8
 800d44c:	9a05      	ldr	r2, [sp, #20]
 800d44e:	462b      	mov	r3, r5
 800d450:	bfa8      	it	ge
 800d452:	4643      	movge	r3, r8
 800d454:	1ad2      	subs	r2, r2, r3
 800d456:	9205      	str	r2, [sp, #20]
 800d458:	1aed      	subs	r5, r5, r3
 800d45a:	eba8 0803 	sub.w	r8, r8, r3
 800d45e:	9b07      	ldr	r3, [sp, #28]
 800d460:	b1eb      	cbz	r3, 800d49e <_dtoa_r+0x76e>
 800d462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d464:	2b00      	cmp	r3, #0
 800d466:	d067      	beq.n	800d538 <_dtoa_r+0x808>
 800d468:	b18f      	cbz	r7, 800d48e <_dtoa_r+0x75e>
 800d46a:	4631      	mov	r1, r6
 800d46c:	463a      	mov	r2, r7
 800d46e:	4620      	mov	r0, r4
 800d470:	f001 f8fa 	bl	800e668 <__pow5mult>
 800d474:	9a04      	ldr	r2, [sp, #16]
 800d476:	4601      	mov	r1, r0
 800d478:	4606      	mov	r6, r0
 800d47a:	4620      	mov	r0, r4
 800d47c:	f001 f85d 	bl	800e53a <__multiply>
 800d480:	9904      	ldr	r1, [sp, #16]
 800d482:	9008      	str	r0, [sp, #32]
 800d484:	4620      	mov	r0, r4
 800d486:	f000 ff71 	bl	800e36c <_Bfree>
 800d48a:	9b08      	ldr	r3, [sp, #32]
 800d48c:	9304      	str	r3, [sp, #16]
 800d48e:	9b07      	ldr	r3, [sp, #28]
 800d490:	1bda      	subs	r2, r3, r7
 800d492:	d004      	beq.n	800d49e <_dtoa_r+0x76e>
 800d494:	9904      	ldr	r1, [sp, #16]
 800d496:	4620      	mov	r0, r4
 800d498:	f001 f8e6 	bl	800e668 <__pow5mult>
 800d49c:	9004      	str	r0, [sp, #16]
 800d49e:	2101      	movs	r1, #1
 800d4a0:	4620      	mov	r0, r4
 800d4a2:	f001 f841 	bl	800e528 <__i2b>
 800d4a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4a8:	4607      	mov	r7, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	f000 81d0 	beq.w	800d850 <_dtoa_r+0xb20>
 800d4b0:	461a      	mov	r2, r3
 800d4b2:	4601      	mov	r1, r0
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	f001 f8d7 	bl	800e668 <__pow5mult>
 800d4ba:	9b06      	ldr	r3, [sp, #24]
 800d4bc:	2b01      	cmp	r3, #1
 800d4be:	4607      	mov	r7, r0
 800d4c0:	dc40      	bgt.n	800d544 <_dtoa_r+0x814>
 800d4c2:	9b00      	ldr	r3, [sp, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d139      	bne.n	800d53c <_dtoa_r+0x80c>
 800d4c8:	9b01      	ldr	r3, [sp, #4]
 800d4ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d136      	bne.n	800d540 <_dtoa_r+0x810>
 800d4d2:	9b01      	ldr	r3, [sp, #4]
 800d4d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4d8:	0d1b      	lsrs	r3, r3, #20
 800d4da:	051b      	lsls	r3, r3, #20
 800d4dc:	b12b      	cbz	r3, 800d4ea <_dtoa_r+0x7ba>
 800d4de:	9b05      	ldr	r3, [sp, #20]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	9305      	str	r3, [sp, #20]
 800d4e4:	f108 0801 	add.w	r8, r8, #1
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	9307      	str	r3, [sp, #28]
 800d4ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d12a      	bne.n	800d548 <_dtoa_r+0x818>
 800d4f2:	2001      	movs	r0, #1
 800d4f4:	e030      	b.n	800d558 <_dtoa_r+0x828>
 800d4f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d4fc:	e795      	b.n	800d42a <_dtoa_r+0x6fa>
 800d4fe:	9b07      	ldr	r3, [sp, #28]
 800d500:	f109 37ff 	add.w	r7, r9, #4294967295
 800d504:	42bb      	cmp	r3, r7
 800d506:	bfbf      	itttt	lt
 800d508:	9b07      	ldrlt	r3, [sp, #28]
 800d50a:	9707      	strlt	r7, [sp, #28]
 800d50c:	1afa      	sublt	r2, r7, r3
 800d50e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d510:	bfbb      	ittet	lt
 800d512:	189b      	addlt	r3, r3, r2
 800d514:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d516:	1bdf      	subge	r7, r3, r7
 800d518:	2700      	movlt	r7, #0
 800d51a:	f1b9 0f00 	cmp.w	r9, #0
 800d51e:	bfb5      	itete	lt
 800d520:	9b05      	ldrlt	r3, [sp, #20]
 800d522:	9d05      	ldrge	r5, [sp, #20]
 800d524:	eba3 0509 	sublt.w	r5, r3, r9
 800d528:	464b      	movge	r3, r9
 800d52a:	bfb8      	it	lt
 800d52c:	2300      	movlt	r3, #0
 800d52e:	e77e      	b.n	800d42e <_dtoa_r+0x6fe>
 800d530:	9f07      	ldr	r7, [sp, #28]
 800d532:	9d05      	ldr	r5, [sp, #20]
 800d534:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d536:	e783      	b.n	800d440 <_dtoa_r+0x710>
 800d538:	9a07      	ldr	r2, [sp, #28]
 800d53a:	e7ab      	b.n	800d494 <_dtoa_r+0x764>
 800d53c:	2300      	movs	r3, #0
 800d53e:	e7d4      	b.n	800d4ea <_dtoa_r+0x7ba>
 800d540:	9b00      	ldr	r3, [sp, #0]
 800d542:	e7d2      	b.n	800d4ea <_dtoa_r+0x7ba>
 800d544:	2300      	movs	r3, #0
 800d546:	9307      	str	r3, [sp, #28]
 800d548:	693b      	ldr	r3, [r7, #16]
 800d54a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d54e:	6918      	ldr	r0, [r3, #16]
 800d550:	f000 ff9c 	bl	800e48c <__hi0bits>
 800d554:	f1c0 0020 	rsb	r0, r0, #32
 800d558:	4440      	add	r0, r8
 800d55a:	f010 001f 	ands.w	r0, r0, #31
 800d55e:	d047      	beq.n	800d5f0 <_dtoa_r+0x8c0>
 800d560:	f1c0 0320 	rsb	r3, r0, #32
 800d564:	2b04      	cmp	r3, #4
 800d566:	dd3b      	ble.n	800d5e0 <_dtoa_r+0x8b0>
 800d568:	9b05      	ldr	r3, [sp, #20]
 800d56a:	f1c0 001c 	rsb	r0, r0, #28
 800d56e:	4403      	add	r3, r0
 800d570:	9305      	str	r3, [sp, #20]
 800d572:	4405      	add	r5, r0
 800d574:	4480      	add	r8, r0
 800d576:	9b05      	ldr	r3, [sp, #20]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	dd05      	ble.n	800d588 <_dtoa_r+0x858>
 800d57c:	461a      	mov	r2, r3
 800d57e:	9904      	ldr	r1, [sp, #16]
 800d580:	4620      	mov	r0, r4
 800d582:	f001 f8bf 	bl	800e704 <__lshift>
 800d586:	9004      	str	r0, [sp, #16]
 800d588:	f1b8 0f00 	cmp.w	r8, #0
 800d58c:	dd05      	ble.n	800d59a <_dtoa_r+0x86a>
 800d58e:	4639      	mov	r1, r7
 800d590:	4642      	mov	r2, r8
 800d592:	4620      	mov	r0, r4
 800d594:	f001 f8b6 	bl	800e704 <__lshift>
 800d598:	4607      	mov	r7, r0
 800d59a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d59c:	b353      	cbz	r3, 800d5f4 <_dtoa_r+0x8c4>
 800d59e:	4639      	mov	r1, r7
 800d5a0:	9804      	ldr	r0, [sp, #16]
 800d5a2:	f001 f903 	bl	800e7ac <__mcmp>
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	da24      	bge.n	800d5f4 <_dtoa_r+0x8c4>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	220a      	movs	r2, #10
 800d5ae:	9904      	ldr	r1, [sp, #16]
 800d5b0:	4620      	mov	r0, r4
 800d5b2:	f000 fef2 	bl	800e39a <__multadd>
 800d5b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5b8:	9004      	str	r0, [sp, #16]
 800d5ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	f000 814d 	beq.w	800d85e <_dtoa_r+0xb2e>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	4631      	mov	r1, r6
 800d5c8:	220a      	movs	r2, #10
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f000 fee5 	bl	800e39a <__multadd>
 800d5d0:	9b02      	ldr	r3, [sp, #8]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	dc4f      	bgt.n	800d678 <_dtoa_r+0x948>
 800d5d8:	9b06      	ldr	r3, [sp, #24]
 800d5da:	2b02      	cmp	r3, #2
 800d5dc:	dd4c      	ble.n	800d678 <_dtoa_r+0x948>
 800d5de:	e011      	b.n	800d604 <_dtoa_r+0x8d4>
 800d5e0:	d0c9      	beq.n	800d576 <_dtoa_r+0x846>
 800d5e2:	9a05      	ldr	r2, [sp, #20]
 800d5e4:	331c      	adds	r3, #28
 800d5e6:	441a      	add	r2, r3
 800d5e8:	9205      	str	r2, [sp, #20]
 800d5ea:	441d      	add	r5, r3
 800d5ec:	4498      	add	r8, r3
 800d5ee:	e7c2      	b.n	800d576 <_dtoa_r+0x846>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	e7f6      	b.n	800d5e2 <_dtoa_r+0x8b2>
 800d5f4:	f1b9 0f00 	cmp.w	r9, #0
 800d5f8:	dc38      	bgt.n	800d66c <_dtoa_r+0x93c>
 800d5fa:	9b06      	ldr	r3, [sp, #24]
 800d5fc:	2b02      	cmp	r3, #2
 800d5fe:	dd35      	ble.n	800d66c <_dtoa_r+0x93c>
 800d600:	f8cd 9008 	str.w	r9, [sp, #8]
 800d604:	9b02      	ldr	r3, [sp, #8]
 800d606:	b963      	cbnz	r3, 800d622 <_dtoa_r+0x8f2>
 800d608:	4639      	mov	r1, r7
 800d60a:	2205      	movs	r2, #5
 800d60c:	4620      	mov	r0, r4
 800d60e:	f000 fec4 	bl	800e39a <__multadd>
 800d612:	4601      	mov	r1, r0
 800d614:	4607      	mov	r7, r0
 800d616:	9804      	ldr	r0, [sp, #16]
 800d618:	f001 f8c8 	bl	800e7ac <__mcmp>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	f73f adcc 	bgt.w	800d1ba <_dtoa_r+0x48a>
 800d622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d624:	465d      	mov	r5, fp
 800d626:	ea6f 0a03 	mvn.w	sl, r3
 800d62a:	f04f 0900 	mov.w	r9, #0
 800d62e:	4639      	mov	r1, r7
 800d630:	4620      	mov	r0, r4
 800d632:	f000 fe9b 	bl	800e36c <_Bfree>
 800d636:	2e00      	cmp	r6, #0
 800d638:	f43f aeb7 	beq.w	800d3aa <_dtoa_r+0x67a>
 800d63c:	f1b9 0f00 	cmp.w	r9, #0
 800d640:	d005      	beq.n	800d64e <_dtoa_r+0x91e>
 800d642:	45b1      	cmp	r9, r6
 800d644:	d003      	beq.n	800d64e <_dtoa_r+0x91e>
 800d646:	4649      	mov	r1, r9
 800d648:	4620      	mov	r0, r4
 800d64a:	f000 fe8f 	bl	800e36c <_Bfree>
 800d64e:	4631      	mov	r1, r6
 800d650:	4620      	mov	r0, r4
 800d652:	f000 fe8b 	bl	800e36c <_Bfree>
 800d656:	e6a8      	b.n	800d3aa <_dtoa_r+0x67a>
 800d658:	2700      	movs	r7, #0
 800d65a:	463e      	mov	r6, r7
 800d65c:	e7e1      	b.n	800d622 <_dtoa_r+0x8f2>
 800d65e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d662:	463e      	mov	r6, r7
 800d664:	e5a9      	b.n	800d1ba <_dtoa_r+0x48a>
 800d666:	bf00      	nop
 800d668:	40240000 	.word	0x40240000
 800d66c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d66e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d672:	2b00      	cmp	r3, #0
 800d674:	f000 80fa 	beq.w	800d86c <_dtoa_r+0xb3c>
 800d678:	2d00      	cmp	r5, #0
 800d67a:	dd05      	ble.n	800d688 <_dtoa_r+0x958>
 800d67c:	4631      	mov	r1, r6
 800d67e:	462a      	mov	r2, r5
 800d680:	4620      	mov	r0, r4
 800d682:	f001 f83f 	bl	800e704 <__lshift>
 800d686:	4606      	mov	r6, r0
 800d688:	9b07      	ldr	r3, [sp, #28]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d04c      	beq.n	800d728 <_dtoa_r+0x9f8>
 800d68e:	6871      	ldr	r1, [r6, #4]
 800d690:	4620      	mov	r0, r4
 800d692:	f000 fe37 	bl	800e304 <_Balloc>
 800d696:	6932      	ldr	r2, [r6, #16]
 800d698:	3202      	adds	r2, #2
 800d69a:	4605      	mov	r5, r0
 800d69c:	0092      	lsls	r2, r2, #2
 800d69e:	f106 010c 	add.w	r1, r6, #12
 800d6a2:	300c      	adds	r0, #12
 800d6a4:	f7fd fc54 	bl	800af50 <memcpy>
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	4629      	mov	r1, r5
 800d6ac:	4620      	mov	r0, r4
 800d6ae:	f001 f829 	bl	800e704 <__lshift>
 800d6b2:	9b00      	ldr	r3, [sp, #0]
 800d6b4:	f8cd b014 	str.w	fp, [sp, #20]
 800d6b8:	f003 0301 	and.w	r3, r3, #1
 800d6bc:	46b1      	mov	r9, r6
 800d6be:	9307      	str	r3, [sp, #28]
 800d6c0:	4606      	mov	r6, r0
 800d6c2:	4639      	mov	r1, r7
 800d6c4:	9804      	ldr	r0, [sp, #16]
 800d6c6:	f7ff faa5 	bl	800cc14 <quorem>
 800d6ca:	4649      	mov	r1, r9
 800d6cc:	4605      	mov	r5, r0
 800d6ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d6d2:	9804      	ldr	r0, [sp, #16]
 800d6d4:	f001 f86a 	bl	800e7ac <__mcmp>
 800d6d8:	4632      	mov	r2, r6
 800d6da:	9000      	str	r0, [sp, #0]
 800d6dc:	4639      	mov	r1, r7
 800d6de:	4620      	mov	r0, r4
 800d6e0:	f001 f87e 	bl	800e7e0 <__mdiff>
 800d6e4:	68c3      	ldr	r3, [r0, #12]
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	bb03      	cbnz	r3, 800d72c <_dtoa_r+0x9fc>
 800d6ea:	4601      	mov	r1, r0
 800d6ec:	9008      	str	r0, [sp, #32]
 800d6ee:	9804      	ldr	r0, [sp, #16]
 800d6f0:	f001 f85c 	bl	800e7ac <__mcmp>
 800d6f4:	9a08      	ldr	r2, [sp, #32]
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	4611      	mov	r1, r2
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	9308      	str	r3, [sp, #32]
 800d6fe:	f000 fe35 	bl	800e36c <_Bfree>
 800d702:	9b08      	ldr	r3, [sp, #32]
 800d704:	b9a3      	cbnz	r3, 800d730 <_dtoa_r+0xa00>
 800d706:	9a06      	ldr	r2, [sp, #24]
 800d708:	b992      	cbnz	r2, 800d730 <_dtoa_r+0xa00>
 800d70a:	9a07      	ldr	r2, [sp, #28]
 800d70c:	b982      	cbnz	r2, 800d730 <_dtoa_r+0xa00>
 800d70e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d712:	d029      	beq.n	800d768 <_dtoa_r+0xa38>
 800d714:	9b00      	ldr	r3, [sp, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	dd01      	ble.n	800d71e <_dtoa_r+0x9ee>
 800d71a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d71e:	9b05      	ldr	r3, [sp, #20]
 800d720:	1c5d      	adds	r5, r3, #1
 800d722:	f883 8000 	strb.w	r8, [r3]
 800d726:	e782      	b.n	800d62e <_dtoa_r+0x8fe>
 800d728:	4630      	mov	r0, r6
 800d72a:	e7c2      	b.n	800d6b2 <_dtoa_r+0x982>
 800d72c:	2301      	movs	r3, #1
 800d72e:	e7e3      	b.n	800d6f8 <_dtoa_r+0x9c8>
 800d730:	9a00      	ldr	r2, [sp, #0]
 800d732:	2a00      	cmp	r2, #0
 800d734:	db04      	blt.n	800d740 <_dtoa_r+0xa10>
 800d736:	d125      	bne.n	800d784 <_dtoa_r+0xa54>
 800d738:	9a06      	ldr	r2, [sp, #24]
 800d73a:	bb1a      	cbnz	r2, 800d784 <_dtoa_r+0xa54>
 800d73c:	9a07      	ldr	r2, [sp, #28]
 800d73e:	bb0a      	cbnz	r2, 800d784 <_dtoa_r+0xa54>
 800d740:	2b00      	cmp	r3, #0
 800d742:	ddec      	ble.n	800d71e <_dtoa_r+0x9ee>
 800d744:	2201      	movs	r2, #1
 800d746:	9904      	ldr	r1, [sp, #16]
 800d748:	4620      	mov	r0, r4
 800d74a:	f000 ffdb 	bl	800e704 <__lshift>
 800d74e:	4639      	mov	r1, r7
 800d750:	9004      	str	r0, [sp, #16]
 800d752:	f001 f82b 	bl	800e7ac <__mcmp>
 800d756:	2800      	cmp	r0, #0
 800d758:	dc03      	bgt.n	800d762 <_dtoa_r+0xa32>
 800d75a:	d1e0      	bne.n	800d71e <_dtoa_r+0x9ee>
 800d75c:	f018 0f01 	tst.w	r8, #1
 800d760:	d0dd      	beq.n	800d71e <_dtoa_r+0x9ee>
 800d762:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d766:	d1d8      	bne.n	800d71a <_dtoa_r+0x9ea>
 800d768:	9b05      	ldr	r3, [sp, #20]
 800d76a:	9a05      	ldr	r2, [sp, #20]
 800d76c:	1c5d      	adds	r5, r3, #1
 800d76e:	2339      	movs	r3, #57	; 0x39
 800d770:	7013      	strb	r3, [r2, #0]
 800d772:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d776:	2b39      	cmp	r3, #57	; 0x39
 800d778:	f105 32ff 	add.w	r2, r5, #4294967295
 800d77c:	d04f      	beq.n	800d81e <_dtoa_r+0xaee>
 800d77e:	3301      	adds	r3, #1
 800d780:	7013      	strb	r3, [r2, #0]
 800d782:	e754      	b.n	800d62e <_dtoa_r+0x8fe>
 800d784:	9a05      	ldr	r2, [sp, #20]
 800d786:	2b00      	cmp	r3, #0
 800d788:	f102 0501 	add.w	r5, r2, #1
 800d78c:	dd06      	ble.n	800d79c <_dtoa_r+0xa6c>
 800d78e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d792:	d0e9      	beq.n	800d768 <_dtoa_r+0xa38>
 800d794:	f108 0801 	add.w	r8, r8, #1
 800d798:	9b05      	ldr	r3, [sp, #20]
 800d79a:	e7c2      	b.n	800d722 <_dtoa_r+0x9f2>
 800d79c:	9a02      	ldr	r2, [sp, #8]
 800d79e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d7a2:	eba5 030b 	sub.w	r3, r5, fp
 800d7a6:	4293      	cmp	r3, r2
 800d7a8:	d021      	beq.n	800d7ee <_dtoa_r+0xabe>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	220a      	movs	r2, #10
 800d7ae:	9904      	ldr	r1, [sp, #16]
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f000 fdf2 	bl	800e39a <__multadd>
 800d7b6:	45b1      	cmp	r9, r6
 800d7b8:	9004      	str	r0, [sp, #16]
 800d7ba:	f04f 0300 	mov.w	r3, #0
 800d7be:	f04f 020a 	mov.w	r2, #10
 800d7c2:	4649      	mov	r1, r9
 800d7c4:	4620      	mov	r0, r4
 800d7c6:	d105      	bne.n	800d7d4 <_dtoa_r+0xaa4>
 800d7c8:	f000 fde7 	bl	800e39a <__multadd>
 800d7cc:	4681      	mov	r9, r0
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	9505      	str	r5, [sp, #20]
 800d7d2:	e776      	b.n	800d6c2 <_dtoa_r+0x992>
 800d7d4:	f000 fde1 	bl	800e39a <__multadd>
 800d7d8:	4631      	mov	r1, r6
 800d7da:	4681      	mov	r9, r0
 800d7dc:	2300      	movs	r3, #0
 800d7de:	220a      	movs	r2, #10
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f000 fdda 	bl	800e39a <__multadd>
 800d7e6:	4606      	mov	r6, r0
 800d7e8:	e7f2      	b.n	800d7d0 <_dtoa_r+0xaa0>
 800d7ea:	f04f 0900 	mov.w	r9, #0
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	9904      	ldr	r1, [sp, #16]
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	f000 ff86 	bl	800e704 <__lshift>
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	9004      	str	r0, [sp, #16]
 800d7fc:	f000 ffd6 	bl	800e7ac <__mcmp>
 800d800:	2800      	cmp	r0, #0
 800d802:	dcb6      	bgt.n	800d772 <_dtoa_r+0xa42>
 800d804:	d102      	bne.n	800d80c <_dtoa_r+0xadc>
 800d806:	f018 0f01 	tst.w	r8, #1
 800d80a:	d1b2      	bne.n	800d772 <_dtoa_r+0xa42>
 800d80c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d810:	2b30      	cmp	r3, #48	; 0x30
 800d812:	f105 32ff 	add.w	r2, r5, #4294967295
 800d816:	f47f af0a 	bne.w	800d62e <_dtoa_r+0x8fe>
 800d81a:	4615      	mov	r5, r2
 800d81c:	e7f6      	b.n	800d80c <_dtoa_r+0xadc>
 800d81e:	4593      	cmp	fp, r2
 800d820:	d105      	bne.n	800d82e <_dtoa_r+0xafe>
 800d822:	2331      	movs	r3, #49	; 0x31
 800d824:	f10a 0a01 	add.w	sl, sl, #1
 800d828:	f88b 3000 	strb.w	r3, [fp]
 800d82c:	e6ff      	b.n	800d62e <_dtoa_r+0x8fe>
 800d82e:	4615      	mov	r5, r2
 800d830:	e79f      	b.n	800d772 <_dtoa_r+0xa42>
 800d832:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d898 <_dtoa_r+0xb68>
 800d836:	e007      	b.n	800d848 <_dtoa_r+0xb18>
 800d838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d83a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d89c <_dtoa_r+0xb6c>
 800d83e:	b11b      	cbz	r3, 800d848 <_dtoa_r+0xb18>
 800d840:	f10b 0308 	add.w	r3, fp, #8
 800d844:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d846:	6013      	str	r3, [r2, #0]
 800d848:	4658      	mov	r0, fp
 800d84a:	b017      	add	sp, #92	; 0x5c
 800d84c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d850:	9b06      	ldr	r3, [sp, #24]
 800d852:	2b01      	cmp	r3, #1
 800d854:	f77f ae35 	ble.w	800d4c2 <_dtoa_r+0x792>
 800d858:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d85a:	9307      	str	r3, [sp, #28]
 800d85c:	e649      	b.n	800d4f2 <_dtoa_r+0x7c2>
 800d85e:	9b02      	ldr	r3, [sp, #8]
 800d860:	2b00      	cmp	r3, #0
 800d862:	dc03      	bgt.n	800d86c <_dtoa_r+0xb3c>
 800d864:	9b06      	ldr	r3, [sp, #24]
 800d866:	2b02      	cmp	r3, #2
 800d868:	f73f aecc 	bgt.w	800d604 <_dtoa_r+0x8d4>
 800d86c:	465d      	mov	r5, fp
 800d86e:	4639      	mov	r1, r7
 800d870:	9804      	ldr	r0, [sp, #16]
 800d872:	f7ff f9cf 	bl	800cc14 <quorem>
 800d876:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d87a:	f805 8b01 	strb.w	r8, [r5], #1
 800d87e:	9a02      	ldr	r2, [sp, #8]
 800d880:	eba5 030b 	sub.w	r3, r5, fp
 800d884:	429a      	cmp	r2, r3
 800d886:	ddb0      	ble.n	800d7ea <_dtoa_r+0xaba>
 800d888:	2300      	movs	r3, #0
 800d88a:	220a      	movs	r2, #10
 800d88c:	9904      	ldr	r1, [sp, #16]
 800d88e:	4620      	mov	r0, r4
 800d890:	f000 fd83 	bl	800e39a <__multadd>
 800d894:	9004      	str	r0, [sp, #16]
 800d896:	e7ea      	b.n	800d86e <_dtoa_r+0xb3e>
 800d898:	0800f484 	.word	0x0800f484
 800d89c:	0800f500 	.word	0x0800f500

0800d8a0 <__sflush_r>:
 800d8a0:	898a      	ldrh	r2, [r1, #12]
 800d8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8a6:	4605      	mov	r5, r0
 800d8a8:	0710      	lsls	r0, r2, #28
 800d8aa:	460c      	mov	r4, r1
 800d8ac:	d458      	bmi.n	800d960 <__sflush_r+0xc0>
 800d8ae:	684b      	ldr	r3, [r1, #4]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	dc05      	bgt.n	800d8c0 <__sflush_r+0x20>
 800d8b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	dc02      	bgt.n	800d8c0 <__sflush_r+0x20>
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8c2:	2e00      	cmp	r6, #0
 800d8c4:	d0f9      	beq.n	800d8ba <__sflush_r+0x1a>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d8cc:	682f      	ldr	r7, [r5, #0]
 800d8ce:	6a21      	ldr	r1, [r4, #32]
 800d8d0:	602b      	str	r3, [r5, #0]
 800d8d2:	d032      	beq.n	800d93a <__sflush_r+0x9a>
 800d8d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d8d6:	89a3      	ldrh	r3, [r4, #12]
 800d8d8:	075a      	lsls	r2, r3, #29
 800d8da:	d505      	bpl.n	800d8e8 <__sflush_r+0x48>
 800d8dc:	6863      	ldr	r3, [r4, #4]
 800d8de:	1ac0      	subs	r0, r0, r3
 800d8e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d8e2:	b10b      	cbz	r3, 800d8e8 <__sflush_r+0x48>
 800d8e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8e6:	1ac0      	subs	r0, r0, r3
 800d8e8:	2300      	movs	r3, #0
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8ee:	6a21      	ldr	r1, [r4, #32]
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	47b0      	blx	r6
 800d8f4:	1c43      	adds	r3, r0, #1
 800d8f6:	89a3      	ldrh	r3, [r4, #12]
 800d8f8:	d106      	bne.n	800d908 <__sflush_r+0x68>
 800d8fa:	6829      	ldr	r1, [r5, #0]
 800d8fc:	291d      	cmp	r1, #29
 800d8fe:	d848      	bhi.n	800d992 <__sflush_r+0xf2>
 800d900:	4a29      	ldr	r2, [pc, #164]	; (800d9a8 <__sflush_r+0x108>)
 800d902:	40ca      	lsrs	r2, r1
 800d904:	07d6      	lsls	r6, r2, #31
 800d906:	d544      	bpl.n	800d992 <__sflush_r+0xf2>
 800d908:	2200      	movs	r2, #0
 800d90a:	6062      	str	r2, [r4, #4]
 800d90c:	04d9      	lsls	r1, r3, #19
 800d90e:	6922      	ldr	r2, [r4, #16]
 800d910:	6022      	str	r2, [r4, #0]
 800d912:	d504      	bpl.n	800d91e <__sflush_r+0x7e>
 800d914:	1c42      	adds	r2, r0, #1
 800d916:	d101      	bne.n	800d91c <__sflush_r+0x7c>
 800d918:	682b      	ldr	r3, [r5, #0]
 800d91a:	b903      	cbnz	r3, 800d91e <__sflush_r+0x7e>
 800d91c:	6560      	str	r0, [r4, #84]	; 0x54
 800d91e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d920:	602f      	str	r7, [r5, #0]
 800d922:	2900      	cmp	r1, #0
 800d924:	d0c9      	beq.n	800d8ba <__sflush_r+0x1a>
 800d926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d92a:	4299      	cmp	r1, r3
 800d92c:	d002      	beq.n	800d934 <__sflush_r+0x94>
 800d92e:	4628      	mov	r0, r5
 800d930:	f001 f8f6 	bl	800eb20 <_free_r>
 800d934:	2000      	movs	r0, #0
 800d936:	6360      	str	r0, [r4, #52]	; 0x34
 800d938:	e7c0      	b.n	800d8bc <__sflush_r+0x1c>
 800d93a:	2301      	movs	r3, #1
 800d93c:	4628      	mov	r0, r5
 800d93e:	47b0      	blx	r6
 800d940:	1c41      	adds	r1, r0, #1
 800d942:	d1c8      	bne.n	800d8d6 <__sflush_r+0x36>
 800d944:	682b      	ldr	r3, [r5, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d0c5      	beq.n	800d8d6 <__sflush_r+0x36>
 800d94a:	2b1d      	cmp	r3, #29
 800d94c:	d001      	beq.n	800d952 <__sflush_r+0xb2>
 800d94e:	2b16      	cmp	r3, #22
 800d950:	d101      	bne.n	800d956 <__sflush_r+0xb6>
 800d952:	602f      	str	r7, [r5, #0]
 800d954:	e7b1      	b.n	800d8ba <__sflush_r+0x1a>
 800d956:	89a3      	ldrh	r3, [r4, #12]
 800d958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d95c:	81a3      	strh	r3, [r4, #12]
 800d95e:	e7ad      	b.n	800d8bc <__sflush_r+0x1c>
 800d960:	690f      	ldr	r7, [r1, #16]
 800d962:	2f00      	cmp	r7, #0
 800d964:	d0a9      	beq.n	800d8ba <__sflush_r+0x1a>
 800d966:	0793      	lsls	r3, r2, #30
 800d968:	680e      	ldr	r6, [r1, #0]
 800d96a:	bf08      	it	eq
 800d96c:	694b      	ldreq	r3, [r1, #20]
 800d96e:	600f      	str	r7, [r1, #0]
 800d970:	bf18      	it	ne
 800d972:	2300      	movne	r3, #0
 800d974:	eba6 0807 	sub.w	r8, r6, r7
 800d978:	608b      	str	r3, [r1, #8]
 800d97a:	f1b8 0f00 	cmp.w	r8, #0
 800d97e:	dd9c      	ble.n	800d8ba <__sflush_r+0x1a>
 800d980:	4643      	mov	r3, r8
 800d982:	463a      	mov	r2, r7
 800d984:	6a21      	ldr	r1, [r4, #32]
 800d986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d988:	4628      	mov	r0, r5
 800d98a:	47b0      	blx	r6
 800d98c:	2800      	cmp	r0, #0
 800d98e:	dc06      	bgt.n	800d99e <__sflush_r+0xfe>
 800d990:	89a3      	ldrh	r3, [r4, #12]
 800d992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d996:	81a3      	strh	r3, [r4, #12]
 800d998:	f04f 30ff 	mov.w	r0, #4294967295
 800d99c:	e78e      	b.n	800d8bc <__sflush_r+0x1c>
 800d99e:	4407      	add	r7, r0
 800d9a0:	eba8 0800 	sub.w	r8, r8, r0
 800d9a4:	e7e9      	b.n	800d97a <__sflush_r+0xda>
 800d9a6:	bf00      	nop
 800d9a8:	20400001 	.word	0x20400001

0800d9ac <_fflush_r>:
 800d9ac:	b538      	push	{r3, r4, r5, lr}
 800d9ae:	690b      	ldr	r3, [r1, #16]
 800d9b0:	4605      	mov	r5, r0
 800d9b2:	460c      	mov	r4, r1
 800d9b4:	b1db      	cbz	r3, 800d9ee <_fflush_r+0x42>
 800d9b6:	b118      	cbz	r0, 800d9c0 <_fflush_r+0x14>
 800d9b8:	6983      	ldr	r3, [r0, #24]
 800d9ba:	b90b      	cbnz	r3, 800d9c0 <_fflush_r+0x14>
 800d9bc:	f000 f860 	bl	800da80 <__sinit>
 800d9c0:	4b0c      	ldr	r3, [pc, #48]	; (800d9f4 <_fflush_r+0x48>)
 800d9c2:	429c      	cmp	r4, r3
 800d9c4:	d109      	bne.n	800d9da <_fflush_r+0x2e>
 800d9c6:	686c      	ldr	r4, [r5, #4]
 800d9c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9cc:	b17b      	cbz	r3, 800d9ee <_fflush_r+0x42>
 800d9ce:	4621      	mov	r1, r4
 800d9d0:	4628      	mov	r0, r5
 800d9d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9d6:	f7ff bf63 	b.w	800d8a0 <__sflush_r>
 800d9da:	4b07      	ldr	r3, [pc, #28]	; (800d9f8 <_fflush_r+0x4c>)
 800d9dc:	429c      	cmp	r4, r3
 800d9de:	d101      	bne.n	800d9e4 <_fflush_r+0x38>
 800d9e0:	68ac      	ldr	r4, [r5, #8]
 800d9e2:	e7f1      	b.n	800d9c8 <_fflush_r+0x1c>
 800d9e4:	4b05      	ldr	r3, [pc, #20]	; (800d9fc <_fflush_r+0x50>)
 800d9e6:	429c      	cmp	r4, r3
 800d9e8:	bf08      	it	eq
 800d9ea:	68ec      	ldreq	r4, [r5, #12]
 800d9ec:	e7ec      	b.n	800d9c8 <_fflush_r+0x1c>
 800d9ee:	2000      	movs	r0, #0
 800d9f0:	bd38      	pop	{r3, r4, r5, pc}
 800d9f2:	bf00      	nop
 800d9f4:	0800f530 	.word	0x0800f530
 800d9f8:	0800f550 	.word	0x0800f550
 800d9fc:	0800f510 	.word	0x0800f510

0800da00 <std>:
 800da00:	2300      	movs	r3, #0
 800da02:	b510      	push	{r4, lr}
 800da04:	4604      	mov	r4, r0
 800da06:	e9c0 3300 	strd	r3, r3, [r0]
 800da0a:	6083      	str	r3, [r0, #8]
 800da0c:	8181      	strh	r1, [r0, #12]
 800da0e:	6643      	str	r3, [r0, #100]	; 0x64
 800da10:	81c2      	strh	r2, [r0, #14]
 800da12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800da16:	6183      	str	r3, [r0, #24]
 800da18:	4619      	mov	r1, r3
 800da1a:	2208      	movs	r2, #8
 800da1c:	305c      	adds	r0, #92	; 0x5c
 800da1e:	f7fd faa2 	bl	800af66 <memset>
 800da22:	4b05      	ldr	r3, [pc, #20]	; (800da38 <std+0x38>)
 800da24:	6263      	str	r3, [r4, #36]	; 0x24
 800da26:	4b05      	ldr	r3, [pc, #20]	; (800da3c <std+0x3c>)
 800da28:	62a3      	str	r3, [r4, #40]	; 0x28
 800da2a:	4b05      	ldr	r3, [pc, #20]	; (800da40 <std+0x40>)
 800da2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da2e:	4b05      	ldr	r3, [pc, #20]	; (800da44 <std+0x44>)
 800da30:	6224      	str	r4, [r4, #32]
 800da32:	6323      	str	r3, [r4, #48]	; 0x30
 800da34:	bd10      	pop	{r4, pc}
 800da36:	bf00      	nop
 800da38:	0800f1b5 	.word	0x0800f1b5
 800da3c:	0800f1d7 	.word	0x0800f1d7
 800da40:	0800f20f 	.word	0x0800f20f
 800da44:	0800f233 	.word	0x0800f233

0800da48 <_cleanup_r>:
 800da48:	4901      	ldr	r1, [pc, #4]	; (800da50 <_cleanup_r+0x8>)
 800da4a:	f000 b885 	b.w	800db58 <_fwalk_reent>
 800da4e:	bf00      	nop
 800da50:	0800d9ad 	.word	0x0800d9ad

0800da54 <__sfmoreglue>:
 800da54:	b570      	push	{r4, r5, r6, lr}
 800da56:	1e4a      	subs	r2, r1, #1
 800da58:	2568      	movs	r5, #104	; 0x68
 800da5a:	4355      	muls	r5, r2
 800da5c:	460e      	mov	r6, r1
 800da5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800da62:	f001 f8ab 	bl	800ebbc <_malloc_r>
 800da66:	4604      	mov	r4, r0
 800da68:	b140      	cbz	r0, 800da7c <__sfmoreglue+0x28>
 800da6a:	2100      	movs	r1, #0
 800da6c:	e9c0 1600 	strd	r1, r6, [r0]
 800da70:	300c      	adds	r0, #12
 800da72:	60a0      	str	r0, [r4, #8]
 800da74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da78:	f7fd fa75 	bl	800af66 <memset>
 800da7c:	4620      	mov	r0, r4
 800da7e:	bd70      	pop	{r4, r5, r6, pc}

0800da80 <__sinit>:
 800da80:	6983      	ldr	r3, [r0, #24]
 800da82:	b510      	push	{r4, lr}
 800da84:	4604      	mov	r4, r0
 800da86:	bb33      	cbnz	r3, 800dad6 <__sinit+0x56>
 800da88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800da8c:	6503      	str	r3, [r0, #80]	; 0x50
 800da8e:	4b12      	ldr	r3, [pc, #72]	; (800dad8 <__sinit+0x58>)
 800da90:	4a12      	ldr	r2, [pc, #72]	; (800dadc <__sinit+0x5c>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	6282      	str	r2, [r0, #40]	; 0x28
 800da96:	4298      	cmp	r0, r3
 800da98:	bf04      	itt	eq
 800da9a:	2301      	moveq	r3, #1
 800da9c:	6183      	streq	r3, [r0, #24]
 800da9e:	f000 f81f 	bl	800dae0 <__sfp>
 800daa2:	6060      	str	r0, [r4, #4]
 800daa4:	4620      	mov	r0, r4
 800daa6:	f000 f81b 	bl	800dae0 <__sfp>
 800daaa:	60a0      	str	r0, [r4, #8]
 800daac:	4620      	mov	r0, r4
 800daae:	f000 f817 	bl	800dae0 <__sfp>
 800dab2:	2200      	movs	r2, #0
 800dab4:	60e0      	str	r0, [r4, #12]
 800dab6:	2104      	movs	r1, #4
 800dab8:	6860      	ldr	r0, [r4, #4]
 800daba:	f7ff ffa1 	bl	800da00 <std>
 800dabe:	2201      	movs	r2, #1
 800dac0:	2109      	movs	r1, #9
 800dac2:	68a0      	ldr	r0, [r4, #8]
 800dac4:	f7ff ff9c 	bl	800da00 <std>
 800dac8:	2202      	movs	r2, #2
 800daca:	2112      	movs	r1, #18
 800dacc:	68e0      	ldr	r0, [r4, #12]
 800dace:	f7ff ff97 	bl	800da00 <std>
 800dad2:	2301      	movs	r3, #1
 800dad4:	61a3      	str	r3, [r4, #24]
 800dad6:	bd10      	pop	{r4, pc}
 800dad8:	0800f470 	.word	0x0800f470
 800dadc:	0800da49 	.word	0x0800da49

0800dae0 <__sfp>:
 800dae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dae2:	4b1b      	ldr	r3, [pc, #108]	; (800db50 <__sfp+0x70>)
 800dae4:	681e      	ldr	r6, [r3, #0]
 800dae6:	69b3      	ldr	r3, [r6, #24]
 800dae8:	4607      	mov	r7, r0
 800daea:	b913      	cbnz	r3, 800daf2 <__sfp+0x12>
 800daec:	4630      	mov	r0, r6
 800daee:	f7ff ffc7 	bl	800da80 <__sinit>
 800daf2:	3648      	adds	r6, #72	; 0x48
 800daf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800daf8:	3b01      	subs	r3, #1
 800dafa:	d503      	bpl.n	800db04 <__sfp+0x24>
 800dafc:	6833      	ldr	r3, [r6, #0]
 800dafe:	b133      	cbz	r3, 800db0e <__sfp+0x2e>
 800db00:	6836      	ldr	r6, [r6, #0]
 800db02:	e7f7      	b.n	800daf4 <__sfp+0x14>
 800db04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800db08:	b16d      	cbz	r5, 800db26 <__sfp+0x46>
 800db0a:	3468      	adds	r4, #104	; 0x68
 800db0c:	e7f4      	b.n	800daf8 <__sfp+0x18>
 800db0e:	2104      	movs	r1, #4
 800db10:	4638      	mov	r0, r7
 800db12:	f7ff ff9f 	bl	800da54 <__sfmoreglue>
 800db16:	6030      	str	r0, [r6, #0]
 800db18:	2800      	cmp	r0, #0
 800db1a:	d1f1      	bne.n	800db00 <__sfp+0x20>
 800db1c:	230c      	movs	r3, #12
 800db1e:	603b      	str	r3, [r7, #0]
 800db20:	4604      	mov	r4, r0
 800db22:	4620      	mov	r0, r4
 800db24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db26:	4b0b      	ldr	r3, [pc, #44]	; (800db54 <__sfp+0x74>)
 800db28:	6665      	str	r5, [r4, #100]	; 0x64
 800db2a:	e9c4 5500 	strd	r5, r5, [r4]
 800db2e:	60a5      	str	r5, [r4, #8]
 800db30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800db34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800db38:	2208      	movs	r2, #8
 800db3a:	4629      	mov	r1, r5
 800db3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800db40:	f7fd fa11 	bl	800af66 <memset>
 800db44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800db48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800db4c:	e7e9      	b.n	800db22 <__sfp+0x42>
 800db4e:	bf00      	nop
 800db50:	0800f470 	.word	0x0800f470
 800db54:	ffff0001 	.word	0xffff0001

0800db58 <_fwalk_reent>:
 800db58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db5c:	4680      	mov	r8, r0
 800db5e:	4689      	mov	r9, r1
 800db60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db64:	2600      	movs	r6, #0
 800db66:	b914      	cbnz	r4, 800db6e <_fwalk_reent+0x16>
 800db68:	4630      	mov	r0, r6
 800db6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800db72:	3f01      	subs	r7, #1
 800db74:	d501      	bpl.n	800db7a <_fwalk_reent+0x22>
 800db76:	6824      	ldr	r4, [r4, #0]
 800db78:	e7f5      	b.n	800db66 <_fwalk_reent+0xe>
 800db7a:	89ab      	ldrh	r3, [r5, #12]
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d907      	bls.n	800db90 <_fwalk_reent+0x38>
 800db80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db84:	3301      	adds	r3, #1
 800db86:	d003      	beq.n	800db90 <_fwalk_reent+0x38>
 800db88:	4629      	mov	r1, r5
 800db8a:	4640      	mov	r0, r8
 800db8c:	47c8      	blx	r9
 800db8e:	4306      	orrs	r6, r0
 800db90:	3568      	adds	r5, #104	; 0x68
 800db92:	e7ee      	b.n	800db72 <_fwalk_reent+0x1a>

0800db94 <rshift>:
 800db94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db96:	6906      	ldr	r6, [r0, #16]
 800db98:	114b      	asrs	r3, r1, #5
 800db9a:	429e      	cmp	r6, r3
 800db9c:	f100 0414 	add.w	r4, r0, #20
 800dba0:	dd30      	ble.n	800dc04 <rshift+0x70>
 800dba2:	f011 011f 	ands.w	r1, r1, #31
 800dba6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800dbaa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800dbae:	d108      	bne.n	800dbc2 <rshift+0x2e>
 800dbb0:	4621      	mov	r1, r4
 800dbb2:	42b2      	cmp	r2, r6
 800dbb4:	460b      	mov	r3, r1
 800dbb6:	d211      	bcs.n	800dbdc <rshift+0x48>
 800dbb8:	f852 3b04 	ldr.w	r3, [r2], #4
 800dbbc:	f841 3b04 	str.w	r3, [r1], #4
 800dbc0:	e7f7      	b.n	800dbb2 <rshift+0x1e>
 800dbc2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800dbc6:	f1c1 0c20 	rsb	ip, r1, #32
 800dbca:	40cd      	lsrs	r5, r1
 800dbcc:	3204      	adds	r2, #4
 800dbce:	4623      	mov	r3, r4
 800dbd0:	42b2      	cmp	r2, r6
 800dbd2:	4617      	mov	r7, r2
 800dbd4:	d30c      	bcc.n	800dbf0 <rshift+0x5c>
 800dbd6:	601d      	str	r5, [r3, #0]
 800dbd8:	b105      	cbz	r5, 800dbdc <rshift+0x48>
 800dbda:	3304      	adds	r3, #4
 800dbdc:	1b1a      	subs	r2, r3, r4
 800dbde:	42a3      	cmp	r3, r4
 800dbe0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dbe4:	bf08      	it	eq
 800dbe6:	2300      	moveq	r3, #0
 800dbe8:	6102      	str	r2, [r0, #16]
 800dbea:	bf08      	it	eq
 800dbec:	6143      	streq	r3, [r0, #20]
 800dbee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbf0:	683f      	ldr	r7, [r7, #0]
 800dbf2:	fa07 f70c 	lsl.w	r7, r7, ip
 800dbf6:	433d      	orrs	r5, r7
 800dbf8:	f843 5b04 	str.w	r5, [r3], #4
 800dbfc:	f852 5b04 	ldr.w	r5, [r2], #4
 800dc00:	40cd      	lsrs	r5, r1
 800dc02:	e7e5      	b.n	800dbd0 <rshift+0x3c>
 800dc04:	4623      	mov	r3, r4
 800dc06:	e7e9      	b.n	800dbdc <rshift+0x48>

0800dc08 <__hexdig_fun>:
 800dc08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dc0c:	2b09      	cmp	r3, #9
 800dc0e:	d802      	bhi.n	800dc16 <__hexdig_fun+0xe>
 800dc10:	3820      	subs	r0, #32
 800dc12:	b2c0      	uxtb	r0, r0
 800dc14:	4770      	bx	lr
 800dc16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dc1a:	2b05      	cmp	r3, #5
 800dc1c:	d801      	bhi.n	800dc22 <__hexdig_fun+0x1a>
 800dc1e:	3847      	subs	r0, #71	; 0x47
 800dc20:	e7f7      	b.n	800dc12 <__hexdig_fun+0xa>
 800dc22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dc26:	2b05      	cmp	r3, #5
 800dc28:	d801      	bhi.n	800dc2e <__hexdig_fun+0x26>
 800dc2a:	3827      	subs	r0, #39	; 0x27
 800dc2c:	e7f1      	b.n	800dc12 <__hexdig_fun+0xa>
 800dc2e:	2000      	movs	r0, #0
 800dc30:	4770      	bx	lr

0800dc32 <__gethex>:
 800dc32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc36:	b08b      	sub	sp, #44	; 0x2c
 800dc38:	468a      	mov	sl, r1
 800dc3a:	9002      	str	r0, [sp, #8]
 800dc3c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800dc3e:	9306      	str	r3, [sp, #24]
 800dc40:	4690      	mov	r8, r2
 800dc42:	f000 fad0 	bl	800e1e6 <__localeconv_l>
 800dc46:	6803      	ldr	r3, [r0, #0]
 800dc48:	9303      	str	r3, [sp, #12]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7f2 fac0 	bl	80001d0 <strlen>
 800dc50:	9b03      	ldr	r3, [sp, #12]
 800dc52:	9001      	str	r0, [sp, #4]
 800dc54:	4403      	add	r3, r0
 800dc56:	f04f 0b00 	mov.w	fp, #0
 800dc5a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dc5e:	9307      	str	r3, [sp, #28]
 800dc60:	f8da 3000 	ldr.w	r3, [sl]
 800dc64:	3302      	adds	r3, #2
 800dc66:	461f      	mov	r7, r3
 800dc68:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dc6c:	2830      	cmp	r0, #48	; 0x30
 800dc6e:	d06c      	beq.n	800dd4a <__gethex+0x118>
 800dc70:	f7ff ffca 	bl	800dc08 <__hexdig_fun>
 800dc74:	4604      	mov	r4, r0
 800dc76:	2800      	cmp	r0, #0
 800dc78:	d16a      	bne.n	800dd50 <__gethex+0x11e>
 800dc7a:	9a01      	ldr	r2, [sp, #4]
 800dc7c:	9903      	ldr	r1, [sp, #12]
 800dc7e:	4638      	mov	r0, r7
 800dc80:	f001 fadb 	bl	800f23a <strncmp>
 800dc84:	2800      	cmp	r0, #0
 800dc86:	d166      	bne.n	800dd56 <__gethex+0x124>
 800dc88:	9b01      	ldr	r3, [sp, #4]
 800dc8a:	5cf8      	ldrb	r0, [r7, r3]
 800dc8c:	18fe      	adds	r6, r7, r3
 800dc8e:	f7ff ffbb 	bl	800dc08 <__hexdig_fun>
 800dc92:	2800      	cmp	r0, #0
 800dc94:	d062      	beq.n	800dd5c <__gethex+0x12a>
 800dc96:	4633      	mov	r3, r6
 800dc98:	7818      	ldrb	r0, [r3, #0]
 800dc9a:	2830      	cmp	r0, #48	; 0x30
 800dc9c:	461f      	mov	r7, r3
 800dc9e:	f103 0301 	add.w	r3, r3, #1
 800dca2:	d0f9      	beq.n	800dc98 <__gethex+0x66>
 800dca4:	f7ff ffb0 	bl	800dc08 <__hexdig_fun>
 800dca8:	fab0 f580 	clz	r5, r0
 800dcac:	096d      	lsrs	r5, r5, #5
 800dcae:	4634      	mov	r4, r6
 800dcb0:	f04f 0b01 	mov.w	fp, #1
 800dcb4:	463a      	mov	r2, r7
 800dcb6:	4616      	mov	r6, r2
 800dcb8:	3201      	adds	r2, #1
 800dcba:	7830      	ldrb	r0, [r6, #0]
 800dcbc:	f7ff ffa4 	bl	800dc08 <__hexdig_fun>
 800dcc0:	2800      	cmp	r0, #0
 800dcc2:	d1f8      	bne.n	800dcb6 <__gethex+0x84>
 800dcc4:	9a01      	ldr	r2, [sp, #4]
 800dcc6:	9903      	ldr	r1, [sp, #12]
 800dcc8:	4630      	mov	r0, r6
 800dcca:	f001 fab6 	bl	800f23a <strncmp>
 800dcce:	b950      	cbnz	r0, 800dce6 <__gethex+0xb4>
 800dcd0:	b954      	cbnz	r4, 800dce8 <__gethex+0xb6>
 800dcd2:	9b01      	ldr	r3, [sp, #4]
 800dcd4:	18f4      	adds	r4, r6, r3
 800dcd6:	4622      	mov	r2, r4
 800dcd8:	4616      	mov	r6, r2
 800dcda:	3201      	adds	r2, #1
 800dcdc:	7830      	ldrb	r0, [r6, #0]
 800dcde:	f7ff ff93 	bl	800dc08 <__hexdig_fun>
 800dce2:	2800      	cmp	r0, #0
 800dce4:	d1f8      	bne.n	800dcd8 <__gethex+0xa6>
 800dce6:	b10c      	cbz	r4, 800dcec <__gethex+0xba>
 800dce8:	1ba4      	subs	r4, r4, r6
 800dcea:	00a4      	lsls	r4, r4, #2
 800dcec:	7833      	ldrb	r3, [r6, #0]
 800dcee:	2b50      	cmp	r3, #80	; 0x50
 800dcf0:	d001      	beq.n	800dcf6 <__gethex+0xc4>
 800dcf2:	2b70      	cmp	r3, #112	; 0x70
 800dcf4:	d140      	bne.n	800dd78 <__gethex+0x146>
 800dcf6:	7873      	ldrb	r3, [r6, #1]
 800dcf8:	2b2b      	cmp	r3, #43	; 0x2b
 800dcfa:	d031      	beq.n	800dd60 <__gethex+0x12e>
 800dcfc:	2b2d      	cmp	r3, #45	; 0x2d
 800dcfe:	d033      	beq.n	800dd68 <__gethex+0x136>
 800dd00:	1c71      	adds	r1, r6, #1
 800dd02:	f04f 0900 	mov.w	r9, #0
 800dd06:	7808      	ldrb	r0, [r1, #0]
 800dd08:	f7ff ff7e 	bl	800dc08 <__hexdig_fun>
 800dd0c:	1e43      	subs	r3, r0, #1
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b18      	cmp	r3, #24
 800dd12:	d831      	bhi.n	800dd78 <__gethex+0x146>
 800dd14:	f1a0 0210 	sub.w	r2, r0, #16
 800dd18:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800dd1c:	f7ff ff74 	bl	800dc08 <__hexdig_fun>
 800dd20:	1e43      	subs	r3, r0, #1
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	2b18      	cmp	r3, #24
 800dd26:	d922      	bls.n	800dd6e <__gethex+0x13c>
 800dd28:	f1b9 0f00 	cmp.w	r9, #0
 800dd2c:	d000      	beq.n	800dd30 <__gethex+0xfe>
 800dd2e:	4252      	negs	r2, r2
 800dd30:	4414      	add	r4, r2
 800dd32:	f8ca 1000 	str.w	r1, [sl]
 800dd36:	b30d      	cbz	r5, 800dd7c <__gethex+0x14a>
 800dd38:	f1bb 0f00 	cmp.w	fp, #0
 800dd3c:	bf0c      	ite	eq
 800dd3e:	2706      	moveq	r7, #6
 800dd40:	2700      	movne	r7, #0
 800dd42:	4638      	mov	r0, r7
 800dd44:	b00b      	add	sp, #44	; 0x2c
 800dd46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4a:	f10b 0b01 	add.w	fp, fp, #1
 800dd4e:	e78a      	b.n	800dc66 <__gethex+0x34>
 800dd50:	2500      	movs	r5, #0
 800dd52:	462c      	mov	r4, r5
 800dd54:	e7ae      	b.n	800dcb4 <__gethex+0x82>
 800dd56:	463e      	mov	r6, r7
 800dd58:	2501      	movs	r5, #1
 800dd5a:	e7c7      	b.n	800dcec <__gethex+0xba>
 800dd5c:	4604      	mov	r4, r0
 800dd5e:	e7fb      	b.n	800dd58 <__gethex+0x126>
 800dd60:	f04f 0900 	mov.w	r9, #0
 800dd64:	1cb1      	adds	r1, r6, #2
 800dd66:	e7ce      	b.n	800dd06 <__gethex+0xd4>
 800dd68:	f04f 0901 	mov.w	r9, #1
 800dd6c:	e7fa      	b.n	800dd64 <__gethex+0x132>
 800dd6e:	230a      	movs	r3, #10
 800dd70:	fb03 0202 	mla	r2, r3, r2, r0
 800dd74:	3a10      	subs	r2, #16
 800dd76:	e7cf      	b.n	800dd18 <__gethex+0xe6>
 800dd78:	4631      	mov	r1, r6
 800dd7a:	e7da      	b.n	800dd32 <__gethex+0x100>
 800dd7c:	1bf3      	subs	r3, r6, r7
 800dd7e:	3b01      	subs	r3, #1
 800dd80:	4629      	mov	r1, r5
 800dd82:	2b07      	cmp	r3, #7
 800dd84:	dc49      	bgt.n	800de1a <__gethex+0x1e8>
 800dd86:	9802      	ldr	r0, [sp, #8]
 800dd88:	f000 fabc 	bl	800e304 <_Balloc>
 800dd8c:	9b01      	ldr	r3, [sp, #4]
 800dd8e:	f100 0914 	add.w	r9, r0, #20
 800dd92:	f04f 0b00 	mov.w	fp, #0
 800dd96:	f1c3 0301 	rsb	r3, r3, #1
 800dd9a:	4605      	mov	r5, r0
 800dd9c:	f8cd 9010 	str.w	r9, [sp, #16]
 800dda0:	46da      	mov	sl, fp
 800dda2:	9308      	str	r3, [sp, #32]
 800dda4:	42b7      	cmp	r7, r6
 800dda6:	d33b      	bcc.n	800de20 <__gethex+0x1ee>
 800dda8:	9804      	ldr	r0, [sp, #16]
 800ddaa:	f840 ab04 	str.w	sl, [r0], #4
 800ddae:	eba0 0009 	sub.w	r0, r0, r9
 800ddb2:	1080      	asrs	r0, r0, #2
 800ddb4:	6128      	str	r0, [r5, #16]
 800ddb6:	0147      	lsls	r7, r0, #5
 800ddb8:	4650      	mov	r0, sl
 800ddba:	f000 fb67 	bl	800e48c <__hi0bits>
 800ddbe:	f8d8 6000 	ldr.w	r6, [r8]
 800ddc2:	1a3f      	subs	r7, r7, r0
 800ddc4:	42b7      	cmp	r7, r6
 800ddc6:	dd64      	ble.n	800de92 <__gethex+0x260>
 800ddc8:	1bbf      	subs	r7, r7, r6
 800ddca:	4639      	mov	r1, r7
 800ddcc:	4628      	mov	r0, r5
 800ddce:	f000 fe77 	bl	800eac0 <__any_on>
 800ddd2:	4682      	mov	sl, r0
 800ddd4:	b178      	cbz	r0, 800ddf6 <__gethex+0x1c4>
 800ddd6:	1e7b      	subs	r3, r7, #1
 800ddd8:	1159      	asrs	r1, r3, #5
 800ddda:	f003 021f 	and.w	r2, r3, #31
 800ddde:	f04f 0a01 	mov.w	sl, #1
 800dde2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800dde6:	fa0a f202 	lsl.w	r2, sl, r2
 800ddea:	420a      	tst	r2, r1
 800ddec:	d003      	beq.n	800ddf6 <__gethex+0x1c4>
 800ddee:	4553      	cmp	r3, sl
 800ddf0:	dc46      	bgt.n	800de80 <__gethex+0x24e>
 800ddf2:	f04f 0a02 	mov.w	sl, #2
 800ddf6:	4639      	mov	r1, r7
 800ddf8:	4628      	mov	r0, r5
 800ddfa:	f7ff fecb 	bl	800db94 <rshift>
 800ddfe:	443c      	add	r4, r7
 800de00:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de04:	42a3      	cmp	r3, r4
 800de06:	da52      	bge.n	800deae <__gethex+0x27c>
 800de08:	4629      	mov	r1, r5
 800de0a:	9802      	ldr	r0, [sp, #8]
 800de0c:	f000 faae 	bl	800e36c <_Bfree>
 800de10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800de12:	2300      	movs	r3, #0
 800de14:	6013      	str	r3, [r2, #0]
 800de16:	27a3      	movs	r7, #163	; 0xa3
 800de18:	e793      	b.n	800dd42 <__gethex+0x110>
 800de1a:	3101      	adds	r1, #1
 800de1c:	105b      	asrs	r3, r3, #1
 800de1e:	e7b0      	b.n	800dd82 <__gethex+0x150>
 800de20:	1e73      	subs	r3, r6, #1
 800de22:	9305      	str	r3, [sp, #20]
 800de24:	9a07      	ldr	r2, [sp, #28]
 800de26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d018      	beq.n	800de60 <__gethex+0x22e>
 800de2e:	f1bb 0f20 	cmp.w	fp, #32
 800de32:	d107      	bne.n	800de44 <__gethex+0x212>
 800de34:	9b04      	ldr	r3, [sp, #16]
 800de36:	f8c3 a000 	str.w	sl, [r3]
 800de3a:	3304      	adds	r3, #4
 800de3c:	f04f 0a00 	mov.w	sl, #0
 800de40:	9304      	str	r3, [sp, #16]
 800de42:	46d3      	mov	fp, sl
 800de44:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800de48:	f7ff fede 	bl	800dc08 <__hexdig_fun>
 800de4c:	f000 000f 	and.w	r0, r0, #15
 800de50:	fa00 f00b 	lsl.w	r0, r0, fp
 800de54:	ea4a 0a00 	orr.w	sl, sl, r0
 800de58:	f10b 0b04 	add.w	fp, fp, #4
 800de5c:	9b05      	ldr	r3, [sp, #20]
 800de5e:	e00d      	b.n	800de7c <__gethex+0x24a>
 800de60:	9b05      	ldr	r3, [sp, #20]
 800de62:	9a08      	ldr	r2, [sp, #32]
 800de64:	4413      	add	r3, r2
 800de66:	42bb      	cmp	r3, r7
 800de68:	d3e1      	bcc.n	800de2e <__gethex+0x1fc>
 800de6a:	4618      	mov	r0, r3
 800de6c:	9a01      	ldr	r2, [sp, #4]
 800de6e:	9903      	ldr	r1, [sp, #12]
 800de70:	9309      	str	r3, [sp, #36]	; 0x24
 800de72:	f001 f9e2 	bl	800f23a <strncmp>
 800de76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de78:	2800      	cmp	r0, #0
 800de7a:	d1d8      	bne.n	800de2e <__gethex+0x1fc>
 800de7c:	461e      	mov	r6, r3
 800de7e:	e791      	b.n	800dda4 <__gethex+0x172>
 800de80:	1eb9      	subs	r1, r7, #2
 800de82:	4628      	mov	r0, r5
 800de84:	f000 fe1c 	bl	800eac0 <__any_on>
 800de88:	2800      	cmp	r0, #0
 800de8a:	d0b2      	beq.n	800ddf2 <__gethex+0x1c0>
 800de8c:	f04f 0a03 	mov.w	sl, #3
 800de90:	e7b1      	b.n	800ddf6 <__gethex+0x1c4>
 800de92:	da09      	bge.n	800dea8 <__gethex+0x276>
 800de94:	1bf7      	subs	r7, r6, r7
 800de96:	4629      	mov	r1, r5
 800de98:	463a      	mov	r2, r7
 800de9a:	9802      	ldr	r0, [sp, #8]
 800de9c:	f000 fc32 	bl	800e704 <__lshift>
 800dea0:	1be4      	subs	r4, r4, r7
 800dea2:	4605      	mov	r5, r0
 800dea4:	f100 0914 	add.w	r9, r0, #20
 800dea8:	f04f 0a00 	mov.w	sl, #0
 800deac:	e7a8      	b.n	800de00 <__gethex+0x1ce>
 800deae:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800deb2:	42a0      	cmp	r0, r4
 800deb4:	dd6a      	ble.n	800df8c <__gethex+0x35a>
 800deb6:	1b04      	subs	r4, r0, r4
 800deb8:	42a6      	cmp	r6, r4
 800deba:	dc2e      	bgt.n	800df1a <__gethex+0x2e8>
 800debc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d022      	beq.n	800df0a <__gethex+0x2d8>
 800dec4:	2b03      	cmp	r3, #3
 800dec6:	d024      	beq.n	800df12 <__gethex+0x2e0>
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d115      	bne.n	800def8 <__gethex+0x2c6>
 800decc:	42a6      	cmp	r6, r4
 800dece:	d113      	bne.n	800def8 <__gethex+0x2c6>
 800ded0:	2e01      	cmp	r6, #1
 800ded2:	dc0b      	bgt.n	800deec <__gethex+0x2ba>
 800ded4:	9a06      	ldr	r2, [sp, #24]
 800ded6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800deda:	6013      	str	r3, [r2, #0]
 800dedc:	2301      	movs	r3, #1
 800dede:	612b      	str	r3, [r5, #16]
 800dee0:	f8c9 3000 	str.w	r3, [r9]
 800dee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dee6:	2762      	movs	r7, #98	; 0x62
 800dee8:	601d      	str	r5, [r3, #0]
 800deea:	e72a      	b.n	800dd42 <__gethex+0x110>
 800deec:	1e71      	subs	r1, r6, #1
 800deee:	4628      	mov	r0, r5
 800def0:	f000 fde6 	bl	800eac0 <__any_on>
 800def4:	2800      	cmp	r0, #0
 800def6:	d1ed      	bne.n	800ded4 <__gethex+0x2a2>
 800def8:	4629      	mov	r1, r5
 800defa:	9802      	ldr	r0, [sp, #8]
 800defc:	f000 fa36 	bl	800e36c <_Bfree>
 800df00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df02:	2300      	movs	r3, #0
 800df04:	6013      	str	r3, [r2, #0]
 800df06:	2750      	movs	r7, #80	; 0x50
 800df08:	e71b      	b.n	800dd42 <__gethex+0x110>
 800df0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d0e1      	beq.n	800ded4 <__gethex+0x2a2>
 800df10:	e7f2      	b.n	800def8 <__gethex+0x2c6>
 800df12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df14:	2b00      	cmp	r3, #0
 800df16:	d1dd      	bne.n	800ded4 <__gethex+0x2a2>
 800df18:	e7ee      	b.n	800def8 <__gethex+0x2c6>
 800df1a:	1e67      	subs	r7, r4, #1
 800df1c:	f1ba 0f00 	cmp.w	sl, #0
 800df20:	d131      	bne.n	800df86 <__gethex+0x354>
 800df22:	b127      	cbz	r7, 800df2e <__gethex+0x2fc>
 800df24:	4639      	mov	r1, r7
 800df26:	4628      	mov	r0, r5
 800df28:	f000 fdca 	bl	800eac0 <__any_on>
 800df2c:	4682      	mov	sl, r0
 800df2e:	117a      	asrs	r2, r7, #5
 800df30:	2301      	movs	r3, #1
 800df32:	f007 071f 	and.w	r7, r7, #31
 800df36:	fa03 f707 	lsl.w	r7, r3, r7
 800df3a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800df3e:	4621      	mov	r1, r4
 800df40:	421f      	tst	r7, r3
 800df42:	4628      	mov	r0, r5
 800df44:	bf18      	it	ne
 800df46:	f04a 0a02 	orrne.w	sl, sl, #2
 800df4a:	1b36      	subs	r6, r6, r4
 800df4c:	f7ff fe22 	bl	800db94 <rshift>
 800df50:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800df54:	2702      	movs	r7, #2
 800df56:	f1ba 0f00 	cmp.w	sl, #0
 800df5a:	d048      	beq.n	800dfee <__gethex+0x3bc>
 800df5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800df60:	2b02      	cmp	r3, #2
 800df62:	d015      	beq.n	800df90 <__gethex+0x35e>
 800df64:	2b03      	cmp	r3, #3
 800df66:	d017      	beq.n	800df98 <__gethex+0x366>
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d109      	bne.n	800df80 <__gethex+0x34e>
 800df6c:	f01a 0f02 	tst.w	sl, #2
 800df70:	d006      	beq.n	800df80 <__gethex+0x34e>
 800df72:	f8d9 3000 	ldr.w	r3, [r9]
 800df76:	ea4a 0a03 	orr.w	sl, sl, r3
 800df7a:	f01a 0f01 	tst.w	sl, #1
 800df7e:	d10e      	bne.n	800df9e <__gethex+0x36c>
 800df80:	f047 0710 	orr.w	r7, r7, #16
 800df84:	e033      	b.n	800dfee <__gethex+0x3bc>
 800df86:	f04f 0a01 	mov.w	sl, #1
 800df8a:	e7d0      	b.n	800df2e <__gethex+0x2fc>
 800df8c:	2701      	movs	r7, #1
 800df8e:	e7e2      	b.n	800df56 <__gethex+0x324>
 800df90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df92:	f1c3 0301 	rsb	r3, r3, #1
 800df96:	9315      	str	r3, [sp, #84]	; 0x54
 800df98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d0f0      	beq.n	800df80 <__gethex+0x34e>
 800df9e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800dfa2:	f105 0314 	add.w	r3, r5, #20
 800dfa6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800dfaa:	eb03 010a 	add.w	r1, r3, sl
 800dfae:	f04f 0c00 	mov.w	ip, #0
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfb8:	f1b2 3fff 	cmp.w	r2, #4294967295
 800dfbc:	d01c      	beq.n	800dff8 <__gethex+0x3c6>
 800dfbe:	3201      	adds	r2, #1
 800dfc0:	6002      	str	r2, [r0, #0]
 800dfc2:	2f02      	cmp	r7, #2
 800dfc4:	f105 0314 	add.w	r3, r5, #20
 800dfc8:	d138      	bne.n	800e03c <__gethex+0x40a>
 800dfca:	f8d8 2000 	ldr.w	r2, [r8]
 800dfce:	3a01      	subs	r2, #1
 800dfd0:	42b2      	cmp	r2, r6
 800dfd2:	d10a      	bne.n	800dfea <__gethex+0x3b8>
 800dfd4:	1171      	asrs	r1, r6, #5
 800dfd6:	2201      	movs	r2, #1
 800dfd8:	f006 061f 	and.w	r6, r6, #31
 800dfdc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dfe0:	fa02 f606 	lsl.w	r6, r2, r6
 800dfe4:	421e      	tst	r6, r3
 800dfe6:	bf18      	it	ne
 800dfe8:	4617      	movne	r7, r2
 800dfea:	f047 0720 	orr.w	r7, r7, #32
 800dfee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dff0:	601d      	str	r5, [r3, #0]
 800dff2:	9b06      	ldr	r3, [sp, #24]
 800dff4:	601c      	str	r4, [r3, #0]
 800dff6:	e6a4      	b.n	800dd42 <__gethex+0x110>
 800dff8:	4299      	cmp	r1, r3
 800dffa:	f843 cc04 	str.w	ip, [r3, #-4]
 800dffe:	d8d8      	bhi.n	800dfb2 <__gethex+0x380>
 800e000:	68ab      	ldr	r3, [r5, #8]
 800e002:	4599      	cmp	r9, r3
 800e004:	db12      	blt.n	800e02c <__gethex+0x3fa>
 800e006:	6869      	ldr	r1, [r5, #4]
 800e008:	9802      	ldr	r0, [sp, #8]
 800e00a:	3101      	adds	r1, #1
 800e00c:	f000 f97a 	bl	800e304 <_Balloc>
 800e010:	692a      	ldr	r2, [r5, #16]
 800e012:	3202      	adds	r2, #2
 800e014:	f105 010c 	add.w	r1, r5, #12
 800e018:	4683      	mov	fp, r0
 800e01a:	0092      	lsls	r2, r2, #2
 800e01c:	300c      	adds	r0, #12
 800e01e:	f7fc ff97 	bl	800af50 <memcpy>
 800e022:	4629      	mov	r1, r5
 800e024:	9802      	ldr	r0, [sp, #8]
 800e026:	f000 f9a1 	bl	800e36c <_Bfree>
 800e02a:	465d      	mov	r5, fp
 800e02c:	692b      	ldr	r3, [r5, #16]
 800e02e:	1c5a      	adds	r2, r3, #1
 800e030:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e034:	612a      	str	r2, [r5, #16]
 800e036:	2201      	movs	r2, #1
 800e038:	615a      	str	r2, [r3, #20]
 800e03a:	e7c2      	b.n	800dfc2 <__gethex+0x390>
 800e03c:	692a      	ldr	r2, [r5, #16]
 800e03e:	454a      	cmp	r2, r9
 800e040:	dd0b      	ble.n	800e05a <__gethex+0x428>
 800e042:	2101      	movs	r1, #1
 800e044:	4628      	mov	r0, r5
 800e046:	f7ff fda5 	bl	800db94 <rshift>
 800e04a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e04e:	3401      	adds	r4, #1
 800e050:	42a3      	cmp	r3, r4
 800e052:	f6ff aed9 	blt.w	800de08 <__gethex+0x1d6>
 800e056:	2701      	movs	r7, #1
 800e058:	e7c7      	b.n	800dfea <__gethex+0x3b8>
 800e05a:	f016 061f 	ands.w	r6, r6, #31
 800e05e:	d0fa      	beq.n	800e056 <__gethex+0x424>
 800e060:	449a      	add	sl, r3
 800e062:	f1c6 0620 	rsb	r6, r6, #32
 800e066:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e06a:	f000 fa0f 	bl	800e48c <__hi0bits>
 800e06e:	42b0      	cmp	r0, r6
 800e070:	dbe7      	blt.n	800e042 <__gethex+0x410>
 800e072:	e7f0      	b.n	800e056 <__gethex+0x424>

0800e074 <L_shift>:
 800e074:	f1c2 0208 	rsb	r2, r2, #8
 800e078:	0092      	lsls	r2, r2, #2
 800e07a:	b570      	push	{r4, r5, r6, lr}
 800e07c:	f1c2 0620 	rsb	r6, r2, #32
 800e080:	6843      	ldr	r3, [r0, #4]
 800e082:	6804      	ldr	r4, [r0, #0]
 800e084:	fa03 f506 	lsl.w	r5, r3, r6
 800e088:	432c      	orrs	r4, r5
 800e08a:	40d3      	lsrs	r3, r2
 800e08c:	6004      	str	r4, [r0, #0]
 800e08e:	f840 3f04 	str.w	r3, [r0, #4]!
 800e092:	4288      	cmp	r0, r1
 800e094:	d3f4      	bcc.n	800e080 <L_shift+0xc>
 800e096:	bd70      	pop	{r4, r5, r6, pc}

0800e098 <__match>:
 800e098:	b530      	push	{r4, r5, lr}
 800e09a:	6803      	ldr	r3, [r0, #0]
 800e09c:	3301      	adds	r3, #1
 800e09e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0a2:	b914      	cbnz	r4, 800e0aa <__match+0x12>
 800e0a4:	6003      	str	r3, [r0, #0]
 800e0a6:	2001      	movs	r0, #1
 800e0a8:	bd30      	pop	{r4, r5, pc}
 800e0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e0b2:	2d19      	cmp	r5, #25
 800e0b4:	bf98      	it	ls
 800e0b6:	3220      	addls	r2, #32
 800e0b8:	42a2      	cmp	r2, r4
 800e0ba:	d0f0      	beq.n	800e09e <__match+0x6>
 800e0bc:	2000      	movs	r0, #0
 800e0be:	e7f3      	b.n	800e0a8 <__match+0x10>

0800e0c0 <__hexnan>:
 800e0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0c4:	680b      	ldr	r3, [r1, #0]
 800e0c6:	6801      	ldr	r1, [r0, #0]
 800e0c8:	115f      	asrs	r7, r3, #5
 800e0ca:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e0ce:	f013 031f 	ands.w	r3, r3, #31
 800e0d2:	b087      	sub	sp, #28
 800e0d4:	bf18      	it	ne
 800e0d6:	3704      	addne	r7, #4
 800e0d8:	2500      	movs	r5, #0
 800e0da:	1f3e      	subs	r6, r7, #4
 800e0dc:	4682      	mov	sl, r0
 800e0de:	4690      	mov	r8, r2
 800e0e0:	9301      	str	r3, [sp, #4]
 800e0e2:	f847 5c04 	str.w	r5, [r7, #-4]
 800e0e6:	46b1      	mov	r9, r6
 800e0e8:	4634      	mov	r4, r6
 800e0ea:	9502      	str	r5, [sp, #8]
 800e0ec:	46ab      	mov	fp, r5
 800e0ee:	784a      	ldrb	r2, [r1, #1]
 800e0f0:	1c4b      	adds	r3, r1, #1
 800e0f2:	9303      	str	r3, [sp, #12]
 800e0f4:	b342      	cbz	r2, 800e148 <__hexnan+0x88>
 800e0f6:	4610      	mov	r0, r2
 800e0f8:	9105      	str	r1, [sp, #20]
 800e0fa:	9204      	str	r2, [sp, #16]
 800e0fc:	f7ff fd84 	bl	800dc08 <__hexdig_fun>
 800e100:	2800      	cmp	r0, #0
 800e102:	d143      	bne.n	800e18c <__hexnan+0xcc>
 800e104:	9a04      	ldr	r2, [sp, #16]
 800e106:	9905      	ldr	r1, [sp, #20]
 800e108:	2a20      	cmp	r2, #32
 800e10a:	d818      	bhi.n	800e13e <__hexnan+0x7e>
 800e10c:	9b02      	ldr	r3, [sp, #8]
 800e10e:	459b      	cmp	fp, r3
 800e110:	dd13      	ble.n	800e13a <__hexnan+0x7a>
 800e112:	454c      	cmp	r4, r9
 800e114:	d206      	bcs.n	800e124 <__hexnan+0x64>
 800e116:	2d07      	cmp	r5, #7
 800e118:	dc04      	bgt.n	800e124 <__hexnan+0x64>
 800e11a:	462a      	mov	r2, r5
 800e11c:	4649      	mov	r1, r9
 800e11e:	4620      	mov	r0, r4
 800e120:	f7ff ffa8 	bl	800e074 <L_shift>
 800e124:	4544      	cmp	r4, r8
 800e126:	d944      	bls.n	800e1b2 <__hexnan+0xf2>
 800e128:	2300      	movs	r3, #0
 800e12a:	f1a4 0904 	sub.w	r9, r4, #4
 800e12e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e132:	f8cd b008 	str.w	fp, [sp, #8]
 800e136:	464c      	mov	r4, r9
 800e138:	461d      	mov	r5, r3
 800e13a:	9903      	ldr	r1, [sp, #12]
 800e13c:	e7d7      	b.n	800e0ee <__hexnan+0x2e>
 800e13e:	2a29      	cmp	r2, #41	; 0x29
 800e140:	d14a      	bne.n	800e1d8 <__hexnan+0x118>
 800e142:	3102      	adds	r1, #2
 800e144:	f8ca 1000 	str.w	r1, [sl]
 800e148:	f1bb 0f00 	cmp.w	fp, #0
 800e14c:	d044      	beq.n	800e1d8 <__hexnan+0x118>
 800e14e:	454c      	cmp	r4, r9
 800e150:	d206      	bcs.n	800e160 <__hexnan+0xa0>
 800e152:	2d07      	cmp	r5, #7
 800e154:	dc04      	bgt.n	800e160 <__hexnan+0xa0>
 800e156:	462a      	mov	r2, r5
 800e158:	4649      	mov	r1, r9
 800e15a:	4620      	mov	r0, r4
 800e15c:	f7ff ff8a 	bl	800e074 <L_shift>
 800e160:	4544      	cmp	r4, r8
 800e162:	d928      	bls.n	800e1b6 <__hexnan+0xf6>
 800e164:	4643      	mov	r3, r8
 800e166:	f854 2b04 	ldr.w	r2, [r4], #4
 800e16a:	f843 2b04 	str.w	r2, [r3], #4
 800e16e:	42a6      	cmp	r6, r4
 800e170:	d2f9      	bcs.n	800e166 <__hexnan+0xa6>
 800e172:	2200      	movs	r2, #0
 800e174:	f843 2b04 	str.w	r2, [r3], #4
 800e178:	429e      	cmp	r6, r3
 800e17a:	d2fb      	bcs.n	800e174 <__hexnan+0xb4>
 800e17c:	6833      	ldr	r3, [r6, #0]
 800e17e:	b91b      	cbnz	r3, 800e188 <__hexnan+0xc8>
 800e180:	4546      	cmp	r6, r8
 800e182:	d127      	bne.n	800e1d4 <__hexnan+0x114>
 800e184:	2301      	movs	r3, #1
 800e186:	6033      	str	r3, [r6, #0]
 800e188:	2005      	movs	r0, #5
 800e18a:	e026      	b.n	800e1da <__hexnan+0x11a>
 800e18c:	3501      	adds	r5, #1
 800e18e:	2d08      	cmp	r5, #8
 800e190:	f10b 0b01 	add.w	fp, fp, #1
 800e194:	dd06      	ble.n	800e1a4 <__hexnan+0xe4>
 800e196:	4544      	cmp	r4, r8
 800e198:	d9cf      	bls.n	800e13a <__hexnan+0x7a>
 800e19a:	2300      	movs	r3, #0
 800e19c:	f844 3c04 	str.w	r3, [r4, #-4]
 800e1a0:	2501      	movs	r5, #1
 800e1a2:	3c04      	subs	r4, #4
 800e1a4:	6822      	ldr	r2, [r4, #0]
 800e1a6:	f000 000f 	and.w	r0, r0, #15
 800e1aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e1ae:	6020      	str	r0, [r4, #0]
 800e1b0:	e7c3      	b.n	800e13a <__hexnan+0x7a>
 800e1b2:	2508      	movs	r5, #8
 800e1b4:	e7c1      	b.n	800e13a <__hexnan+0x7a>
 800e1b6:	9b01      	ldr	r3, [sp, #4]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d0df      	beq.n	800e17c <__hexnan+0xbc>
 800e1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e1c0:	f1c3 0320 	rsb	r3, r3, #32
 800e1c4:	fa22 f303 	lsr.w	r3, r2, r3
 800e1c8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e1cc:	401a      	ands	r2, r3
 800e1ce:	f847 2c04 	str.w	r2, [r7, #-4]
 800e1d2:	e7d3      	b.n	800e17c <__hexnan+0xbc>
 800e1d4:	3e04      	subs	r6, #4
 800e1d6:	e7d1      	b.n	800e17c <__hexnan+0xbc>
 800e1d8:	2004      	movs	r0, #4
 800e1da:	b007      	add	sp, #28
 800e1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e1e0 <__locale_ctype_ptr_l>:
 800e1e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e1e4:	4770      	bx	lr

0800e1e6 <__localeconv_l>:
 800e1e6:	30f0      	adds	r0, #240	; 0xf0
 800e1e8:	4770      	bx	lr
	...

0800e1ec <_localeconv_r>:
 800e1ec:	4b04      	ldr	r3, [pc, #16]	; (800e200 <_localeconv_r+0x14>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	6a18      	ldr	r0, [r3, #32]
 800e1f2:	4b04      	ldr	r3, [pc, #16]	; (800e204 <_localeconv_r+0x18>)
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	bf08      	it	eq
 800e1f8:	4618      	moveq	r0, r3
 800e1fa:	30f0      	adds	r0, #240	; 0xf0
 800e1fc:	4770      	bx	lr
 800e1fe:	bf00      	nop
 800e200:	20000040 	.word	0x20000040
 800e204:	200000a4 	.word	0x200000a4

0800e208 <__swhatbuf_r>:
 800e208:	b570      	push	{r4, r5, r6, lr}
 800e20a:	460e      	mov	r6, r1
 800e20c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e210:	2900      	cmp	r1, #0
 800e212:	b096      	sub	sp, #88	; 0x58
 800e214:	4614      	mov	r4, r2
 800e216:	461d      	mov	r5, r3
 800e218:	da07      	bge.n	800e22a <__swhatbuf_r+0x22>
 800e21a:	2300      	movs	r3, #0
 800e21c:	602b      	str	r3, [r5, #0]
 800e21e:	89b3      	ldrh	r3, [r6, #12]
 800e220:	061a      	lsls	r2, r3, #24
 800e222:	d410      	bmi.n	800e246 <__swhatbuf_r+0x3e>
 800e224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e228:	e00e      	b.n	800e248 <__swhatbuf_r+0x40>
 800e22a:	466a      	mov	r2, sp
 800e22c:	f001 f846 	bl	800f2bc <_fstat_r>
 800e230:	2800      	cmp	r0, #0
 800e232:	dbf2      	blt.n	800e21a <__swhatbuf_r+0x12>
 800e234:	9a01      	ldr	r2, [sp, #4]
 800e236:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e23a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e23e:	425a      	negs	r2, r3
 800e240:	415a      	adcs	r2, r3
 800e242:	602a      	str	r2, [r5, #0]
 800e244:	e7ee      	b.n	800e224 <__swhatbuf_r+0x1c>
 800e246:	2340      	movs	r3, #64	; 0x40
 800e248:	2000      	movs	r0, #0
 800e24a:	6023      	str	r3, [r4, #0]
 800e24c:	b016      	add	sp, #88	; 0x58
 800e24e:	bd70      	pop	{r4, r5, r6, pc}

0800e250 <__smakebuf_r>:
 800e250:	898b      	ldrh	r3, [r1, #12]
 800e252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e254:	079d      	lsls	r5, r3, #30
 800e256:	4606      	mov	r6, r0
 800e258:	460c      	mov	r4, r1
 800e25a:	d507      	bpl.n	800e26c <__smakebuf_r+0x1c>
 800e25c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e260:	6023      	str	r3, [r4, #0]
 800e262:	6123      	str	r3, [r4, #16]
 800e264:	2301      	movs	r3, #1
 800e266:	6163      	str	r3, [r4, #20]
 800e268:	b002      	add	sp, #8
 800e26a:	bd70      	pop	{r4, r5, r6, pc}
 800e26c:	ab01      	add	r3, sp, #4
 800e26e:	466a      	mov	r2, sp
 800e270:	f7ff ffca 	bl	800e208 <__swhatbuf_r>
 800e274:	9900      	ldr	r1, [sp, #0]
 800e276:	4605      	mov	r5, r0
 800e278:	4630      	mov	r0, r6
 800e27a:	f000 fc9f 	bl	800ebbc <_malloc_r>
 800e27e:	b948      	cbnz	r0, 800e294 <__smakebuf_r+0x44>
 800e280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e284:	059a      	lsls	r2, r3, #22
 800e286:	d4ef      	bmi.n	800e268 <__smakebuf_r+0x18>
 800e288:	f023 0303 	bic.w	r3, r3, #3
 800e28c:	f043 0302 	orr.w	r3, r3, #2
 800e290:	81a3      	strh	r3, [r4, #12]
 800e292:	e7e3      	b.n	800e25c <__smakebuf_r+0xc>
 800e294:	4b0d      	ldr	r3, [pc, #52]	; (800e2cc <__smakebuf_r+0x7c>)
 800e296:	62b3      	str	r3, [r6, #40]	; 0x28
 800e298:	89a3      	ldrh	r3, [r4, #12]
 800e29a:	6020      	str	r0, [r4, #0]
 800e29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2a0:	81a3      	strh	r3, [r4, #12]
 800e2a2:	9b00      	ldr	r3, [sp, #0]
 800e2a4:	6163      	str	r3, [r4, #20]
 800e2a6:	9b01      	ldr	r3, [sp, #4]
 800e2a8:	6120      	str	r0, [r4, #16]
 800e2aa:	b15b      	cbz	r3, 800e2c4 <__smakebuf_r+0x74>
 800e2ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	f001 f815 	bl	800f2e0 <_isatty_r>
 800e2b6:	b128      	cbz	r0, 800e2c4 <__smakebuf_r+0x74>
 800e2b8:	89a3      	ldrh	r3, [r4, #12]
 800e2ba:	f023 0303 	bic.w	r3, r3, #3
 800e2be:	f043 0301 	orr.w	r3, r3, #1
 800e2c2:	81a3      	strh	r3, [r4, #12]
 800e2c4:	89a3      	ldrh	r3, [r4, #12]
 800e2c6:	431d      	orrs	r5, r3
 800e2c8:	81a5      	strh	r5, [r4, #12]
 800e2ca:	e7cd      	b.n	800e268 <__smakebuf_r+0x18>
 800e2cc:	0800da49 	.word	0x0800da49

0800e2d0 <malloc>:
 800e2d0:	4b02      	ldr	r3, [pc, #8]	; (800e2dc <malloc+0xc>)
 800e2d2:	4601      	mov	r1, r0
 800e2d4:	6818      	ldr	r0, [r3, #0]
 800e2d6:	f000 bc71 	b.w	800ebbc <_malloc_r>
 800e2da:	bf00      	nop
 800e2dc:	20000040 	.word	0x20000040

0800e2e0 <__ascii_mbtowc>:
 800e2e0:	b082      	sub	sp, #8
 800e2e2:	b901      	cbnz	r1, 800e2e6 <__ascii_mbtowc+0x6>
 800e2e4:	a901      	add	r1, sp, #4
 800e2e6:	b142      	cbz	r2, 800e2fa <__ascii_mbtowc+0x1a>
 800e2e8:	b14b      	cbz	r3, 800e2fe <__ascii_mbtowc+0x1e>
 800e2ea:	7813      	ldrb	r3, [r2, #0]
 800e2ec:	600b      	str	r3, [r1, #0]
 800e2ee:	7812      	ldrb	r2, [r2, #0]
 800e2f0:	1c10      	adds	r0, r2, #0
 800e2f2:	bf18      	it	ne
 800e2f4:	2001      	movne	r0, #1
 800e2f6:	b002      	add	sp, #8
 800e2f8:	4770      	bx	lr
 800e2fa:	4610      	mov	r0, r2
 800e2fc:	e7fb      	b.n	800e2f6 <__ascii_mbtowc+0x16>
 800e2fe:	f06f 0001 	mvn.w	r0, #1
 800e302:	e7f8      	b.n	800e2f6 <__ascii_mbtowc+0x16>

0800e304 <_Balloc>:
 800e304:	b570      	push	{r4, r5, r6, lr}
 800e306:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e308:	4604      	mov	r4, r0
 800e30a:	460e      	mov	r6, r1
 800e30c:	b93d      	cbnz	r5, 800e31e <_Balloc+0x1a>
 800e30e:	2010      	movs	r0, #16
 800e310:	f7ff ffde 	bl	800e2d0 <malloc>
 800e314:	6260      	str	r0, [r4, #36]	; 0x24
 800e316:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e31a:	6005      	str	r5, [r0, #0]
 800e31c:	60c5      	str	r5, [r0, #12]
 800e31e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e320:	68eb      	ldr	r3, [r5, #12]
 800e322:	b183      	cbz	r3, 800e346 <_Balloc+0x42>
 800e324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e32c:	b9b8      	cbnz	r0, 800e35e <_Balloc+0x5a>
 800e32e:	2101      	movs	r1, #1
 800e330:	fa01 f506 	lsl.w	r5, r1, r6
 800e334:	1d6a      	adds	r2, r5, #5
 800e336:	0092      	lsls	r2, r2, #2
 800e338:	4620      	mov	r0, r4
 800e33a:	f000 fbe2 	bl	800eb02 <_calloc_r>
 800e33e:	b160      	cbz	r0, 800e35a <_Balloc+0x56>
 800e340:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e344:	e00e      	b.n	800e364 <_Balloc+0x60>
 800e346:	2221      	movs	r2, #33	; 0x21
 800e348:	2104      	movs	r1, #4
 800e34a:	4620      	mov	r0, r4
 800e34c:	f000 fbd9 	bl	800eb02 <_calloc_r>
 800e350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e352:	60e8      	str	r0, [r5, #12]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d1e4      	bne.n	800e324 <_Balloc+0x20>
 800e35a:	2000      	movs	r0, #0
 800e35c:	bd70      	pop	{r4, r5, r6, pc}
 800e35e:	6802      	ldr	r2, [r0, #0]
 800e360:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e364:	2300      	movs	r3, #0
 800e366:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e36a:	e7f7      	b.n	800e35c <_Balloc+0x58>

0800e36c <_Bfree>:
 800e36c:	b570      	push	{r4, r5, r6, lr}
 800e36e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e370:	4606      	mov	r6, r0
 800e372:	460d      	mov	r5, r1
 800e374:	b93c      	cbnz	r4, 800e386 <_Bfree+0x1a>
 800e376:	2010      	movs	r0, #16
 800e378:	f7ff ffaa 	bl	800e2d0 <malloc>
 800e37c:	6270      	str	r0, [r6, #36]	; 0x24
 800e37e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e382:	6004      	str	r4, [r0, #0]
 800e384:	60c4      	str	r4, [r0, #12]
 800e386:	b13d      	cbz	r5, 800e398 <_Bfree+0x2c>
 800e388:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e38a:	686a      	ldr	r2, [r5, #4]
 800e38c:	68db      	ldr	r3, [r3, #12]
 800e38e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e392:	6029      	str	r1, [r5, #0]
 800e394:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e398:	bd70      	pop	{r4, r5, r6, pc}

0800e39a <__multadd>:
 800e39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e39e:	690d      	ldr	r5, [r1, #16]
 800e3a0:	461f      	mov	r7, r3
 800e3a2:	4606      	mov	r6, r0
 800e3a4:	460c      	mov	r4, r1
 800e3a6:	f101 0c14 	add.w	ip, r1, #20
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	f8dc 0000 	ldr.w	r0, [ip]
 800e3b0:	b281      	uxth	r1, r0
 800e3b2:	fb02 7101 	mla	r1, r2, r1, r7
 800e3b6:	0c0f      	lsrs	r7, r1, #16
 800e3b8:	0c00      	lsrs	r0, r0, #16
 800e3ba:	fb02 7000 	mla	r0, r2, r0, r7
 800e3be:	b289      	uxth	r1, r1
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e3c6:	429d      	cmp	r5, r3
 800e3c8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e3cc:	f84c 1b04 	str.w	r1, [ip], #4
 800e3d0:	dcec      	bgt.n	800e3ac <__multadd+0x12>
 800e3d2:	b1d7      	cbz	r7, 800e40a <__multadd+0x70>
 800e3d4:	68a3      	ldr	r3, [r4, #8]
 800e3d6:	42ab      	cmp	r3, r5
 800e3d8:	dc12      	bgt.n	800e400 <__multadd+0x66>
 800e3da:	6861      	ldr	r1, [r4, #4]
 800e3dc:	4630      	mov	r0, r6
 800e3de:	3101      	adds	r1, #1
 800e3e0:	f7ff ff90 	bl	800e304 <_Balloc>
 800e3e4:	6922      	ldr	r2, [r4, #16]
 800e3e6:	3202      	adds	r2, #2
 800e3e8:	f104 010c 	add.w	r1, r4, #12
 800e3ec:	4680      	mov	r8, r0
 800e3ee:	0092      	lsls	r2, r2, #2
 800e3f0:	300c      	adds	r0, #12
 800e3f2:	f7fc fdad 	bl	800af50 <memcpy>
 800e3f6:	4621      	mov	r1, r4
 800e3f8:	4630      	mov	r0, r6
 800e3fa:	f7ff ffb7 	bl	800e36c <_Bfree>
 800e3fe:	4644      	mov	r4, r8
 800e400:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e404:	3501      	adds	r5, #1
 800e406:	615f      	str	r7, [r3, #20]
 800e408:	6125      	str	r5, [r4, #16]
 800e40a:	4620      	mov	r0, r4
 800e40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e410 <__s2b>:
 800e410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e414:	460c      	mov	r4, r1
 800e416:	4615      	mov	r5, r2
 800e418:	461f      	mov	r7, r3
 800e41a:	2209      	movs	r2, #9
 800e41c:	3308      	adds	r3, #8
 800e41e:	4606      	mov	r6, r0
 800e420:	fb93 f3f2 	sdiv	r3, r3, r2
 800e424:	2100      	movs	r1, #0
 800e426:	2201      	movs	r2, #1
 800e428:	429a      	cmp	r2, r3
 800e42a:	db20      	blt.n	800e46e <__s2b+0x5e>
 800e42c:	4630      	mov	r0, r6
 800e42e:	f7ff ff69 	bl	800e304 <_Balloc>
 800e432:	9b08      	ldr	r3, [sp, #32]
 800e434:	6143      	str	r3, [r0, #20]
 800e436:	2d09      	cmp	r5, #9
 800e438:	f04f 0301 	mov.w	r3, #1
 800e43c:	6103      	str	r3, [r0, #16]
 800e43e:	dd19      	ble.n	800e474 <__s2b+0x64>
 800e440:	f104 0809 	add.w	r8, r4, #9
 800e444:	46c1      	mov	r9, r8
 800e446:	442c      	add	r4, r5
 800e448:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e44c:	4601      	mov	r1, r0
 800e44e:	3b30      	subs	r3, #48	; 0x30
 800e450:	220a      	movs	r2, #10
 800e452:	4630      	mov	r0, r6
 800e454:	f7ff ffa1 	bl	800e39a <__multadd>
 800e458:	45a1      	cmp	r9, r4
 800e45a:	d1f5      	bne.n	800e448 <__s2b+0x38>
 800e45c:	eb08 0405 	add.w	r4, r8, r5
 800e460:	3c08      	subs	r4, #8
 800e462:	1b2d      	subs	r5, r5, r4
 800e464:	1963      	adds	r3, r4, r5
 800e466:	42bb      	cmp	r3, r7
 800e468:	db07      	blt.n	800e47a <__s2b+0x6a>
 800e46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e46e:	0052      	lsls	r2, r2, #1
 800e470:	3101      	adds	r1, #1
 800e472:	e7d9      	b.n	800e428 <__s2b+0x18>
 800e474:	340a      	adds	r4, #10
 800e476:	2509      	movs	r5, #9
 800e478:	e7f3      	b.n	800e462 <__s2b+0x52>
 800e47a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e47e:	4601      	mov	r1, r0
 800e480:	3b30      	subs	r3, #48	; 0x30
 800e482:	220a      	movs	r2, #10
 800e484:	4630      	mov	r0, r6
 800e486:	f7ff ff88 	bl	800e39a <__multadd>
 800e48a:	e7eb      	b.n	800e464 <__s2b+0x54>

0800e48c <__hi0bits>:
 800e48c:	0c02      	lsrs	r2, r0, #16
 800e48e:	0412      	lsls	r2, r2, #16
 800e490:	4603      	mov	r3, r0
 800e492:	b9b2      	cbnz	r2, 800e4c2 <__hi0bits+0x36>
 800e494:	0403      	lsls	r3, r0, #16
 800e496:	2010      	movs	r0, #16
 800e498:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e49c:	bf04      	itt	eq
 800e49e:	021b      	lsleq	r3, r3, #8
 800e4a0:	3008      	addeq	r0, #8
 800e4a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e4a6:	bf04      	itt	eq
 800e4a8:	011b      	lsleq	r3, r3, #4
 800e4aa:	3004      	addeq	r0, #4
 800e4ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e4b0:	bf04      	itt	eq
 800e4b2:	009b      	lsleq	r3, r3, #2
 800e4b4:	3002      	addeq	r0, #2
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	db06      	blt.n	800e4c8 <__hi0bits+0x3c>
 800e4ba:	005b      	lsls	r3, r3, #1
 800e4bc:	d503      	bpl.n	800e4c6 <__hi0bits+0x3a>
 800e4be:	3001      	adds	r0, #1
 800e4c0:	4770      	bx	lr
 800e4c2:	2000      	movs	r0, #0
 800e4c4:	e7e8      	b.n	800e498 <__hi0bits+0xc>
 800e4c6:	2020      	movs	r0, #32
 800e4c8:	4770      	bx	lr

0800e4ca <__lo0bits>:
 800e4ca:	6803      	ldr	r3, [r0, #0]
 800e4cc:	f013 0207 	ands.w	r2, r3, #7
 800e4d0:	4601      	mov	r1, r0
 800e4d2:	d00b      	beq.n	800e4ec <__lo0bits+0x22>
 800e4d4:	07da      	lsls	r2, r3, #31
 800e4d6:	d423      	bmi.n	800e520 <__lo0bits+0x56>
 800e4d8:	0798      	lsls	r0, r3, #30
 800e4da:	bf49      	itett	mi
 800e4dc:	085b      	lsrmi	r3, r3, #1
 800e4de:	089b      	lsrpl	r3, r3, #2
 800e4e0:	2001      	movmi	r0, #1
 800e4e2:	600b      	strmi	r3, [r1, #0]
 800e4e4:	bf5c      	itt	pl
 800e4e6:	600b      	strpl	r3, [r1, #0]
 800e4e8:	2002      	movpl	r0, #2
 800e4ea:	4770      	bx	lr
 800e4ec:	b298      	uxth	r0, r3
 800e4ee:	b9a8      	cbnz	r0, 800e51c <__lo0bits+0x52>
 800e4f0:	0c1b      	lsrs	r3, r3, #16
 800e4f2:	2010      	movs	r0, #16
 800e4f4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e4f8:	bf04      	itt	eq
 800e4fa:	0a1b      	lsreq	r3, r3, #8
 800e4fc:	3008      	addeq	r0, #8
 800e4fe:	071a      	lsls	r2, r3, #28
 800e500:	bf04      	itt	eq
 800e502:	091b      	lsreq	r3, r3, #4
 800e504:	3004      	addeq	r0, #4
 800e506:	079a      	lsls	r2, r3, #30
 800e508:	bf04      	itt	eq
 800e50a:	089b      	lsreq	r3, r3, #2
 800e50c:	3002      	addeq	r0, #2
 800e50e:	07da      	lsls	r2, r3, #31
 800e510:	d402      	bmi.n	800e518 <__lo0bits+0x4e>
 800e512:	085b      	lsrs	r3, r3, #1
 800e514:	d006      	beq.n	800e524 <__lo0bits+0x5a>
 800e516:	3001      	adds	r0, #1
 800e518:	600b      	str	r3, [r1, #0]
 800e51a:	4770      	bx	lr
 800e51c:	4610      	mov	r0, r2
 800e51e:	e7e9      	b.n	800e4f4 <__lo0bits+0x2a>
 800e520:	2000      	movs	r0, #0
 800e522:	4770      	bx	lr
 800e524:	2020      	movs	r0, #32
 800e526:	4770      	bx	lr

0800e528 <__i2b>:
 800e528:	b510      	push	{r4, lr}
 800e52a:	460c      	mov	r4, r1
 800e52c:	2101      	movs	r1, #1
 800e52e:	f7ff fee9 	bl	800e304 <_Balloc>
 800e532:	2201      	movs	r2, #1
 800e534:	6144      	str	r4, [r0, #20]
 800e536:	6102      	str	r2, [r0, #16]
 800e538:	bd10      	pop	{r4, pc}

0800e53a <__multiply>:
 800e53a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53e:	4614      	mov	r4, r2
 800e540:	690a      	ldr	r2, [r1, #16]
 800e542:	6923      	ldr	r3, [r4, #16]
 800e544:	429a      	cmp	r2, r3
 800e546:	bfb8      	it	lt
 800e548:	460b      	movlt	r3, r1
 800e54a:	4688      	mov	r8, r1
 800e54c:	bfbc      	itt	lt
 800e54e:	46a0      	movlt	r8, r4
 800e550:	461c      	movlt	r4, r3
 800e552:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e556:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e55a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e55e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e562:	eb07 0609 	add.w	r6, r7, r9
 800e566:	42b3      	cmp	r3, r6
 800e568:	bfb8      	it	lt
 800e56a:	3101      	addlt	r1, #1
 800e56c:	f7ff feca 	bl	800e304 <_Balloc>
 800e570:	f100 0514 	add.w	r5, r0, #20
 800e574:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e578:	462b      	mov	r3, r5
 800e57a:	2200      	movs	r2, #0
 800e57c:	4573      	cmp	r3, lr
 800e57e:	d316      	bcc.n	800e5ae <__multiply+0x74>
 800e580:	f104 0214 	add.w	r2, r4, #20
 800e584:	f108 0114 	add.w	r1, r8, #20
 800e588:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e58c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e590:	9300      	str	r3, [sp, #0]
 800e592:	9b00      	ldr	r3, [sp, #0]
 800e594:	9201      	str	r2, [sp, #4]
 800e596:	4293      	cmp	r3, r2
 800e598:	d80c      	bhi.n	800e5b4 <__multiply+0x7a>
 800e59a:	2e00      	cmp	r6, #0
 800e59c:	dd03      	ble.n	800e5a6 <__multiply+0x6c>
 800e59e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d05d      	beq.n	800e662 <__multiply+0x128>
 800e5a6:	6106      	str	r6, [r0, #16]
 800e5a8:	b003      	add	sp, #12
 800e5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ae:	f843 2b04 	str.w	r2, [r3], #4
 800e5b2:	e7e3      	b.n	800e57c <__multiply+0x42>
 800e5b4:	f8b2 b000 	ldrh.w	fp, [r2]
 800e5b8:	f1bb 0f00 	cmp.w	fp, #0
 800e5bc:	d023      	beq.n	800e606 <__multiply+0xcc>
 800e5be:	4689      	mov	r9, r1
 800e5c0:	46ac      	mov	ip, r5
 800e5c2:	f04f 0800 	mov.w	r8, #0
 800e5c6:	f859 4b04 	ldr.w	r4, [r9], #4
 800e5ca:	f8dc a000 	ldr.w	sl, [ip]
 800e5ce:	b2a3      	uxth	r3, r4
 800e5d0:	fa1f fa8a 	uxth.w	sl, sl
 800e5d4:	fb0b a303 	mla	r3, fp, r3, sl
 800e5d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e5dc:	f8dc 4000 	ldr.w	r4, [ip]
 800e5e0:	4443      	add	r3, r8
 800e5e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e5e6:	fb0b 840a 	mla	r4, fp, sl, r8
 800e5ea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e5ee:	46e2      	mov	sl, ip
 800e5f0:	b29b      	uxth	r3, r3
 800e5f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e5f6:	454f      	cmp	r7, r9
 800e5f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e5fc:	f84a 3b04 	str.w	r3, [sl], #4
 800e600:	d82b      	bhi.n	800e65a <__multiply+0x120>
 800e602:	f8cc 8004 	str.w	r8, [ip, #4]
 800e606:	9b01      	ldr	r3, [sp, #4]
 800e608:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e60c:	3204      	adds	r2, #4
 800e60e:	f1ba 0f00 	cmp.w	sl, #0
 800e612:	d020      	beq.n	800e656 <__multiply+0x11c>
 800e614:	682b      	ldr	r3, [r5, #0]
 800e616:	4689      	mov	r9, r1
 800e618:	46a8      	mov	r8, r5
 800e61a:	f04f 0b00 	mov.w	fp, #0
 800e61e:	f8b9 c000 	ldrh.w	ip, [r9]
 800e622:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e626:	fb0a 440c 	mla	r4, sl, ip, r4
 800e62a:	445c      	add	r4, fp
 800e62c:	46c4      	mov	ip, r8
 800e62e:	b29b      	uxth	r3, r3
 800e630:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e634:	f84c 3b04 	str.w	r3, [ip], #4
 800e638:	f859 3b04 	ldr.w	r3, [r9], #4
 800e63c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e640:	0c1b      	lsrs	r3, r3, #16
 800e642:	fb0a b303 	mla	r3, sl, r3, fp
 800e646:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e64a:	454f      	cmp	r7, r9
 800e64c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e650:	d805      	bhi.n	800e65e <__multiply+0x124>
 800e652:	f8c8 3004 	str.w	r3, [r8, #4]
 800e656:	3504      	adds	r5, #4
 800e658:	e79b      	b.n	800e592 <__multiply+0x58>
 800e65a:	46d4      	mov	ip, sl
 800e65c:	e7b3      	b.n	800e5c6 <__multiply+0x8c>
 800e65e:	46e0      	mov	r8, ip
 800e660:	e7dd      	b.n	800e61e <__multiply+0xe4>
 800e662:	3e01      	subs	r6, #1
 800e664:	e799      	b.n	800e59a <__multiply+0x60>
	...

0800e668 <__pow5mult>:
 800e668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e66c:	4615      	mov	r5, r2
 800e66e:	f012 0203 	ands.w	r2, r2, #3
 800e672:	4606      	mov	r6, r0
 800e674:	460f      	mov	r7, r1
 800e676:	d007      	beq.n	800e688 <__pow5mult+0x20>
 800e678:	3a01      	subs	r2, #1
 800e67a:	4c21      	ldr	r4, [pc, #132]	; (800e700 <__pow5mult+0x98>)
 800e67c:	2300      	movs	r3, #0
 800e67e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e682:	f7ff fe8a 	bl	800e39a <__multadd>
 800e686:	4607      	mov	r7, r0
 800e688:	10ad      	asrs	r5, r5, #2
 800e68a:	d035      	beq.n	800e6f8 <__pow5mult+0x90>
 800e68c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e68e:	b93c      	cbnz	r4, 800e6a0 <__pow5mult+0x38>
 800e690:	2010      	movs	r0, #16
 800e692:	f7ff fe1d 	bl	800e2d0 <malloc>
 800e696:	6270      	str	r0, [r6, #36]	; 0x24
 800e698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e69c:	6004      	str	r4, [r0, #0]
 800e69e:	60c4      	str	r4, [r0, #12]
 800e6a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e6a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e6a8:	b94c      	cbnz	r4, 800e6be <__pow5mult+0x56>
 800e6aa:	f240 2171 	movw	r1, #625	; 0x271
 800e6ae:	4630      	mov	r0, r6
 800e6b0:	f7ff ff3a 	bl	800e528 <__i2b>
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	6003      	str	r3, [r0, #0]
 800e6be:	f04f 0800 	mov.w	r8, #0
 800e6c2:	07eb      	lsls	r3, r5, #31
 800e6c4:	d50a      	bpl.n	800e6dc <__pow5mult+0x74>
 800e6c6:	4639      	mov	r1, r7
 800e6c8:	4622      	mov	r2, r4
 800e6ca:	4630      	mov	r0, r6
 800e6cc:	f7ff ff35 	bl	800e53a <__multiply>
 800e6d0:	4639      	mov	r1, r7
 800e6d2:	4681      	mov	r9, r0
 800e6d4:	4630      	mov	r0, r6
 800e6d6:	f7ff fe49 	bl	800e36c <_Bfree>
 800e6da:	464f      	mov	r7, r9
 800e6dc:	106d      	asrs	r5, r5, #1
 800e6de:	d00b      	beq.n	800e6f8 <__pow5mult+0x90>
 800e6e0:	6820      	ldr	r0, [r4, #0]
 800e6e2:	b938      	cbnz	r0, 800e6f4 <__pow5mult+0x8c>
 800e6e4:	4622      	mov	r2, r4
 800e6e6:	4621      	mov	r1, r4
 800e6e8:	4630      	mov	r0, r6
 800e6ea:	f7ff ff26 	bl	800e53a <__multiply>
 800e6ee:	6020      	str	r0, [r4, #0]
 800e6f0:	f8c0 8000 	str.w	r8, [r0]
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	e7e4      	b.n	800e6c2 <__pow5mult+0x5a>
 800e6f8:	4638      	mov	r0, r7
 800e6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6fe:	bf00      	nop
 800e700:	0800f670 	.word	0x0800f670

0800e704 <__lshift>:
 800e704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e708:	460c      	mov	r4, r1
 800e70a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e70e:	6923      	ldr	r3, [r4, #16]
 800e710:	6849      	ldr	r1, [r1, #4]
 800e712:	eb0a 0903 	add.w	r9, sl, r3
 800e716:	68a3      	ldr	r3, [r4, #8]
 800e718:	4607      	mov	r7, r0
 800e71a:	4616      	mov	r6, r2
 800e71c:	f109 0501 	add.w	r5, r9, #1
 800e720:	42ab      	cmp	r3, r5
 800e722:	db32      	blt.n	800e78a <__lshift+0x86>
 800e724:	4638      	mov	r0, r7
 800e726:	f7ff fded 	bl	800e304 <_Balloc>
 800e72a:	2300      	movs	r3, #0
 800e72c:	4680      	mov	r8, r0
 800e72e:	f100 0114 	add.w	r1, r0, #20
 800e732:	461a      	mov	r2, r3
 800e734:	4553      	cmp	r3, sl
 800e736:	db2b      	blt.n	800e790 <__lshift+0x8c>
 800e738:	6920      	ldr	r0, [r4, #16]
 800e73a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e73e:	f104 0314 	add.w	r3, r4, #20
 800e742:	f016 021f 	ands.w	r2, r6, #31
 800e746:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e74a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e74e:	d025      	beq.n	800e79c <__lshift+0x98>
 800e750:	f1c2 0e20 	rsb	lr, r2, #32
 800e754:	2000      	movs	r0, #0
 800e756:	681e      	ldr	r6, [r3, #0]
 800e758:	468a      	mov	sl, r1
 800e75a:	4096      	lsls	r6, r2
 800e75c:	4330      	orrs	r0, r6
 800e75e:	f84a 0b04 	str.w	r0, [sl], #4
 800e762:	f853 0b04 	ldr.w	r0, [r3], #4
 800e766:	459c      	cmp	ip, r3
 800e768:	fa20 f00e 	lsr.w	r0, r0, lr
 800e76c:	d814      	bhi.n	800e798 <__lshift+0x94>
 800e76e:	6048      	str	r0, [r1, #4]
 800e770:	b108      	cbz	r0, 800e776 <__lshift+0x72>
 800e772:	f109 0502 	add.w	r5, r9, #2
 800e776:	3d01      	subs	r5, #1
 800e778:	4638      	mov	r0, r7
 800e77a:	f8c8 5010 	str.w	r5, [r8, #16]
 800e77e:	4621      	mov	r1, r4
 800e780:	f7ff fdf4 	bl	800e36c <_Bfree>
 800e784:	4640      	mov	r0, r8
 800e786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e78a:	3101      	adds	r1, #1
 800e78c:	005b      	lsls	r3, r3, #1
 800e78e:	e7c7      	b.n	800e720 <__lshift+0x1c>
 800e790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e794:	3301      	adds	r3, #1
 800e796:	e7cd      	b.n	800e734 <__lshift+0x30>
 800e798:	4651      	mov	r1, sl
 800e79a:	e7dc      	b.n	800e756 <__lshift+0x52>
 800e79c:	3904      	subs	r1, #4
 800e79e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7a2:	f841 2f04 	str.w	r2, [r1, #4]!
 800e7a6:	459c      	cmp	ip, r3
 800e7a8:	d8f9      	bhi.n	800e79e <__lshift+0x9a>
 800e7aa:	e7e4      	b.n	800e776 <__lshift+0x72>

0800e7ac <__mcmp>:
 800e7ac:	6903      	ldr	r3, [r0, #16]
 800e7ae:	690a      	ldr	r2, [r1, #16]
 800e7b0:	1a9b      	subs	r3, r3, r2
 800e7b2:	b530      	push	{r4, r5, lr}
 800e7b4:	d10c      	bne.n	800e7d0 <__mcmp+0x24>
 800e7b6:	0092      	lsls	r2, r2, #2
 800e7b8:	3014      	adds	r0, #20
 800e7ba:	3114      	adds	r1, #20
 800e7bc:	1884      	adds	r4, r0, r2
 800e7be:	4411      	add	r1, r2
 800e7c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e7c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e7c8:	4295      	cmp	r5, r2
 800e7ca:	d003      	beq.n	800e7d4 <__mcmp+0x28>
 800e7cc:	d305      	bcc.n	800e7da <__mcmp+0x2e>
 800e7ce:	2301      	movs	r3, #1
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	bd30      	pop	{r4, r5, pc}
 800e7d4:	42a0      	cmp	r0, r4
 800e7d6:	d3f3      	bcc.n	800e7c0 <__mcmp+0x14>
 800e7d8:	e7fa      	b.n	800e7d0 <__mcmp+0x24>
 800e7da:	f04f 33ff 	mov.w	r3, #4294967295
 800e7de:	e7f7      	b.n	800e7d0 <__mcmp+0x24>

0800e7e0 <__mdiff>:
 800e7e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7e4:	460d      	mov	r5, r1
 800e7e6:	4607      	mov	r7, r0
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	4628      	mov	r0, r5
 800e7ec:	4614      	mov	r4, r2
 800e7ee:	f7ff ffdd 	bl	800e7ac <__mcmp>
 800e7f2:	1e06      	subs	r6, r0, #0
 800e7f4:	d108      	bne.n	800e808 <__mdiff+0x28>
 800e7f6:	4631      	mov	r1, r6
 800e7f8:	4638      	mov	r0, r7
 800e7fa:	f7ff fd83 	bl	800e304 <_Balloc>
 800e7fe:	2301      	movs	r3, #1
 800e800:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e808:	bfa4      	itt	ge
 800e80a:	4623      	movge	r3, r4
 800e80c:	462c      	movge	r4, r5
 800e80e:	4638      	mov	r0, r7
 800e810:	6861      	ldr	r1, [r4, #4]
 800e812:	bfa6      	itte	ge
 800e814:	461d      	movge	r5, r3
 800e816:	2600      	movge	r6, #0
 800e818:	2601      	movlt	r6, #1
 800e81a:	f7ff fd73 	bl	800e304 <_Balloc>
 800e81e:	692b      	ldr	r3, [r5, #16]
 800e820:	60c6      	str	r6, [r0, #12]
 800e822:	6926      	ldr	r6, [r4, #16]
 800e824:	f105 0914 	add.w	r9, r5, #20
 800e828:	f104 0214 	add.w	r2, r4, #20
 800e82c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e830:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e834:	f100 0514 	add.w	r5, r0, #20
 800e838:	f04f 0e00 	mov.w	lr, #0
 800e83c:	f852 ab04 	ldr.w	sl, [r2], #4
 800e840:	f859 4b04 	ldr.w	r4, [r9], #4
 800e844:	fa1e f18a 	uxtah	r1, lr, sl
 800e848:	b2a3      	uxth	r3, r4
 800e84a:	1ac9      	subs	r1, r1, r3
 800e84c:	0c23      	lsrs	r3, r4, #16
 800e84e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e852:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e856:	b289      	uxth	r1, r1
 800e858:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e85c:	45c8      	cmp	r8, r9
 800e85e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e862:	4694      	mov	ip, r2
 800e864:	f845 3b04 	str.w	r3, [r5], #4
 800e868:	d8e8      	bhi.n	800e83c <__mdiff+0x5c>
 800e86a:	45bc      	cmp	ip, r7
 800e86c:	d304      	bcc.n	800e878 <__mdiff+0x98>
 800e86e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e872:	b183      	cbz	r3, 800e896 <__mdiff+0xb6>
 800e874:	6106      	str	r6, [r0, #16]
 800e876:	e7c5      	b.n	800e804 <__mdiff+0x24>
 800e878:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e87c:	fa1e f381 	uxtah	r3, lr, r1
 800e880:	141a      	asrs	r2, r3, #16
 800e882:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e886:	b29b      	uxth	r3, r3
 800e888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e88c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e890:	f845 3b04 	str.w	r3, [r5], #4
 800e894:	e7e9      	b.n	800e86a <__mdiff+0x8a>
 800e896:	3e01      	subs	r6, #1
 800e898:	e7e9      	b.n	800e86e <__mdiff+0x8e>
	...

0800e89c <__ulp>:
 800e89c:	4b12      	ldr	r3, [pc, #72]	; (800e8e8 <__ulp+0x4c>)
 800e89e:	ee10 2a90 	vmov	r2, s1
 800e8a2:	401a      	ands	r2, r3
 800e8a4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	dd04      	ble.n	800e8b6 <__ulp+0x1a>
 800e8ac:	2000      	movs	r0, #0
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	ec41 0b10 	vmov	d0, r0, r1
 800e8b4:	4770      	bx	lr
 800e8b6:	425b      	negs	r3, r3
 800e8b8:	151b      	asrs	r3, r3, #20
 800e8ba:	2b13      	cmp	r3, #19
 800e8bc:	f04f 0000 	mov.w	r0, #0
 800e8c0:	f04f 0100 	mov.w	r1, #0
 800e8c4:	dc04      	bgt.n	800e8d0 <__ulp+0x34>
 800e8c6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800e8ca:	fa42 f103 	asr.w	r1, r2, r3
 800e8ce:	e7ef      	b.n	800e8b0 <__ulp+0x14>
 800e8d0:	3b14      	subs	r3, #20
 800e8d2:	2b1e      	cmp	r3, #30
 800e8d4:	f04f 0201 	mov.w	r2, #1
 800e8d8:	bfda      	itte	le
 800e8da:	f1c3 031f 	rsble	r3, r3, #31
 800e8de:	fa02 f303 	lslle.w	r3, r2, r3
 800e8e2:	4613      	movgt	r3, r2
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	e7e3      	b.n	800e8b0 <__ulp+0x14>
 800e8e8:	7ff00000 	.word	0x7ff00000

0800e8ec <__b2d>:
 800e8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8ee:	6905      	ldr	r5, [r0, #16]
 800e8f0:	f100 0714 	add.w	r7, r0, #20
 800e8f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e8f8:	1f2e      	subs	r6, r5, #4
 800e8fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e8fe:	4620      	mov	r0, r4
 800e900:	f7ff fdc4 	bl	800e48c <__hi0bits>
 800e904:	f1c0 0320 	rsb	r3, r0, #32
 800e908:	280a      	cmp	r0, #10
 800e90a:	600b      	str	r3, [r1, #0]
 800e90c:	f8df c074 	ldr.w	ip, [pc, #116]	; 800e984 <__b2d+0x98>
 800e910:	dc14      	bgt.n	800e93c <__b2d+0x50>
 800e912:	f1c0 0e0b 	rsb	lr, r0, #11
 800e916:	fa24 f10e 	lsr.w	r1, r4, lr
 800e91a:	42b7      	cmp	r7, r6
 800e91c:	ea41 030c 	orr.w	r3, r1, ip
 800e920:	bf34      	ite	cc
 800e922:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e926:	2100      	movcs	r1, #0
 800e928:	3015      	adds	r0, #21
 800e92a:	fa04 f000 	lsl.w	r0, r4, r0
 800e92e:	fa21 f10e 	lsr.w	r1, r1, lr
 800e932:	ea40 0201 	orr.w	r2, r0, r1
 800e936:	ec43 2b10 	vmov	d0, r2, r3
 800e93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e93c:	42b7      	cmp	r7, r6
 800e93e:	bf3a      	itte	cc
 800e940:	f1a5 0608 	subcc.w	r6, r5, #8
 800e944:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e948:	2100      	movcs	r1, #0
 800e94a:	380b      	subs	r0, #11
 800e94c:	d015      	beq.n	800e97a <__b2d+0x8e>
 800e94e:	4084      	lsls	r4, r0
 800e950:	f1c0 0520 	rsb	r5, r0, #32
 800e954:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800e958:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800e95c:	42be      	cmp	r6, r7
 800e95e:	fa21 fc05 	lsr.w	ip, r1, r5
 800e962:	ea44 030c 	orr.w	r3, r4, ip
 800e966:	bf8c      	ite	hi
 800e968:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e96c:	2400      	movls	r4, #0
 800e96e:	fa01 f000 	lsl.w	r0, r1, r0
 800e972:	40ec      	lsrs	r4, r5
 800e974:	ea40 0204 	orr.w	r2, r0, r4
 800e978:	e7dd      	b.n	800e936 <__b2d+0x4a>
 800e97a:	ea44 030c 	orr.w	r3, r4, ip
 800e97e:	460a      	mov	r2, r1
 800e980:	e7d9      	b.n	800e936 <__b2d+0x4a>
 800e982:	bf00      	nop
 800e984:	3ff00000 	.word	0x3ff00000

0800e988 <__d2b>:
 800e988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e98c:	460e      	mov	r6, r1
 800e98e:	2101      	movs	r1, #1
 800e990:	ec59 8b10 	vmov	r8, r9, d0
 800e994:	4615      	mov	r5, r2
 800e996:	f7ff fcb5 	bl	800e304 <_Balloc>
 800e99a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e99e:	4607      	mov	r7, r0
 800e9a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e9a4:	bb34      	cbnz	r4, 800e9f4 <__d2b+0x6c>
 800e9a6:	9301      	str	r3, [sp, #4]
 800e9a8:	f1b8 0300 	subs.w	r3, r8, #0
 800e9ac:	d027      	beq.n	800e9fe <__d2b+0x76>
 800e9ae:	a802      	add	r0, sp, #8
 800e9b0:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e9b4:	f7ff fd89 	bl	800e4ca <__lo0bits>
 800e9b8:	9900      	ldr	r1, [sp, #0]
 800e9ba:	b1f0      	cbz	r0, 800e9fa <__d2b+0x72>
 800e9bc:	9a01      	ldr	r2, [sp, #4]
 800e9be:	f1c0 0320 	rsb	r3, r0, #32
 800e9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800e9c6:	430b      	orrs	r3, r1
 800e9c8:	40c2      	lsrs	r2, r0
 800e9ca:	617b      	str	r3, [r7, #20]
 800e9cc:	9201      	str	r2, [sp, #4]
 800e9ce:	9b01      	ldr	r3, [sp, #4]
 800e9d0:	61bb      	str	r3, [r7, #24]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	bf14      	ite	ne
 800e9d6:	2102      	movne	r1, #2
 800e9d8:	2101      	moveq	r1, #1
 800e9da:	6139      	str	r1, [r7, #16]
 800e9dc:	b1c4      	cbz	r4, 800ea10 <__d2b+0x88>
 800e9de:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e9e2:	4404      	add	r4, r0
 800e9e4:	6034      	str	r4, [r6, #0]
 800e9e6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e9ea:	6028      	str	r0, [r5, #0]
 800e9ec:	4638      	mov	r0, r7
 800e9ee:	b003      	add	sp, #12
 800e9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e9f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e9f8:	e7d5      	b.n	800e9a6 <__d2b+0x1e>
 800e9fa:	6179      	str	r1, [r7, #20]
 800e9fc:	e7e7      	b.n	800e9ce <__d2b+0x46>
 800e9fe:	a801      	add	r0, sp, #4
 800ea00:	f7ff fd63 	bl	800e4ca <__lo0bits>
 800ea04:	9b01      	ldr	r3, [sp, #4]
 800ea06:	617b      	str	r3, [r7, #20]
 800ea08:	2101      	movs	r1, #1
 800ea0a:	6139      	str	r1, [r7, #16]
 800ea0c:	3020      	adds	r0, #32
 800ea0e:	e7e5      	b.n	800e9dc <__d2b+0x54>
 800ea10:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ea14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ea18:	6030      	str	r0, [r6, #0]
 800ea1a:	6918      	ldr	r0, [r3, #16]
 800ea1c:	f7ff fd36 	bl	800e48c <__hi0bits>
 800ea20:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ea24:	e7e1      	b.n	800e9ea <__d2b+0x62>

0800ea26 <__ratio>:
 800ea26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea2a:	4688      	mov	r8, r1
 800ea2c:	4669      	mov	r1, sp
 800ea2e:	4681      	mov	r9, r0
 800ea30:	f7ff ff5c 	bl	800e8ec <__b2d>
 800ea34:	a901      	add	r1, sp, #4
 800ea36:	4640      	mov	r0, r8
 800ea38:	ec57 6b10 	vmov	r6, r7, d0
 800ea3c:	f7ff ff56 	bl	800e8ec <__b2d>
 800ea40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea44:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ea48:	eba3 0c02 	sub.w	ip, r3, r2
 800ea4c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ea50:	1a9b      	subs	r3, r3, r2
 800ea52:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ea56:	ec5b ab10 	vmov	sl, fp, d0
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	bfce      	itee	gt
 800ea5e:	463a      	movgt	r2, r7
 800ea60:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ea64:	465a      	movle	r2, fp
 800ea66:	4659      	mov	r1, fp
 800ea68:	463d      	mov	r5, r7
 800ea6a:	bfd4      	ite	le
 800ea6c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800ea70:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800ea74:	4630      	mov	r0, r6
 800ea76:	ee10 2a10 	vmov	r2, s0
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	4629      	mov	r1, r5
 800ea7e:	f7f1 fee5 	bl	800084c <__aeabi_ddiv>
 800ea82:	ec41 0b10 	vmov	d0, r0, r1
 800ea86:	b003      	add	sp, #12
 800ea88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea8c <__copybits>:
 800ea8c:	3901      	subs	r1, #1
 800ea8e:	b510      	push	{r4, lr}
 800ea90:	1149      	asrs	r1, r1, #5
 800ea92:	6914      	ldr	r4, [r2, #16]
 800ea94:	3101      	adds	r1, #1
 800ea96:	f102 0314 	add.w	r3, r2, #20
 800ea9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ea9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800eaa2:	42a3      	cmp	r3, r4
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	d303      	bcc.n	800eab0 <__copybits+0x24>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	428a      	cmp	r2, r1
 800eaac:	d305      	bcc.n	800eaba <__copybits+0x2e>
 800eaae:	bd10      	pop	{r4, pc}
 800eab0:	f853 2b04 	ldr.w	r2, [r3], #4
 800eab4:	f840 2b04 	str.w	r2, [r0], #4
 800eab8:	e7f3      	b.n	800eaa2 <__copybits+0x16>
 800eaba:	f842 3b04 	str.w	r3, [r2], #4
 800eabe:	e7f4      	b.n	800eaaa <__copybits+0x1e>

0800eac0 <__any_on>:
 800eac0:	f100 0214 	add.w	r2, r0, #20
 800eac4:	6900      	ldr	r0, [r0, #16]
 800eac6:	114b      	asrs	r3, r1, #5
 800eac8:	4298      	cmp	r0, r3
 800eaca:	b510      	push	{r4, lr}
 800eacc:	db11      	blt.n	800eaf2 <__any_on+0x32>
 800eace:	dd0a      	ble.n	800eae6 <__any_on+0x26>
 800ead0:	f011 011f 	ands.w	r1, r1, #31
 800ead4:	d007      	beq.n	800eae6 <__any_on+0x26>
 800ead6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800eada:	fa24 f001 	lsr.w	r0, r4, r1
 800eade:	fa00 f101 	lsl.w	r1, r0, r1
 800eae2:	428c      	cmp	r4, r1
 800eae4:	d10b      	bne.n	800eafe <__any_on+0x3e>
 800eae6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eaea:	4293      	cmp	r3, r2
 800eaec:	d803      	bhi.n	800eaf6 <__any_on+0x36>
 800eaee:	2000      	movs	r0, #0
 800eaf0:	bd10      	pop	{r4, pc}
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	e7f7      	b.n	800eae6 <__any_on+0x26>
 800eaf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800eafa:	2900      	cmp	r1, #0
 800eafc:	d0f5      	beq.n	800eaea <__any_on+0x2a>
 800eafe:	2001      	movs	r0, #1
 800eb00:	e7f6      	b.n	800eaf0 <__any_on+0x30>

0800eb02 <_calloc_r>:
 800eb02:	b538      	push	{r3, r4, r5, lr}
 800eb04:	fb02 f401 	mul.w	r4, r2, r1
 800eb08:	4621      	mov	r1, r4
 800eb0a:	f000 f857 	bl	800ebbc <_malloc_r>
 800eb0e:	4605      	mov	r5, r0
 800eb10:	b118      	cbz	r0, 800eb1a <_calloc_r+0x18>
 800eb12:	4622      	mov	r2, r4
 800eb14:	2100      	movs	r1, #0
 800eb16:	f7fc fa26 	bl	800af66 <memset>
 800eb1a:	4628      	mov	r0, r5
 800eb1c:	bd38      	pop	{r3, r4, r5, pc}
	...

0800eb20 <_free_r>:
 800eb20:	b538      	push	{r3, r4, r5, lr}
 800eb22:	4605      	mov	r5, r0
 800eb24:	2900      	cmp	r1, #0
 800eb26:	d045      	beq.n	800ebb4 <_free_r+0x94>
 800eb28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb2c:	1f0c      	subs	r4, r1, #4
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	bfb8      	it	lt
 800eb32:	18e4      	addlt	r4, r4, r3
 800eb34:	f000 fc0f 	bl	800f356 <__malloc_lock>
 800eb38:	4a1f      	ldr	r2, [pc, #124]	; (800ebb8 <_free_r+0x98>)
 800eb3a:	6813      	ldr	r3, [r2, #0]
 800eb3c:	4610      	mov	r0, r2
 800eb3e:	b933      	cbnz	r3, 800eb4e <_free_r+0x2e>
 800eb40:	6063      	str	r3, [r4, #4]
 800eb42:	6014      	str	r4, [r2, #0]
 800eb44:	4628      	mov	r0, r5
 800eb46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb4a:	f000 bc05 	b.w	800f358 <__malloc_unlock>
 800eb4e:	42a3      	cmp	r3, r4
 800eb50:	d90c      	bls.n	800eb6c <_free_r+0x4c>
 800eb52:	6821      	ldr	r1, [r4, #0]
 800eb54:	1862      	adds	r2, r4, r1
 800eb56:	4293      	cmp	r3, r2
 800eb58:	bf04      	itt	eq
 800eb5a:	681a      	ldreq	r2, [r3, #0]
 800eb5c:	685b      	ldreq	r3, [r3, #4]
 800eb5e:	6063      	str	r3, [r4, #4]
 800eb60:	bf04      	itt	eq
 800eb62:	1852      	addeq	r2, r2, r1
 800eb64:	6022      	streq	r2, [r4, #0]
 800eb66:	6004      	str	r4, [r0, #0]
 800eb68:	e7ec      	b.n	800eb44 <_free_r+0x24>
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	685a      	ldr	r2, [r3, #4]
 800eb6e:	b10a      	cbz	r2, 800eb74 <_free_r+0x54>
 800eb70:	42a2      	cmp	r2, r4
 800eb72:	d9fa      	bls.n	800eb6a <_free_r+0x4a>
 800eb74:	6819      	ldr	r1, [r3, #0]
 800eb76:	1858      	adds	r0, r3, r1
 800eb78:	42a0      	cmp	r0, r4
 800eb7a:	d10b      	bne.n	800eb94 <_free_r+0x74>
 800eb7c:	6820      	ldr	r0, [r4, #0]
 800eb7e:	4401      	add	r1, r0
 800eb80:	1858      	adds	r0, r3, r1
 800eb82:	4282      	cmp	r2, r0
 800eb84:	6019      	str	r1, [r3, #0]
 800eb86:	d1dd      	bne.n	800eb44 <_free_r+0x24>
 800eb88:	6810      	ldr	r0, [r2, #0]
 800eb8a:	6852      	ldr	r2, [r2, #4]
 800eb8c:	605a      	str	r2, [r3, #4]
 800eb8e:	4401      	add	r1, r0
 800eb90:	6019      	str	r1, [r3, #0]
 800eb92:	e7d7      	b.n	800eb44 <_free_r+0x24>
 800eb94:	d902      	bls.n	800eb9c <_free_r+0x7c>
 800eb96:	230c      	movs	r3, #12
 800eb98:	602b      	str	r3, [r5, #0]
 800eb9a:	e7d3      	b.n	800eb44 <_free_r+0x24>
 800eb9c:	6820      	ldr	r0, [r4, #0]
 800eb9e:	1821      	adds	r1, r4, r0
 800eba0:	428a      	cmp	r2, r1
 800eba2:	bf04      	itt	eq
 800eba4:	6811      	ldreq	r1, [r2, #0]
 800eba6:	6852      	ldreq	r2, [r2, #4]
 800eba8:	6062      	str	r2, [r4, #4]
 800ebaa:	bf04      	itt	eq
 800ebac:	1809      	addeq	r1, r1, r0
 800ebae:	6021      	streq	r1, [r4, #0]
 800ebb0:	605c      	str	r4, [r3, #4]
 800ebb2:	e7c7      	b.n	800eb44 <_free_r+0x24>
 800ebb4:	bd38      	pop	{r3, r4, r5, pc}
 800ebb6:	bf00      	nop
 800ebb8:	2001ef9c 	.word	0x2001ef9c

0800ebbc <_malloc_r>:
 800ebbc:	b570      	push	{r4, r5, r6, lr}
 800ebbe:	1ccd      	adds	r5, r1, #3
 800ebc0:	f025 0503 	bic.w	r5, r5, #3
 800ebc4:	3508      	adds	r5, #8
 800ebc6:	2d0c      	cmp	r5, #12
 800ebc8:	bf38      	it	cc
 800ebca:	250c      	movcc	r5, #12
 800ebcc:	2d00      	cmp	r5, #0
 800ebce:	4606      	mov	r6, r0
 800ebd0:	db01      	blt.n	800ebd6 <_malloc_r+0x1a>
 800ebd2:	42a9      	cmp	r1, r5
 800ebd4:	d903      	bls.n	800ebde <_malloc_r+0x22>
 800ebd6:	230c      	movs	r3, #12
 800ebd8:	6033      	str	r3, [r6, #0]
 800ebda:	2000      	movs	r0, #0
 800ebdc:	bd70      	pop	{r4, r5, r6, pc}
 800ebde:	f000 fbba 	bl	800f356 <__malloc_lock>
 800ebe2:	4a21      	ldr	r2, [pc, #132]	; (800ec68 <_malloc_r+0xac>)
 800ebe4:	6814      	ldr	r4, [r2, #0]
 800ebe6:	4621      	mov	r1, r4
 800ebe8:	b991      	cbnz	r1, 800ec10 <_malloc_r+0x54>
 800ebea:	4c20      	ldr	r4, [pc, #128]	; (800ec6c <_malloc_r+0xb0>)
 800ebec:	6823      	ldr	r3, [r4, #0]
 800ebee:	b91b      	cbnz	r3, 800ebf8 <_malloc_r+0x3c>
 800ebf0:	4630      	mov	r0, r6
 800ebf2:	f000 facf 	bl	800f194 <_sbrk_r>
 800ebf6:	6020      	str	r0, [r4, #0]
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	f000 faca 	bl	800f194 <_sbrk_r>
 800ec00:	1c43      	adds	r3, r0, #1
 800ec02:	d124      	bne.n	800ec4e <_malloc_r+0x92>
 800ec04:	230c      	movs	r3, #12
 800ec06:	6033      	str	r3, [r6, #0]
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f000 fba5 	bl	800f358 <__malloc_unlock>
 800ec0e:	e7e4      	b.n	800ebda <_malloc_r+0x1e>
 800ec10:	680b      	ldr	r3, [r1, #0]
 800ec12:	1b5b      	subs	r3, r3, r5
 800ec14:	d418      	bmi.n	800ec48 <_malloc_r+0x8c>
 800ec16:	2b0b      	cmp	r3, #11
 800ec18:	d90f      	bls.n	800ec3a <_malloc_r+0x7e>
 800ec1a:	600b      	str	r3, [r1, #0]
 800ec1c:	50cd      	str	r5, [r1, r3]
 800ec1e:	18cc      	adds	r4, r1, r3
 800ec20:	4630      	mov	r0, r6
 800ec22:	f000 fb99 	bl	800f358 <__malloc_unlock>
 800ec26:	f104 000b 	add.w	r0, r4, #11
 800ec2a:	1d23      	adds	r3, r4, #4
 800ec2c:	f020 0007 	bic.w	r0, r0, #7
 800ec30:	1ac3      	subs	r3, r0, r3
 800ec32:	d0d3      	beq.n	800ebdc <_malloc_r+0x20>
 800ec34:	425a      	negs	r2, r3
 800ec36:	50e2      	str	r2, [r4, r3]
 800ec38:	e7d0      	b.n	800ebdc <_malloc_r+0x20>
 800ec3a:	428c      	cmp	r4, r1
 800ec3c:	684b      	ldr	r3, [r1, #4]
 800ec3e:	bf16      	itet	ne
 800ec40:	6063      	strne	r3, [r4, #4]
 800ec42:	6013      	streq	r3, [r2, #0]
 800ec44:	460c      	movne	r4, r1
 800ec46:	e7eb      	b.n	800ec20 <_malloc_r+0x64>
 800ec48:	460c      	mov	r4, r1
 800ec4a:	6849      	ldr	r1, [r1, #4]
 800ec4c:	e7cc      	b.n	800ebe8 <_malloc_r+0x2c>
 800ec4e:	1cc4      	adds	r4, r0, #3
 800ec50:	f024 0403 	bic.w	r4, r4, #3
 800ec54:	42a0      	cmp	r0, r4
 800ec56:	d005      	beq.n	800ec64 <_malloc_r+0xa8>
 800ec58:	1a21      	subs	r1, r4, r0
 800ec5a:	4630      	mov	r0, r6
 800ec5c:	f000 fa9a 	bl	800f194 <_sbrk_r>
 800ec60:	3001      	adds	r0, #1
 800ec62:	d0cf      	beq.n	800ec04 <_malloc_r+0x48>
 800ec64:	6025      	str	r5, [r4, #0]
 800ec66:	e7db      	b.n	800ec20 <_malloc_r+0x64>
 800ec68:	2001ef9c 	.word	0x2001ef9c
 800ec6c:	2001efa0 	.word	0x2001efa0

0800ec70 <__ssputs_r>:
 800ec70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec74:	688e      	ldr	r6, [r1, #8]
 800ec76:	429e      	cmp	r6, r3
 800ec78:	4682      	mov	sl, r0
 800ec7a:	460c      	mov	r4, r1
 800ec7c:	4690      	mov	r8, r2
 800ec7e:	4699      	mov	r9, r3
 800ec80:	d837      	bhi.n	800ecf2 <__ssputs_r+0x82>
 800ec82:	898a      	ldrh	r2, [r1, #12]
 800ec84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec88:	d031      	beq.n	800ecee <__ssputs_r+0x7e>
 800ec8a:	6825      	ldr	r5, [r4, #0]
 800ec8c:	6909      	ldr	r1, [r1, #16]
 800ec8e:	1a6f      	subs	r7, r5, r1
 800ec90:	6965      	ldr	r5, [r4, #20]
 800ec92:	2302      	movs	r3, #2
 800ec94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec98:	fb95 f5f3 	sdiv	r5, r5, r3
 800ec9c:	f109 0301 	add.w	r3, r9, #1
 800eca0:	443b      	add	r3, r7
 800eca2:	429d      	cmp	r5, r3
 800eca4:	bf38      	it	cc
 800eca6:	461d      	movcc	r5, r3
 800eca8:	0553      	lsls	r3, r2, #21
 800ecaa:	d530      	bpl.n	800ed0e <__ssputs_r+0x9e>
 800ecac:	4629      	mov	r1, r5
 800ecae:	f7ff ff85 	bl	800ebbc <_malloc_r>
 800ecb2:	4606      	mov	r6, r0
 800ecb4:	b950      	cbnz	r0, 800eccc <__ssputs_r+0x5c>
 800ecb6:	230c      	movs	r3, #12
 800ecb8:	f8ca 3000 	str.w	r3, [sl]
 800ecbc:	89a3      	ldrh	r3, [r4, #12]
 800ecbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ecc2:	81a3      	strh	r3, [r4, #12]
 800ecc4:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eccc:	463a      	mov	r2, r7
 800ecce:	6921      	ldr	r1, [r4, #16]
 800ecd0:	f7fc f93e 	bl	800af50 <memcpy>
 800ecd4:	89a3      	ldrh	r3, [r4, #12]
 800ecd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ecda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecde:	81a3      	strh	r3, [r4, #12]
 800ece0:	6126      	str	r6, [r4, #16]
 800ece2:	6165      	str	r5, [r4, #20]
 800ece4:	443e      	add	r6, r7
 800ece6:	1bed      	subs	r5, r5, r7
 800ece8:	6026      	str	r6, [r4, #0]
 800ecea:	60a5      	str	r5, [r4, #8]
 800ecec:	464e      	mov	r6, r9
 800ecee:	454e      	cmp	r6, r9
 800ecf0:	d900      	bls.n	800ecf4 <__ssputs_r+0x84>
 800ecf2:	464e      	mov	r6, r9
 800ecf4:	4632      	mov	r2, r6
 800ecf6:	4641      	mov	r1, r8
 800ecf8:	6820      	ldr	r0, [r4, #0]
 800ecfa:	f000 fb13 	bl	800f324 <memmove>
 800ecfe:	68a3      	ldr	r3, [r4, #8]
 800ed00:	1b9b      	subs	r3, r3, r6
 800ed02:	60a3      	str	r3, [r4, #8]
 800ed04:	6823      	ldr	r3, [r4, #0]
 800ed06:	441e      	add	r6, r3
 800ed08:	6026      	str	r6, [r4, #0]
 800ed0a:	2000      	movs	r0, #0
 800ed0c:	e7dc      	b.n	800ecc8 <__ssputs_r+0x58>
 800ed0e:	462a      	mov	r2, r5
 800ed10:	f000 fb23 	bl	800f35a <_realloc_r>
 800ed14:	4606      	mov	r6, r0
 800ed16:	2800      	cmp	r0, #0
 800ed18:	d1e2      	bne.n	800ece0 <__ssputs_r+0x70>
 800ed1a:	6921      	ldr	r1, [r4, #16]
 800ed1c:	4650      	mov	r0, sl
 800ed1e:	f7ff feff 	bl	800eb20 <_free_r>
 800ed22:	e7c8      	b.n	800ecb6 <__ssputs_r+0x46>

0800ed24 <_svfiprintf_r>:
 800ed24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed28:	461d      	mov	r5, r3
 800ed2a:	898b      	ldrh	r3, [r1, #12]
 800ed2c:	061f      	lsls	r7, r3, #24
 800ed2e:	b09d      	sub	sp, #116	; 0x74
 800ed30:	4680      	mov	r8, r0
 800ed32:	460c      	mov	r4, r1
 800ed34:	4616      	mov	r6, r2
 800ed36:	d50f      	bpl.n	800ed58 <_svfiprintf_r+0x34>
 800ed38:	690b      	ldr	r3, [r1, #16]
 800ed3a:	b96b      	cbnz	r3, 800ed58 <_svfiprintf_r+0x34>
 800ed3c:	2140      	movs	r1, #64	; 0x40
 800ed3e:	f7ff ff3d 	bl	800ebbc <_malloc_r>
 800ed42:	6020      	str	r0, [r4, #0]
 800ed44:	6120      	str	r0, [r4, #16]
 800ed46:	b928      	cbnz	r0, 800ed54 <_svfiprintf_r+0x30>
 800ed48:	230c      	movs	r3, #12
 800ed4a:	f8c8 3000 	str.w	r3, [r8]
 800ed4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ed52:	e0c8      	b.n	800eee6 <_svfiprintf_r+0x1c2>
 800ed54:	2340      	movs	r3, #64	; 0x40
 800ed56:	6163      	str	r3, [r4, #20]
 800ed58:	2300      	movs	r3, #0
 800ed5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ed5c:	2320      	movs	r3, #32
 800ed5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed62:	2330      	movs	r3, #48	; 0x30
 800ed64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed68:	9503      	str	r5, [sp, #12]
 800ed6a:	f04f 0b01 	mov.w	fp, #1
 800ed6e:	4637      	mov	r7, r6
 800ed70:	463d      	mov	r5, r7
 800ed72:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ed76:	b10b      	cbz	r3, 800ed7c <_svfiprintf_r+0x58>
 800ed78:	2b25      	cmp	r3, #37	; 0x25
 800ed7a:	d13e      	bne.n	800edfa <_svfiprintf_r+0xd6>
 800ed7c:	ebb7 0a06 	subs.w	sl, r7, r6
 800ed80:	d00b      	beq.n	800ed9a <_svfiprintf_r+0x76>
 800ed82:	4653      	mov	r3, sl
 800ed84:	4632      	mov	r2, r6
 800ed86:	4621      	mov	r1, r4
 800ed88:	4640      	mov	r0, r8
 800ed8a:	f7ff ff71 	bl	800ec70 <__ssputs_r>
 800ed8e:	3001      	adds	r0, #1
 800ed90:	f000 80a4 	beq.w	800eedc <_svfiprintf_r+0x1b8>
 800ed94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed96:	4453      	add	r3, sl
 800ed98:	9309      	str	r3, [sp, #36]	; 0x24
 800ed9a:	783b      	ldrb	r3, [r7, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f000 809d 	beq.w	800eedc <_svfiprintf_r+0x1b8>
 800eda2:	2300      	movs	r3, #0
 800eda4:	f04f 32ff 	mov.w	r2, #4294967295
 800eda8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800edac:	9304      	str	r3, [sp, #16]
 800edae:	9307      	str	r3, [sp, #28]
 800edb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800edb4:	931a      	str	r3, [sp, #104]	; 0x68
 800edb6:	462f      	mov	r7, r5
 800edb8:	2205      	movs	r2, #5
 800edba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800edbe:	4850      	ldr	r0, [pc, #320]	; (800ef00 <_svfiprintf_r+0x1dc>)
 800edc0:	f7f1 fa0e 	bl	80001e0 <memchr>
 800edc4:	9b04      	ldr	r3, [sp, #16]
 800edc6:	b9d0      	cbnz	r0, 800edfe <_svfiprintf_r+0xda>
 800edc8:	06d9      	lsls	r1, r3, #27
 800edca:	bf44      	itt	mi
 800edcc:	2220      	movmi	r2, #32
 800edce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800edd2:	071a      	lsls	r2, r3, #28
 800edd4:	bf44      	itt	mi
 800edd6:	222b      	movmi	r2, #43	; 0x2b
 800edd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800eddc:	782a      	ldrb	r2, [r5, #0]
 800edde:	2a2a      	cmp	r2, #42	; 0x2a
 800ede0:	d015      	beq.n	800ee0e <_svfiprintf_r+0xea>
 800ede2:	9a07      	ldr	r2, [sp, #28]
 800ede4:	462f      	mov	r7, r5
 800ede6:	2000      	movs	r0, #0
 800ede8:	250a      	movs	r5, #10
 800edea:	4639      	mov	r1, r7
 800edec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edf0:	3b30      	subs	r3, #48	; 0x30
 800edf2:	2b09      	cmp	r3, #9
 800edf4:	d94d      	bls.n	800ee92 <_svfiprintf_r+0x16e>
 800edf6:	b1b8      	cbz	r0, 800ee28 <_svfiprintf_r+0x104>
 800edf8:	e00f      	b.n	800ee1a <_svfiprintf_r+0xf6>
 800edfa:	462f      	mov	r7, r5
 800edfc:	e7b8      	b.n	800ed70 <_svfiprintf_r+0x4c>
 800edfe:	4a40      	ldr	r2, [pc, #256]	; (800ef00 <_svfiprintf_r+0x1dc>)
 800ee00:	1a80      	subs	r0, r0, r2
 800ee02:	fa0b f000 	lsl.w	r0, fp, r0
 800ee06:	4318      	orrs	r0, r3
 800ee08:	9004      	str	r0, [sp, #16]
 800ee0a:	463d      	mov	r5, r7
 800ee0c:	e7d3      	b.n	800edb6 <_svfiprintf_r+0x92>
 800ee0e:	9a03      	ldr	r2, [sp, #12]
 800ee10:	1d11      	adds	r1, r2, #4
 800ee12:	6812      	ldr	r2, [r2, #0]
 800ee14:	9103      	str	r1, [sp, #12]
 800ee16:	2a00      	cmp	r2, #0
 800ee18:	db01      	blt.n	800ee1e <_svfiprintf_r+0xfa>
 800ee1a:	9207      	str	r2, [sp, #28]
 800ee1c:	e004      	b.n	800ee28 <_svfiprintf_r+0x104>
 800ee1e:	4252      	negs	r2, r2
 800ee20:	f043 0302 	orr.w	r3, r3, #2
 800ee24:	9207      	str	r2, [sp, #28]
 800ee26:	9304      	str	r3, [sp, #16]
 800ee28:	783b      	ldrb	r3, [r7, #0]
 800ee2a:	2b2e      	cmp	r3, #46	; 0x2e
 800ee2c:	d10c      	bne.n	800ee48 <_svfiprintf_r+0x124>
 800ee2e:	787b      	ldrb	r3, [r7, #1]
 800ee30:	2b2a      	cmp	r3, #42	; 0x2a
 800ee32:	d133      	bne.n	800ee9c <_svfiprintf_r+0x178>
 800ee34:	9b03      	ldr	r3, [sp, #12]
 800ee36:	1d1a      	adds	r2, r3, #4
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	9203      	str	r2, [sp, #12]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	bfb8      	it	lt
 800ee40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee44:	3702      	adds	r7, #2
 800ee46:	9305      	str	r3, [sp, #20]
 800ee48:	4d2e      	ldr	r5, [pc, #184]	; (800ef04 <_svfiprintf_r+0x1e0>)
 800ee4a:	7839      	ldrb	r1, [r7, #0]
 800ee4c:	2203      	movs	r2, #3
 800ee4e:	4628      	mov	r0, r5
 800ee50:	f7f1 f9c6 	bl	80001e0 <memchr>
 800ee54:	b138      	cbz	r0, 800ee66 <_svfiprintf_r+0x142>
 800ee56:	2340      	movs	r3, #64	; 0x40
 800ee58:	1b40      	subs	r0, r0, r5
 800ee5a:	fa03 f000 	lsl.w	r0, r3, r0
 800ee5e:	9b04      	ldr	r3, [sp, #16]
 800ee60:	4303      	orrs	r3, r0
 800ee62:	3701      	adds	r7, #1
 800ee64:	9304      	str	r3, [sp, #16]
 800ee66:	7839      	ldrb	r1, [r7, #0]
 800ee68:	4827      	ldr	r0, [pc, #156]	; (800ef08 <_svfiprintf_r+0x1e4>)
 800ee6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee6e:	2206      	movs	r2, #6
 800ee70:	1c7e      	adds	r6, r7, #1
 800ee72:	f7f1 f9b5 	bl	80001e0 <memchr>
 800ee76:	2800      	cmp	r0, #0
 800ee78:	d038      	beq.n	800eeec <_svfiprintf_r+0x1c8>
 800ee7a:	4b24      	ldr	r3, [pc, #144]	; (800ef0c <_svfiprintf_r+0x1e8>)
 800ee7c:	bb13      	cbnz	r3, 800eec4 <_svfiprintf_r+0x1a0>
 800ee7e:	9b03      	ldr	r3, [sp, #12]
 800ee80:	3307      	adds	r3, #7
 800ee82:	f023 0307 	bic.w	r3, r3, #7
 800ee86:	3308      	adds	r3, #8
 800ee88:	9303      	str	r3, [sp, #12]
 800ee8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee8c:	444b      	add	r3, r9
 800ee8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ee90:	e76d      	b.n	800ed6e <_svfiprintf_r+0x4a>
 800ee92:	fb05 3202 	mla	r2, r5, r2, r3
 800ee96:	2001      	movs	r0, #1
 800ee98:	460f      	mov	r7, r1
 800ee9a:	e7a6      	b.n	800edea <_svfiprintf_r+0xc6>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	3701      	adds	r7, #1
 800eea0:	9305      	str	r3, [sp, #20]
 800eea2:	4619      	mov	r1, r3
 800eea4:	250a      	movs	r5, #10
 800eea6:	4638      	mov	r0, r7
 800eea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eeac:	3a30      	subs	r2, #48	; 0x30
 800eeae:	2a09      	cmp	r2, #9
 800eeb0:	d903      	bls.n	800eeba <_svfiprintf_r+0x196>
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d0c8      	beq.n	800ee48 <_svfiprintf_r+0x124>
 800eeb6:	9105      	str	r1, [sp, #20]
 800eeb8:	e7c6      	b.n	800ee48 <_svfiprintf_r+0x124>
 800eeba:	fb05 2101 	mla	r1, r5, r1, r2
 800eebe:	2301      	movs	r3, #1
 800eec0:	4607      	mov	r7, r0
 800eec2:	e7f0      	b.n	800eea6 <_svfiprintf_r+0x182>
 800eec4:	ab03      	add	r3, sp, #12
 800eec6:	9300      	str	r3, [sp, #0]
 800eec8:	4622      	mov	r2, r4
 800eeca:	4b11      	ldr	r3, [pc, #68]	; (800ef10 <_svfiprintf_r+0x1ec>)
 800eecc:	a904      	add	r1, sp, #16
 800eece:	4640      	mov	r0, r8
 800eed0:	f7fc f8e6 	bl	800b0a0 <_printf_float>
 800eed4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eed8:	4681      	mov	r9, r0
 800eeda:	d1d6      	bne.n	800ee8a <_svfiprintf_r+0x166>
 800eedc:	89a3      	ldrh	r3, [r4, #12]
 800eede:	065b      	lsls	r3, r3, #25
 800eee0:	f53f af35 	bmi.w	800ed4e <_svfiprintf_r+0x2a>
 800eee4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eee6:	b01d      	add	sp, #116	; 0x74
 800eee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeec:	ab03      	add	r3, sp, #12
 800eeee:	9300      	str	r3, [sp, #0]
 800eef0:	4622      	mov	r2, r4
 800eef2:	4b07      	ldr	r3, [pc, #28]	; (800ef10 <_svfiprintf_r+0x1ec>)
 800eef4:	a904      	add	r1, sp, #16
 800eef6:	4640      	mov	r0, r8
 800eef8:	f7fc fb88 	bl	800b60c <_printf_i>
 800eefc:	e7ea      	b.n	800eed4 <_svfiprintf_r+0x1b0>
 800eefe:	bf00      	nop
 800ef00:	0800f67c 	.word	0x0800f67c
 800ef04:	0800f682 	.word	0x0800f682
 800ef08:	0800f686 	.word	0x0800f686
 800ef0c:	0800b0a1 	.word	0x0800b0a1
 800ef10:	0800ec71 	.word	0x0800ec71

0800ef14 <__sfputc_r>:
 800ef14:	6893      	ldr	r3, [r2, #8]
 800ef16:	3b01      	subs	r3, #1
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	b410      	push	{r4}
 800ef1c:	6093      	str	r3, [r2, #8]
 800ef1e:	da08      	bge.n	800ef32 <__sfputc_r+0x1e>
 800ef20:	6994      	ldr	r4, [r2, #24]
 800ef22:	42a3      	cmp	r3, r4
 800ef24:	db01      	blt.n	800ef2a <__sfputc_r+0x16>
 800ef26:	290a      	cmp	r1, #10
 800ef28:	d103      	bne.n	800ef32 <__sfputc_r+0x1e>
 800ef2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef2e:	f7fd bdb1 	b.w	800ca94 <__swbuf_r>
 800ef32:	6813      	ldr	r3, [r2, #0]
 800ef34:	1c58      	adds	r0, r3, #1
 800ef36:	6010      	str	r0, [r2, #0]
 800ef38:	7019      	strb	r1, [r3, #0]
 800ef3a:	4608      	mov	r0, r1
 800ef3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <__sfputs_r>:
 800ef42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef44:	4606      	mov	r6, r0
 800ef46:	460f      	mov	r7, r1
 800ef48:	4614      	mov	r4, r2
 800ef4a:	18d5      	adds	r5, r2, r3
 800ef4c:	42ac      	cmp	r4, r5
 800ef4e:	d101      	bne.n	800ef54 <__sfputs_r+0x12>
 800ef50:	2000      	movs	r0, #0
 800ef52:	e007      	b.n	800ef64 <__sfputs_r+0x22>
 800ef54:	463a      	mov	r2, r7
 800ef56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	f7ff ffda 	bl	800ef14 <__sfputc_r>
 800ef60:	1c43      	adds	r3, r0, #1
 800ef62:	d1f3      	bne.n	800ef4c <__sfputs_r+0xa>
 800ef64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef68 <_vfiprintf_r>:
 800ef68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef6c:	460c      	mov	r4, r1
 800ef6e:	b09d      	sub	sp, #116	; 0x74
 800ef70:	4617      	mov	r7, r2
 800ef72:	461d      	mov	r5, r3
 800ef74:	4606      	mov	r6, r0
 800ef76:	b118      	cbz	r0, 800ef80 <_vfiprintf_r+0x18>
 800ef78:	6983      	ldr	r3, [r0, #24]
 800ef7a:	b90b      	cbnz	r3, 800ef80 <_vfiprintf_r+0x18>
 800ef7c:	f7fe fd80 	bl	800da80 <__sinit>
 800ef80:	4b7c      	ldr	r3, [pc, #496]	; (800f174 <_vfiprintf_r+0x20c>)
 800ef82:	429c      	cmp	r4, r3
 800ef84:	d158      	bne.n	800f038 <_vfiprintf_r+0xd0>
 800ef86:	6874      	ldr	r4, [r6, #4]
 800ef88:	89a3      	ldrh	r3, [r4, #12]
 800ef8a:	0718      	lsls	r0, r3, #28
 800ef8c:	d55e      	bpl.n	800f04c <_vfiprintf_r+0xe4>
 800ef8e:	6923      	ldr	r3, [r4, #16]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d05b      	beq.n	800f04c <_vfiprintf_r+0xe4>
 800ef94:	2300      	movs	r3, #0
 800ef96:	9309      	str	r3, [sp, #36]	; 0x24
 800ef98:	2320      	movs	r3, #32
 800ef9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef9e:	2330      	movs	r3, #48	; 0x30
 800efa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800efa4:	9503      	str	r5, [sp, #12]
 800efa6:	f04f 0b01 	mov.w	fp, #1
 800efaa:	46b8      	mov	r8, r7
 800efac:	4645      	mov	r5, r8
 800efae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800efb2:	b10b      	cbz	r3, 800efb8 <_vfiprintf_r+0x50>
 800efb4:	2b25      	cmp	r3, #37	; 0x25
 800efb6:	d154      	bne.n	800f062 <_vfiprintf_r+0xfa>
 800efb8:	ebb8 0a07 	subs.w	sl, r8, r7
 800efbc:	d00b      	beq.n	800efd6 <_vfiprintf_r+0x6e>
 800efbe:	4653      	mov	r3, sl
 800efc0:	463a      	mov	r2, r7
 800efc2:	4621      	mov	r1, r4
 800efc4:	4630      	mov	r0, r6
 800efc6:	f7ff ffbc 	bl	800ef42 <__sfputs_r>
 800efca:	3001      	adds	r0, #1
 800efcc:	f000 80c2 	beq.w	800f154 <_vfiprintf_r+0x1ec>
 800efd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efd2:	4453      	add	r3, sl
 800efd4:	9309      	str	r3, [sp, #36]	; 0x24
 800efd6:	f898 3000 	ldrb.w	r3, [r8]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	f000 80ba 	beq.w	800f154 <_vfiprintf_r+0x1ec>
 800efe0:	2300      	movs	r3, #0
 800efe2:	f04f 32ff 	mov.w	r2, #4294967295
 800efe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efea:	9304      	str	r3, [sp, #16]
 800efec:	9307      	str	r3, [sp, #28]
 800efee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eff2:	931a      	str	r3, [sp, #104]	; 0x68
 800eff4:	46a8      	mov	r8, r5
 800eff6:	2205      	movs	r2, #5
 800eff8:	f818 1b01 	ldrb.w	r1, [r8], #1
 800effc:	485e      	ldr	r0, [pc, #376]	; (800f178 <_vfiprintf_r+0x210>)
 800effe:	f7f1 f8ef 	bl	80001e0 <memchr>
 800f002:	9b04      	ldr	r3, [sp, #16]
 800f004:	bb78      	cbnz	r0, 800f066 <_vfiprintf_r+0xfe>
 800f006:	06d9      	lsls	r1, r3, #27
 800f008:	bf44      	itt	mi
 800f00a:	2220      	movmi	r2, #32
 800f00c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f010:	071a      	lsls	r2, r3, #28
 800f012:	bf44      	itt	mi
 800f014:	222b      	movmi	r2, #43	; 0x2b
 800f016:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f01a:	782a      	ldrb	r2, [r5, #0]
 800f01c:	2a2a      	cmp	r2, #42	; 0x2a
 800f01e:	d02a      	beq.n	800f076 <_vfiprintf_r+0x10e>
 800f020:	9a07      	ldr	r2, [sp, #28]
 800f022:	46a8      	mov	r8, r5
 800f024:	2000      	movs	r0, #0
 800f026:	250a      	movs	r5, #10
 800f028:	4641      	mov	r1, r8
 800f02a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f02e:	3b30      	subs	r3, #48	; 0x30
 800f030:	2b09      	cmp	r3, #9
 800f032:	d969      	bls.n	800f108 <_vfiprintf_r+0x1a0>
 800f034:	b360      	cbz	r0, 800f090 <_vfiprintf_r+0x128>
 800f036:	e024      	b.n	800f082 <_vfiprintf_r+0x11a>
 800f038:	4b50      	ldr	r3, [pc, #320]	; (800f17c <_vfiprintf_r+0x214>)
 800f03a:	429c      	cmp	r4, r3
 800f03c:	d101      	bne.n	800f042 <_vfiprintf_r+0xda>
 800f03e:	68b4      	ldr	r4, [r6, #8]
 800f040:	e7a2      	b.n	800ef88 <_vfiprintf_r+0x20>
 800f042:	4b4f      	ldr	r3, [pc, #316]	; (800f180 <_vfiprintf_r+0x218>)
 800f044:	429c      	cmp	r4, r3
 800f046:	bf08      	it	eq
 800f048:	68f4      	ldreq	r4, [r6, #12]
 800f04a:	e79d      	b.n	800ef88 <_vfiprintf_r+0x20>
 800f04c:	4621      	mov	r1, r4
 800f04e:	4630      	mov	r0, r6
 800f050:	f7fd fd72 	bl	800cb38 <__swsetup_r>
 800f054:	2800      	cmp	r0, #0
 800f056:	d09d      	beq.n	800ef94 <_vfiprintf_r+0x2c>
 800f058:	f04f 30ff 	mov.w	r0, #4294967295
 800f05c:	b01d      	add	sp, #116	; 0x74
 800f05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f062:	46a8      	mov	r8, r5
 800f064:	e7a2      	b.n	800efac <_vfiprintf_r+0x44>
 800f066:	4a44      	ldr	r2, [pc, #272]	; (800f178 <_vfiprintf_r+0x210>)
 800f068:	1a80      	subs	r0, r0, r2
 800f06a:	fa0b f000 	lsl.w	r0, fp, r0
 800f06e:	4318      	orrs	r0, r3
 800f070:	9004      	str	r0, [sp, #16]
 800f072:	4645      	mov	r5, r8
 800f074:	e7be      	b.n	800eff4 <_vfiprintf_r+0x8c>
 800f076:	9a03      	ldr	r2, [sp, #12]
 800f078:	1d11      	adds	r1, r2, #4
 800f07a:	6812      	ldr	r2, [r2, #0]
 800f07c:	9103      	str	r1, [sp, #12]
 800f07e:	2a00      	cmp	r2, #0
 800f080:	db01      	blt.n	800f086 <_vfiprintf_r+0x11e>
 800f082:	9207      	str	r2, [sp, #28]
 800f084:	e004      	b.n	800f090 <_vfiprintf_r+0x128>
 800f086:	4252      	negs	r2, r2
 800f088:	f043 0302 	orr.w	r3, r3, #2
 800f08c:	9207      	str	r2, [sp, #28]
 800f08e:	9304      	str	r3, [sp, #16]
 800f090:	f898 3000 	ldrb.w	r3, [r8]
 800f094:	2b2e      	cmp	r3, #46	; 0x2e
 800f096:	d10e      	bne.n	800f0b6 <_vfiprintf_r+0x14e>
 800f098:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f09c:	2b2a      	cmp	r3, #42	; 0x2a
 800f09e:	d138      	bne.n	800f112 <_vfiprintf_r+0x1aa>
 800f0a0:	9b03      	ldr	r3, [sp, #12]
 800f0a2:	1d1a      	adds	r2, r3, #4
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	9203      	str	r2, [sp, #12]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	bfb8      	it	lt
 800f0ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0b0:	f108 0802 	add.w	r8, r8, #2
 800f0b4:	9305      	str	r3, [sp, #20]
 800f0b6:	4d33      	ldr	r5, [pc, #204]	; (800f184 <_vfiprintf_r+0x21c>)
 800f0b8:	f898 1000 	ldrb.w	r1, [r8]
 800f0bc:	2203      	movs	r2, #3
 800f0be:	4628      	mov	r0, r5
 800f0c0:	f7f1 f88e 	bl	80001e0 <memchr>
 800f0c4:	b140      	cbz	r0, 800f0d8 <_vfiprintf_r+0x170>
 800f0c6:	2340      	movs	r3, #64	; 0x40
 800f0c8:	1b40      	subs	r0, r0, r5
 800f0ca:	fa03 f000 	lsl.w	r0, r3, r0
 800f0ce:	9b04      	ldr	r3, [sp, #16]
 800f0d0:	4303      	orrs	r3, r0
 800f0d2:	f108 0801 	add.w	r8, r8, #1
 800f0d6:	9304      	str	r3, [sp, #16]
 800f0d8:	f898 1000 	ldrb.w	r1, [r8]
 800f0dc:	482a      	ldr	r0, [pc, #168]	; (800f188 <_vfiprintf_r+0x220>)
 800f0de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f0e2:	2206      	movs	r2, #6
 800f0e4:	f108 0701 	add.w	r7, r8, #1
 800f0e8:	f7f1 f87a 	bl	80001e0 <memchr>
 800f0ec:	2800      	cmp	r0, #0
 800f0ee:	d037      	beq.n	800f160 <_vfiprintf_r+0x1f8>
 800f0f0:	4b26      	ldr	r3, [pc, #152]	; (800f18c <_vfiprintf_r+0x224>)
 800f0f2:	bb1b      	cbnz	r3, 800f13c <_vfiprintf_r+0x1d4>
 800f0f4:	9b03      	ldr	r3, [sp, #12]
 800f0f6:	3307      	adds	r3, #7
 800f0f8:	f023 0307 	bic.w	r3, r3, #7
 800f0fc:	3308      	adds	r3, #8
 800f0fe:	9303      	str	r3, [sp, #12]
 800f100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f102:	444b      	add	r3, r9
 800f104:	9309      	str	r3, [sp, #36]	; 0x24
 800f106:	e750      	b.n	800efaa <_vfiprintf_r+0x42>
 800f108:	fb05 3202 	mla	r2, r5, r2, r3
 800f10c:	2001      	movs	r0, #1
 800f10e:	4688      	mov	r8, r1
 800f110:	e78a      	b.n	800f028 <_vfiprintf_r+0xc0>
 800f112:	2300      	movs	r3, #0
 800f114:	f108 0801 	add.w	r8, r8, #1
 800f118:	9305      	str	r3, [sp, #20]
 800f11a:	4619      	mov	r1, r3
 800f11c:	250a      	movs	r5, #10
 800f11e:	4640      	mov	r0, r8
 800f120:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f124:	3a30      	subs	r2, #48	; 0x30
 800f126:	2a09      	cmp	r2, #9
 800f128:	d903      	bls.n	800f132 <_vfiprintf_r+0x1ca>
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d0c3      	beq.n	800f0b6 <_vfiprintf_r+0x14e>
 800f12e:	9105      	str	r1, [sp, #20]
 800f130:	e7c1      	b.n	800f0b6 <_vfiprintf_r+0x14e>
 800f132:	fb05 2101 	mla	r1, r5, r1, r2
 800f136:	2301      	movs	r3, #1
 800f138:	4680      	mov	r8, r0
 800f13a:	e7f0      	b.n	800f11e <_vfiprintf_r+0x1b6>
 800f13c:	ab03      	add	r3, sp, #12
 800f13e:	9300      	str	r3, [sp, #0]
 800f140:	4622      	mov	r2, r4
 800f142:	4b13      	ldr	r3, [pc, #76]	; (800f190 <_vfiprintf_r+0x228>)
 800f144:	a904      	add	r1, sp, #16
 800f146:	4630      	mov	r0, r6
 800f148:	f7fb ffaa 	bl	800b0a0 <_printf_float>
 800f14c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f150:	4681      	mov	r9, r0
 800f152:	d1d5      	bne.n	800f100 <_vfiprintf_r+0x198>
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	065b      	lsls	r3, r3, #25
 800f158:	f53f af7e 	bmi.w	800f058 <_vfiprintf_r+0xf0>
 800f15c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f15e:	e77d      	b.n	800f05c <_vfiprintf_r+0xf4>
 800f160:	ab03      	add	r3, sp, #12
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	4622      	mov	r2, r4
 800f166:	4b0a      	ldr	r3, [pc, #40]	; (800f190 <_vfiprintf_r+0x228>)
 800f168:	a904      	add	r1, sp, #16
 800f16a:	4630      	mov	r0, r6
 800f16c:	f7fc fa4e 	bl	800b60c <_printf_i>
 800f170:	e7ec      	b.n	800f14c <_vfiprintf_r+0x1e4>
 800f172:	bf00      	nop
 800f174:	0800f530 	.word	0x0800f530
 800f178:	0800f67c 	.word	0x0800f67c
 800f17c:	0800f550 	.word	0x0800f550
 800f180:	0800f510 	.word	0x0800f510
 800f184:	0800f682 	.word	0x0800f682
 800f188:	0800f686 	.word	0x0800f686
 800f18c:	0800b0a1 	.word	0x0800b0a1
 800f190:	0800ef43 	.word	0x0800ef43

0800f194 <_sbrk_r>:
 800f194:	b538      	push	{r3, r4, r5, lr}
 800f196:	4c06      	ldr	r4, [pc, #24]	; (800f1b0 <_sbrk_r+0x1c>)
 800f198:	2300      	movs	r3, #0
 800f19a:	4605      	mov	r5, r0
 800f19c:	4608      	mov	r0, r1
 800f19e:	6023      	str	r3, [r4, #0]
 800f1a0:	f7f7 fb34 	bl	800680c <_sbrk>
 800f1a4:	1c43      	adds	r3, r0, #1
 800f1a6:	d102      	bne.n	800f1ae <_sbrk_r+0x1a>
 800f1a8:	6823      	ldr	r3, [r4, #0]
 800f1aa:	b103      	cbz	r3, 800f1ae <_sbrk_r+0x1a>
 800f1ac:	602b      	str	r3, [r5, #0]
 800f1ae:	bd38      	pop	{r3, r4, r5, pc}
 800f1b0:	2001f4dc 	.word	0x2001f4dc

0800f1b4 <__sread>:
 800f1b4:	b510      	push	{r4, lr}
 800f1b6:	460c      	mov	r4, r1
 800f1b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1bc:	f000 f8f4 	bl	800f3a8 <_read_r>
 800f1c0:	2800      	cmp	r0, #0
 800f1c2:	bfab      	itete	ge
 800f1c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f1c6:	89a3      	ldrhlt	r3, [r4, #12]
 800f1c8:	181b      	addge	r3, r3, r0
 800f1ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f1ce:	bfac      	ite	ge
 800f1d0:	6563      	strge	r3, [r4, #84]	; 0x54
 800f1d2:	81a3      	strhlt	r3, [r4, #12]
 800f1d4:	bd10      	pop	{r4, pc}

0800f1d6 <__swrite>:
 800f1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1da:	461f      	mov	r7, r3
 800f1dc:	898b      	ldrh	r3, [r1, #12]
 800f1de:	05db      	lsls	r3, r3, #23
 800f1e0:	4605      	mov	r5, r0
 800f1e2:	460c      	mov	r4, r1
 800f1e4:	4616      	mov	r6, r2
 800f1e6:	d505      	bpl.n	800f1f4 <__swrite+0x1e>
 800f1e8:	2302      	movs	r3, #2
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1f0:	f000 f886 	bl	800f300 <_lseek_r>
 800f1f4:	89a3      	ldrh	r3, [r4, #12]
 800f1f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1fe:	81a3      	strh	r3, [r4, #12]
 800f200:	4632      	mov	r2, r6
 800f202:	463b      	mov	r3, r7
 800f204:	4628      	mov	r0, r5
 800f206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f20a:	f000 b835 	b.w	800f278 <_write_r>

0800f20e <__sseek>:
 800f20e:	b510      	push	{r4, lr}
 800f210:	460c      	mov	r4, r1
 800f212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f216:	f000 f873 	bl	800f300 <_lseek_r>
 800f21a:	1c43      	adds	r3, r0, #1
 800f21c:	89a3      	ldrh	r3, [r4, #12]
 800f21e:	bf15      	itete	ne
 800f220:	6560      	strne	r0, [r4, #84]	; 0x54
 800f222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f22a:	81a3      	strheq	r3, [r4, #12]
 800f22c:	bf18      	it	ne
 800f22e:	81a3      	strhne	r3, [r4, #12]
 800f230:	bd10      	pop	{r4, pc}

0800f232 <__sclose>:
 800f232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f236:	f000 b831 	b.w	800f29c <_close_r>

0800f23a <strncmp>:
 800f23a:	b510      	push	{r4, lr}
 800f23c:	b16a      	cbz	r2, 800f25a <strncmp+0x20>
 800f23e:	3901      	subs	r1, #1
 800f240:	1884      	adds	r4, r0, r2
 800f242:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f246:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d103      	bne.n	800f256 <strncmp+0x1c>
 800f24e:	42a0      	cmp	r0, r4
 800f250:	d001      	beq.n	800f256 <strncmp+0x1c>
 800f252:	2b00      	cmp	r3, #0
 800f254:	d1f5      	bne.n	800f242 <strncmp+0x8>
 800f256:	1a98      	subs	r0, r3, r2
 800f258:	bd10      	pop	{r4, pc}
 800f25a:	4610      	mov	r0, r2
 800f25c:	e7fc      	b.n	800f258 <strncmp+0x1e>

0800f25e <__ascii_wctomb>:
 800f25e:	b149      	cbz	r1, 800f274 <__ascii_wctomb+0x16>
 800f260:	2aff      	cmp	r2, #255	; 0xff
 800f262:	bf85      	ittet	hi
 800f264:	238a      	movhi	r3, #138	; 0x8a
 800f266:	6003      	strhi	r3, [r0, #0]
 800f268:	700a      	strbls	r2, [r1, #0]
 800f26a:	f04f 30ff 	movhi.w	r0, #4294967295
 800f26e:	bf98      	it	ls
 800f270:	2001      	movls	r0, #1
 800f272:	4770      	bx	lr
 800f274:	4608      	mov	r0, r1
 800f276:	4770      	bx	lr

0800f278 <_write_r>:
 800f278:	b538      	push	{r3, r4, r5, lr}
 800f27a:	4c07      	ldr	r4, [pc, #28]	; (800f298 <_write_r+0x20>)
 800f27c:	4605      	mov	r5, r0
 800f27e:	4608      	mov	r0, r1
 800f280:	4611      	mov	r1, r2
 800f282:	2200      	movs	r2, #0
 800f284:	6022      	str	r2, [r4, #0]
 800f286:	461a      	mov	r2, r3
 800f288:	f7f7 fa6f 	bl	800676a <_write>
 800f28c:	1c43      	adds	r3, r0, #1
 800f28e:	d102      	bne.n	800f296 <_write_r+0x1e>
 800f290:	6823      	ldr	r3, [r4, #0]
 800f292:	b103      	cbz	r3, 800f296 <_write_r+0x1e>
 800f294:	602b      	str	r3, [r5, #0]
 800f296:	bd38      	pop	{r3, r4, r5, pc}
 800f298:	2001f4dc 	.word	0x2001f4dc

0800f29c <_close_r>:
 800f29c:	b538      	push	{r3, r4, r5, lr}
 800f29e:	4c06      	ldr	r4, [pc, #24]	; (800f2b8 <_close_r+0x1c>)
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	4605      	mov	r5, r0
 800f2a4:	4608      	mov	r0, r1
 800f2a6:	6023      	str	r3, [r4, #0]
 800f2a8:	f7f7 fa7b 	bl	80067a2 <_close>
 800f2ac:	1c43      	adds	r3, r0, #1
 800f2ae:	d102      	bne.n	800f2b6 <_close_r+0x1a>
 800f2b0:	6823      	ldr	r3, [r4, #0]
 800f2b2:	b103      	cbz	r3, 800f2b6 <_close_r+0x1a>
 800f2b4:	602b      	str	r3, [r5, #0]
 800f2b6:	bd38      	pop	{r3, r4, r5, pc}
 800f2b8:	2001f4dc 	.word	0x2001f4dc

0800f2bc <_fstat_r>:
 800f2bc:	b538      	push	{r3, r4, r5, lr}
 800f2be:	4c07      	ldr	r4, [pc, #28]	; (800f2dc <_fstat_r+0x20>)
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	4605      	mov	r5, r0
 800f2c4:	4608      	mov	r0, r1
 800f2c6:	4611      	mov	r1, r2
 800f2c8:	6023      	str	r3, [r4, #0]
 800f2ca:	f7f7 fa76 	bl	80067ba <_fstat>
 800f2ce:	1c43      	adds	r3, r0, #1
 800f2d0:	d102      	bne.n	800f2d8 <_fstat_r+0x1c>
 800f2d2:	6823      	ldr	r3, [r4, #0]
 800f2d4:	b103      	cbz	r3, 800f2d8 <_fstat_r+0x1c>
 800f2d6:	602b      	str	r3, [r5, #0]
 800f2d8:	bd38      	pop	{r3, r4, r5, pc}
 800f2da:	bf00      	nop
 800f2dc:	2001f4dc 	.word	0x2001f4dc

0800f2e0 <_isatty_r>:
 800f2e0:	b538      	push	{r3, r4, r5, lr}
 800f2e2:	4c06      	ldr	r4, [pc, #24]	; (800f2fc <_isatty_r+0x1c>)
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	4605      	mov	r5, r0
 800f2e8:	4608      	mov	r0, r1
 800f2ea:	6023      	str	r3, [r4, #0]
 800f2ec:	f7f7 fa75 	bl	80067da <_isatty>
 800f2f0:	1c43      	adds	r3, r0, #1
 800f2f2:	d102      	bne.n	800f2fa <_isatty_r+0x1a>
 800f2f4:	6823      	ldr	r3, [r4, #0]
 800f2f6:	b103      	cbz	r3, 800f2fa <_isatty_r+0x1a>
 800f2f8:	602b      	str	r3, [r5, #0]
 800f2fa:	bd38      	pop	{r3, r4, r5, pc}
 800f2fc:	2001f4dc 	.word	0x2001f4dc

0800f300 <_lseek_r>:
 800f300:	b538      	push	{r3, r4, r5, lr}
 800f302:	4c07      	ldr	r4, [pc, #28]	; (800f320 <_lseek_r+0x20>)
 800f304:	4605      	mov	r5, r0
 800f306:	4608      	mov	r0, r1
 800f308:	4611      	mov	r1, r2
 800f30a:	2200      	movs	r2, #0
 800f30c:	6022      	str	r2, [r4, #0]
 800f30e:	461a      	mov	r2, r3
 800f310:	f7f7 fa6e 	bl	80067f0 <_lseek>
 800f314:	1c43      	adds	r3, r0, #1
 800f316:	d102      	bne.n	800f31e <_lseek_r+0x1e>
 800f318:	6823      	ldr	r3, [r4, #0]
 800f31a:	b103      	cbz	r3, 800f31e <_lseek_r+0x1e>
 800f31c:	602b      	str	r3, [r5, #0]
 800f31e:	bd38      	pop	{r3, r4, r5, pc}
 800f320:	2001f4dc 	.word	0x2001f4dc

0800f324 <memmove>:
 800f324:	4288      	cmp	r0, r1
 800f326:	b510      	push	{r4, lr}
 800f328:	eb01 0302 	add.w	r3, r1, r2
 800f32c:	d807      	bhi.n	800f33e <memmove+0x1a>
 800f32e:	1e42      	subs	r2, r0, #1
 800f330:	4299      	cmp	r1, r3
 800f332:	d00a      	beq.n	800f34a <memmove+0x26>
 800f334:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f338:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f33c:	e7f8      	b.n	800f330 <memmove+0xc>
 800f33e:	4283      	cmp	r3, r0
 800f340:	d9f5      	bls.n	800f32e <memmove+0xa>
 800f342:	1881      	adds	r1, r0, r2
 800f344:	1ad2      	subs	r2, r2, r3
 800f346:	42d3      	cmn	r3, r2
 800f348:	d100      	bne.n	800f34c <memmove+0x28>
 800f34a:	bd10      	pop	{r4, pc}
 800f34c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f350:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f354:	e7f7      	b.n	800f346 <memmove+0x22>

0800f356 <__malloc_lock>:
 800f356:	4770      	bx	lr

0800f358 <__malloc_unlock>:
 800f358:	4770      	bx	lr

0800f35a <_realloc_r>:
 800f35a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f35c:	4607      	mov	r7, r0
 800f35e:	4614      	mov	r4, r2
 800f360:	460e      	mov	r6, r1
 800f362:	b921      	cbnz	r1, 800f36e <_realloc_r+0x14>
 800f364:	4611      	mov	r1, r2
 800f366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f36a:	f7ff bc27 	b.w	800ebbc <_malloc_r>
 800f36e:	b922      	cbnz	r2, 800f37a <_realloc_r+0x20>
 800f370:	f7ff fbd6 	bl	800eb20 <_free_r>
 800f374:	4625      	mov	r5, r4
 800f376:	4628      	mov	r0, r5
 800f378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f37a:	f000 f827 	bl	800f3cc <_malloc_usable_size_r>
 800f37e:	42a0      	cmp	r0, r4
 800f380:	d20f      	bcs.n	800f3a2 <_realloc_r+0x48>
 800f382:	4621      	mov	r1, r4
 800f384:	4638      	mov	r0, r7
 800f386:	f7ff fc19 	bl	800ebbc <_malloc_r>
 800f38a:	4605      	mov	r5, r0
 800f38c:	2800      	cmp	r0, #0
 800f38e:	d0f2      	beq.n	800f376 <_realloc_r+0x1c>
 800f390:	4631      	mov	r1, r6
 800f392:	4622      	mov	r2, r4
 800f394:	f7fb fddc 	bl	800af50 <memcpy>
 800f398:	4631      	mov	r1, r6
 800f39a:	4638      	mov	r0, r7
 800f39c:	f7ff fbc0 	bl	800eb20 <_free_r>
 800f3a0:	e7e9      	b.n	800f376 <_realloc_r+0x1c>
 800f3a2:	4635      	mov	r5, r6
 800f3a4:	e7e7      	b.n	800f376 <_realloc_r+0x1c>
	...

0800f3a8 <_read_r>:
 800f3a8:	b538      	push	{r3, r4, r5, lr}
 800f3aa:	4c07      	ldr	r4, [pc, #28]	; (800f3c8 <_read_r+0x20>)
 800f3ac:	4605      	mov	r5, r0
 800f3ae:	4608      	mov	r0, r1
 800f3b0:	4611      	mov	r1, r2
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	6022      	str	r2, [r4, #0]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	f7f7 f9ba 	bl	8006730 <_read>
 800f3bc:	1c43      	adds	r3, r0, #1
 800f3be:	d102      	bne.n	800f3c6 <_read_r+0x1e>
 800f3c0:	6823      	ldr	r3, [r4, #0]
 800f3c2:	b103      	cbz	r3, 800f3c6 <_read_r+0x1e>
 800f3c4:	602b      	str	r3, [r5, #0]
 800f3c6:	bd38      	pop	{r3, r4, r5, pc}
 800f3c8:	2001f4dc 	.word	0x2001f4dc

0800f3cc <_malloc_usable_size_r>:
 800f3cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3d0:	1f18      	subs	r0, r3, #4
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	bfbc      	itt	lt
 800f3d6:	580b      	ldrlt	r3, [r1, r0]
 800f3d8:	18c0      	addlt	r0, r0, r3
 800f3da:	4770      	bx	lr

0800f3dc <_init>:
 800f3dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3de:	bf00      	nop
 800f3e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3e2:	bc08      	pop	{r3}
 800f3e4:	469e      	mov	lr, r3
 800f3e6:	4770      	bx	lr

0800f3e8 <_fini>:
 800f3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ea:	bf00      	nop
 800f3ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ee:	bc08      	pop	{r3}
 800f3f0:	469e      	mov	lr, r3
 800f3f2:	4770      	bx	lr


robotore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bec4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  0800c058  0800c058  0001c058  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c330  0800c330  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800c330  0800c330  0001c330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c338  0800c338  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c338  0800c338  0001c338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c33c  0800c33c  0001c33c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800c340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006a8  20000210  0800c550  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b8  0800c550  000208b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   000155df  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030f7  00000000  00000000  0003581f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b8  00000000  00000000  00038918  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001338  00000000  00000000  00039dd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021d3d  00000000  00000000  0003b108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011ccd  00000000  00000000  0005ce45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c8354  00000000  00000000  0006eb12  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136e66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006324  00000000  00000000  00136ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c03c 	.word	0x0800c03c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800c03c 	.word	0x0800c03c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <initEncoder>:
static float distance_cross_line_ignore;
static float distance_side_line_ignore;
static float speed_cnt;

void initEncoder(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);	//encoder start
 8000f8c:	213c      	movs	r1, #60	; 0x3c
 8000f8e:	4808      	ldr	r0, [pc, #32]	; (8000fb0 <initEncoder+0x28>)
 8000f90:	f006 f99a 	bl	80072c8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);	//encoder start
 8000f94:	213c      	movs	r1, #60	; 0x3c
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <initEncoder+0x2c>)
 8000f98:	f006 f996 	bl	80072c8 <HAL_TIM_Encoder_Start>
	TIM3 -> CNT = CNT_OFFSET;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <initEncoder+0x30>)
 8000f9e:	f242 7210 	movw	r2, #10000	; 0x2710
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <initEncoder+0x34>)
 8000fa6:	f242 7210 	movw	r2, #10000	; 0x2710
 8000faa:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000418 	.word	0x20000418
 8000fb4:	200003d8 	.word	0x200003d8
 8000fb8:	40000400 	.word	0x40000400
 8000fbc:	40000800 	.word	0x40000800

08000fc0 <updateEncoderCnt>:

void updateEncoderCnt(void)
{
 8000fc0:	b598      	push	{r3, r4, r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	enc_l_cnt = TIM3 -> CNT - CNT_OFFSET;
 8000fc4:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <updateEncoderCnt+0x138>)
 8000fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8000fce:	3b10      	subs	r3, #16
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b21a      	sxth	r2, r3
 8000fd4:	4b49      	ldr	r3, [pc, #292]	; (80010fc <updateEncoderCnt+0x13c>)
 8000fd6:	801a      	strh	r2, [r3, #0]
	enc_r_cnt = CNT_OFFSET - TIM4 -> CNT;
 8000fd8:	4b49      	ldr	r3, [pc, #292]	; (8001100 <updateEncoderCnt+0x140>)
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8000fe2:	3310      	adds	r3, #16
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b21a      	sxth	r2, r3
 8000fe8:	4b46      	ldr	r3, [pc, #280]	; (8001104 <updateEncoderCnt+0x144>)
 8000fea:	801a      	strh	r2, [r3, #0]

	enc_l_total += enc_l_cnt;
 8000fec:	4b46      	ldr	r3, [pc, #280]	; (8001108 <updateEncoderCnt+0x148>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b41      	ldr	r3, [pc, #260]	; (80010fc <updateEncoderCnt+0x13c>)
 8000ff6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	4413      	add	r3, r2
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	b21a      	sxth	r2, r3
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <updateEncoderCnt+0x148>)
 8001004:	801a      	strh	r2, [r3, #0]
	enc_r_total += enc_r_cnt;
 8001006:	4b41      	ldr	r3, [pc, #260]	; (800110c <updateEncoderCnt+0x14c>)
 8001008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <updateEncoderCnt+0x144>)
 8001010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001014:	b29b      	uxth	r3, r3
 8001016:	4413      	add	r3, r2
 8001018:	b29b      	uxth	r3, r3
 800101a:	b21a      	sxth	r2, r3
 800101c:	4b3b      	ldr	r3, [pc, #236]	; (800110c <updateEncoderCnt+0x14c>)
 800101e:	801a      	strh	r2, [r3, #0]
	//enc_total = (enc_l_total + enc_r_total) / 2;

	distance_1ms = DISTANCE_PER_CNT * (enc_l_cnt + enc_r_cnt) / 2;
 8001020:	4b36      	ldr	r3, [pc, #216]	; (80010fc <updateEncoderCnt+0x13c>)
 8001022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001026:	461a      	mov	r2, r3
 8001028:	4b36      	ldr	r3, [pc, #216]	; (8001104 <updateEncoderCnt+0x144>)
 800102a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102e:	4413      	add	r3, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fa77 	bl	8000524 <__aeabi_i2d>
 8001036:	a32e      	add	r3, pc, #184	; (adr r3, 80010f0 <updateEncoderCnt+0x130>)
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	f7ff fadc 	bl	80005f8 <__aeabi_dmul>
 8001040:	4603      	mov	r3, r0
 8001042:	460c      	mov	r4, r1
 8001044:	4618      	mov	r0, r3
 8001046:	4621      	mov	r1, r4
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001050:	f7ff fbfc 	bl	800084c <__aeabi_ddiv>
 8001054:	4603      	mov	r3, r0
 8001056:	460c      	mov	r4, r1
 8001058:	4618      	mov	r0, r3
 800105a:	4621      	mov	r1, r4
 800105c:	f7ff fdc4 	bl	8000be8 <__aeabi_d2f>
 8001060:	4602      	mov	r2, r0
 8001062:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <updateEncoderCnt+0x150>)
 8001064:	601a      	str	r2, [r3, #0]
	distance_10mm += distance_1ms;
 8001066:	4b2b      	ldr	r3, [pc, #172]	; (8001114 <updateEncoderCnt+0x154>)
 8001068:	ed93 7a00 	vldr	s14, [r3]
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <updateEncoderCnt+0x150>)
 800106e:	edd3 7a00 	vldr	s15, [r3]
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <updateEncoderCnt+0x154>)
 8001078:	edc3 7a00 	vstr	s15, [r3]
	total_distance += distance_1ms;
 800107c:	4b26      	ldr	r3, [pc, #152]	; (8001118 <updateEncoderCnt+0x158>)
 800107e:	ed93 7a00 	vldr	s14, [r3]
 8001082:	4b23      	ldr	r3, [pc, #140]	; (8001110 <updateEncoderCnt+0x150>)
 8001084:	edd3 7a00 	vldr	s15, [r3]
 8001088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <updateEncoderCnt+0x158>)
 800108e:	edc3 7a00 	vstr	s15, [r3]
	goal_judge_distance += distance_1ms;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <updateEncoderCnt+0x15c>)
 8001094:	ed93 7a00 	vldr	s14, [r3]
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <updateEncoderCnt+0x150>)
 800109a:	edd3 7a00 	vldr	s15, [r3]
 800109e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010a2:	4b1e      	ldr	r3, [pc, #120]	; (800111c <updateEncoderCnt+0x15c>)
 80010a4:	edc3 7a00 	vstr	s15, [r3]
	side_line_judge_distance += distance_1ms;
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <updateEncoderCnt+0x160>)
 80010aa:	ed93 7a00 	vldr	s14, [r3]
 80010ae:	4b18      	ldr	r3, [pc, #96]	; (8001110 <updateEncoderCnt+0x150>)
 80010b0:	edd3 7a00 	vldr	s15, [r3]
 80010b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b8:	4b19      	ldr	r3, [pc, #100]	; (8001120 <updateEncoderCnt+0x160>)
 80010ba:	edc3 7a00 	vstr	s15, [r3]
	distance_cross_line_ignore += distance_1ms;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <updateEncoderCnt+0x164>)
 80010c0:	ed93 7a00 	vldr	s14, [r3]
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <updateEncoderCnt+0x150>)
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <updateEncoderCnt+0x164>)
 80010d0:	edc3 7a00 	vstr	s15, [r3]
	distance_side_line_ignore += distance_1ms;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <updateEncoderCnt+0x168>)
 80010d6:	ed93 7a00 	vldr	s14, [r3]
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <updateEncoderCnt+0x150>)
 80010dc:	edd3 7a00 	vldr	s15, [r3]
 80010e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <updateEncoderCnt+0x168>)
 80010e6:	edc3 7a00 	vstr	s15, [r3]
}
 80010ea:	bf00      	nop
 80010ec:	bd98      	pop	{r3, r4, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	31e7b585 	.word	0x31e7b585
 80010f4:	3f8e28c7 	.word	0x3f8e28c7
 80010f8:	40000400 	.word	0x40000400
 80010fc:	2000022c 	.word	0x2000022c
 8001100:	40000800 	.word	0x40000800
 8001104:	2000022e 	.word	0x2000022e
 8001108:	20000230 	.word	0x20000230
 800110c:	20000232 	.word	0x20000232
 8001110:	20000234 	.word	0x20000234
 8001114:	20000238 	.word	0x20000238
 8001118:	2000023c 	.word	0x2000023c
 800111c:	20000240 	.word	0x20000240
 8001120:	20000244 	.word	0x20000244
 8001124:	20000248 	.word	0x20000248
 8001128:	2000024c 	.word	0x2000024c

0800112c <getEncoderCnt>:

void getEncoderCnt(int16_t *cnt_l, int16_t *cnt_r)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	*cnt_l = enc_l_cnt;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <getEncoderCnt+0x2c>)
 8001138:	f9b3 2000 	ldrsh.w	r2, [r3]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	801a      	strh	r2, [r3, #0]
	*cnt_r = enc_r_cnt;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <getEncoderCnt+0x30>)
 8001142:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	801a      	strh	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	370c      	adds	r7, #12
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000022c 	.word	0x2000022c
 800115c:	2000022e 	.word	0x2000022e

08001160 <getGoalJudgeDistance>:

float getTotalDistance(){
	return total_distance;
}

float getGoalJudgeDistance(){
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
	return goal_judge_distance;
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <getGoalJudgeDistance+0x18>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	ee07 3a90 	vmov	s15, r3
}
 800116c:	eeb0 0a67 	vmov.f32	s0, s15
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	20000240 	.word	0x20000240

0800117c <clearGoalJudgeDistance>:

void clearTotalDistance(){
	total_distance = 0;
}

void clearGoalJudgeDistance(){
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
	goal_judge_distance = 0;
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <clearGoalJudgeDistance+0x18>)
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000240 	.word	0x20000240

08001198 <resetEncoderCnt>:
{
	distance_side_line_ignore = 0;
}

void resetEncoderCnt(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
	TIM3 -> CNT = CNT_OFFSET;
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <resetEncoderCnt+0x20>)
 800119e:	f242 7210 	movw	r2, #10000	; 0x2710
 80011a2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM4 -> CNT = CNT_OFFSET;
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <resetEncoderCnt+0x24>)
 80011a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40000400 	.word	0x40000400
 80011bc:	40000800 	.word	0x40000800

080011c0 <getspeedcount>:

void clearDistance10mm(void){
	distance_10mm = 0;
}

float getspeedcount(void){
 80011c0:	b598      	push	{r3, r4, r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	if(distance_10mm >= 10){
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <getspeedcount+0x60>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	db16      	blt.n	8001206 <getspeedcount+0x46>
		speed_cnt += 0.1;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <getspeedcount+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f9b3 	bl	8000548 <__aeabi_f2d>
 80011e2:	a30d      	add	r3, pc, #52	; (adr r3, 8001218 <getspeedcount+0x58>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff f850 	bl	800028c <__adddf3>
 80011ec:	4603      	mov	r3, r0
 80011ee:	460c      	mov	r4, r1
 80011f0:	4618      	mov	r0, r3
 80011f2:	4621      	mov	r1, r4
 80011f4:	f7ff fcf8 	bl	8000be8 <__aeabi_d2f>
 80011f8:	4602      	mov	r2, r0
 80011fa:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <getspeedcount+0x64>)
 80011fc:	601a      	str	r2, [r3, #0]
		distance_10mm = 0;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <getspeedcount+0x60>)
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
	}
	return speed_cnt;
 8001206:	4b07      	ldr	r3, [pc, #28]	; (8001224 <getspeedcount+0x64>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	ee07 3a90 	vmov	s15, r3
}
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	bd98      	pop	{r3, r4, r7, pc}
 8001214:	f3af 8000 	nop.w
 8001218:	9999999a 	.word	0x9999999a
 800121c:	3fb99999 	.word	0x3fb99999
 8001220:	20000238 	.word	0x20000238
 8001224:	20000250 	.word	0x20000250

08001228 <clearspeedcount>:

void clearspeedcount(void){
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
	speed_cnt = 0.0;
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <clearspeedcount+0x18>)
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000250 	.word	0x20000250
 8001244:	00000000 	.word	0x00000000

08001248 <updateIMUValue>:
	HAL_Delay(500);

	return who_i_am;
}

void updateIMUValue(){
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
	read_gyro_data();
 800124e:	f001 fa47 	bl	80026e0 <read_gyro_data>
	zg_ = zg;
 8001252:	4b4d      	ldr	r3, [pc, #308]	; (8001388 <updateIMUValue+0x140>)
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	b21a      	sxth	r2, r3
 8001258:	4b4c      	ldr	r3, [pc, #304]	; (800138c <updateIMUValue+0x144>)
 800125a:	801a      	strh	r2, [r3, #0]

	static int16_t pre_zg;
	zg_ = (R_IMU)*(zg) + (1.0 - (R_IMU))* (pre_zg);	// ｑニブかったら消す
 800125c:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <updateIMUValue+0x140>)
 800125e:	881b      	ldrh	r3, [r3, #0]
 8001260:	b21b      	sxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f95e 	bl	8000524 <__aeabi_i2d>
 8001268:	a33d      	add	r3, pc, #244	; (adr r3, 8001360 <updateIMUValue+0x118>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff f9c3 	bl	80005f8 <__aeabi_dmul>
 8001272:	4603      	mov	r3, r0
 8001274:	460c      	mov	r4, r1
 8001276:	4625      	mov	r5, r4
 8001278:	461c      	mov	r4, r3
 800127a:	4b45      	ldr	r3, [pc, #276]	; (8001390 <updateIMUValue+0x148>)
 800127c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f94f 	bl	8000524 <__aeabi_i2d>
 8001286:	a338      	add	r3, pc, #224	; (adr r3, 8001368 <updateIMUValue+0x120>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff f9b4 	bl	80005f8 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4620      	mov	r0, r4
 8001296:	4629      	mov	r1, r5
 8001298:	f7fe fff8 	bl	800028c <__adddf3>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4618      	mov	r0, r3
 80012a2:	4621      	mov	r1, r4
 80012a4:	f7ff fc58 	bl	8000b58 <__aeabi_d2iz>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b21a      	sxth	r2, r3
 80012ac:	4b37      	ldr	r3, [pc, #220]	; (800138c <updateIMUValue+0x144>)
 80012ae:	801a      	strh	r2, [r3, #0]

	pre_zg = zg_;
 80012b0:	4b36      	ldr	r3, [pc, #216]	; (800138c <updateIMUValue+0x144>)
 80012b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80012b6:	4b36      	ldr	r3, [pc, #216]	; (8001390 <updateIMUValue+0x148>)
 80012b8:	801a      	strh	r2, [r3, #0]

	float corrected_zg = zg_;
 80012ba:	4b34      	ldr	r3, [pc, #208]	; (800138c <updateIMUValue+0x144>)
 80012bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c0:	ee07 3a90 	vmov	s15, r3
 80012c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c8:	edc7 7a01 	vstr	s15, [r7, #4]
	omega = (corrected_zg / 16.4) * PI / 180;
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff f93b 	bl	8000548 <__aeabi_f2d>
 80012d2:	a327      	add	r3, pc, #156	; (adr r3, 8001370 <updateIMUValue+0x128>)
 80012d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d8:	f7ff fab8 	bl	800084c <__aeabi_ddiv>
 80012dc:	4603      	mov	r3, r0
 80012de:	460c      	mov	r4, r1
 80012e0:	4618      	mov	r0, r3
 80012e2:	4621      	mov	r1, r4
 80012e4:	a324      	add	r3, pc, #144	; (adr r3, 8001378 <updateIMUValue+0x130>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f985 	bl	80005f8 <__aeabi_dmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	460c      	mov	r4, r1
 80012f2:	4618      	mov	r0, r3
 80012f4:	4621      	mov	r1, r4
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <updateIMUValue+0x14c>)
 80012fc:	f7ff faa6 	bl	800084c <__aeabi_ddiv>
 8001300:	4603      	mov	r3, r0
 8001302:	460c      	mov	r4, r1
 8001304:	4618      	mov	r0, r3
 8001306:	4621      	mov	r1, r4
 8001308:	f7ff fc6e 	bl	8000be8 <__aeabi_d2f>
 800130c:	4602      	mov	r2, r0
 800130e:	4b22      	ldr	r3, [pc, #136]	; (8001398 <updateIMUValue+0x150>)
 8001310:	601a      	str	r2, [r3, #0]

	theta_10mm += omega * 0.001;
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <updateIMUValue+0x154>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f916 	bl	8000548 <__aeabi_f2d>
 800131c:	4604      	mov	r4, r0
 800131e:	460d      	mov	r5, r1
 8001320:	4b1d      	ldr	r3, [pc, #116]	; (8001398 <updateIMUValue+0x150>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f90f 	bl	8000548 <__aeabi_f2d>
 800132a:	a315      	add	r3, pc, #84	; (adr r3, 8001380 <updateIMUValue+0x138>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ffa6 	bl	800028c <__adddf3>
 8001340:	4603      	mov	r3, r0
 8001342:	460c      	mov	r4, r1
 8001344:	4618      	mov	r0, r3
 8001346:	4621      	mov	r1, r4
 8001348:	f7ff fc4e 	bl	8000be8 <__aeabi_d2f>
 800134c:	4602      	mov	r2, r0
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <updateIMUValue+0x154>)
 8001350:	601a      	str	r2, [r3, #0]
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bdb0      	pop	{r4, r5, r7, pc}
 800135a:	bf00      	nop
 800135c:	f3af 8000 	nop.w
 8001360:	33333333 	.word	0x33333333
 8001364:	3feb3333 	.word	0x3feb3333
 8001368:	33333334 	.word	0x33333334
 800136c:	3fc33333 	.word	0x3fc33333
 8001370:	66666666 	.word	0x66666666
 8001374:	40306666 	.word	0x40306666
 8001378:	54411744 	.word	0x54411744
 800137c:	400921fb 	.word	0x400921fb
 8001380:	d2f1a9fc 	.word	0xd2f1a9fc
 8001384:	3f50624d 	.word	0x3f50624d
 8001388:	200005c8 	.word	0x200005c8
 800138c:	20000458 	.word	0x20000458
 8001390:	20000254 	.word	0x20000254
 8001394:	40668000 	.word	0x40668000
 8001398:	200004bc 	.word	0x200004bc
 800139c:	20000460 	.word	0x20000460

080013a0 <setLED>:
 */

#include "LED.h"

void setLED(uint8_t color)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	if(color == 'R'){
 80013aa:	79fb      	ldrb	r3, [r7, #7]
 80013ac:	2b52      	cmp	r3, #82	; 0x52
 80013ae:	d112      	bne.n	80013d6 <setLED+0x36>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET); //R
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b6:	4860      	ldr	r0, [pc, #384]	; (8001538 <setLED+0x198>)
 80013b8:	f004 fb5a 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET); //G
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013c2:	485d      	ldr	r0, [pc, #372]	; (8001538 <setLED+0x198>)
 80013c4:	f004 fb54 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET); //B
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ce:	485a      	ldr	r0, [pc, #360]	; (8001538 <setLED+0x198>)
 80013d0:	f004 fb4e 	bl	8005a70 <HAL_GPIO_WritePin>
	else{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
	}
}
 80013d4:	e0ab      	b.n	800152e <setLED+0x18e>
	else if(color == 'G'){
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b47      	cmp	r3, #71	; 0x47
 80013da:	d112      	bne.n	8001402 <setLED+0x62>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e2:	4855      	ldr	r0, [pc, #340]	; (8001538 <setLED+0x198>)
 80013e4:	f004 fb44 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013ee:	4852      	ldr	r0, [pc, #328]	; (8001538 <setLED+0x198>)
 80013f0:	f004 fb3e 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80013f4:	2201      	movs	r2, #1
 80013f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fa:	484f      	ldr	r0, [pc, #316]	; (8001538 <setLED+0x198>)
 80013fc:	f004 fb38 	bl	8005a70 <HAL_GPIO_WritePin>
}
 8001400:	e095      	b.n	800152e <setLED+0x18e>
	else if(color == 'B'){
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	2b42      	cmp	r3, #66	; 0x42
 8001406:	d112      	bne.n	800142e <setLED+0x8e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001408:	2201      	movs	r2, #1
 800140a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800140e:	484a      	ldr	r0, [pc, #296]	; (8001538 <setLED+0x198>)
 8001410:	f004 fb2e 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800141a:	4847      	ldr	r0, [pc, #284]	; (8001538 <setLED+0x198>)
 800141c:	f004 fb28 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001426:	4844      	ldr	r0, [pc, #272]	; (8001538 <setLED+0x198>)
 8001428:	f004 fb22 	bl	8005a70 <HAL_GPIO_WritePin>
}
 800142c:	e07f      	b.n	800152e <setLED+0x18e>
	else if(color == 'M'){
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b4d      	cmp	r3, #77	; 0x4d
 8001432:	d112      	bne.n	800145a <setLED+0xba>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143a:	483f      	ldr	r0, [pc, #252]	; (8001538 <setLED+0x198>)
 800143c:	f004 fb18 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001446:	483c      	ldr	r0, [pc, #240]	; (8001538 <setLED+0x198>)
 8001448:	f004 fb12 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001452:	4839      	ldr	r0, [pc, #228]	; (8001538 <setLED+0x198>)
 8001454:	f004 fb0c 	bl	8005a70 <HAL_GPIO_WritePin>
}
 8001458:	e069      	b.n	800152e <setLED+0x18e>
	else if(color == 'Y'){
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b59      	cmp	r3, #89	; 0x59
 800145e:	d112      	bne.n	8001486 <setLED+0xe6>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001466:	4834      	ldr	r0, [pc, #208]	; (8001538 <setLED+0x198>)
 8001468:	f004 fb02 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800146c:	2200      	movs	r2, #0
 800146e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001472:	4831      	ldr	r0, [pc, #196]	; (8001538 <setLED+0x198>)
 8001474:	f004 fafc 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800147e:	482e      	ldr	r0, [pc, #184]	; (8001538 <setLED+0x198>)
 8001480:	f004 faf6 	bl	8005a70 <HAL_GPIO_WritePin>
}
 8001484:	e053      	b.n	800152e <setLED+0x18e>
	else if(color == 'C'){
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b43      	cmp	r3, #67	; 0x43
 800148a:	d112      	bne.n	80014b2 <setLED+0x112>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001492:	4829      	ldr	r0, [pc, #164]	; (8001538 <setLED+0x198>)
 8001494:	f004 faec 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800149e:	4826      	ldr	r0, [pc, #152]	; (8001538 <setLED+0x198>)
 80014a0:	f004 fae6 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014aa:	4823      	ldr	r0, [pc, #140]	; (8001538 <setLED+0x198>)
 80014ac:	f004 fae0 	bl	8005a70 <HAL_GPIO_WritePin>
}
 80014b0:	e03d      	b.n	800152e <setLED+0x18e>
	else if(color == 'W'){
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b57      	cmp	r3, #87	; 0x57
 80014b6:	d112      	bne.n	80014de <setLED+0x13e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014b8:	2200      	movs	r2, #0
 80014ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014be:	481e      	ldr	r0, [pc, #120]	; (8001538 <setLED+0x198>)
 80014c0:	f004 fad6 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ca:	481b      	ldr	r0, [pc, #108]	; (8001538 <setLED+0x198>)
 80014cc:	f004 fad0 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014d6:	4818      	ldr	r0, [pc, #96]	; (8001538 <setLED+0x198>)
 80014d8:	f004 faca 	bl	8005a70 <HAL_GPIO_WritePin>
}
 80014dc:	e027      	b.n	800152e <setLED+0x18e>
	else if(color == 'N'){
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	2b4e      	cmp	r3, #78	; 0x4e
 80014e2:	d112      	bne.n	800150a <setLED+0x16a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80014e4:	2201      	movs	r2, #1
 80014e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ea:	4813      	ldr	r0, [pc, #76]	; (8001538 <setLED+0x198>)
 80014ec:	f004 fac0 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f6:	4810      	ldr	r0, [pc, #64]	; (8001538 <setLED+0x198>)
 80014f8:	f004 faba 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_SET);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001502:	480d      	ldr	r0, [pc, #52]	; (8001538 <setLED+0x198>)
 8001504:	f004 fab4 	bl	8005a70 <HAL_GPIO_WritePin>
}
 8001508:	e011      	b.n	800152e <setLED+0x18e>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800150a:	2200      	movs	r2, #0
 800150c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <setLED+0x198>)
 8001512:	f004 faad 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001516:	2200      	movs	r2, #0
 8001518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800151c:	4806      	ldr	r0, [pc, #24]	; (8001538 <setLED+0x198>)
 800151e:	f004 faa7 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <setLED+0x198>)
 800152a:	f004 faa1 	bl	8005a70 <HAL_GPIO_WritePin>
}
 800152e:	bf00      	nop
 8001530:	3708      	adds	r7, #8
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	40020800 	.word	0x40020800

0800153c <setLED2>:

void setLED2(uint8_t color2)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
	if(color2 == 'R'){
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	2b52      	cmp	r3, #82	; 0x52
 800154a:	d124      	bne.n	8001596 <setLED2+0x5a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001552:	4889      	ldr	r0, [pc, #548]	; (8001778 <setLED2+0x23c>)
 8001554:	f004 fa8c 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800155e:	4887      	ldr	r0, [pc, #540]	; (800177c <setLED2+0x240>)
 8001560:	f004 fa86 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001564:	2201      	movs	r2, #1
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	4884      	ldr	r0, [pc, #528]	; (800177c <setLED2+0x240>)
 800156c:	f004 fa80 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001570:	2201      	movs	r2, #1
 8001572:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001576:	4881      	ldr	r0, [pc, #516]	; (800177c <setLED2+0x240>)
 8001578:	f004 fa7a 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800157c:	2201      	movs	r2, #1
 800157e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001582:	487e      	ldr	r0, [pc, #504]	; (800177c <setLED2+0x240>)
 8001584:	f004 fa74 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001588:	2201      	movs	r2, #1
 800158a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158e:	487b      	ldr	r0, [pc, #492]	; (800177c <setLED2+0x240>)
 8001590:	f004 fa6e 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
	}
}
 8001594:	e0eb      	b.n	800176e <setLED2+0x232>
	else if(color2 == 'G'){
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	2b47      	cmp	r3, #71	; 0x47
 800159a:	d124      	bne.n	80015e6 <setLED2+0xaa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800159c:	2201      	movs	r2, #1
 800159e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015a2:	4875      	ldr	r0, [pc, #468]	; (8001778 <setLED2+0x23c>)
 80015a4:	f004 fa64 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80015a8:	2200      	movs	r2, #0
 80015aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015ae:	4873      	ldr	r0, [pc, #460]	; (800177c <setLED2+0x240>)
 80015b0:	f004 fa5e 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015ba:	4870      	ldr	r0, [pc, #448]	; (800177c <setLED2+0x240>)
 80015bc:	f004 fa58 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80015c0:	2201      	movs	r2, #1
 80015c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015c6:	486d      	ldr	r0, [pc, #436]	; (800177c <setLED2+0x240>)
 80015c8:	f004 fa52 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d2:	486a      	ldr	r0, [pc, #424]	; (800177c <setLED2+0x240>)
 80015d4:	f004 fa4c 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80015d8:	2201      	movs	r2, #1
 80015da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015de:	4867      	ldr	r0, [pc, #412]	; (800177c <setLED2+0x240>)
 80015e0:	f004 fa46 	bl	8005a70 <HAL_GPIO_WritePin>
}
 80015e4:	e0c3      	b.n	800176e <setLED2+0x232>
	else if(color2 == 'B'){
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b42      	cmp	r3, #66	; 0x42
 80015ea:	d124      	bne.n	8001636 <setLED2+0xfa>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f2:	4861      	ldr	r0, [pc, #388]	; (8001778 <setLED2+0x23c>)
 80015f4:	f004 fa3c 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80015f8:	2201      	movs	r2, #1
 80015fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015fe:	485f      	ldr	r0, [pc, #380]	; (800177c <setLED2+0x240>)
 8001600:	f004 fa36 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160a:	485c      	ldr	r0, [pc, #368]	; (800177c <setLED2+0x240>)
 800160c:	f004 fa30 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001610:	2201      	movs	r2, #1
 8001612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001616:	4859      	ldr	r0, [pc, #356]	; (800177c <setLED2+0x240>)
 8001618:	f004 fa2a 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001622:	4856      	ldr	r0, [pc, #344]	; (800177c <setLED2+0x240>)
 8001624:	f004 fa24 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001628:	2201      	movs	r2, #1
 800162a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162e:	4853      	ldr	r0, [pc, #332]	; (800177c <setLED2+0x240>)
 8001630:	f004 fa1e 	bl	8005a70 <HAL_GPIO_WritePin>
}
 8001634:	e09b      	b.n	800176e <setLED2+0x232>
	else if(color2 == 'W'){
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b57      	cmp	r3, #87	; 0x57
 800163a:	d124      	bne.n	8001686 <setLED2+0x14a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001642:	484d      	ldr	r0, [pc, #308]	; (8001778 <setLED2+0x23c>)
 8001644:	f004 fa14 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001648:	2201      	movs	r2, #1
 800164a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800164e:	484b      	ldr	r0, [pc, #300]	; (800177c <setLED2+0x240>)
 8001650:	f004 fa0e 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165a:	4848      	ldr	r0, [pc, #288]	; (800177c <setLED2+0x240>)
 800165c:	f004 fa08 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001666:	4845      	ldr	r0, [pc, #276]	; (800177c <setLED2+0x240>)
 8001668:	f004 fa02 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001672:	4842      	ldr	r0, [pc, #264]	; (800177c <setLED2+0x240>)
 8001674:	f004 f9fc 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001678:	2201      	movs	r2, #1
 800167a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167e:	483f      	ldr	r0, [pc, #252]	; (800177c <setLED2+0x240>)
 8001680:	f004 f9f6 	bl	8005a70 <HAL_GPIO_WritePin>
}
 8001684:	e073      	b.n	800176e <setLED2+0x232>
	else if(color2 == 'Y'){
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b59      	cmp	r3, #89	; 0x59
 800168a:	d124      	bne.n	80016d6 <setLED2+0x19a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001692:	4839      	ldr	r0, [pc, #228]	; (8001778 <setLED2+0x23c>)
 8001694:	f004 f9ec 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001698:	2201      	movs	r2, #1
 800169a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169e:	4837      	ldr	r0, [pc, #220]	; (800177c <setLED2+0x240>)
 80016a0:	f004 f9e6 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016aa:	4834      	ldr	r0, [pc, #208]	; (800177c <setLED2+0x240>)
 80016ac:	f004 f9e0 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80016b0:	2201      	movs	r2, #1
 80016b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016b6:	4831      	ldr	r0, [pc, #196]	; (800177c <setLED2+0x240>)
 80016b8:	f004 f9da 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c2:	482e      	ldr	r0, [pc, #184]	; (800177c <setLED2+0x240>)
 80016c4:	f004 f9d4 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80016c8:	2201      	movs	r2, #1
 80016ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ce:	482b      	ldr	r0, [pc, #172]	; (800177c <setLED2+0x240>)
 80016d0:	f004 f9ce 	bl	8005a70 <HAL_GPIO_WritePin>
}
 80016d4:	e04b      	b.n	800176e <setLED2+0x232>
	else if(color2 == 'X'){
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b58      	cmp	r3, #88	; 0x58
 80016da:	d124      	bne.n	8001726 <setLED2+0x1ea>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80016dc:	2201      	movs	r2, #1
 80016de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e2:	4825      	ldr	r0, [pc, #148]	; (8001778 <setLED2+0x23c>)
 80016e4:	f004 f9c4 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80016e8:	2201      	movs	r2, #1
 80016ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ee:	4823      	ldr	r0, [pc, #140]	; (800177c <setLED2+0x240>)
 80016f0:	f004 f9be 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80016f4:	2201      	movs	r2, #1
 80016f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016fa:	4820      	ldr	r0, [pc, #128]	; (800177c <setLED2+0x240>)
 80016fc:	f004 f9b8 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001700:	2201      	movs	r2, #1
 8001702:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001706:	481d      	ldr	r0, [pc, #116]	; (800177c <setLED2+0x240>)
 8001708:	f004 f9b2 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001712:	481a      	ldr	r0, [pc, #104]	; (800177c <setLED2+0x240>)
 8001714:	f004 f9ac 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001718:	2200      	movs	r2, #0
 800171a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800171e:	4817      	ldr	r0, [pc, #92]	; (800177c <setLED2+0x240>)
 8001720:	f004 f9a6 	bl	8005a70 <HAL_GPIO_WritePin>
}
 8001724:	e023      	b.n	800176e <setLED2+0x232>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800172c:	4812      	ldr	r0, [pc, #72]	; (8001778 <setLED2+0x23c>)
 800172e:	f004 f99f 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001732:	2201      	movs	r2, #1
 8001734:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001738:	4810      	ldr	r0, [pc, #64]	; (800177c <setLED2+0x240>)
 800173a:	f004 f999 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <setLED2+0x240>)
 8001746:	f004 f993 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001750:	480a      	ldr	r0, [pc, #40]	; (800177c <setLED2+0x240>)
 8001752:	f004 f98d 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001756:	2201      	movs	r2, #1
 8001758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175c:	4807      	ldr	r0, [pc, #28]	; (800177c <setLED2+0x240>)
 800175e:	f004 f987 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001762:	2201      	movs	r2, #1
 8001764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001768:	4804      	ldr	r0, [pc, #16]	; (800177c <setLED2+0x240>)
 800176a:	f004 f981 	bl	8005a70 <HAL_GPIO_WritePin>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400

08001780 <calculateLineFollowingTermFlip>:

static float pre_diff;

float mon_velo_term;

void calculateLineFollowingTermFlip(void){
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 4.0, ki = 0, kd = 0.01;//kp = 1.5, kd = 0.0015  //kp = 3.0, kd = 0.005
 8001786:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
 800178a:	617b      	str	r3, [r7, #20]
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b4b      	ldr	r3, [pc, #300]	; (80018c0 <calculateLineFollowingTermFlip+0x140>)
 8001794:	60fb      	str	r3, [r7, #12]
	float diff = 0.;
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]

	if(line_trace_enable_flag == 1){
 800179c:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <calculateLineFollowingTermFlip+0x144>)
 800179e:	f993 3000 	ldrsb.w	r3, [r3]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	f040 8081 	bne.w	80018aa <calculateLineFollowingTermFlip+0x12a>
		if(i_clear_flag == 1){
 80017a8:	4b47      	ldr	r3, [pc, #284]	; (80018c8 <calculateLineFollowingTermFlip+0x148>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <calculateLineFollowingTermFlip+0x3e>
			i = 0;
 80017b0:	4b46      	ldr	r3, [pc, #280]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 80017b8:	4b43      	ldr	r3, [pc, #268]	; (80018c8 <calculateLineFollowingTermFlip+0x148>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	701a      	strb	r2, [r3, #0]
		}

		//diff = ( ( sensor[0] * 3.2 + sensor[1] * 2.8 + sensor[2] * 2.4 + sensor[3] * 2.0 + sensor[4] * 1.6 + sensor[5] * 1.4 ) / 6 ) - ( ( sensor[6] * 1.4 + sensor[7] * 1.6 + sensor[8] * 2.0 + sensor[9] * 2.4 + sensor[10] * 2.8 + sensor[11] * 3.2 ) / 6 );
		diff = ( ( sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] ) / 6 ) - ( ( sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11] ) / 6 );
 80017be:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 80017c8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a40      	ldr	r2, [pc, #256]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 80017d0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a3e      	ldr	r2, [pc, #248]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 80017d8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80017dc:	4413      	add	r3, r2
 80017de:	4a3c      	ldr	r2, [pc, #240]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 80017e0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a3a      	ldr	r2, [pc, #232]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 80017e8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a39      	ldr	r2, [pc, #228]	; (80018d4 <calculateLineFollowingTermFlip+0x154>)
 80017f0:	fb82 1203 	smull	r1, r2, r2, r3
 80017f4:	17db      	asrs	r3, r3, #31
 80017f6:	1ad2      	subs	r2, r2, r3
 80017f8:	4b35      	ldr	r3, [pc, #212]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 80017fa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017fe:	4619      	mov	r1, r3
 8001800:	4b33      	ldr	r3, [pc, #204]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 8001802:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001806:	440b      	add	r3, r1
 8001808:	4931      	ldr	r1, [pc, #196]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 800180a:	f9b1 1010 	ldrsh.w	r1, [r1, #16]
 800180e:	440b      	add	r3, r1
 8001810:	492f      	ldr	r1, [pc, #188]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 8001812:	f9b1 1012 	ldrsh.w	r1, [r1, #18]
 8001816:	440b      	add	r3, r1
 8001818:	492d      	ldr	r1, [pc, #180]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 800181a:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 800181e:	440b      	add	r3, r1
 8001820:	492b      	ldr	r1, [pc, #172]	; (80018d0 <calculateLineFollowingTermFlip+0x150>)
 8001822:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8001826:	440b      	add	r3, r1
 8001828:	492a      	ldr	r1, [pc, #168]	; (80018d4 <calculateLineFollowingTermFlip+0x154>)
 800182a:	fb81 0103 	smull	r0, r1, r1, r3
 800182e:	17db      	asrs	r3, r3, #31
 8001830:	1a5b      	subs	r3, r3, r1
 8001832:	4413      	add	r3, r2
 8001834:	ee07 3a90 	vmov	s15, r3
 8001838:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800183c:	edc7 7a02 	vstr	s15, [r7, #8]

		p = kp * diff; //P制御
 8001840:	ed97 7a05 	vldr	s14, [r7, #20]
 8001844:	edd7 7a02 	vldr	s15, [r7, #8]
 8001848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800184c:	edc7 7a01 	vstr	s15, [r7, #4]
		//i += ki * diff * DELTA_T; //I制御
		d = kd * (diff - pre_diff) / DELTA_T; //D制御
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <calculateLineFollowingTermFlip+0x158>)
 8001852:	edd3 7a00 	vldr	s15, [r3]
 8001856:	ed97 7a02 	vldr	s14, [r7, #8]
 800185a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800185e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001866:	ee17 0a90 	vmov	r0, s15
 800186a:	f7fe fe6d 	bl	8000548 <__aeabi_f2d>
 800186e:	a312      	add	r3, pc, #72	; (adr r3, 80018b8 <calculateLineFollowingTermFlip+0x138>)
 8001870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001874:	f7fe ffea 	bl	800084c <__aeabi_ddiv>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	4618      	mov	r0, r3
 800187e:	4621      	mov	r1, r4
 8001880:	f7ff f9b2 	bl	8000be8 <__aeabi_d2f>
 8001884:	4603      	mov	r3, r0
 8001886:	603b      	str	r3, [r7, #0]

		line_following_term = p + i + d;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <calculateLineFollowingTermFlip+0x14c>)
 800188a:	ed93 7a00 	vldr	s14, [r3]
 800188e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001892:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001896:	edd7 7a00 	vldr	s15, [r7]
 800189a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800189e:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <calculateLineFollowingTermFlip+0x15c>)
 80018a0:	edc3 7a00 	vstr	s15, [r3]

		//p_Deb = p;
		//d_Deb = d;
		//i_Deb = i;

		pre_diff = diff;
 80018a4:	4a0c      	ldr	r2, [pc, #48]	; (80018d8 <calculateLineFollowingTermFlip+0x158>)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	6013      	str	r3, [r2, #0]
	}
}
 80018aa:	bf00      	nop
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd90      	pop	{r4, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	f3af 8000 	nop.w
 80018b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80018bc:	3f50624d 	.word	0x3f50624d
 80018c0:	3c23d70a 	.word	0x3c23d70a
 80018c4:	20000256 	.word	0x20000256
 80018c8:	20000257 	.word	0x20000257
 80018cc:	20000264 	.word	0x20000264
 80018d0:	200004a4 	.word	0x200004a4
 80018d4:	2aaaaaab 	.word	0x2aaaaaab
 80018d8:	20000260 	.word	0x20000260
 80018dc:	20000258 	.word	0x20000258

080018e0 <lineTraceFlip>:

void lineTraceFlip(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
	if(line_trace_enable_flag == 1){
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <lineTraceFlip+0x78>)
 80018e8:	f993 3000 	ldrsb.w	r3, [r3]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d12b      	bne.n	8001948 <lineTraceFlip+0x68>

		float velocity_control_term = getVelocityControlTerm();
 80018f0:	f000 ff98 	bl	8002824 <getVelocityControlTerm>
 80018f4:	ed87 0a03 	vstr	s0, [r7, #12]

		velocity_control_term -= exceeded;
		line_following_term += exceeded;
		*/

		float motor_l = velocity_control_term + line_following_term;
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <lineTraceFlip+0x7c>)
 80018fa:	edd3 7a00 	vldr	s15, [r3]
 80018fe:	ed97 7a03 	vldr	s14, [r7, #12]
 8001902:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001906:	edc7 7a02 	vstr	s15, [r7, #8]
		float motor_r = velocity_control_term - line_following_term;
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <lineTraceFlip+0x7c>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ed97 7a03 	vldr	s14, [r7, #12]
 8001914:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001918:	edc7 7a01 	vstr	s15, [r7, #4]
		/*
		float motor_l = velocity_control_term ;
		float motor_r = velocity_control_term ;
		*/

		mon_velo_term = velocity_control_term;
 800191c:	4a10      	ldr	r2, [pc, #64]	; (8001960 <lineTraceFlip+0x80>)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6013      	str	r3, [r2, #0]

		//motor_l_Deb = motor_l;
		//motor_r_Deb = motor_r;

		setMotor(motor_l, motor_r);
 8001922:	edd7 7a02 	vldr	s15, [r7, #8]
 8001926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800192a:	ee17 3a90 	vmov	r3, s15
 800192e:	b21b      	sxth	r3, r3
 8001930:	edd7 7a01 	vldr	s15, [r7, #4]
 8001934:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001938:	ee17 2a90 	vmov	r2, s15
 800193c:	b212      	sxth	r2, r2
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f001 fff9 	bl	8003938 <setMotor>
	}
	else
	{
		setMotor(0, 0);
	}
}
 8001946:	e003      	b.n	8001950 <lineTraceFlip+0x70>
		setMotor(0, 0);
 8001948:	2100      	movs	r1, #0
 800194a:	2000      	movs	r0, #0
 800194c:	f001 fff4 	bl	8003938 <setMotor>
}
 8001950:	bf00      	nop
 8001952:	3710      	adds	r7, #16
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000256 	.word	0x20000256
 800195c:	20000258 	.word	0x20000258
 8001960:	200004f4 	.word	0x200004f4

08001964 <startLineTrace>:

void startLineTrace()
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 1;
 8001968:	4b05      	ldr	r3, [pc, #20]	; (8001980 <startLineTrace+0x1c>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <startLineTrace+0x20>)
 8001970:	2201      	movs	r2, #1
 8001972:	701a      	strb	r2, [r3, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000256 	.word	0x20000256
 8001984:	20000257 	.word	0x20000257

08001988 <stopLineTrace>:

void stopLineTrace()
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	line_trace_enable_flag = 0;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <stopLineTrace+0x1c>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
	line_following_term = 0;
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <stopLineTrace+0x20>)
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
	//setMotor(0, 0);
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	20000256 	.word	0x20000256
 80019a8:	20000258 	.word	0x20000258

080019ac <checkCourseOut>:

void checkCourseOut(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
	uint16_t all_sensor;
	static uint16_t dark_cnt;

	all_sensor = (sensor[0] + sensor[1] + sensor[2] + sensor[3] + sensor[4] + sensor[5] + sensor[6] + sensor[7] + sensor[8] + sensor[9] + sensor[10] + sensor[11]) / 12;
 80019b2:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <checkCourseOut+0xb4>)
 80019b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b8:	461a      	mov	r2, r3
 80019ba:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <checkCourseOut+0xb4>)
 80019bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a27      	ldr	r2, [pc, #156]	; (8001a60 <checkCourseOut+0xb4>)
 80019c4:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	4a25      	ldr	r2, [pc, #148]	; (8001a60 <checkCourseOut+0xb4>)
 80019cc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80019d0:	4413      	add	r3, r2
 80019d2:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <checkCourseOut+0xb4>)
 80019d4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80019d8:	4413      	add	r3, r2
 80019da:	4a21      	ldr	r2, [pc, #132]	; (8001a60 <checkCourseOut+0xb4>)
 80019dc:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a1f      	ldr	r2, [pc, #124]	; (8001a60 <checkCourseOut+0xb4>)
 80019e4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80019e8:	4413      	add	r3, r2
 80019ea:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <checkCourseOut+0xb4>)
 80019ec:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a1b      	ldr	r2, [pc, #108]	; (8001a60 <checkCourseOut+0xb4>)
 80019f4:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a19      	ldr	r2, [pc, #100]	; (8001a60 <checkCourseOut+0xb4>)
 80019fc:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8001a00:	4413      	add	r3, r2
 8001a02:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <checkCourseOut+0xb4>)
 8001a04:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <checkCourseOut+0xb4>)
 8001a0c:	f9b2 2016 	ldrsh.w	r2, [r2, #22]
 8001a10:	4413      	add	r3, r2
 8001a12:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <checkCourseOut+0xb8>)
 8001a14:	fb82 1203 	smull	r1, r2, r2, r3
 8001a18:	1052      	asrs	r2, r2, #1
 8001a1a:	17db      	asrs	r3, r3, #31
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	80fb      	strh	r3, [r7, #6]
	if(all_sensor > 900){
 8001a20:	88fb      	ldrh	r3, [r7, #6]
 8001a22:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8001a26:	d906      	bls.n	8001a36 <checkCourseOut+0x8a>
		dark_cnt++;
 8001a28:	4b0f      	ldr	r3, [pc, #60]	; (8001a68 <checkCourseOut+0xbc>)
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <checkCourseOut+0xbc>)
 8001a32:	801a      	strh	r2, [r3, #0]
 8001a34:	e002      	b.n	8001a3c <checkCourseOut+0x90>
	}
	else dark_cnt = 0;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <checkCourseOut+0xbc>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	801a      	strh	r2, [r3, #0]

	if(dark_cnt >= SENSOR_ALL_DARK) dark_flag = true;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <checkCourseOut+0xbc>)
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	2b13      	cmp	r3, #19
 8001a42:	d903      	bls.n	8001a4c <checkCourseOut+0xa0>
 8001a44:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <checkCourseOut+0xc0>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
	else dark_flag = false;

}
 8001a4a:	e002      	b.n	8001a52 <checkCourseOut+0xa6>
	else dark_flag = false;
 8001a4c:	4b07      	ldr	r3, [pc, #28]	; (8001a6c <checkCourseOut+0xc0>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	701a      	strb	r2, [r3, #0]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	200004a4 	.word	0x200004a4
 8001a64:	2aaaaaab 	.word	0x2aaaaaab
 8001a68:	20000268 	.word	0x20000268
 8001a6c:	2000025c 	.word	0x2000025c

08001a70 <getCouseOutFlag>:
	motor_l_Deb = mon_deb_l;
	motor_r_Deb = mon_deb_r;
}

bool getCouseOutFlag()
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
	return dark_flag;
 8001a74:	4b03      	ldr	r3, [pc, #12]	; (8001a84 <getCouseOutFlag+0x14>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	2000025c 	.word	0x2000025c

08001a88 <initADC>:
static int16_t side_sensorL_buffer[10];

static uint8_t index = 1;

void initADC()
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) side_adc_value, SIDE_LINESENSOR_ADC_NUM);
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	4905      	ldr	r1, [pc, #20]	; (8001aa4 <initADC+0x1c>)
 8001a90:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <initADC+0x20>)
 8001a92:	f002 fe0b 	bl	80046ac <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) adc_value, LINESENSOR_ADC_NUM);
 8001a96:	220c      	movs	r2, #12
 8001a98:	4904      	ldr	r1, [pc, #16]	; (8001aac <initADC+0x24>)
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <initADC+0x28>)
 8001a9c:	f002 fe06 	bl	80046ac <HAL_ADC_Start_DMA>
}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20000284 	.word	0x20000284
 8001aa8:	20000548 	.word	0x20000548
 8001aac:	2000026c 	.word	0x2000026c
 8001ab0:	200004f8 	.word	0x200004f8

08001ab4 <storeAnalogSensorBuffer>:

void storeAnalogSensorBuffer(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
	sensor11_buffer[index] = adc_value[11];

	side_sensorR_buffer[index] = side_adc_value[1];
	side_sensorL_buffer[index] = side_adc_value[0];*/

	for(int j=0; j<=11; j++){
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	e002      	b.n	8001ac6 <storeAnalogSensorBuffer+0x12>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0b      	cmp	r3, #11
 8001aca:	ddf9      	ble.n	8001ac0 <storeAnalogSensorBuffer+0xc>
		//if(adc_value[j] >= max_values[j]) adc_value[j] = max_values[j];
		//if(adc_value[j] <= min_values[j]) adc_value[j] = min_values[j];
	}
	sensor1_buffer[index] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8001acc:	4bc9      	ldr	r3, [pc, #804]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001ace:	885b      	ldrh	r3, [r3, #2]
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ad8:	4bc7      	ldr	r3, [pc, #796]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001ada:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ade:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ae2:	4bc6      	ldr	r3, [pc, #792]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001ae4:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001aec:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001af0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001af4:	4bc3      	ldr	r3, [pc, #780]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001afe:	ee17 3a90 	vmov	r3, s15
 8001b02:	b219      	sxth	r1, r3
 8001b04:	4bc0      	ldr	r3, [pc, #768]	; (8001e08 <storeAnalogSensorBuffer+0x354>)
 8001b06:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor0_buffer[index] = ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 8001b0a:	4bba      	ldr	r3, [pc, #744]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001b0c:	881b      	ldrh	r3, [r3, #0]
 8001b0e:	ee07 3a90 	vmov	s15, r3
 8001b12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b16:	4bb8      	ldr	r3, [pc, #736]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b20:	4bb6      	ldr	r3, [pc, #728]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001b22:	ed93 7a00 	vldr	s14, [r3]
 8001b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001b2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b32:	4bb4      	ldr	r3, [pc, #720]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b3c:	ee17 3a90 	vmov	r3, s15
 8001b40:	b219      	sxth	r1, r3
 8001b42:	4bb2      	ldr	r3, [pc, #712]	; (8001e0c <storeAnalogSensorBuffer+0x358>)
 8001b44:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor2_buffer[index] = ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 8001b48:	4baa      	ldr	r3, [pc, #680]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001b4a:	889b      	ldrh	r3, [r3, #4]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b54:	4ba8      	ldr	r3, [pc, #672]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001b56:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b5a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b5e:	4ba7      	ldr	r3, [pc, #668]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001b60:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b68:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001b6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b70:	4ba4      	ldr	r3, [pc, #656]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	461a      	mov	r2, r3
 8001b76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b7a:	ee17 3a90 	vmov	r3, s15
 8001b7e:	b219      	sxth	r1, r3
 8001b80:	4ba3      	ldr	r3, [pc, #652]	; (8001e10 <storeAnalogSensorBuffer+0x35c>)
 8001b82:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor3_buffer[index] = ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8001b86:	4b9b      	ldr	r3, [pc, #620]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001b88:	88db      	ldrh	r3, [r3, #6]
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b92:	4b99      	ldr	r3, [pc, #612]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001b94:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b98:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b9c:	4b97      	ldr	r3, [pc, #604]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001b9e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba6:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001baa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bae:	4b95      	ldr	r3, [pc, #596]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001bb0:	781b      	ldrb	r3, [r3, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bb8:	ee17 3a90 	vmov	r3, s15
 8001bbc:	b219      	sxth	r1, r3
 8001bbe:	4b95      	ldr	r3, [pc, #596]	; (8001e14 <storeAnalogSensorBuffer+0x360>)
 8001bc0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor4_buffer[index] = ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8001bc4:	4b8b      	ldr	r3, [pc, #556]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001bc6:	891b      	ldrh	r3, [r3, #8]
 8001bc8:	ee07 3a90 	vmov	s15, r3
 8001bcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd0:	4b89      	ldr	r3, [pc, #548]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001bd2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bda:	4b88      	ldr	r3, [pc, #544]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001bdc:	ed93 7a04 	vldr	s14, [r3, #16]
 8001be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bec:	4b85      	ldr	r3, [pc, #532]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bf6:	ee17 3a90 	vmov	r3, s15
 8001bfa:	b219      	sxth	r1, r3
 8001bfc:	4b86      	ldr	r3, [pc, #536]	; (8001e18 <storeAnalogSensorBuffer+0x364>)
 8001bfe:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor5_buffer[index] = ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8001c02:	4b7c      	ldr	r3, [pc, #496]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001c04:	895b      	ldrh	r3, [r3, #10]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c0e:	4b7a      	ldr	r3, [pc, #488]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001c10:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c14:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c18:	4b78      	ldr	r3, [pc, #480]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001c1a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c22:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2a:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c34:	ee17 3a90 	vmov	r3, s15
 8001c38:	b219      	sxth	r1, r3
 8001c3a:	4b78      	ldr	r3, [pc, #480]	; (8001e1c <storeAnalogSensorBuffer+0x368>)
 8001c3c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor6_buffer[index] = ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 8001c40:	4b6c      	ldr	r3, [pc, #432]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001c42:	899b      	ldrh	r3, [r3, #12]
 8001c44:	ee07 3a90 	vmov	s15, r3
 8001c48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c4c:	4b6a      	ldr	r3, [pc, #424]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001c4e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c52:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c56:	4b69      	ldr	r3, [pc, #420]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001c58:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c60:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c68:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c72:	ee17 3a90 	vmov	r3, s15
 8001c76:	b219      	sxth	r1, r3
 8001c78:	4b69      	ldr	r3, [pc, #420]	; (8001e20 <storeAnalogSensorBuffer+0x36c>)
 8001c7a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor7_buffer[index] = ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 8001c7e:	4b5d      	ldr	r3, [pc, #372]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001c80:	89db      	ldrh	r3, [r3, #14]
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8a:	4b5b      	ldr	r3, [pc, #364]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001c8c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c90:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c94:	4b59      	ldr	r3, [pc, #356]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001c96:	ed93 7a07 	vldr	s14, [r3, #28]
 8001c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c9e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001ca2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ca6:	4b57      	ldr	r3, [pc, #348]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb0:	ee17 3a90 	vmov	r3, s15
 8001cb4:	b219      	sxth	r1, r3
 8001cb6:	4b5b      	ldr	r3, [pc, #364]	; (8001e24 <storeAnalogSensorBuffer+0x370>)
 8001cb8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor8_buffer[index] = ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 8001cbc:	4b4d      	ldr	r3, [pc, #308]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001cbe:	8a1b      	ldrh	r3, [r3, #16]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc8:	4b4b      	ldr	r3, [pc, #300]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001cca:	edd3 7a08 	vldr	s15, [r3, #32]
 8001cce:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001cd2:	4b4a      	ldr	r3, [pc, #296]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001cd4:	ed93 7a08 	vldr	s14, [r3, #32]
 8001cd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cdc:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001ce0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce4:	4b47      	ldr	r3, [pc, #284]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cee:	ee17 3a90 	vmov	r3, s15
 8001cf2:	b219      	sxth	r1, r3
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <storeAnalogSensorBuffer+0x374>)
 8001cf6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor9_buffer[index] = ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 8001cfa:	4b3e      	ldr	r3, [pc, #248]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001cfc:	8a5b      	ldrh	r3, [r3, #18]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	4b3c      	ldr	r3, [pc, #240]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001d08:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001d0c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d10:	4b3a      	ldr	r3, [pc, #232]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001d12:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001d16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d22:	4b38      	ldr	r3, [pc, #224]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d2c:	ee17 3a90 	vmov	r3, s15
 8001d30:	b219      	sxth	r1, r3
 8001d32:	4b3e      	ldr	r3, [pc, #248]	; (8001e2c <storeAnalogSensorBuffer+0x378>)
 8001d34:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor10_buffer[index] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 8001d38:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001d3a:	8a9b      	ldrh	r3, [r3, #20]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d44:	4b2c      	ldr	r3, [pc, #176]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001d46:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001d4a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d4e:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001d50:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d58:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001d5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6a:	ee17 3a90 	vmov	r3, s15
 8001d6e:	b219      	sxth	r1, r3
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <storeAnalogSensorBuffer+0x37c>)
 8001d72:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	sensor11_buffer[index] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 8001d76:	4b1f      	ldr	r3, [pc, #124]	; (8001df4 <storeAnalogSensorBuffer+0x340>)
 8001d78:	8adb      	ldrh	r3, [r3, #22]
 8001d7a:	ee07 3a90 	vmov	s15, r3
 8001d7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d82:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <storeAnalogSensorBuffer+0x344>)
 8001d84:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001d88:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <storeAnalogSensorBuffer+0x348>)
 8001d8e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001d92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d96:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9e:	4b19      	ldr	r3, [pc, #100]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001da8:	ee17 3a90 	vmov	r3, s15
 8001dac:	b219      	sxth	r1, r3
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <storeAnalogSensorBuffer+0x380>)
 8001db0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
//	sensor[10] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
//	sensor[11] = ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;



	side_sensorR_buffer[index] = ((side_adc_value[1] - side_offset_values[1]) / side_sensor_coefficient[1]) * 1000;
 8001db4:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <storeAnalogSensorBuffer+0x384>)
 8001db6:	885b      	ldrh	r3, [r3, #2]
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <storeAnalogSensorBuffer+0x388>)
 8001dc2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dc6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <storeAnalogSensorBuffer+0x38c>)
 8001dcc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001e00 <storeAnalogSensorBuffer+0x34c>
 8001dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <storeAnalogSensorBuffer+0x350>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	461a      	mov	r2, r3
 8001de2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001de6:	ee17 3a90 	vmov	r3, s15
 8001dea:	b219      	sxth	r1, r3
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <storeAnalogSensorBuffer+0x390>)
 8001dee:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001df2:	e029      	b.n	8001e48 <storeAnalogSensorBuffer+0x394>
 8001df4:	2000026c 	.word	0x2000026c
 8001df8:	2000046c 	.word	0x2000046c
 8001dfc:	200004c4 	.word	0x200004c4
 8001e00:	447a0000 	.word	0x447a0000
 8001e04:	20000030 	.word	0x20000030
 8001e08:	2000029c 	.word	0x2000029c
 8001e0c:	20000288 	.word	0x20000288
 8001e10:	200002b0 	.word	0x200002b0
 8001e14:	200002c4 	.word	0x200002c4
 8001e18:	200002d8 	.word	0x200002d8
 8001e1c:	200002ec 	.word	0x200002ec
 8001e20:	20000300 	.word	0x20000300
 8001e24:	20000314 	.word	0x20000314
 8001e28:	20000328 	.word	0x20000328
 8001e2c:	2000033c 	.word	0x2000033c
 8001e30:	20000350 	.word	0x20000350
 8001e34:	20000364 	.word	0x20000364
 8001e38:	20000284 	.word	0x20000284
 8001e3c:	20000464 	.word	0x20000464
 8001e40:	2000049c 	.word	0x2000049c
 8001e44:	20000378 	.word	0x20000378
	side_sensorL_buffer[index] = ((side_adc_value[0] - side_offset_values[0]) / side_sensor_coefficient[0]) * 1000;
 8001e48:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <storeAnalogSensorBuffer+0x3ec>)
 8001e4a:	881b      	ldrh	r3, [r3, #0]
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <storeAnalogSensorBuffer+0x3f0>)
 8001e56:	edd3 7a00 	vldr	s15, [r3]
 8001e5a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e5e:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <storeAnalogSensorBuffer+0x3f4>)
 8001e60:	ed93 7a00 	vldr	s14, [r3]
 8001e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e68:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001eac <storeAnalogSensorBuffer+0x3f8>
 8001e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <storeAnalogSensorBuffer+0x3fc>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	461a      	mov	r2, r3
 8001e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7a:	ee17 3a90 	vmov	r3, s15
 8001e7e:	b219      	sxth	r1, r3
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <storeAnalogSensorBuffer+0x400>)
 8001e82:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	index++;
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <storeAnalogSensorBuffer+0x3fc>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <storeAnalogSensorBuffer+0x3fc>)
 8001e90:	701a      	strb	r2, [r3, #0]
	if(index >= 10){
		//index = 0;
	}
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000284 	.word	0x20000284
 8001ea4:	20000464 	.word	0x20000464
 8001ea8:	2000049c 	.word	0x2000049c
 8001eac:	447a0000 	.word	0x447a0000
 8001eb0:	20000030 	.word	0x20000030
 8001eb4:	2000038c 	.word	0x2000038c

08001eb8 <updateAnalogSensor>:

void updateAnalogSensor(void) {
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
	sensor[8] = ( sensor8_buffer[0] + sensor8_buffer[1] + sensor8_buffer[2] + sensor8_buffer[3] + sensor8_buffer[4] + sensor8_buffer[5] + sensor8_buffer[6] + sensor8_buffer[7] + sensor8_buffer[8] + sensor8_buffer[9] ) / index;
	sensor[9] = ( sensor9_buffer[0] + sensor9_buffer[1] + sensor9_buffer[2] + sensor9_buffer[3] + sensor9_buffer[4] + sensor9_buffer[5] + sensor9_buffer[6] + sensor9_buffer[7] + sensor9_buffer[8] + sensor9_buffer[9] ) / index;
	sensor[10] = ( sensor10_buffer[0] + sensor10_buffer[1] + sensor10_buffer[2] + sensor10_buffer[3] + sensor10_buffer[4] + sensor10_buffer[5] + sensor10_buffer[6] + sensor10_buffer[7] + sensor10_buffer[8] + sensor10_buffer[9] ) / index;
	sensor[11] = ( sensor11_buffer[0] + sensor11_buffer[1] + sensor11_buffer[2] + sensor11_buffer[3] + sensor11_buffer[4] + sensor11_buffer[5] + sensor11_buffer[6] + sensor11_buffer[7] + sensor11_buffer[8] + sensor11_buffer[9] ) / index;
*/
	sensor[0] =  ((adc_value[0] - offset_values[0]) / sensor_coefficient[0]) * 1000;
 8001ebe:	4bc9      	ldr	r3, [pc, #804]	; (80021e4 <updateAnalogSensor+0x32c>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	ee07 3a90 	vmov	s15, r3
 8001ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eca:	4bc7      	ldr	r3, [pc, #796]	; (80021e8 <updateAnalogSensor+0x330>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001ed4:	4bc5      	ldr	r3, [pc, #788]	; (80021ec <updateAnalogSensor+0x334>)
 8001ed6:	ed93 7a00 	vldr	s14, [r3]
 8001eda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ede:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 80021f0 <updateAnalogSensor+0x338>
 8001ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eea:	ee17 3a90 	vmov	r3, s15
 8001eee:	b21a      	sxth	r2, r3
 8001ef0:	4bc0      	ldr	r3, [pc, #768]	; (80021f4 <updateAnalogSensor+0x33c>)
 8001ef2:	801a      	strh	r2, [r3, #0]
	sensor[1] =  ((adc_value[1] - offset_values[1]) / sensor_coefficient[1]) * 1000;
 8001ef4:	4bbb      	ldr	r3, [pc, #748]	; (80021e4 <updateAnalogSensor+0x32c>)
 8001ef6:	885b      	ldrh	r3, [r3, #2]
 8001ef8:	ee07 3a90 	vmov	s15, r3
 8001efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f00:	4bb9      	ldr	r3, [pc, #740]	; (80021e8 <updateAnalogSensor+0x330>)
 8001f02:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f06:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f0a:	4bb8      	ldr	r3, [pc, #736]	; (80021ec <updateAnalogSensor+0x334>)
 8001f0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f14:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 80021f0 <updateAnalogSensor+0x338>
 8001f18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f20:	ee17 3a90 	vmov	r3, s15
 8001f24:	b21a      	sxth	r2, r3
 8001f26:	4bb3      	ldr	r3, [pc, #716]	; (80021f4 <updateAnalogSensor+0x33c>)
 8001f28:	805a      	strh	r2, [r3, #2]
	sensor[2] =  ((adc_value[2] - offset_values[2]) / sensor_coefficient[2]) * 1000;
 8001f2a:	4bae      	ldr	r3, [pc, #696]	; (80021e4 <updateAnalogSensor+0x32c>)
 8001f2c:	889b      	ldrh	r3, [r3, #4]
 8001f2e:	ee07 3a90 	vmov	s15, r3
 8001f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f36:	4bac      	ldr	r3, [pc, #688]	; (80021e8 <updateAnalogSensor+0x330>)
 8001f38:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f3c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f40:	4baa      	ldr	r3, [pc, #680]	; (80021ec <updateAnalogSensor+0x334>)
 8001f42:	ed93 7a02 	vldr	s14, [r3, #8]
 8001f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f4a:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80021f0 <updateAnalogSensor+0x338>
 8001f4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f56:	ee17 3a90 	vmov	r3, s15
 8001f5a:	b21a      	sxth	r2, r3
 8001f5c:	4ba5      	ldr	r3, [pc, #660]	; (80021f4 <updateAnalogSensor+0x33c>)
 8001f5e:	809a      	strh	r2, [r3, #4]
	sensor[3] =  ((adc_value[3] - offset_values[3]) / sensor_coefficient[3]) * 1000;
 8001f60:	4ba0      	ldr	r3, [pc, #640]	; (80021e4 <updateAnalogSensor+0x32c>)
 8001f62:	88db      	ldrh	r3, [r3, #6]
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6c:	4b9e      	ldr	r3, [pc, #632]	; (80021e8 <updateAnalogSensor+0x330>)
 8001f6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f72:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001f76:	4b9d      	ldr	r3, [pc, #628]	; (80021ec <updateAnalogSensor+0x334>)
 8001f78:	ed93 7a03 	vldr	s14, [r3, #12]
 8001f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f80:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 80021f0 <updateAnalogSensor+0x338>
 8001f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f8c:	ee17 3a90 	vmov	r3, s15
 8001f90:	b21a      	sxth	r2, r3
 8001f92:	4b98      	ldr	r3, [pc, #608]	; (80021f4 <updateAnalogSensor+0x33c>)
 8001f94:	80da      	strh	r2, [r3, #6]
	sensor[4] =  ((adc_value[4] - offset_values[4]) / sensor_coefficient[4]) * 1000;
 8001f96:	4b93      	ldr	r3, [pc, #588]	; (80021e4 <updateAnalogSensor+0x32c>)
 8001f98:	891b      	ldrh	r3, [r3, #8]
 8001f9a:	ee07 3a90 	vmov	s15, r3
 8001f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fa2:	4b91      	ldr	r3, [pc, #580]	; (80021e8 <updateAnalogSensor+0x330>)
 8001fa4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fa8:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fac:	4b8f      	ldr	r3, [pc, #572]	; (80021ec <updateAnalogSensor+0x334>)
 8001fae:	ed93 7a04 	vldr	s14, [r3, #16]
 8001fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fb6:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80021f0 <updateAnalogSensor+0x338>
 8001fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fc2:	ee17 3a90 	vmov	r3, s15
 8001fc6:	b21a      	sxth	r2, r3
 8001fc8:	4b8a      	ldr	r3, [pc, #552]	; (80021f4 <updateAnalogSensor+0x33c>)
 8001fca:	811a      	strh	r2, [r3, #8]
	sensor[5] =  ((adc_value[5] - offset_values[5]) / sensor_coefficient[5]) * 1000;
 8001fcc:	4b85      	ldr	r3, [pc, #532]	; (80021e4 <updateAnalogSensor+0x32c>)
 8001fce:	895b      	ldrh	r3, [r3, #10]
 8001fd0:	ee07 3a90 	vmov	s15, r3
 8001fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001fd8:	4b83      	ldr	r3, [pc, #524]	; (80021e8 <updateAnalogSensor+0x330>)
 8001fda:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fde:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001fe2:	4b82      	ldr	r3, [pc, #520]	; (80021ec <updateAnalogSensor+0x334>)
 8001fe4:	ed93 7a05 	vldr	s14, [r3, #20]
 8001fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fec:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80021f0 <updateAnalogSensor+0x338>
 8001ff0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff8:	ee17 3a90 	vmov	r3, s15
 8001ffc:	b21a      	sxth	r2, r3
 8001ffe:	4b7d      	ldr	r3, [pc, #500]	; (80021f4 <updateAnalogSensor+0x33c>)
 8002000:	815a      	strh	r2, [r3, #10]
	sensor[6] =  ((adc_value[6] - offset_values[6]) / sensor_coefficient[6]) * 1000;
 8002002:	4b78      	ldr	r3, [pc, #480]	; (80021e4 <updateAnalogSensor+0x32c>)
 8002004:	899b      	ldrh	r3, [r3, #12]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800200e:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <updateAnalogSensor+0x330>)
 8002010:	edd3 7a06 	vldr	s15, [r3, #24]
 8002014:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002018:	4b74      	ldr	r3, [pc, #464]	; (80021ec <updateAnalogSensor+0x334>)
 800201a:	ed93 7a06 	vldr	s14, [r3, #24]
 800201e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002022:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80021f0 <updateAnalogSensor+0x338>
 8002026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800202a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800202e:	ee17 3a90 	vmov	r3, s15
 8002032:	b21a      	sxth	r2, r3
 8002034:	4b6f      	ldr	r3, [pc, #444]	; (80021f4 <updateAnalogSensor+0x33c>)
 8002036:	819a      	strh	r2, [r3, #12]
	sensor[7] =  ((adc_value[7] - offset_values[7]) / sensor_coefficient[7]) * 1000;
 8002038:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <updateAnalogSensor+0x32c>)
 800203a:	89db      	ldrh	r3, [r3, #14]
 800203c:	ee07 3a90 	vmov	s15, r3
 8002040:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002044:	4b68      	ldr	r3, [pc, #416]	; (80021e8 <updateAnalogSensor+0x330>)
 8002046:	edd3 7a07 	vldr	s15, [r3, #28]
 800204a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800204e:	4b67      	ldr	r3, [pc, #412]	; (80021ec <updateAnalogSensor+0x334>)
 8002050:	ed93 7a07 	vldr	s14, [r3, #28]
 8002054:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002058:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80021f0 <updateAnalogSensor+0x338>
 800205c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002060:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002064:	ee17 3a90 	vmov	r3, s15
 8002068:	b21a      	sxth	r2, r3
 800206a:	4b62      	ldr	r3, [pc, #392]	; (80021f4 <updateAnalogSensor+0x33c>)
 800206c:	81da      	strh	r2, [r3, #14]
	sensor[8] =  ((adc_value[8] - offset_values[8]) / sensor_coefficient[8]) * 1000;
 800206e:	4b5d      	ldr	r3, [pc, #372]	; (80021e4 <updateAnalogSensor+0x32c>)
 8002070:	8a1b      	ldrh	r3, [r3, #16]
 8002072:	ee07 3a90 	vmov	s15, r3
 8002076:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800207a:	4b5b      	ldr	r3, [pc, #364]	; (80021e8 <updateAnalogSensor+0x330>)
 800207c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002080:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002084:	4b59      	ldr	r3, [pc, #356]	; (80021ec <updateAnalogSensor+0x334>)
 8002086:	ed93 7a08 	vldr	s14, [r3, #32]
 800208a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800208e:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80021f0 <updateAnalogSensor+0x338>
 8002092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800209a:	ee17 3a90 	vmov	r3, s15
 800209e:	b21a      	sxth	r2, r3
 80020a0:	4b54      	ldr	r3, [pc, #336]	; (80021f4 <updateAnalogSensor+0x33c>)
 80020a2:	821a      	strh	r2, [r3, #16]
	sensor[9] =  ((adc_value[9] - offset_values[9]) / sensor_coefficient[9]) * 1000;
 80020a4:	4b4f      	ldr	r3, [pc, #316]	; (80021e4 <updateAnalogSensor+0x32c>)
 80020a6:	8a5b      	ldrh	r3, [r3, #18]
 80020a8:	ee07 3a90 	vmov	s15, r3
 80020ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020b0:	4b4d      	ldr	r3, [pc, #308]	; (80021e8 <updateAnalogSensor+0x330>)
 80020b2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80020b6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020ba:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <updateAnalogSensor+0x334>)
 80020bc:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80020c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80021f0 <updateAnalogSensor+0x338>
 80020c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020d0:	ee17 3a90 	vmov	r3, s15
 80020d4:	b21a      	sxth	r2, r3
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <updateAnalogSensor+0x33c>)
 80020d8:	825a      	strh	r2, [r3, #18]
	sensor[10] = ((adc_value[10] - offset_values[10]) / sensor_coefficient[10]) * 1000;
 80020da:	4b42      	ldr	r3, [pc, #264]	; (80021e4 <updateAnalogSensor+0x32c>)
 80020dc:	8a9b      	ldrh	r3, [r3, #20]
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e6:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <updateAnalogSensor+0x330>)
 80020e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80020ec:	ee77 6a67 	vsub.f32	s13, s14, s15
 80020f0:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <updateAnalogSensor+0x334>)
 80020f2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80020f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020fa:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80021f0 <updateAnalogSensor+0x338>
 80020fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002102:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002106:	ee17 3a90 	vmov	r3, s15
 800210a:	b21a      	sxth	r2, r3
 800210c:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <updateAnalogSensor+0x33c>)
 800210e:	829a      	strh	r2, [r3, #20]
	sensor[11] = ((adc_value[11] - offset_values[11]) / sensor_coefficient[11]) * 1000;
 8002110:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <updateAnalogSensor+0x32c>)
 8002112:	8adb      	ldrh	r3, [r3, #22]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211c:	4b32      	ldr	r3, [pc, #200]	; (80021e8 <updateAnalogSensor+0x330>)
 800211e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002122:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002126:	4b31      	ldr	r3, [pc, #196]	; (80021ec <updateAnalogSensor+0x334>)
 8002128:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800212c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002130:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80021f0 <updateAnalogSensor+0x338>
 8002134:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002138:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800213c:	ee17 3a90 	vmov	r3, s15
 8002140:	b21a      	sxth	r2, r3
 8002142:	4b2c      	ldr	r3, [pc, #176]	; (80021f4 <updateAnalogSensor+0x33c>)
 8002144:	82da      	strh	r2, [r3, #22]

	side_sensorR = ( side_sensorR_buffer[0] + side_sensorR_buffer[1] + side_sensorR_buffer[2] + side_sensorR_buffer[3] + side_sensorR_buffer[4] + side_sensorR_buffer[5] + side_sensorR_buffer[6] + side_sensorR_buffer[7] + side_sensorR_buffer[8] + side_sensorR_buffer[9] ) / 10;
 8002146:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <updateAnalogSensor+0x340>)
 8002148:	f9b3 3000 	ldrsh.w	r3, [r3]
 800214c:	461a      	mov	r2, r3
 800214e:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <updateAnalogSensor+0x340>)
 8002150:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002154:	4413      	add	r3, r2
 8002156:	4a28      	ldr	r2, [pc, #160]	; (80021f8 <updateAnalogSensor+0x340>)
 8002158:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800215c:	4413      	add	r3, r2
 800215e:	4a26      	ldr	r2, [pc, #152]	; (80021f8 <updateAnalogSensor+0x340>)
 8002160:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8002164:	4413      	add	r3, r2
 8002166:	4a24      	ldr	r2, [pc, #144]	; (80021f8 <updateAnalogSensor+0x340>)
 8002168:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800216c:	4413      	add	r3, r2
 800216e:	4a22      	ldr	r2, [pc, #136]	; (80021f8 <updateAnalogSensor+0x340>)
 8002170:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 8002174:	4413      	add	r3, r2
 8002176:	4a20      	ldr	r2, [pc, #128]	; (80021f8 <updateAnalogSensor+0x340>)
 8002178:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 800217c:	4413      	add	r3, r2
 800217e:	4a1e      	ldr	r2, [pc, #120]	; (80021f8 <updateAnalogSensor+0x340>)
 8002180:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8002184:	4413      	add	r3, r2
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <updateAnalogSensor+0x340>)
 8002188:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800218c:	4413      	add	r3, r2
 800218e:	4a1a      	ldr	r2, [pc, #104]	; (80021f8 <updateAnalogSensor+0x340>)
 8002190:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8002194:	4413      	add	r3, r2
 8002196:	4a19      	ldr	r2, [pc, #100]	; (80021fc <updateAnalogSensor+0x344>)
 8002198:	fb82 1203 	smull	r1, r2, r2, r3
 800219c:	1092      	asrs	r2, r2, #2
 800219e:	17db      	asrs	r3, r3, #31
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	b21a      	sxth	r2, r3
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <updateAnalogSensor+0x348>)
 80021a6:	801a      	strh	r2, [r3, #0]
	side_sensorL = ( side_sensorL_buffer[0] + side_sensorL_buffer[1] + side_sensorL_buffer[2] + side_sensorL_buffer[3] + side_sensorL_buffer[4] + side_sensorL_buffer[5] + side_sensorL_buffer[6] + side_sensorL_buffer[7] + side_sensorL_buffer[8] + side_sensorL_buffer[9] ) / 10;
 80021a8:	4b16      	ldr	r3, [pc, #88]	; (8002204 <updateAnalogSensor+0x34c>)
 80021aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ae:	461a      	mov	r2, r3
 80021b0:	4b14      	ldr	r3, [pc, #80]	; (8002204 <updateAnalogSensor+0x34c>)
 80021b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a12      	ldr	r2, [pc, #72]	; (8002204 <updateAnalogSensor+0x34c>)
 80021ba:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	4a10      	ldr	r2, [pc, #64]	; (8002204 <updateAnalogSensor+0x34c>)
 80021c2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <updateAnalogSensor+0x34c>)
 80021ca:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a0c      	ldr	r2, [pc, #48]	; (8002204 <updateAnalogSensor+0x34c>)
 80021d2:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a0a      	ldr	r2, [pc, #40]	; (8002204 <updateAnalogSensor+0x34c>)
 80021da:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80021de:	4413      	add	r3, r2
 80021e0:	e012      	b.n	8002208 <updateAnalogSensor+0x350>
 80021e2:	bf00      	nop
 80021e4:	2000026c 	.word	0x2000026c
 80021e8:	2000046c 	.word	0x2000046c
 80021ec:	200004c4 	.word	0x200004c4
 80021f0:	447a0000 	.word	0x447a0000
 80021f4:	200004a4 	.word	0x200004a4
 80021f8:	20000378 	.word	0x20000378
 80021fc:	66666667 	.word	0x66666667
 8002200:	2000045c 	.word	0x2000045c
 8002204:	2000038c 	.word	0x2000038c
 8002208:	4a1f      	ldr	r2, [pc, #124]	; (8002288 <updateAnalogSensor+0x3d0>)
 800220a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800220e:	4413      	add	r3, r2
 8002210:	4a1d      	ldr	r2, [pc, #116]	; (8002288 <updateAnalogSensor+0x3d0>)
 8002212:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8002216:	4413      	add	r3, r2
 8002218:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <updateAnalogSensor+0x3d0>)
 800221a:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 800221e:	4413      	add	r3, r2
 8002220:	4a1a      	ldr	r2, [pc, #104]	; (800228c <updateAnalogSensor+0x3d4>)
 8002222:	fb82 1203 	smull	r1, r2, r2, r3
 8002226:	1092      	asrs	r2, r2, #2
 8002228:	17db      	asrs	r3, r3, #31
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	b21a      	sxth	r2, r3
 800222e:	4b18      	ldr	r3, [pc, #96]	; (8002290 <updateAnalogSensor+0x3d8>)
 8002230:	801a      	strh	r2, [r3, #0]
	for(int j=0; j<=11; j++){
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	e01a      	b.n	800226e <updateAnalogSensor+0x3b6>
		if(sensor[j] >= 1000) sensor[j] = 1000;
 8002238:	4a16      	ldr	r2, [pc, #88]	; (8002294 <updateAnalogSensor+0x3dc>)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002240:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002244:	db05      	blt.n	8002252 <updateAnalogSensor+0x39a>
 8002246:	4a13      	ldr	r2, [pc, #76]	; (8002294 <updateAnalogSensor+0x3dc>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800224e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		if(sensor[j] <= 0) sensor[j] = 0;
 8002252:	4a10      	ldr	r2, [pc, #64]	; (8002294 <updateAnalogSensor+0x3dc>)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800225a:	2b00      	cmp	r3, #0
 800225c:	dc04      	bgt.n	8002268 <updateAnalogSensor+0x3b0>
 800225e:	4a0d      	ldr	r2, [pc, #52]	; (8002294 <updateAnalogSensor+0x3dc>)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2100      	movs	r1, #0
 8002264:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int j=0; j<=11; j++){
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3301      	adds	r3, #1
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b0b      	cmp	r3, #11
 8002272:	dde1      	ble.n	8002238 <updateAnalogSensor+0x380>
	}
    index = 0;
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <updateAnalogSensor+0x3e0>)
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]

}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	2000038c 	.word	0x2000038c
 800228c:	66666667 	.word	0x66666667
 8002290:	200004c0 	.word	0x200004c0
 8002294:	200004a4 	.word	0x200004a4
 8002298:	20000030 	.word	0x20000030

0800229c <sensorCalibration>:

void sensorCalibration()
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b0a0      	sub	sp, #128	; 0x80
 80022a0:	af00      	add	r7, sp, #0
	float max_values_buffer[LINESENSOR_ADC_NUM]={0};
 80022a2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022a6:	2230      	movs	r2, #48	; 0x30
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f006 f986 	bl	80085bc <memset>
	float min_values_buffer[LINESENSOR_ADC_NUM]={1000};
 80022b0:	f107 0310 	add.w	r3, r7, #16
 80022b4:	2230      	movs	r2, #48	; 0x30
 80022b6:	2100      	movs	r1, #0
 80022b8:	4618      	mov	r0, r3
 80022ba:	f006 f97f 	bl	80085bc <memset>
 80022be:	4bd8      	ldr	r3, [pc, #864]	; (8002620 <sensorCalibration+0x384>)
 80022c0:	613b      	str	r3, [r7, #16]
	float side_max_values_buffer[SIDE_LINESENSOR_ADC_NUM];
    float side_min_values_buffer[SIDE_LINESENSOR_ADC_NUM];

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80022c2:	2300      	movs	r3, #0
 80022c4:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80022c8:	e026      	b.n	8002318 <sensorCalibration+0x7c>
		max_values[i] = 00;
 80022ca:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80022ce:	4ad5      	ldr	r2, [pc, #852]	; (8002624 <sensorCalibration+0x388>)
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	f04f 0200 	mov.w	r2, #0
 80022d8:	601a      	str	r2, [r3, #0]
		min_values[i] = 1500;
 80022da:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80022de:	4ad2      	ldr	r2, [pc, #840]	; (8002628 <sensorCalibration+0x38c>)
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	4ad1      	ldr	r2, [pc, #836]	; (800262c <sensorCalibration+0x390>)
 80022e6:	601a      	str	r2, [r3, #0]
		max_values_buffer[i] = 0;
 80022e8:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80022f2:	4413      	add	r3, r2
 80022f4:	3b40      	subs	r3, #64	; 0x40
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
		min_values_buffer[i] = 1500;
 80022fc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002306:	4413      	add	r3, r2
 8002308:	3b70      	subs	r3, #112	; 0x70
 800230a:	4ac8      	ldr	r2, [pc, #800]	; (800262c <sensorCalibration+0x390>)
 800230c:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800230e:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002312:	3301      	adds	r3, #1
 8002314:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002318:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800231c:	2b0b      	cmp	r3, #11
 800231e:	d9d4      	bls.n	80022ca <sensorCalibration+0x2e>
//		min_values[1] = 1500;
//		min_values[2] = 1500;
//		min_values[3] = 1500;
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002320:	2300      	movs	r3, #0
 8002322:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002326:	e013      	b.n	8002350 <sensorCalibration+0xb4>
		side_max_values[i] = 00;
 8002328:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800232c:	4ac0      	ldr	r2, [pc, #768]	; (8002630 <sensorCalibration+0x394>)
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
		side_min_values[i] = 1500;
 8002338:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800233c:	4abd      	ldr	r2, [pc, #756]	; (8002634 <sensorCalibration+0x398>)
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	4aba      	ldr	r2, [pc, #744]	; (800262c <sensorCalibration+0x390>)
 8002344:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002346:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800234a:	3301      	adds	r3, #1
 800234c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002350:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d9e7      	bls.n	8002328 <sensorCalibration+0x8c>
	}

	while(getSwitchStatus('L') == 1){                       //sw3
 8002358:	e0f5      	b.n	8002546 <sensorCalibration+0x2aa>

		setLED2('X');
 800235a:	2058      	movs	r0, #88	; 0x58
 800235c:	f7ff f8ee 	bl	800153c <setLED2>

		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002360:	2300      	movs	r3, #0
 8002362:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002366:	e06e      	b.n	8002446 <sensorCalibration+0x1aa>

			max_values_buffer[i] = adc_value[i];
 8002368:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800236c:	4ab2      	ldr	r2, [pc, #712]	; (8002638 <sensorCalibration+0x39c>)
 800236e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002372:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002376:	ee07 2a90 	vmov	s15, r2
 800237a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002384:	4413      	add	r3, r2
 8002386:	3b40      	subs	r3, #64	; 0x40
 8002388:	edc3 7a00 	vstr	s15, [r3]
			min_values_buffer[i] = adc_value[i];
 800238c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002390:	4aa9      	ldr	r2, [pc, #676]	; (8002638 <sensorCalibration+0x39c>)
 8002392:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002396:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800239a:	ee07 2a90 	vmov	s15, r2
 800239e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80023a8:	4413      	add	r3, r2
 80023aa:	3b70      	subs	r3, #112	; 0x70
 80023ac:	edc3 7a00 	vstr	s15, [r3]

			if(max_values_buffer[i] > max_values[i]){
 80023b0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80023ba:	4413      	add	r3, r2
 80023bc:	3b40      	subs	r3, #64	; 0x40
 80023be:	ed93 7a00 	vldr	s14, [r3]
 80023c2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80023c6:	4a97      	ldr	r2, [pc, #604]	; (8002624 <sensorCalibration+0x388>)
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	4413      	add	r3, r2
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	dd0d      	ble.n	80023f6 <sensorCalibration+0x15a>
				max_values[i] = max_values_buffer[i];
 80023da:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80023de:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80023e2:	0092      	lsls	r2, r2, #2
 80023e4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80023e8:	440a      	add	r2, r1
 80023ea:	3a40      	subs	r2, #64	; 0x40
 80023ec:	6812      	ldr	r2, [r2, #0]
 80023ee:	498d      	ldr	r1, [pc, #564]	; (8002624 <sensorCalibration+0x388>)
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	601a      	str	r2, [r3, #0]
			}
//			if(max_values_buffer[2] > max_values[2]){
//				max_values[2] = max_values_buffer[2];
//			}
			if((min_values_buffer[i] < min_values[i]) ){
 80023f6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002400:	4413      	add	r3, r2
 8002402:	3b70      	subs	r3, #112	; 0x70
 8002404:	ed93 7a00 	vldr	s14, [r3]
 8002408:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800240c:	4a86      	ldr	r2, [pc, #536]	; (8002628 <sensorCalibration+0x38c>)
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	edd3 7a00 	vldr	s15, [r3]
 8002416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800241a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800241e:	d50d      	bpl.n	800243c <sensorCalibration+0x1a0>
				min_values[i] = min_values_buffer[i];
 8002420:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8002424:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002428:	0092      	lsls	r2, r2, #2
 800242a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800242e:	440a      	add	r2, r1
 8002430:	3a70      	subs	r2, #112	; 0x70
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	497c      	ldr	r1, [pc, #496]	; (8002628 <sensorCalibration+0x38c>)
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800243c:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002440:	3301      	adds	r3, #1
 8002442:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002446:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800244a:	2b0b      	cmp	r3, #11
 800244c:	d98c      	bls.n	8002368 <sensorCalibration+0xcc>
			}
		}

		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 800244e:	2300      	movs	r3, #0
 8002450:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 8002454:	e073      	b.n	800253e <sensorCalibration+0x2a2>
			side_max_values_buffer[i] = side_adc_value[i];
 8002456:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800245a:	4a78      	ldr	r2, [pc, #480]	; (800263c <sensorCalibration+0x3a0>)
 800245c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002460:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002464:	ee07 2a90 	vmov	s15, r2
 8002468:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002472:	4413      	add	r3, r2
 8002474:	3b78      	subs	r3, #120	; 0x78
 8002476:	edc3 7a00 	vstr	s15, [r3]
			side_min_values_buffer[i] = side_adc_value[i];
 800247a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800247e:	4a6f      	ldr	r2, [pc, #444]	; (800263c <sensorCalibration+0x3a0>)
 8002480:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002484:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002488:	ee07 2a90 	vmov	s15, r2
 800248c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002496:	4413      	add	r3, r2
 8002498:	3b80      	subs	r3, #128	; 0x80
 800249a:	edc3 7a00 	vstr	s15, [r3]

			if(side_max_values_buffer[i] > side_max_values[i]){
 800249e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024a8:	4413      	add	r3, r2
 80024aa:	3b78      	subs	r3, #120	; 0x78
 80024ac:	ed93 7a00 	vldr	s14, [r3]
 80024b0:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80024b4:	4a5e      	ldr	r2, [pc, #376]	; (8002630 <sensorCalibration+0x394>)
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4413      	add	r3, r2
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c6:	dd10      	ble.n	80024ea <sensorCalibration+0x24e>
				side_max_values[i] = side_adc_value[i];
 80024c8:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80024cc:	4a5b      	ldr	r2, [pc, #364]	; (800263c <sensorCalibration+0x3a0>)
 80024ce:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80024d2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80024d6:	ee07 2a90 	vmov	s15, r2
 80024da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024de:	4a54      	ldr	r2, [pc, #336]	; (8002630 <sensorCalibration+0x394>)
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	4413      	add	r3, r2
 80024e4:	edc3 7a00 	vstr	s15, [r3]
 80024e8:	e024      	b.n	8002534 <sensorCalibration+0x298>
			}
			else if(side_min_values_buffer[i] < side_min_values[i]){
 80024ea:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024f4:	4413      	add	r3, r2
 80024f6:	3b80      	subs	r3, #128	; 0x80
 80024f8:	ed93 7a00 	vldr	s14, [r3]
 80024fc:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002500:	4a4c      	ldr	r2, [pc, #304]	; (8002634 <sensorCalibration+0x398>)
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	edd3 7a00 	vldr	s15, [r3]
 800250a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800250e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002512:	d50f      	bpl.n	8002534 <sensorCalibration+0x298>
				side_min_values[i] = side_adc_value[i];
 8002514:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002518:	4a48      	ldr	r2, [pc, #288]	; (800263c <sensorCalibration+0x3a0>)
 800251a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800251e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002522:	ee07 2a90 	vmov	s15, r2
 8002526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800252a:	4a42      	ldr	r2, [pc, #264]	; (8002634 <sensorCalibration+0x398>)
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	edc3 7a00 	vstr	s15, [r3]
		for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002534:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002538:	3301      	adds	r3, #1
 800253a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800253e:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002542:	2b01      	cmp	r3, #1
 8002544:	d987      	bls.n	8002456 <sensorCalibration+0x1ba>
	while(getSwitchStatus('L') == 1){                       //sw3
 8002546:	204c      	movs	r0, #76	; 0x4c
 8002548:	f001 ff38 	bl	80043bc <getSwitchStatus>
 800254c:	4603      	mov	r3, r0
 800254e:	2b01      	cmp	r3, #1
 8002550:	f43f af03 	beq.w	800235a <sensorCalibration+0xbe>
			}
		}
	}

	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 8002554:	2300      	movs	r3, #0
 8002556:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 800255a:	e01b      	b.n	8002594 <sensorCalibration+0x2f8>
		sensor_coefficient[i] = max_values[i] - min_values[i];
 800255c:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002560:	4a30      	ldr	r2, [pc, #192]	; (8002624 <sensorCalibration+0x388>)
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	ed93 7a00 	vldr	s14, [r3]
 800256a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800256e:	4a2e      	ldr	r2, [pc, #184]	; (8002628 <sensorCalibration+0x38c>)
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800257c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002580:	4a2f      	ldr	r2, [pc, #188]	; (8002640 <sensorCalibration+0x3a4>)
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4413      	add	r3, r2
 8002586:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800258a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800258e:	3301      	adds	r3, #1
 8002590:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002594:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8002598:	2b0b      	cmp	r3, #11
 800259a:	d9df      	bls.n	800255c <sensorCalibration+0x2c0>
	}
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 800259c:	2300      	movs	r3, #0
 800259e:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80025a2:	e010      	b.n	80025c6 <sensorCalibration+0x32a>
		offset_values[i] = min_values[i];
 80025a4:	f8b7 2074 	ldrh.w	r2, [r7, #116]	; 0x74
 80025a8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80025ac:	491e      	ldr	r1, [pc, #120]	; (8002628 <sensorCalibration+0x38c>)
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	440a      	add	r2, r1
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	4923      	ldr	r1, [pc, #140]	; (8002644 <sensorCalibration+0x3a8>)
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LINESENSOR_ADC_NUM; i++){
 80025bc:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80025c0:	3301      	adds	r3, #1
 80025c2:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 80025c6:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 80025ca:	2b0b      	cmp	r3, #11
 80025cc:	d9ea      	bls.n	80025a4 <sensorCalibration+0x308>
	}

	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 80025ce:	2300      	movs	r3, #0
 80025d0:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 80025d4:	e01b      	b.n	800260e <sensorCalibration+0x372>
		side_sensor_coefficient[i] = side_max_values[i] - side_min_values[i];
 80025d6:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80025da:	4a15      	ldr	r2, [pc, #84]	; (8002630 <sensorCalibration+0x394>)
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	4413      	add	r3, r2
 80025e0:	ed93 7a00 	vldr	s14, [r3]
 80025e4:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80025e8:	4a12      	ldr	r2, [pc, #72]	; (8002634 <sensorCalibration+0x398>)
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 80025f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025fa:	4a13      	ldr	r2, [pc, #76]	; (8002648 <sensorCalibration+0x3ac>)
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002604:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002608:	3301      	adds	r3, #1
 800260a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
 800260e:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8002612:	2b01      	cmp	r3, #1
 8002614:	d9df      	bls.n	80025d6 <sensorCalibration+0x33a>
	}
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002616:	2300      	movs	r3, #0
 8002618:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800261c:	e027      	b.n	800266e <sensorCalibration+0x3d2>
 800261e:	bf00      	nop
 8002620:	447a0000 	.word	0x447a0000
 8002624:	20000590 	.word	0x20000590
 8002628:	20000000 	.word	0x20000000
 800262c:	44bb8000 	.word	0x44bb8000
 8002630:	20000540 	.word	0x20000540
 8002634:	200005c0 	.word	0x200005c0
 8002638:	2000026c 	.word	0x2000026c
 800263c:	20000284 	.word	0x20000284
 8002640:	200004c4 	.word	0x200004c4
 8002644:	2000046c 	.word	0x2000046c
 8002648:	2000049c 	.word	0x2000049c
		side_offset_values[i] = side_min_values[i];
 800264c:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 8002650:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002654:	490a      	ldr	r1, [pc, #40]	; (8002680 <sensorCalibration+0x3e4>)
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	440a      	add	r2, r1
 800265a:	6812      	ldr	r2, [r2, #0]
 800265c:	4909      	ldr	r1, [pc, #36]	; (8002684 <sensorCalibration+0x3e8>)
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDE_LINESENSOR_ADC_NUM; i++){
 8002664:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002668:	3301      	adds	r3, #1
 800266a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
 800266e:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002672:	2b01      	cmp	r3, #1
 8002674:	d9ea      	bls.n	800264c <sensorCalibration+0x3b0>
	}
}
 8002676:	bf00      	nop
 8002678:	3780      	adds	r7, #128	; 0x80
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200005c0 	.word	0x200005c0
 8002684:	20000464 	.word	0x20000464

08002688 <read_byte>:
#include "mpu6500.h"

volatile int16_t xa, ya, za;
volatile int16_t xg, yg, zg;

uint8_t read_byte( uint8_t reg ) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

		ret = reg | 0x80;
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002698:	b2db      	uxtb	r3, r3
 800269a:	73fb      	strb	r3, [r7, #15]
		CS_RESET;
 800269c:	2200      	movs	r2, #0
 800269e:	2104      	movs	r1, #4
 80026a0:	480d      	ldr	r0, [pc, #52]	; (80026d8 <read_byte+0x50>)
 80026a2:	f003 f9e5 	bl	8005a70 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi3, &ret, 1, 100);
 80026a6:	f107 010f 	add.w	r1, r7, #15
 80026aa:	2364      	movs	r3, #100	; 0x64
 80026ac:	2201      	movs	r2, #1
 80026ae:	480b      	ldr	r0, [pc, #44]	; (80026dc <read_byte+0x54>)
 80026b0:	f003 ffd0 	bl	8006654 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi3, &val, 1, 100);
 80026b4:	f107 010e 	add.w	r1, r7, #14
 80026b8:	2364      	movs	r3, #100	; 0x64
 80026ba:	2201      	movs	r2, #1
 80026bc:	4807      	ldr	r0, [pc, #28]	; (80026dc <read_byte+0x54>)
 80026be:	f004 f8fd 	bl	80068bc <HAL_SPI_Receive>
		CS_SET;
 80026c2:	2201      	movs	r2, #1
 80026c4:	2104      	movs	r1, #4
 80026c6:	4804      	ldr	r0, [pc, #16]	; (80026d8 <read_byte+0x50>)
 80026c8:	f003 f9d2 	bl	8005a70 <HAL_GPIO_WritePin>

	return val;
 80026cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	40020c00 	.word	0x40020c00
 80026dc:	20000688 	.word	0x20000688

080026e0 <read_gyro_data>:
		write_byte(0x1B, 0x18);
	}
	return ret;
}

void read_gyro_data() {
 80026e0:	b598      	push	{r3, r4, r7, lr}
 80026e2:	af00      	add	r7, sp, #0
	//xg = ((int16_t)read_byte(0x43) << 8) | ((int16_t)read_byte(0x44));
	//yg = ((int16_t)read_byte(0x45) << 8) | ((int16_t)read_byte(0x46));
	zg = ((int16_t)read_byte(0x47) << 8) | ((int16_t)read_byte(0x48));
 80026e4:	2047      	movs	r0, #71	; 0x47
 80026e6:	f7ff ffcf 	bl	8002688 <read_byte>
 80026ea:	4603      	mov	r3, r0
 80026ec:	021b      	lsls	r3, r3, #8
 80026ee:	b21c      	sxth	r4, r3
 80026f0:	2048      	movs	r0, #72	; 0x48
 80026f2:	f7ff ffc9 	bl	8002688 <read_byte>
 80026f6:	4603      	mov	r3, r0
 80026f8:	b21b      	sxth	r3, r3
 80026fa:	4323      	orrs	r3, r4
 80026fc:	b21a      	sxth	r2, r3
 80026fe:	4b02      	ldr	r3, [pc, #8]	; (8002708 <read_gyro_data+0x28>)
 8002700:	801a      	strh	r2, [r3, #0]
}
 8002702:	bf00      	nop
 8002704:	bd98      	pop	{r3, r4, r7, pc}
 8002706:	bf00      	nop
 8002708:	200005c8 	.word	0x200005c8
 800270c:	00000000 	.word	0x00000000

08002710 <calculateVelocityControlFlip>:
float mon_p,mon_i,mon_d = 0;

float mon_current_velocity, mon_diff;

void calculateVelocityControlFlip(void)
{
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b088      	sub	sp, #32
 8002714:	af00      	add	r7, sp, #0
	float p, d;
	static float i;

	float kp = 3500, ki = 40000, kd = 0.0;
 8002716:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <calculateVelocityControlFlip+0xf0>)
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <calculateVelocityControlFlip+0xf4>)
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	f04f 0300 	mov.w	r3, #0
 8002722:	617b      	str	r3, [r7, #20]

	float diff = 0.;
 8002724:	f04f 0300 	mov.w	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
	static float pre_diff = 0.;
	float current_velocity = getCurrentVelocity();
 800272a:	f000 f8cd 	bl	80028c8 <getCurrentVelocity>
 800272e:	ed87 0a03 	vstr	s0, [r7, #12]

	if(velocity_control_enable_flag == 1){
 8002732:	4b35      	ldr	r3, [pc, #212]	; (8002808 <calculateVelocityControlFlip+0xf8>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d159      	bne.n	80027ee <calculateVelocityControlFlip+0xde>
		if(i_clear_flag == 1){
 800273a:	4b34      	ldr	r3, [pc, #208]	; (800280c <calculateVelocityControlFlip+0xfc>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d106      	bne.n	8002750 <calculateVelocityControlFlip+0x40>
			i = 0;
 8002742:	4b33      	ldr	r3, [pc, #204]	; (8002810 <calculateVelocityControlFlip+0x100>)
 8002744:	f04f 0200 	mov.w	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
			i_clear_flag = 0;
 800274a:	4b30      	ldr	r3, [pc, #192]	; (800280c <calculateVelocityControlFlip+0xfc>)
 800274c:	2200      	movs	r2, #0
 800274e:	701a      	strb	r2, [r3, #0]
		}

		diff = setvariablespeed() - current_velocity;
 8002750:	f000 f886 	bl	8002860 <setvariablespeed>
 8002754:	eeb0 7a40 	vmov.f32	s14, s0
 8002758:	edd7 7a03 	vldr	s15, [r7, #12]
 800275c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002760:	edc7 7a04 	vstr	s15, [r7, #16]
		//mon_diff = diff;
		p = kp * diff; //P制御
 8002764:	ed97 7a07 	vldr	s14, [r7, #28]
 8002768:	edd7 7a04 	vldr	s15, [r7, #16]
 800276c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002770:	edc7 7a02 	vstr	s15, [r7, #8]
		i += ki * diff * DELTA_T; //I制御
 8002774:	4b26      	ldr	r3, [pc, #152]	; (8002810 <calculateVelocityControlFlip+0x100>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7fd fee5 	bl	8000548 <__aeabi_f2d>
 800277e:	4604      	mov	r4, r0
 8002780:	460d      	mov	r5, r1
 8002782:	ed97 7a06 	vldr	s14, [r7, #24]
 8002786:	edd7 7a04 	vldr	s15, [r7, #16]
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	ee17 0a90 	vmov	r0, s15
 8002792:	f7fd fed9 	bl	8000548 <__aeabi_f2d>
 8002796:	a318      	add	r3, pc, #96	; (adr r3, 80027f8 <calculateVelocityControlFlip+0xe8>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fd ff2c 	bl	80005f8 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4620      	mov	r0, r4
 80027a6:	4629      	mov	r1, r5
 80027a8:	f7fd fd70 	bl	800028c <__adddf3>
 80027ac:	4603      	mov	r3, r0
 80027ae:	460c      	mov	r4, r1
 80027b0:	4618      	mov	r0, r3
 80027b2:	4621      	mov	r1, r4
 80027b4:	f7fe fa18 	bl	8000be8 <__aeabi_d2f>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <calculateVelocityControlFlip+0x100>)
 80027bc:	601a      	str	r2, [r3, #0]
		//d = kd * (diff - pre_diff) / DELTA_T; //D制御

		mon_p = p;
 80027be:	4a15      	ldr	r2, [pc, #84]	; (8002814 <calculateVelocityControlFlip+0x104>)
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	6013      	str	r3, [r2, #0]
		mon_i = i;
 80027c4:	4b12      	ldr	r3, [pc, #72]	; (8002810 <calculateVelocityControlFlip+0x100>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a13      	ldr	r2, [pc, #76]	; (8002818 <calculateVelocityControlFlip+0x108>)
 80027ca:	6013      	str	r3, [r2, #0]
		//mon_d = d;

		//if(i >= 1000) i = 1000;
		//if(i <= -1000) i = -1000;

		velocity_control_term = p + i + d;
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <calculateVelocityControlFlip+0x100>)
 80027ce:	ed93 7a00 	vldr	s14, [r3]
 80027d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80027d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027da:	edd7 7a01 	vldr	s15, [r7, #4]
 80027de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <calculateVelocityControlFlip+0x10c>)
 80027e4:	edc3 7a00 	vstr	s15, [r3]

		//setMotor(velocity_control_term, velocity_control_term);

		pre_diff = diff;
 80027e8:	4a0d      	ldr	r2, [pc, #52]	; (8002820 <calculateVelocityControlFlip+0x110>)
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	6013      	str	r3, [r2, #0]

	}

}
 80027ee:	bf00      	nop
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bdb0      	pop	{r4, r5, r7, pc}
 80027f6:	bf00      	nop
 80027f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80027fc:	3f50624d 	.word	0x3f50624d
 8002800:	455ac000 	.word	0x455ac000
 8002804:	471c4000 	.word	0x471c4000
 8002808:	200003a0 	.word	0x200003a0
 800280c:	200003a1 	.word	0x200003a1
 8002810:	200003b0 	.word	0x200003b0
 8002814:	200005e0 	.word	0x200005e0
 8002818:	200005d8 	.word	0x200005d8
 800281c:	200003a4 	.word	0x200003a4
 8002820:	200003b4 	.word	0x200003b4

08002824 <getVelocityControlTerm>:

float getVelocityControlTerm(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
	return velocity_control_term;
 8002828:	4b04      	ldr	r3, [pc, #16]	; (800283c <getVelocityControlTerm+0x18>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	ee07 3a90 	vmov	s15, r3
}
 8002830:	eeb0 0a67 	vmov.f32	s0, s15
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	200003a4 	.word	0x200003a4

08002840 <setTargetVelocity>:

void setTargetVelocity(float velocity)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	ed87 0a01 	vstr	s0, [r7, #4]
	target_velocity = velocity;
 800284a:	4a04      	ldr	r2, [pc, #16]	; (800285c <setTargetVelocity+0x1c>)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6013      	str	r3, [r2, #0]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	200003a8 	.word	0x200003a8

08002860 <setvariablespeed>:

float setvariablespeed(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
	if(getspeedcount() >= target_velocity){
 8002864:	f7fe fcac 	bl	80011c0 <getspeedcount>
 8002868:	eeb0 7a40 	vmov.f32	s14, s0
 800286c:	4b13      	ldr	r3, [pc, #76]	; (80028bc <setvariablespeed+0x5c>)
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800287a:	db04      	blt.n	8002886 <setvariablespeed+0x26>
		variable_speed = target_velocity;
 800287c:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <setvariablespeed+0x5c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0f      	ldr	r2, [pc, #60]	; (80028c0 <setvariablespeed+0x60>)
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e012      	b.n	80028ac <setvariablespeed+0x4c>
	}
	else if(getspeedcount() < target_velocity){
 8002886:	f7fe fc9b 	bl	80011c0 <getspeedcount>
 800288a:	eeb0 7a40 	vmov.f32	s14, s0
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <setvariablespeed+0x5c>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289c:	d506      	bpl.n	80028ac <setvariablespeed+0x4c>
		variable_speed = getspeedcount();
 800289e:	f7fe fc8f 	bl	80011c0 <getspeedcount>
 80028a2:	eef0 7a40 	vmov.f32	s15, s0
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <setvariablespeed+0x60>)
 80028a8:	edc3 7a00 	vstr	s15, [r3]
	}

	return variable_speed;
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <setvariablespeed+0x60>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	ee07 3a90 	vmov	s15, r3
}
 80028b4:	eeb0 0a67 	vmov.f32	s0, s15
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	200003a8 	.word	0x200003a8
 80028c0:	200003ac 	.word	0x200003ac
 80028c4:	00000000 	.word	0x00000000

080028c8 <getCurrentVelocity>:

float getCurrentVelocity(void)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
	int16_t enc_l = 0, enc_r = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	80fb      	strh	r3, [r7, #6]
 80028d2:	2300      	movs	r3, #0
 80028d4:	80bb      	strh	r3, [r7, #4]
	getEncoderCnt(&enc_l, &enc_r);
 80028d6:	1d3a      	adds	r2, r7, #4
 80028d8:	1dbb      	adds	r3, r7, #6
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fc25 	bl	800112c <getEncoderCnt>
	float enc_cnt = (enc_l + enc_r) / 2;
 80028e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028e6:	461a      	mov	r2, r3
 80028e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80028ec:	4413      	add	r3, r2
 80028ee:	0fda      	lsrs	r2, r3, #31
 80028f0:	4413      	add	r3, r2
 80028f2:	105b      	asrs	r3, r3, #1
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028fc:	edc7 7a03 	vstr	s15, [r7, #12]

	float current_velocity = VELOCITY_PER_CNT * enc_cnt;
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7fd fe21 	bl	8000548 <__aeabi_f2d>
 8002906:	a30d      	add	r3, pc, #52	; (adr r3, 800293c <getCurrentVelocity+0x74>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f7fd fe74 	bl	80005f8 <__aeabi_dmul>
 8002910:	4603      	mov	r3, r0
 8002912:	460c      	mov	r4, r1
 8002914:	4618      	mov	r0, r3
 8002916:	4621      	mov	r1, r4
 8002918:	f7fe f966 	bl	8000be8 <__aeabi_d2f>
 800291c:	4603      	mov	r3, r0
 800291e:	60bb      	str	r3, [r7, #8]
	mon_current_velocity = current_velocity;
 8002920:	4a05      	ldr	r2, [pc, #20]	; (8002938 <getCurrentVelocity+0x70>)
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	6013      	str	r3, [r2, #0]

	return current_velocity;
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	ee07 3a90 	vmov	s15, r3
}
 800292c:	eeb0 0a67 	vmov.f32	s0, s15
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bd90      	pop	{r4, r7, pc}
 8002936:	bf00      	nop
 8002938:	200005d4 	.word	0x200005d4
 800293c:	31e7b585 	.word	0x31e7b585
 8002940:	3f8e28c7 	.word	0x3f8e28c7

08002944 <startVelocityControl>:
{
	return target_velocity;
}

void startVelocityControl(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 1;
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <startVelocityControl+0x1c>)
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
	i_clear_flag = 1;
 800294e:	4b05      	ldr	r3, [pc, #20]	; (8002964 <startVelocityControl+0x20>)
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
}
 8002954:	bf00      	nop
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	200003a0 	.word	0x200003a0
 8002964:	200003a1 	.word	0x200003a1

08002968 <stopVelocityControl>:

void stopVelocityControl(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
	velocity_control_enable_flag = 0;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <stopVelocityControl+0x14>)
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	200003a0 	.word	0x200003a0

08002980 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
   if(htim->Instance == TIM6){//1ms
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d11f      	bne.n	80029d2 <HAL_TIM_PeriodElapsedCallback+0x52>
      timer++;
 8002992:	4b19      	ldr	r3, [pc, #100]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800299a:	6013      	str	r3, [r2, #0]
      timer2++;
 800299c:	4b17      	ldr	r3, [pc, #92]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	4a16      	ldr	r2, [pc, #88]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80029a4:	6013      	str	r3, [r2, #0]

      updateEncoderCnt();
 80029a6:	f7fe fb0b 	bl	8000fc0 <updateEncoderCnt>
      updateIMUValue();
 80029aa:	f7fe fc4d 	bl	8001248 <updateIMUValue>
      updateAnalogSensor();
 80029ae:	f7ff fa83 	bl	8001eb8 <updateAnalogSensor>

      calculateVelocityControlFlip();
 80029b2:	f7ff fead 	bl	8002710 <calculateVelocityControlFlip>
      calculateLineFollowingTermFlip();
 80029b6:	f7fe fee3 	bl	8001780 <calculateLineFollowingTermFlip>
      lineTraceFlip();
 80029ba:	f7fe ff91 	bl	80018e0 <lineTraceFlip>
      motorCtrlFlip();
 80029be:	f000 ff45 	bl	800384c <motorCtrlFlip>
      suctionmotorCtrlFlip();
 80029c2:	f000 ffa7 	bl	8003914 <suctionmotorCtrlFlip>
      updateSideSensorStatus();
 80029c6:	f001 f813 	bl	80039f0 <updateSideSensorStatus>

      checkCourseOut();
 80029ca:	f7fe ffef 	bl	80019ac <checkCourseOut>

      resetEncoderCnt();
 80029ce:	f7fe fbe3 	bl	8001198 <resetEncoderCnt>
   }

   if(htim->Instance == TIM7){//0.1ms
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d106      	bne.n	80029ea <HAL_TIM_PeriodElapsedCallback+0x6a>
	   timer1++;
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	3301      	adds	r3, #1
 80029e2:	4a08      	ldr	r2, [pc, #32]	; (8002a04 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80029e4:	6013      	str	r3, [r2, #0]

	   storeAnalogSensorBuffer();
 80029e6:	f7ff f865 	bl	8001ab4 <storeAnalogSensorBuffer>

   }
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40001000 	.word	0x40001000
 80029f8:	200005e4 	.word	0x200005e4
 80029fc:	2000062c 	.word	0x2000062c
 8002a00:	40001400 	.word	0x40001400
 8002a04:	20000804 	.word	0x20000804

08002a08 <init>:

void init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
	  initADC();
 8002a0c:	f7ff f83c 	bl	8001a88 <initADC>
	  initEncoder();
 8002a10:	f7fe faba 	bl	8000f88 <initEncoder>
	  //sensorCalibration();
	  HAL_TIM_Base_Start_IT(&htim6);
 8002a14:	4809      	ldr	r0, [pc, #36]	; (8002a3c <init+0x34>)
 8002a16:	f004 fb38 	bl	800708a <HAL_TIM_Base_Start_IT>
	  HAL_TIM_Base_Start_IT(&htim7);
 8002a1a:	4809      	ldr	r0, [pc, #36]	; (8002a40 <init+0x38>)
 8002a1c:	f004 fb35 	bl	800708a <HAL_TIM_Base_Start_IT>

	  initMotor();
 8002a20:	f000 fefc 	bl	800381c <initMotor>

	  setLED('R');
 8002a24:	2052      	movs	r0, #82	; 0x52
 8002a26:	f7fe fcbb 	bl	80013a0 <setLED>

	  sensorCalibration();
 8002a2a:	f7ff fc37 	bl	800229c <sensorCalibration>

	  HAL_Delay(1000);
 8002a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a32:	f001 fdd5 	bl	80045e0 <HAL_Delay>

}
 8002a36:	bf00      	nop
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	20000780 	.word	0x20000780
 8002a40:	20000868 	.word	0x20000868

08002a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a4a:	f001 fd57 	bl	80044fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a4e:	f000 f993 	bl	8002d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a52:	f000 fe21 	bl	8003698 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a56:	f000 fdf7 	bl	8003648 <MX_DMA_Init>
  MX_TIM1_Init();
 8002a5a:	f000 fba7 	bl	80031ac <MX_TIM1_Init>
  MX_TIM3_Init();
 8002a5e:	f000 fc27 	bl	80032b0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002a62:	f000 fc79 	bl	8003358 <MX_TIM4_Init>
  MX_TIM8_Init();
 8002a66:	f000 fd35 	bl	80034d4 <MX_TIM8_Init>
  MX_ADC1_Init();
 8002a6a:	f000 f9ef 	bl	8002e4c <MX_ADC1_Init>
  MX_I2C1_Init();
 8002a6e:	f000 fb39 	bl	80030e4 <MX_I2C1_Init>
  MX_SPI3_Init();
 8002a72:	f000 fb65 	bl	8003140 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002a76:	f000 fdbd 	bl	80035f4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8002a7a:	f000 fcc1 	bl	8003400 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002a7e:	f000 fcf5 	bl	800346c <MX_TIM7_Init>
  MX_ADC2_Init();
 8002a82:	f000 fa43 	bl	8002f0c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  init();
 8002a86:	f7ff ffbf 	bl	8002a08 <init>

  bool running_flag = false;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8002a8e:	204c      	movs	r0, #76	; 0x4c
 8002a90:	f001 fc94 	bl	80043bc <getSwitchStatus>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d109      	bne.n	8002aae <main+0x6a>
 8002a9a:	4bad      	ldr	r3, [pc, #692]	; (8002d50 <main+0x30c>)
 8002a9c:	881b      	ldrh	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d105      	bne.n	8002aae <main+0x6a>
		  timer = 0;
 8002aa2:	4bac      	ldr	r3, [pc, #688]	; (8002d54 <main+0x310>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
		  sw = 1;
 8002aa8:	4ba9      	ldr	r3, [pc, #676]	; (8002d50 <main+0x30c>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 1 && timer > 20 && sw == 1){
 8002aae:	204c      	movs	r0, #76	; 0x4c
 8002ab0:	f001 fc84 	bl	80043bc <getSwitchStatus>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d10a      	bne.n	8002ad0 <main+0x8c>
 8002aba:	4ba6      	ldr	r3, [pc, #664]	; (8002d54 <main+0x310>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b14      	cmp	r3, #20
 8002ac0:	d906      	bls.n	8002ad0 <main+0x8c>
 8002ac2:	4ba3      	ldr	r3, [pc, #652]	; (8002d50 <main+0x30c>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d102      	bne.n	8002ad0 <main+0x8c>
		  sw = 2;
 8002aca:	4ba1      	ldr	r3, [pc, #644]	; (8002d50 <main+0x30c>)
 8002acc:	2202      	movs	r2, #2
 8002ace:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw == 1){
 8002ad0:	4ba0      	ldr	r3, [pc, #640]	; (8002d54 <main+0x310>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2b28      	cmp	r3, #40	; 0x28
 8002ad6:	d906      	bls.n	8002ae6 <main+0xa2>
 8002ad8:	4b9d      	ldr	r3, [pc, #628]	; (8002d50 <main+0x30c>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d102      	bne.n	8002ae6 <main+0xa2>
		  sw = 0;
 8002ae0:	4b9b      	ldr	r3, [pc, #620]	; (8002d50 <main+0x30c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('L') == 0 && sw == 2){
 8002ae6:	204c      	movs	r0, #76	; 0x4c
 8002ae8:	f001 fc68 	bl	80043bc <getSwitchStatus>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10c      	bne.n	8002b0c <main+0xc8>
 8002af2:	4b97      	ldr	r3, [pc, #604]	; (8002d50 <main+0x30c>)
 8002af4:	881b      	ldrh	r3, [r3, #0]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d108      	bne.n	8002b0c <main+0xc8>
		  //mode_selector++;
		  soiya++;
 8002afa:	4b97      	ldr	r3, [pc, #604]	; (8002d58 <main+0x314>)
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	3301      	adds	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	4b95      	ldr	r3, [pc, #596]	; (8002d58 <main+0x314>)
 8002b04:	801a      	strh	r2, [r3, #0]
		  sw = 0;
 8002b06:	4b92      	ldr	r3, [pc, #584]	; (8002d50 <main+0x30c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	801a      	strh	r2, [r3, #0]
	  }

	  if(getSwitchStatus('R') == 1 && sw2 == 0){     //D4         sw2チャタリング防止
 8002b0c:	2052      	movs	r0, #82	; 0x52
 8002b0e:	f001 fc55 	bl	80043bc <getSwitchStatus>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d109      	bne.n	8002b2c <main+0xe8>
 8002b18:	4b90      	ldr	r3, [pc, #576]	; (8002d5c <main+0x318>)
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <main+0xe8>
	  	  timer = 0;
 8002b20:	4b8c      	ldr	r3, [pc, #560]	; (8002d54 <main+0x310>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
	  	  sw2 = 1;
 8002b26:	4b8d      	ldr	r3, [pc, #564]	; (8002d5c <main+0x318>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 1 && timer > 20 && sw2 == 1){
 8002b2c:	2052      	movs	r0, #82	; 0x52
 8002b2e:	f001 fc45 	bl	80043bc <getSwitchStatus>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d10a      	bne.n	8002b4e <main+0x10a>
 8002b38:	4b86      	ldr	r3, [pc, #536]	; (8002d54 <main+0x310>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b14      	cmp	r3, #20
 8002b3e:	d906      	bls.n	8002b4e <main+0x10a>
 8002b40:	4b86      	ldr	r3, [pc, #536]	; (8002d5c <main+0x318>)
 8002b42:	881b      	ldrh	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d102      	bne.n	8002b4e <main+0x10a>
	  	  sw2 = 2;
 8002b48:	4b84      	ldr	r3, [pc, #528]	; (8002d5c <main+0x318>)
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	801a      	strh	r2, [r3, #0]
	  }
	  if(timer > 40 && sw2 == 1){
 8002b4e:	4b81      	ldr	r3, [pc, #516]	; (8002d54 <main+0x310>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b28      	cmp	r3, #40	; 0x28
 8002b54:	d906      	bls.n	8002b64 <main+0x120>
 8002b56:	4b81      	ldr	r3, [pc, #516]	; (8002d5c <main+0x318>)
 8002b58:	881b      	ldrh	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d102      	bne.n	8002b64 <main+0x120>
	  	  sw2 = 0;
 8002b5e:	4b7f      	ldr	r3, [pc, #508]	; (8002d5c <main+0x318>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	801a      	strh	r2, [r3, #0]
	  }
	  if(getSwitchStatus('R') == 0 && sw2 == 2){
 8002b64:	2052      	movs	r0, #82	; 0x52
 8002b66:	f001 fc29 	bl	80043bc <getSwitchStatus>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <main+0x146>
 8002b70:	4b7a      	ldr	r3, [pc, #488]	; (8002d5c <main+0x318>)
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d108      	bne.n	8002b8a <main+0x146>
	  	  cnt++;
 8002b78:	4b79      	ldr	r3, [pc, #484]	; (8002d60 <main+0x31c>)
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	4b77      	ldr	r3, [pc, #476]	; (8002d60 <main+0x31c>)
 8002b82:	801a      	strh	r2, [r3, #0]
	  	  sw2 = 0;
 8002b84:	4b75      	ldr	r3, [pc, #468]	; (8002d5c <main+0x318>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	801a      	strh	r2, [r3, #0]
	  }

	  if(cnt >= 2){
 8002b8a:	4b75      	ldr	r3, [pc, #468]	; (8002d60 <main+0x31c>)
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d902      	bls.n	8002b98 <main+0x154>
		  cnt = 0;
 8002b92:	4b73      	ldr	r3, [pc, #460]	; (8002d60 <main+0x31c>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	801a      	strh	r2, [r3, #0]
	  }


	  if(cnt >= 1){
 8002b98:	4b71      	ldr	r3, [pc, #452]	; (8002d60 <main+0x31c>)
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00b      	beq.n	8002bb8 <main+0x174>
		  HAL_Delay(1000);
 8002ba0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ba4:	f001 fd1c 	bl	80045e0 <HAL_Delay>
		  running_flag = true;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	71fb      	strb	r3, [r7, #7]
		  timer2 = 0;
 8002bac:	4b6d      	ldr	r3, [pc, #436]	; (8002d64 <main+0x320>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
		  cnt = 0;
 8002bb2:	4b6b      	ldr	r3, [pc, #428]	; (8002d60 <main+0x31c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	801a      	strh	r2, [r3, #0]
		  running();
		  //setMotor(500, 500);
		  //while(1);
	  }*/

	  if(running_flag == false){
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	f083 0301 	eor.w	r3, r3, #1
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <main+0x188>
		  stopLineTrace();
 8002bc4:	f7fe fee0 	bl	8001988 <stopLineTrace>
		  stopVelocityControl();
 8002bc8:	f7ff fece 	bl	8002968 <stopVelocityControl>
	  }

	  if(getgoalStatus() == true){  //goal判?��?
 8002bcc:	f001 f824 	bl	8003c18 <getgoalStatus>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d007      	beq.n	8002be6 <main+0x1a2>
		  running_flag = false;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	71fb      	strb	r3, [r7, #7]
		  cnt = 0;
 8002bda:	4b61      	ldr	r3, [pc, #388]	; (8002d60 <main+0x31c>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	801a      	strh	r2, [r3, #0]
		  setsuctionMotor(0);
 8002be0:	2000      	movs	r0, #0
 8002be2:	f000 fee7 	bl	80039b4 <setsuctionMotor>
		  //getgoalStatus() = false;
	  }

	  if(soiya >= 6){
 8002be6:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <main+0x314>)
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	2b05      	cmp	r3, #5
 8002bec:	d902      	bls.n	8002bf4 <main+0x1b0>
		  soiya = 0;
 8002bee:	4b5a      	ldr	r3, [pc, #360]	; (8002d58 <main+0x314>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	801a      	strh	r2, [r3, #0]
	  }

	  switch(soiya){
 8002bf4:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <main+0x314>)
 8002bf6:	881b      	ldrh	r3, [r3, #0]
 8002bf8:	2b05      	cmp	r3, #5
 8002bfa:	f200 809b 	bhi.w	8002d34 <main+0x2f0>
 8002bfe:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <main+0x1c0>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c1d 	.word	0x08002c1d
 8002c08:	08002c39 	.word	0x08002c39
 8002c0c:	08002c6b 	.word	0x08002c6b
 8002c10:	08002c9d 	.word	0x08002c9d
 8002c14:	08002ccf 	.word	0x08002ccf
 8002c18:	08002d01 	.word	0x08002d01

			  case 0:
				  setLED('W');
 8002c1c:	2057      	movs	r0, #87	; 0x57
 8002c1e:	f7fe fbbf 	bl	80013a0 <setLED>
				  setLED2('R');
 8002c22:	2052      	movs	r0, #82	; 0x52
 8002c24:	f7fe fc8a 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 8084 	beq.w	8002d38 <main+0x2f4>
				  		  //startLineTrace();

				  		  //setTargetVelocity(0.6);
				  		  //startVelocityControl();

				  		  setsuctionMotor(250);
 8002c30:	20fa      	movs	r0, #250	; 0xfa
 8002c32:	f000 febf 	bl	80039b4 <setsuctionMotor>
				  		  //running();
				  		  //setMotor(500, 500);
				  		  //while(1);
				  }

				  break;
 8002c36:	e07f      	b.n	8002d38 <main+0x2f4>

			  case 1:
				  setLED('G');
 8002c38:	2047      	movs	r0, #71	; 0x47
 8002c3a:	f7fe fbb1 	bl	80013a0 <setLED>
				  setLED2('G');
 8002c3e:	2047      	movs	r0, #71	; 0x47
 8002c40:	f7fe fc7c 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002c44:	79fb      	ldrb	r3, [r7, #7]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d078      	beq.n	8002d3c <main+0x2f8>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8002c4a:	f7fe faed 	bl	8001228 <clearspeedcount>

						  setTargetVelocity(0.0);
 8002c4e:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8002d68 <main+0x324>
 8002c52:	f7ff fdf5 	bl	8002840 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(250);
 8002c56:	20fa      	movs	r0, #250	; 0xfa
 8002c58:	f000 feac 	bl	80039b4 <setsuctionMotor>

						  HAL_Delay(1000);
 8002c5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c60:	f001 fcbe 	bl	80045e0 <HAL_Delay>

						  running();
 8002c64:	f000 ff00 	bl	8003a68 <running>
						  //running();
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002c68:	e068      	b.n	8002d3c <main+0x2f8>

			  case 2:
				  setLED('B');
 8002c6a:	2042      	movs	r0, #66	; 0x42
 8002c6c:	f7fe fb98 	bl	80013a0 <setLED>
				  setLED2('B');
 8002c70:	2042      	movs	r0, #66	; 0x42
 8002c72:	f7fe fc63 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d061      	beq.n	8002d40 <main+0x2fc>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8002c7c:	f7fe fad4 	bl	8001228 <clearspeedcount>

						  setTargetVelocity(1.0);
 8002c80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002c84:	f7ff fddc 	bl	8002840 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(250);
 8002c88:	20fa      	movs	r0, #250	; 0xfa
 8002c8a:	f000 fe93 	bl	80039b4 <setsuctionMotor>
						  HAL_Delay(1000);
 8002c8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c92:	f001 fca5 	bl	80045e0 <HAL_Delay>

						  running();
 8002c96:	f000 fee7 	bl	8003a68 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002c9a:	e051      	b.n	8002d40 <main+0x2fc>

			  case 3:
				  setLED('M');
 8002c9c:	204d      	movs	r0, #77	; 0x4d
 8002c9e:	f7fe fb7f 	bl	80013a0 <setLED>
				  setLED2('W');
 8002ca2:	2057      	movs	r0, #87	; 0x57
 8002ca4:	f7fe fc4a 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002ca8:	79fb      	ldrb	r3, [r7, #7]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d04a      	beq.n	8002d44 <main+0x300>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8002cae:	f7fe fabb 	bl	8001228 <clearspeedcount>

						  setTargetVelocity(1.4);
 8002cb2:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8002d6c <main+0x328>
 8002cb6:	f7ff fdc3 	bl	8002840 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(250);
 8002cba:	20fa      	movs	r0, #250	; 0xfa
 8002cbc:	f000 fe7a 	bl	80039b4 <setsuctionMotor>

						  HAL_Delay(2000);
 8002cc0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002cc4:	f001 fc8c 	bl	80045e0 <HAL_Delay>

						  running();
 8002cc8:	f000 fece 	bl	8003a68 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002ccc:	e03a      	b.n	8002d44 <main+0x300>

			  case 4:
				  setLED('Y');
 8002cce:	2059      	movs	r0, #89	; 0x59
 8002cd0:	f7fe fb66 	bl	80013a0 <setLED>
				  setLED2('Y');
 8002cd4:	2059      	movs	r0, #89	; 0x59
 8002cd6:	f7fe fc31 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d033      	beq.n	8002d48 <main+0x304>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8002ce0:	f7fe faa2 	bl	8001228 <clearspeedcount>

						  setTargetVelocity(1.6);
 8002ce4:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8002d70 <main+0x32c>
 8002ce8:	f7ff fdaa 	bl	8002840 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(250);
 8002cec:	20fa      	movs	r0, #250	; 0xfa
 8002cee:	f000 fe61 	bl	80039b4 <setsuctionMotor>

						  HAL_Delay(1000);
 8002cf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cf6:	f001 fc73 	bl	80045e0 <HAL_Delay>

						  running();
 8002cfa:	f000 feb5 	bl	8003a68 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002cfe:	e023      	b.n	8002d48 <main+0x304>

			  case 5:
				  setLED('C');
 8002d00:	2043      	movs	r0, #67	; 0x43
 8002d02:	f7fe fb4d 	bl	80013a0 <setLED>
				  setLED2('X');
 8002d06:	2058      	movs	r0, #88	; 0x58
 8002d08:	f7fe fc18 	bl	800153c <setLED2>

				  if(running_flag == true){
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01c      	beq.n	8002d4c <main+0x308>
						  //setVelocityRange(0, 0);
						  //startLineTrace();

					      clearspeedcount();
 8002d12:	f7fe fa89 	bl	8001228 <clearspeedcount>

						  setTargetVelocity(1.8);
 8002d16:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8002d74 <main+0x330>
 8002d1a:	f7ff fd91 	bl	8002840 <setTargetVelocity>
						  //startVelocityControl();

						  setsuctionMotor(450);
 8002d1e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8002d22:	f000 fe47 	bl	80039b4 <setsuctionMotor>

						  HAL_Delay(1000);
 8002d26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d2a:	f001 fc59 	bl	80045e0 <HAL_Delay>

						  running();
 8002d2e:	f000 fe9b 	bl	8003a68 <running>
						  //setMotor(500, 500);
						  //while(1);
				  }

				  break;
 8002d32:	e00b      	b.n	8002d4c <main+0x308>

			  default:
				  break;
 8002d34:	bf00      	nop
 8002d36:	e6aa      	b.n	8002a8e <main+0x4a>
				  break;
 8002d38:	bf00      	nop
 8002d3a:	e6a8      	b.n	8002a8e <main+0x4a>
				  break;
 8002d3c:	bf00      	nop
 8002d3e:	e6a6      	b.n	8002a8e <main+0x4a>
				  break;
 8002d40:	bf00      	nop
 8002d42:	e6a4      	b.n	8002a8e <main+0x4a>
				  break;
 8002d44:	bf00      	nop
 8002d46:	e6a2      	b.n	8002a8e <main+0x4a>
				  break;
 8002d48:	bf00      	nop
 8002d4a:	e6a0      	b.n	8002a8e <main+0x4a>
				  break;
 8002d4c:	bf00      	nop
	  if(getSwitchStatus('L') == 1 && sw == 0){     //D5         sw3チャタリング防止
 8002d4e:	e69e      	b.n	8002a8e <main+0x4a>
 8002d50:	20000800 	.word	0x20000800
 8002d54:	200005e4 	.word	0x200005e4
 8002d58:	200003ba 	.word	0x200003ba
 8002d5c:	200003b8 	.word	0x200003b8
 8002d60:	20000684 	.word	0x20000684
 8002d64:	2000062c 	.word	0x2000062c
 8002d68:	00000000 	.word	0x00000000
 8002d6c:	3fb33333 	.word	0x3fb33333
 8002d70:	3fcccccd 	.word	0x3fcccccd
 8002d74:	3fe66666 	.word	0x3fe66666

08002d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b094      	sub	sp, #80	; 0x50
 8002d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d7e:	f107 0320 	add.w	r3, r7, #32
 8002d82:	2230      	movs	r2, #48	; 0x30
 8002d84:	2100      	movs	r1, #0
 8002d86:	4618      	mov	r0, r3
 8002d88:	f005 fc18 	bl	80085bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d8c:	f107 030c 	add.w	r3, r7, #12
 8002d90:	2200      	movs	r2, #0
 8002d92:	601a      	str	r2, [r3, #0]
 8002d94:	605a      	str	r2, [r3, #4]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	4b28      	ldr	r3, [pc, #160]	; (8002e44 <SystemClock_Config+0xcc>)
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <SystemClock_Config+0xcc>)
 8002da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002daa:	6413      	str	r3, [r2, #64]	; 0x40
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <SystemClock_Config+0xcc>)
 8002dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db4:	60bb      	str	r3, [r7, #8]
 8002db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002db8:	2300      	movs	r3, #0
 8002dba:	607b      	str	r3, [r7, #4]
 8002dbc:	4b22      	ldr	r3, [pc, #136]	; (8002e48 <SystemClock_Config+0xd0>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a21      	ldr	r2, [pc, #132]	; (8002e48 <SystemClock_Config+0xd0>)
 8002dc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	4b1f      	ldr	r3, [pc, #124]	; (8002e48 <SystemClock_Config+0xd0>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ddc:	2310      	movs	r3, #16
 8002dde:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de0:	2302      	movs	r3, #2
 8002de2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002de4:	2300      	movs	r3, #0
 8002de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002de8:	2308      	movs	r3, #8
 8002dea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002dec:	23a8      	movs	r3, #168	; 0xa8
 8002dee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002df0:	2302      	movs	r3, #2
 8002df2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002df4:	2304      	movs	r3, #4
 8002df6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002df8:	f107 0320 	add.w	r3, r7, #32
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f002 ff89 	bl	8005d14 <HAL_RCC_OscConfig>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002e08:	f000 fd04 	bl	8003814 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e0c:	230f      	movs	r3, #15
 8002e0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e10:	2302      	movs	r3, #2
 8002e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002e18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002e1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002e24:	f107 030c 	add.w	r3, r7, #12
 8002e28:	2105      	movs	r1, #5
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f003 f9e2 	bl	80061f4 <HAL_RCC_ClockConfig>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002e36:	f000 fced 	bl	8003814 <Error_Handler>
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	3750      	adds	r7, #80	; 0x50
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40007000 	.word	0x40007000

08002e4c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e52:	463b      	mov	r3, r7
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002e5e:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002e60:	4a28      	ldr	r2, [pc, #160]	; (8002f04 <MX_ADC1_Init+0xb8>)
 8002e62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e64:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002e66:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e6a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002e72:	4b23      	ldr	r3, [pc, #140]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e7e:	4b20      	ldr	r3, [pc, #128]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e8c:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <MX_ADC1_Init+0xbc>)
 8002e90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e92:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002e98:	4b19      	ldr	r3, [pc, #100]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e9e:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ea6:	4b16      	ldr	r3, [pc, #88]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002eac:	4814      	ldr	r0, [pc, #80]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002eae:	f001 fbb9 	bl	8004624 <HAL_ADC_Init>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002eb8:	f000 fcac 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002ebc:	230c      	movs	r3, #12
 8002ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002ec4:	2307      	movs	r3, #7
 8002ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ec8:	463b      	mov	r3, r7
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480c      	ldr	r0, [pc, #48]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002ece:	f001 fcfd 	bl	80048cc <HAL_ADC_ConfigChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002ed8:	f000 fc9c 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8002edc:	230d      	movs	r3, #13
 8002ede:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ee4:	463b      	mov	r3, r7
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	4805      	ldr	r0, [pc, #20]	; (8002f00 <MX_ADC1_Init+0xb4>)
 8002eea:	f001 fcef 	bl	80048cc <HAL_ADC_ConfigChannel>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002ef4:	f000 fc8e 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ef8:	bf00      	nop
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000548 	.word	0x20000548
 8002f04:	40012000 	.word	0x40012000
 8002f08:	0f000001 	.word	0x0f000001

08002f0c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f12:	463b      	mov	r3, r7
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8002f1e:	4b6e      	ldr	r3, [pc, #440]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f20:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <MX_ADC2_Init+0x1d0>)
 8002f22:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f24:	4b6c      	ldr	r3, [pc, #432]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f2a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8002f32:	4b69      	ldr	r3, [pc, #420]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002f38:	4b67      	ldr	r3, [pc, #412]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002f3e:	4b66      	ldr	r3, [pc, #408]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f46:	4b64      	ldr	r3, [pc, #400]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f4c:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f4e:	4a64      	ldr	r2, [pc, #400]	; (80030e0 <MX_ADC2_Init+0x1d4>)
 8002f50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f52:	4b61      	ldr	r3, [pc, #388]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 12;
 8002f58:	4b5f      	ldr	r3, [pc, #380]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f5a:	220c      	movs	r2, #12
 8002f5c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002f5e:	4b5e      	ldr	r3, [pc, #376]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f66:	4b5c      	ldr	r3, [pc, #368]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002f6c:	485a      	ldr	r0, [pc, #360]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f6e:	f001 fb59 	bl	8004624 <HAL_ADC_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002f78:	f000 fc4c 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002f80:	2301      	movs	r3, #1
 8002f82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002f84:	2307      	movs	r3, #7
 8002f86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002f88:	463b      	mov	r3, r7
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4852      	ldr	r0, [pc, #328]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002f8e:	f001 fc9d 	bl	80048cc <HAL_ADC_ConfigChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002f98:	f000 fc3c 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fa4:	463b      	mov	r3, r7
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	484b      	ldr	r0, [pc, #300]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002faa:	f001 fc8f 	bl	80048cc <HAL_ADC_ConfigChannel>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8002fb4:	f000 fc2e 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fc0:	463b      	mov	r3, r7
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4844      	ldr	r0, [pc, #272]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002fc6:	f001 fc81 	bl	80048cc <HAL_ADC_ConfigChannel>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8002fd0:	f000 fc20 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002fd8:	2304      	movs	r3, #4
 8002fda:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fdc:	463b      	mov	r3, r7
 8002fde:	4619      	mov	r1, r3
 8002fe0:	483d      	ldr	r0, [pc, #244]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002fe2:	f001 fc73 	bl	80048cc <HAL_ADC_ConfigChannel>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8002fec:	f000 fc12 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8002ff4:	2305      	movs	r3, #5
 8002ff6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002ff8:	463b      	mov	r3, r7
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4836      	ldr	r0, [pc, #216]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8002ffe:	f001 fc65 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003008:	f000 fc04 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800300c:	2305      	movs	r3, #5
 800300e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003010:	2306      	movs	r3, #6
 8003012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003014:	463b      	mov	r3, r7
 8003016:	4619      	mov	r1, r3
 8003018:	482f      	ldr	r0, [pc, #188]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 800301a:	f001 fc57 	bl	80048cc <HAL_ADC_ConfigChannel>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003024:	f000 fbf6 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003028:	2306      	movs	r3, #6
 800302a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800302c:	2307      	movs	r3, #7
 800302e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003030:	463b      	mov	r3, r7
 8003032:	4619      	mov	r1, r3
 8003034:	4828      	ldr	r0, [pc, #160]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8003036:	f001 fc49 	bl	80048cc <HAL_ADC_ConfigChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003040:	f000 fbe8 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003044:	2307      	movs	r3, #7
 8003046:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003048:	2308      	movs	r3, #8
 800304a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800304c:	463b      	mov	r3, r7
 800304e:	4619      	mov	r1, r3
 8003050:	4821      	ldr	r0, [pc, #132]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 8003052:	f001 fc3b 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800305c:	f000 fbda 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003060:	2308      	movs	r3, #8
 8003062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8003064:	2309      	movs	r3, #9
 8003066:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003068:	463b      	mov	r3, r7
 800306a:	4619      	mov	r1, r3
 800306c:	481a      	ldr	r0, [pc, #104]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 800306e:	f001 fc2d 	bl	80048cc <HAL_ADC_ConfigChannel>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8003078:	f000 fbcc 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800307c:	2309      	movs	r3, #9
 800307e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8003080:	230a      	movs	r3, #10
 8003082:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003084:	463b      	mov	r3, r7
 8003086:	4619      	mov	r1, r3
 8003088:	4813      	ldr	r0, [pc, #76]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 800308a:	f001 fc1f 	bl	80048cc <HAL_ADC_ConfigChannel>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d001      	beq.n	8003098 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8003094:	f000 fbbe 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003098:	230e      	movs	r3, #14
 800309a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 800309c:	230b      	movs	r3, #11
 800309e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030a0:	463b      	mov	r3, r7
 80030a2:	4619      	mov	r1, r3
 80030a4:	480c      	ldr	r0, [pc, #48]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 80030a6:	f001 fc11 	bl	80048cc <HAL_ADC_ConfigChannel>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80030b0:	f000 fbb0 	bl	8003814 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80030b4:	230f      	movs	r3, #15
 80030b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80030b8:	230c      	movs	r3, #12
 80030ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80030bc:	463b      	mov	r3, r7
 80030be:	4619      	mov	r1, r3
 80030c0:	4805      	ldr	r0, [pc, #20]	; (80030d8 <MX_ADC2_Init+0x1cc>)
 80030c2:	f001 fc03 	bl	80048cc <HAL_ADC_ConfigChannel>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80030cc:	f000 fba2 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200004f8 	.word	0x200004f8
 80030dc:	40012100 	.word	0x40012100
 80030e0:	0f000001 	.word	0x0f000001

080030e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030e8:	4b12      	ldr	r3, [pc, #72]	; (8003134 <MX_I2C1_Init+0x50>)
 80030ea:	4a13      	ldr	r2, [pc, #76]	; (8003138 <MX_I2C1_Init+0x54>)
 80030ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <MX_I2C1_Init+0x50>)
 80030f0:	4a12      	ldr	r2, [pc, #72]	; (800313c <MX_I2C1_Init+0x58>)
 80030f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <MX_I2C1_Init+0x50>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80030fa:	4b0e      	ldr	r3, [pc, #56]	; (8003134 <MX_I2C1_Init+0x50>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <MX_I2C1_Init+0x50>)
 8003102:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003106:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <MX_I2C1_Init+0x50>)
 800310a:	2200      	movs	r2, #0
 800310c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800310e:	4b09      	ldr	r3, [pc, #36]	; (8003134 <MX_I2C1_Init+0x50>)
 8003110:	2200      	movs	r2, #0
 8003112:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003114:	4b07      	ldr	r3, [pc, #28]	; (8003134 <MX_I2C1_Init+0x50>)
 8003116:	2200      	movs	r2, #0
 8003118:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <MX_I2C1_Init+0x50>)
 800311c:	2200      	movs	r2, #0
 800311e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003120:	4804      	ldr	r0, [pc, #16]	; (8003134 <MX_I2C1_Init+0x50>)
 8003122:	f002 fcbf 	bl	8005aa4 <HAL_I2C_Init>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800312c:	f000 fb72 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003130:	bf00      	nop
 8003132:	bd80      	pop	{r7, pc}
 8003134:	20000630 	.word	0x20000630
 8003138:	40005400 	.word	0x40005400
 800313c:	000186a0 	.word	0x000186a0

08003140 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003144:	4b17      	ldr	r3, [pc, #92]	; (80031a4 <MX_SPI3_Init+0x64>)
 8003146:	4a18      	ldr	r2, [pc, #96]	; (80031a8 <MX_SPI3_Init+0x68>)
 8003148:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <MX_SPI3_Init+0x64>)
 800314c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003150:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003152:	4b14      	ldr	r3, [pc, #80]	; (80031a4 <MX_SPI3_Init+0x64>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <MX_SPI3_Init+0x64>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800315e:	4b11      	ldr	r3, [pc, #68]	; (80031a4 <MX_SPI3_Init+0x64>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003164:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <MX_SPI3_Init+0x64>)
 8003166:	2200      	movs	r2, #0
 8003168:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800316a:	4b0e      	ldr	r3, [pc, #56]	; (80031a4 <MX_SPI3_Init+0x64>)
 800316c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003170:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003172:	4b0c      	ldr	r3, [pc, #48]	; (80031a4 <MX_SPI3_Init+0x64>)
 8003174:	2228      	movs	r2, #40	; 0x28
 8003176:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003178:	4b0a      	ldr	r3, [pc, #40]	; (80031a4 <MX_SPI3_Init+0x64>)
 800317a:	2200      	movs	r2, #0
 800317c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800317e:	4b09      	ldr	r3, [pc, #36]	; (80031a4 <MX_SPI3_Init+0x64>)
 8003180:	2200      	movs	r2, #0
 8003182:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003184:	4b07      	ldr	r3, [pc, #28]	; (80031a4 <MX_SPI3_Init+0x64>)
 8003186:	2200      	movs	r2, #0
 8003188:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800318a:	4b06      	ldr	r3, [pc, #24]	; (80031a4 <MX_SPI3_Init+0x64>)
 800318c:	220a      	movs	r2, #10
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003190:	4804      	ldr	r0, [pc, #16]	; (80031a4 <MX_SPI3_Init+0x64>)
 8003192:	f003 f9fb 	bl	800658c <HAL_SPI_Init>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800319c:	f000 fb3a 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80031a0:	bf00      	nop
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	20000688 	.word	0x20000688
 80031a8:	40003c00 	.word	0x40003c00

080031ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b092      	sub	sp, #72	; 0x48
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031c0:	2200      	movs	r2, #0
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	611a      	str	r2, [r3, #16]
 80031cc:	615a      	str	r2, [r3, #20]
 80031ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	2220      	movs	r2, #32
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f005 f9f0 	bl	80085bc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031dc:	4b32      	ldr	r3, [pc, #200]	; (80032a8 <MX_TIM1_Init+0xfc>)
 80031de:	4a33      	ldr	r2, [pc, #204]	; (80032ac <MX_TIM1_Init+0x100>)
 80031e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <MX_TIM1_Init+0xfc>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e8:	4b2f      	ldr	r3, [pc, #188]	; (80032a8 <MX_TIM1_Init+0xfc>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 839;
 80031ee:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <MX_TIM1_Init+0xfc>)
 80031f0:	f240 3247 	movw	r2, #839	; 0x347
 80031f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031f6:	4b2c      	ldr	r3, [pc, #176]	; (80032a8 <MX_TIM1_Init+0xfc>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031fc:	4b2a      	ldr	r3, [pc, #168]	; (80032a8 <MX_TIM1_Init+0xfc>)
 80031fe:	2200      	movs	r2, #0
 8003200:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003202:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <MX_TIM1_Init+0xfc>)
 8003204:	2200      	movs	r2, #0
 8003206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003208:	4827      	ldr	r0, [pc, #156]	; (80032a8 <MX_TIM1_Init+0xfc>)
 800320a:	f003 ff62 	bl	80070d2 <HAL_TIM_PWM_Init>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d001      	beq.n	8003218 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003214:	f000 fafe 	bl	8003814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003218:	2300      	movs	r3, #0
 800321a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800321c:	2300      	movs	r3, #0
 800321e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003220:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003224:	4619      	mov	r1, r3
 8003226:	4820      	ldr	r0, [pc, #128]	; (80032a8 <MX_TIM1_Init+0xfc>)
 8003228:	f004 fcf2 	bl	8007c10 <HAL_TIMEx_MasterConfigSynchronization>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003232:	f000 faef 	bl	8003814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003236:	2360      	movs	r3, #96	; 0x60
 8003238:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800323a:	2300      	movs	r3, #0
 800323c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800323e:	2300      	movs	r3, #0
 8003240:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003242:	2300      	movs	r3, #0
 8003244:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800324a:	2300      	movs	r3, #0
 800324c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800324e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003252:	220c      	movs	r2, #12
 8003254:	4619      	mov	r1, r3
 8003256:	4814      	ldr	r0, [pc, #80]	; (80032a8 <MX_TIM1_Init+0xfc>)
 8003258:	f004 f976 	bl	8007548 <HAL_TIM_PWM_ConfigChannel>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8003262:	f000 fad7 	bl	8003814 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800327a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800327e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003284:	1d3b      	adds	r3, r7, #4
 8003286:	4619      	mov	r1, r3
 8003288:	4807      	ldr	r0, [pc, #28]	; (80032a8 <MX_TIM1_Init+0xfc>)
 800328a:	f004 fd3d 	bl	8007d08 <HAL_TIMEx_ConfigBreakDeadTime>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8003294:	f000 fabe 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003298:	4803      	ldr	r0, [pc, #12]	; (80032a8 <MX_TIM1_Init+0xfc>)
 800329a:	f000 ff91 	bl	80041c0 <HAL_TIM_MspPostInit>

}
 800329e:	bf00      	nop
 80032a0:	3748      	adds	r7, #72	; 0x48
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	200007c0 	.word	0x200007c0
 80032ac:	40010000 	.word	0x40010000

080032b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08c      	sub	sp, #48	; 0x30
 80032b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80032b6:	f107 030c 	add.w	r3, r7, #12
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f005 f97c 	bl	80085bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032c4:	1d3b      	adds	r3, r7, #4
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80032cc:	4b20      	ldr	r3, [pc, #128]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032ce:	4a21      	ldr	r2, [pc, #132]	; (8003354 <MX_TIM3_Init+0xa4>)
 80032d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80032d2:	4b1f      	ldr	r3, [pc, #124]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d8:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032da:	2200      	movs	r2, #0
 80032dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80032de:	4b1c      	ldr	r3, [pc, #112]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032e4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <MX_TIM3_Init+0xa0>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80032f2:	2301      	movs	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80032fa:	2301      	movs	r3, #1
 80032fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800330a:	2301      	movs	r3, #1
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800330e:	2300      	movs	r3, #0
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003316:	f107 030c 	add.w	r3, r7, #12
 800331a:	4619      	mov	r1, r3
 800331c:	480c      	ldr	r0, [pc, #48]	; (8003350 <MX_TIM3_Init+0xa0>)
 800331e:	f003 ff41 	bl	80071a4 <HAL_TIM_Encoder_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003328:	f000 fa74 	bl	8003814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800332c:	2300      	movs	r3, #0
 800332e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003330:	2300      	movs	r3, #0
 8003332:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4805      	ldr	r0, [pc, #20]	; (8003350 <MX_TIM3_Init+0xa0>)
 800333a:	f004 fc69 	bl	8007c10 <HAL_TIMEx_MasterConfigSynchronization>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003344:	f000 fa66 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003348:	bf00      	nop
 800334a:	3730      	adds	r7, #48	; 0x30
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000418 	.word	0x20000418
 8003354:	40000400 	.word	0x40000400

08003358 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b08c      	sub	sp, #48	; 0x30
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800335e:	f107 030c 	add.w	r3, r7, #12
 8003362:	2224      	movs	r2, #36	; 0x24
 8003364:	2100      	movs	r1, #0
 8003366:	4618      	mov	r0, r3
 8003368:	f005 f928 	bl	80085bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800336c:	1d3b      	adds	r3, r7, #4
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003374:	4b20      	ldr	r3, [pc, #128]	; (80033f8 <MX_TIM4_Init+0xa0>)
 8003376:	4a21      	ldr	r2, [pc, #132]	; (80033fc <MX_TIM4_Init+0xa4>)
 8003378:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <MX_TIM4_Init+0xa0>)
 800337c:	2200      	movs	r2, #0
 800337e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003380:	4b1d      	ldr	r3, [pc, #116]	; (80033f8 <MX_TIM4_Init+0xa0>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003386:	4b1c      	ldr	r3, [pc, #112]	; (80033f8 <MX_TIM4_Init+0xa0>)
 8003388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800338c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800338e:	4b1a      	ldr	r3, [pc, #104]	; (80033f8 <MX_TIM4_Init+0xa0>)
 8003390:	2200      	movs	r2, #0
 8003392:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003394:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <MX_TIM4_Init+0xa0>)
 8003396:	2200      	movs	r2, #0
 8003398:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800339a:	2301      	movs	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80033a2:	2301      	movs	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80033ae:	2300      	movs	r3, #0
 80033b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80033b2:	2301      	movs	r3, #1
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	4619      	mov	r1, r3
 80033c4:	480c      	ldr	r0, [pc, #48]	; (80033f8 <MX_TIM4_Init+0xa0>)
 80033c6:	f003 feed 	bl	80071a4 <HAL_TIM_Encoder_Init>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80033d0:	f000 fa20 	bl	8003814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033d4:	2300      	movs	r3, #0
 80033d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033d8:	2300      	movs	r3, #0
 80033da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80033dc:	1d3b      	adds	r3, r7, #4
 80033de:	4619      	mov	r1, r3
 80033e0:	4805      	ldr	r0, [pc, #20]	; (80033f8 <MX_TIM4_Init+0xa0>)
 80033e2:	f004 fc15 	bl	8007c10 <HAL_TIMEx_MasterConfigSynchronization>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80033ec:	f000 fa12 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80033f0:	bf00      	nop
 80033f2:	3730      	adds	r7, #48	; 0x30
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	200003d8 	.word	0x200003d8
 80033fc:	40000800 	.word	0x40000800

08003400 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003406:	463b      	mov	r3, r7
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800340e:	4b15      	ldr	r3, [pc, #84]	; (8003464 <MX_TIM6_Init+0x64>)
 8003410:	4a15      	ldr	r2, [pc, #84]	; (8003468 <MX_TIM6_Init+0x68>)
 8003412:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 8003414:	4b13      	ldr	r3, [pc, #76]	; (8003464 <MX_TIM6_Init+0x64>)
 8003416:	2253      	movs	r2, #83	; 0x53
 8003418:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <MX_TIM6_Init+0x64>)
 800341c:	2200      	movs	r2, #0
 800341e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <MX_TIM6_Init+0x64>)
 8003422:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003426:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003428:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <MX_TIM6_Init+0x64>)
 800342a:	2200      	movs	r2, #0
 800342c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800342e:	480d      	ldr	r0, [pc, #52]	; (8003464 <MX_TIM6_Init+0x64>)
 8003430:	f003 fe00 	bl	8007034 <HAL_TIM_Base_Init>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800343a:	f000 f9eb 	bl	8003814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003442:	2300      	movs	r3, #0
 8003444:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003446:	463b      	mov	r3, r7
 8003448:	4619      	mov	r1, r3
 800344a:	4806      	ldr	r0, [pc, #24]	; (8003464 <MX_TIM6_Init+0x64>)
 800344c:	f004 fbe0 	bl	8007c10 <HAL_TIMEx_MasterConfigSynchronization>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003456:	f000 f9dd 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	20000780 	.word	0x20000780
 8003468:	40001000 	.word	0x40001000

0800346c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b082      	sub	sp, #8
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003472:	463b      	mov	r3, r7
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800347a:	4b14      	ldr	r3, [pc, #80]	; (80034cc <MX_TIM7_Init+0x60>)
 800347c:	4a14      	ldr	r2, [pc, #80]	; (80034d0 <MX_TIM7_Init+0x64>)
 800347e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <MX_TIM7_Init+0x60>)
 8003482:	2253      	movs	r2, #83	; 0x53
 8003484:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <MX_TIM7_Init+0x60>)
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <MX_TIM7_Init+0x60>)
 800348e:	2263      	movs	r2, #99	; 0x63
 8003490:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <MX_TIM7_Init+0x60>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003498:	480c      	ldr	r0, [pc, #48]	; (80034cc <MX_TIM7_Init+0x60>)
 800349a:	f003 fdcb 	bl	8007034 <HAL_TIM_Base_Init>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80034a4:	f000 f9b6 	bl	8003814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034a8:	2300      	movs	r3, #0
 80034aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80034b0:	463b      	mov	r3, r7
 80034b2:	4619      	mov	r1, r3
 80034b4:	4805      	ldr	r0, [pc, #20]	; (80034cc <MX_TIM7_Init+0x60>)
 80034b6:	f004 fbab 	bl	8007c10 <HAL_TIMEx_MasterConfigSynchronization>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80034c0:	f000 f9a8 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	20000868 	.word	0x20000868
 80034d0:	40001400 	.word	0x40001400

080034d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b092      	sub	sp, #72	; 0x48
 80034d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80034de:	2200      	movs	r2, #0
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	609a      	str	r2, [r3, #8]
 80034f0:	60da      	str	r2, [r3, #12]
 80034f2:	611a      	str	r2, [r3, #16]
 80034f4:	615a      	str	r2, [r3, #20]
 80034f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	2220      	movs	r2, #32
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f005 f85c 	bl	80085bc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003504:	4b39      	ldr	r3, [pc, #228]	; (80035ec <MX_TIM8_Init+0x118>)
 8003506:	4a3a      	ldr	r2, [pc, #232]	; (80035f0 <MX_TIM8_Init+0x11c>)
 8003508:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3;
 800350a:	4b38      	ldr	r3, [pc, #224]	; (80035ec <MX_TIM8_Init+0x118>)
 800350c:	2203      	movs	r2, #3
 800350e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003510:	4b36      	ldr	r3, [pc, #216]	; (80035ec <MX_TIM8_Init+0x118>)
 8003512:	2200      	movs	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8003516:	4b35      	ldr	r3, [pc, #212]	; (80035ec <MX_TIM8_Init+0x118>)
 8003518:	f240 628f 	movw	r2, #1679	; 0x68f
 800351c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800351e:	4b33      	ldr	r3, [pc, #204]	; (80035ec <MX_TIM8_Init+0x118>)
 8003520:	2200      	movs	r2, #0
 8003522:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003524:	4b31      	ldr	r3, [pc, #196]	; (80035ec <MX_TIM8_Init+0x118>)
 8003526:	2200      	movs	r2, #0
 8003528:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800352a:	4b30      	ldr	r3, [pc, #192]	; (80035ec <MX_TIM8_Init+0x118>)
 800352c:	2200      	movs	r2, #0
 800352e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003530:	482e      	ldr	r0, [pc, #184]	; (80035ec <MX_TIM8_Init+0x118>)
 8003532:	f003 fdce 	bl	80070d2 <HAL_TIM_PWM_Init>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800353c:	f000 f96a 	bl	8003814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003540:	2300      	movs	r3, #0
 8003542:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003544:	2300      	movs	r3, #0
 8003546:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003548:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800354c:	4619      	mov	r1, r3
 800354e:	4827      	ldr	r0, [pc, #156]	; (80035ec <MX_TIM8_Init+0x118>)
 8003550:	f004 fb5e 	bl	8007c10 <HAL_TIMEx_MasterConfigSynchronization>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800355a:	f000 f95b 	bl	8003814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800355e:	2360      	movs	r3, #96	; 0x60
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003562:	2300      	movs	r3, #0
 8003564:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003566:	2300      	movs	r3, #0
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800356a:	2300      	movs	r3, #0
 800356c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800356e:	2300      	movs	r3, #0
 8003570:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003576:	2300      	movs	r3, #0
 8003578:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800357a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800357e:	2200      	movs	r2, #0
 8003580:	4619      	mov	r1, r3
 8003582:	481a      	ldr	r0, [pc, #104]	; (80035ec <MX_TIM8_Init+0x118>)
 8003584:	f003 ffe0 	bl	8007548 <HAL_TIM_PWM_ConfigChannel>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800358e:	f000 f941 	bl	8003814 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003596:	2208      	movs	r2, #8
 8003598:	4619      	mov	r1, r3
 800359a:	4814      	ldr	r0, [pc, #80]	; (80035ec <MX_TIM8_Init+0x118>)
 800359c:	f003 ffd4 	bl	8007548 <HAL_TIM_PWM_ConfigChannel>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80035a6:	f000 f935 	bl	8003814 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80035be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80035c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80035c8:	1d3b      	adds	r3, r7, #4
 80035ca:	4619      	mov	r1, r3
 80035cc:	4807      	ldr	r0, [pc, #28]	; (80035ec <MX_TIM8_Init+0x118>)
 80035ce:	f004 fb9b 	bl	8007d08 <HAL_TIMEx_ConfigBreakDeadTime>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80035d8:	f000 f91c 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80035dc:	4803      	ldr	r0, [pc, #12]	; (80035ec <MX_TIM8_Init+0x118>)
 80035de:	f000 fdef 	bl	80041c0 <HAL_TIM_MspPostInit>

}
 80035e2:	bf00      	nop
 80035e4:	3748      	adds	r7, #72	; 0x48
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200005e8 	.word	0x200005e8
 80035f0:	40010400 	.word	0x40010400

080035f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <MX_USART1_UART_Init+0x4c>)
 80035fa:	4a12      	ldr	r2, [pc, #72]	; (8003644 <MX_USART1_UART_Init+0x50>)
 80035fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <MX_USART1_UART_Init+0x4c>)
 8003600:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003604:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003606:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <MX_USART1_UART_Init+0x4c>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <MX_USART1_UART_Init+0x4c>)
 800360e:	2200      	movs	r2, #0
 8003610:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <MX_USART1_UART_Init+0x4c>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <MX_USART1_UART_Init+0x4c>)
 800361a:	220c      	movs	r2, #12
 800361c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <MX_USART1_UART_Init+0x4c>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <MX_USART1_UART_Init+0x4c>)
 8003626:	2200      	movs	r2, #0
 8003628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800362a:	4805      	ldr	r0, [pc, #20]	; (8003640 <MX_USART1_UART_Init+0x4c>)
 800362c:	f004 fbd2 	bl	8007dd4 <HAL_UART_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003636:	f000 f8ed 	bl	8003814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800363a:	bf00      	nop
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	200006e0 	.word	0x200006e0
 8003644:	40011000 	.word	0x40011000

08003648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	607b      	str	r3, [r7, #4]
 8003652:	4b10      	ldr	r3, [pc, #64]	; (8003694 <MX_DMA_Init+0x4c>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <MX_DMA_Init+0x4c>)
 8003658:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800365c:	6313      	str	r3, [r2, #48]	; 0x30
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <MX_DMA_Init+0x4c>)
 8003660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003666:	607b      	str	r3, [r7, #4]
 8003668:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800366a:	2200      	movs	r2, #0
 800366c:	2100      	movs	r1, #0
 800366e:	2038      	movs	r0, #56	; 0x38
 8003670:	f001 fca7 	bl	8004fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003674:	2038      	movs	r0, #56	; 0x38
 8003676:	f001 fcc0 	bl	8004ffa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800367a:	2200      	movs	r2, #0
 800367c:	2100      	movs	r1, #0
 800367e:	203a      	movs	r0, #58	; 0x3a
 8003680:	f001 fc9f 	bl	8004fc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003684:	203a      	movs	r0, #58	; 0x3a
 8003686:	f001 fcb8 	bl	8004ffa <HAL_NVIC_EnableIRQ>

}
 800368a:	bf00      	nop
 800368c:	3708      	adds	r7, #8
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800

08003698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	; 0x28
 800369c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369e:	f107 0314 	add.w	r3, r7, #20
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	609a      	str	r2, [r3, #8]
 80036aa:	60da      	str	r2, [r3, #12]
 80036ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80036ae:	2300      	movs	r3, #0
 80036b0:	613b      	str	r3, [r7, #16]
 80036b2:	4b53      	ldr	r3, [pc, #332]	; (8003800 <MX_GPIO_Init+0x168>)
 80036b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b6:	4a52      	ldr	r2, [pc, #328]	; (8003800 <MX_GPIO_Init+0x168>)
 80036b8:	f043 0304 	orr.w	r3, r3, #4
 80036bc:	6313      	str	r3, [r2, #48]	; 0x30
 80036be:	4b50      	ldr	r3, [pc, #320]	; (8003800 <MX_GPIO_Init+0x168>)
 80036c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80036ca:	2300      	movs	r3, #0
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	4b4c      	ldr	r3, [pc, #304]	; (8003800 <MX_GPIO_Init+0x168>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	4a4b      	ldr	r2, [pc, #300]	; (8003800 <MX_GPIO_Init+0x168>)
 80036d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036d8:	6313      	str	r3, [r2, #48]	; 0x30
 80036da:	4b49      	ldr	r3, [pc, #292]	; (8003800 <MX_GPIO_Init+0x168>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e6:	2300      	movs	r3, #0
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	4b45      	ldr	r3, [pc, #276]	; (8003800 <MX_GPIO_Init+0x168>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	4a44      	ldr	r2, [pc, #272]	; (8003800 <MX_GPIO_Init+0x168>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	6313      	str	r3, [r2, #48]	; 0x30
 80036f6:	4b42      	ldr	r3, [pc, #264]	; (8003800 <MX_GPIO_Init+0x168>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	60bb      	str	r3, [r7, #8]
 8003700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	607b      	str	r3, [r7, #4]
 8003706:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <MX_GPIO_Init+0x168>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	4a3d      	ldr	r2, [pc, #244]	; (8003800 <MX_GPIO_Init+0x168>)
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	6313      	str	r3, [r2, #48]	; 0x30
 8003712:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <MX_GPIO_Init+0x168>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	603b      	str	r3, [r7, #0]
 8003722:	4b37      	ldr	r3, [pc, #220]	; (8003800 <MX_GPIO_Init+0x168>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	4a36      	ldr	r2, [pc, #216]	; (8003800 <MX_GPIO_Init+0x168>)
 8003728:	f043 0308 	orr.w	r3, r3, #8
 800372c:	6313      	str	r3, [r2, #48]	; 0x30
 800372e:	4b34      	ldr	r3, [pc, #208]	; (8003800 <MX_GPIO_Init+0x168>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 800373a:	2200      	movs	r2, #0
 800373c:	f24e 2180 	movw	r1, #57984	; 0xe280
 8003740:	4830      	ldr	r0, [pc, #192]	; (8003804 <MX_GPIO_Init+0x16c>)
 8003742:	f002 f995 	bl	8005a70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003746:	2200      	movs	r2, #0
 8003748:	f44f 41f8 	mov.w	r1, #31744	; 0x7c00
 800374c:	482e      	ldr	r0, [pc, #184]	; (8003808 <MX_GPIO_Init+0x170>)
 800374e:	f002 f98f 	bl	8005a70 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8003752:	2200      	movs	r2, #0
 8003754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003758:	482c      	ldr	r0, [pc, #176]	; (800380c <MX_GPIO_Init+0x174>)
 800375a:	f002 f989 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800375e:	2200      	movs	r2, #0
 8003760:	2104      	movs	r1, #4
 8003762:	482b      	ldr	r0, [pc, #172]	; (8003810 <MX_GPIO_Init+0x178>)
 8003764:	f002 f984 	bl	8005a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC7
                           PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_7
 8003768:	f24e 2380 	movw	r3, #57984	; 0xe280
 800376c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800376e:	2301      	movs	r3, #1
 8003770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800377a:	f107 0314 	add.w	r3, r7, #20
 800377e:	4619      	mov	r1, r3
 8003780:	4820      	ldr	r0, [pc, #128]	; (8003804 <MX_GPIO_Init+0x16c>)
 8003782:	f001 ffc3 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8003786:	f44f 43f8 	mov.w	r3, #31744	; 0x7c00
 800378a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800378c:	2301      	movs	r3, #1
 800378e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003790:	2300      	movs	r3, #0
 8003792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003794:	2300      	movs	r3, #0
 8003796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003798:	f107 0314 	add.w	r3, r7, #20
 800379c:	4619      	mov	r1, r3
 800379e:	481a      	ldr	r0, [pc, #104]	; (8003808 <MX_GPIO_Init+0x170>)
 80037a0:	f001 ffb4 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80037a4:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80037a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037aa:	2300      	movs	r3, #0
 80037ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b2:	f107 0314 	add.w	r3, r7, #20
 80037b6:	4619      	mov	r1, r3
 80037b8:	4814      	ldr	r0, [pc, #80]	; (800380c <MX_GPIO_Init+0x174>)
 80037ba:	f001 ffa7 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80037be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c4:	2301      	movs	r3, #1
 80037c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037cc:	2300      	movs	r3, #0
 80037ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d0:	f107 0314 	add.w	r3, r7, #20
 80037d4:	4619      	mov	r1, r3
 80037d6:	480d      	ldr	r0, [pc, #52]	; (800380c <MX_GPIO_Init+0x174>)
 80037d8:	f001 ff98 	bl	800570c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80037dc:	2304      	movs	r3, #4
 80037de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037e0:	2301      	movs	r3, #1
 80037e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e8:	2300      	movs	r3, #0
 80037ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037ec:	f107 0314 	add.w	r3, r7, #20
 80037f0:	4619      	mov	r1, r3
 80037f2:	4807      	ldr	r0, [pc, #28]	; (8003810 <MX_GPIO_Init+0x178>)
 80037f4:	f001 ff8a 	bl	800570c <HAL_GPIO_Init>

}
 80037f8:	bf00      	nop
 80037fa:	3728      	adds	r7, #40	; 0x28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40023800 	.word	0x40023800
 8003804:	40020800 	.word	0x40020800
 8003808:	40020400 	.word	0x40020400
 800380c:	40020000 	.word	0x40020000
 8003810:	40020c00 	.word	0x40020c00

08003814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003818:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800381a:	e7fe      	b.n	800381a <Error_Handler+0x6>

0800381c <initMotor>:
int16_t rotation_l = 0;
int16_t rotation_r = 0;
int16_t mon_rev_l, mon_rev_r;

void initMotor(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1); //PWM start
 8003820:	2100      	movs	r1, #0
 8003822:	4808      	ldr	r0, [pc, #32]	; (8003844 <initMotor+0x28>)
 8003824:	f003 fc80 	bl	8007128 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3); //PWM start
 8003828:	2108      	movs	r1, #8
 800382a:	4806      	ldr	r0, [pc, #24]	; (8003844 <initMotor+0x28>)
 800382c:	f003 fc7c 	bl	8007128 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8003830:	210c      	movs	r1, #12
 8003832:	4805      	ldr	r0, [pc, #20]	; (8003848 <initMotor+0x2c>)
 8003834:	f003 fc78 	bl	8007128 <HAL_TIM_PWM_Start>

	HAL_Delay(100);
 8003838:	2064      	movs	r0, #100	; 0x64
 800383a:	f000 fed1 	bl	80045e0 <HAL_Delay>
}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200005e8 	.word	0x200005e8
 8003848:	200007c0 	.word	0x200007c0

0800384c <motorCtrlFlip>:

void motorCtrlFlip(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
	int16_t motor_pwm_l, motor_pwm_r;

	if(motor_l >= 0){
 8003852:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <motorCtrlFlip+0xb0>)
 8003854:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003858:	2b00      	cmp	r3, #0
 800385a:	db0d      	blt.n	8003878 <motorCtrlFlip+0x2c>
		motor_pwm_l = motor_l;
 800385c:	4b27      	ldr	r3, [pc, #156]	; (80038fc <motorCtrlFlip+0xb0>)
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8003862:	4b27      	ldr	r3, [pc, #156]	; (8003900 <motorCtrlFlip+0xb4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800386a:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800386c:	2201      	movs	r2, #1
 800386e:	2180      	movs	r1, #128	; 0x80
 8003870:	4824      	ldr	r0, [pc, #144]	; (8003904 <motorCtrlFlip+0xb8>)
 8003872:	f002 f8fd 	bl	8005a70 <HAL_GPIO_WritePin>
 8003876:	e010      	b.n	800389a <motorCtrlFlip+0x4e>
	}
	else{
		motor_pwm_l = motor_l * (-1);
 8003878:	4b20      	ldr	r3, [pc, #128]	; (80038fc <motorCtrlFlip+0xb0>)
 800387a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800387e:	b29b      	uxth	r3, r3
 8003880:	425b      	negs	r3, r3
 8003882:	b29b      	uxth	r3, r3
 8003884:	80fb      	strh	r3, [r7, #6]
		// motor1
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, motor_pwm_l);
 8003886:	4b1e      	ldr	r3, [pc, #120]	; (8003900 <motorCtrlFlip+0xb4>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800388e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8003890:	2200      	movs	r2, #0
 8003892:	2180      	movs	r1, #128	; 0x80
 8003894:	481b      	ldr	r0, [pc, #108]	; (8003904 <motorCtrlFlip+0xb8>)
 8003896:	f002 f8eb 	bl	8005a70 <HAL_GPIO_WritePin>
	}

	if(motor_r >= 0){
 800389a:	4b1b      	ldr	r3, [pc, #108]	; (8003908 <motorCtrlFlip+0xbc>)
 800389c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	db0e      	blt.n	80038c2 <motorCtrlFlip+0x76>
		motor_pwm_r = motor_r;
 80038a4:	4b18      	ldr	r3, [pc, #96]	; (8003908 <motorCtrlFlip+0xbc>)
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	80bb      	strh	r3, [r7, #4]
		// motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80038aa:	4b15      	ldr	r3, [pc, #84]	; (8003900 <motorCtrlFlip+0xb4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80038b2:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80038b4:	2201      	movs	r2, #1
 80038b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038ba:	4812      	ldr	r0, [pc, #72]	; (8003904 <motorCtrlFlip+0xb8>)
 80038bc:	f002 f8d8 	bl	8005a70 <HAL_GPIO_WritePin>
 80038c0:	e011      	b.n	80038e6 <motorCtrlFlip+0x9a>
	}
	else{
		motor_pwm_r = motor_r * (-1);
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <motorCtrlFlip+0xbc>)
 80038c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	425b      	negs	r3, r3
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	80bb      	strh	r3, [r7, #4]
		//motor2
		__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, motor_pwm_r);
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <motorCtrlFlip+0xb4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80038d8:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80038da:	2200      	movs	r2, #0
 80038dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038e0:	4808      	ldr	r0, [pc, #32]	; (8003904 <motorCtrlFlip+0xb8>)
 80038e2:	f002 f8c5 	bl	8005a70 <HAL_GPIO_WritePin>
	}
	mon_rev_l = motor_pwm_l;
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <motorCtrlFlip+0xc0>)
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	8013      	strh	r3, [r2, #0]
	mon_rev_r = motor_pwm_r;
 80038ec:	4a08      	ldr	r2, [pc, #32]	; (8003910 <motorCtrlFlip+0xc4>)
 80038ee:	88bb      	ldrh	r3, [r7, #4]
 80038f0:	8013      	strh	r3, [r2, #0]
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	200003bc 	.word	0x200003bc
 8003900:	200005e8 	.word	0x200005e8
 8003904:	40020800 	.word	0x40020800
 8003908:	200003be 	.word	0x200003be
 800390c:	200008ac 	.word	0x200008ac
 8003910:	200008aa 	.word	0x200008aa

08003914 <suctionmotorCtrlFlip>:

void suctionmotorCtrlFlip(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, suction_motor);
 8003918:	4b05      	ldr	r3, [pc, #20]	; (8003930 <suctionmotorCtrlFlip+0x1c>)
 800391a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800391e:	4b05      	ldr	r3, [pc, #20]	; (8003934 <suctionmotorCtrlFlip+0x20>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	200003c0 	.word	0x200003c0
 8003934:	200007c0 	.word	0x200007c0

08003938 <setMotor>:

void setMotor(int16_t l, int16_t r)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	4603      	mov	r3, r0
 8003940:	460a      	mov	r2, r1
 8003942:	80fb      	strh	r3, [r7, #6]
 8003944:	4613      	mov	r3, r2
 8003946:	80bb      	strh	r3, [r7, #4]
	if(l >= MAX_COUNTER_PERIOD) l = MAX_COUNTER_PERIOD;
 8003948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800394c:	f240 628e 	movw	r2, #1678	; 0x68e
 8003950:	4293      	cmp	r3, r2
 8003952:	dd03      	ble.n	800395c <setMotor+0x24>
 8003954:	f240 638f 	movw	r3, #1679	; 0x68f
 8003958:	80fb      	strh	r3, [r7, #6]
 800395a:	e007      	b.n	800396c <setMotor+0x34>
	else if(l <= MIN_COUNTER_PERIOD) l = MIN_COUNTER_PERIOD;
 800395c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003960:	4a11      	ldr	r2, [pc, #68]	; (80039a8 <setMotor+0x70>)
 8003962:	4293      	cmp	r3, r2
 8003964:	da02      	bge.n	800396c <setMotor+0x34>
 8003966:	f64f 1371 	movw	r3, #63857	; 0xf971
 800396a:	80fb      	strh	r3, [r7, #6]

	if(r >= MAX_COUNTER_PERIOD) r = MAX_COUNTER_PERIOD;
 800396c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003970:	f240 628e 	movw	r2, #1678	; 0x68e
 8003974:	4293      	cmp	r3, r2
 8003976:	dd03      	ble.n	8003980 <setMotor+0x48>
 8003978:	f240 638f 	movw	r3, #1679	; 0x68f
 800397c:	80bb      	strh	r3, [r7, #4]
 800397e:	e007      	b.n	8003990 <setMotor+0x58>
	else if(r <= MIN_COUNTER_PERIOD) r = MIN_COUNTER_PERIOD;
 8003980:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003984:	4a08      	ldr	r2, [pc, #32]	; (80039a8 <setMotor+0x70>)
 8003986:	4293      	cmp	r3, r2
 8003988:	da02      	bge.n	8003990 <setMotor+0x58>
 800398a:	f64f 1371 	movw	r3, #63857	; 0xf971
 800398e:	80bb      	strh	r3, [r7, #4]

	motor_l = l;
 8003990:	4a06      	ldr	r2, [pc, #24]	; (80039ac <setMotor+0x74>)
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	8013      	strh	r3, [r2, #0]
	motor_r = r;
 8003996:	4a06      	ldr	r2, [pc, #24]	; (80039b0 <setMotor+0x78>)
 8003998:	88bb      	ldrh	r3, [r7, #4]
 800399a:	8013      	strh	r3, [r2, #0]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	fffff972 	.word	0xfffff972
 80039ac:	200003bc 	.word	0x200003bc
 80039b0:	200003be 	.word	0x200003be

080039b4 <setsuctionMotor>:

void setsuctionMotor(int16_t suction)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	4603      	mov	r3, r0
 80039bc:	80fb      	strh	r3, [r7, #6]
	suction_motor = abs(suction);
 80039be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	bfb8      	it	lt
 80039c6:	425b      	neglt	r3, r3
 80039c8:	b21a      	sxth	r2, r3
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <setsuctionMotor+0x38>)
 80039cc:	801a      	strh	r2, [r3, #0]

	if(suction >= SUCTION_MOTOR_PERIOD) suction = SUCTION_MOTOR_PERIOD;
 80039ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039d2:	f240 3246 	movw	r2, #838	; 0x346
 80039d6:	4293      	cmp	r3, r2
 80039d8:	dd02      	ble.n	80039e0 <setsuctionMotor+0x2c>
 80039da:	f240 3347 	movw	r3, #839	; 0x347
 80039de:	80fb      	strh	r3, [r7, #6]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	200003c0 	.word	0x200003c0

080039f0 <updateSideSensorStatus>:

static float min_velocity, max_velocity;

//white <= 1700 black >= 1700

void updateSideSensorStatus(){
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
	goal_timer++;
 80039f4:	4b17      	ldr	r3, [pc, #92]	; (8003a54 <updateSideSensorStatus+0x64>)
 80039f6:	881b      	ldrh	r3, [r3, #0]
 80039f8:	3301      	adds	r3, #1
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <updateSideSensorStatus+0x64>)
 80039fe:	801a      	strh	r2, [r3, #0]

	if(goal_timer >= 10000){
 8003a00:	4b14      	ldr	r3, [pc, #80]	; (8003a54 <updateSideSensorStatus+0x64>)
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d903      	bls.n	8003a14 <updateSideSensorStatus+0x24>
		goal_timer = 10000;
 8003a0c:	4b11      	ldr	r3, [pc, #68]	; (8003a54 <updateSideSensorStatus+0x64>)
 8003a0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8003a12:	801a      	strh	r2, [r3, #0]
	}

	if(side_sensorL <= 500){
 8003a14:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <updateSideSensorStatus+0x68>)
 8003a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a1e:	dc03      	bgt.n	8003a28 <updateSideSensorStatus+0x38>
		side_sensor_l = true;
 8003a20:	4b0e      	ldr	r3, [pc, #56]	; (8003a5c <updateSideSensorStatus+0x6c>)
 8003a22:	2201      	movs	r2, #1
 8003a24:	701a      	strb	r2, [r3, #0]
 8003a26:	e002      	b.n	8003a2e <updateSideSensorStatus+0x3e>
	}
	else{
		side_sensor_l = false;
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <updateSideSensorStatus+0x6c>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
	}

	if(side_sensorR <= 500){
 8003a2e:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <updateSideSensorStatus+0x70>)
 8003a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003a38:	dc03      	bgt.n	8003a42 <updateSideSensorStatus+0x52>
		side_sensor_r = true;
 8003a3a:	4b0a      	ldr	r3, [pc, #40]	; (8003a64 <updateSideSensorStatus+0x74>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	701a      	strb	r2, [r3, #0]
	}
	else{
		side_sensor_r = false;
	}
}
 8003a40:	e002      	b.n	8003a48 <updateSideSensorStatus+0x58>
		side_sensor_r = false;
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <updateSideSensorStatus+0x74>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
}
 8003a48:	bf00      	nop
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	200003c2 	.word	0x200003c2
 8003a58:	200004c0 	.word	0x200004c0
 8003a5c:	200003c4 	.word	0x200003c4
 8003a60:	2000045c 	.word	0x2000045c
 8003a64:	200003c5 	.word	0x200003c5

08003a68 <running>:

void running(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
	uint16_t pattern = 0;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	80fb      	strh	r3, [r7, #6]
	startLineTrace();
 8003a72:	f7fd ff77 	bl	8001964 <startLineTrace>
	startVelocityControl();
 8003a76:	f7fe ff65 	bl	8002944 <startVelocityControl>
	//setTargetVelocity(min_velocity);

	while(goal_flag == false){
 8003a7a:	e0a1      	b.n	8003bc0 <running+0x158>
		switch(pattern){
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	2b14      	cmp	r3, #20
 8003a80:	f200 8097 	bhi.w	8003bb2 <running+0x14a>
 8003a84:	a201      	add	r2, pc, #4	; (adr r2, 8003a8c <running+0x24>)
 8003a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8a:	bf00      	nop
 8003a8c:	08003ae1 	.word	0x08003ae1
 8003a90:	08003bb3 	.word	0x08003bb3
 8003a94:	08003bb3 	.word	0x08003bb3
 8003a98:	08003bb3 	.word	0x08003bb3
 8003a9c:	08003bb3 	.word	0x08003bb3
 8003aa0:	08003b01 	.word	0x08003b01
 8003aa4:	08003bb3 	.word	0x08003bb3
 8003aa8:	08003bb3 	.word	0x08003bb3
 8003aac:	08003bb3 	.word	0x08003bb3
 8003ab0:	08003bb3 	.word	0x08003bb3
 8003ab4:	08003b15 	.word	0x08003b15
 8003ab8:	08003bb3 	.word	0x08003bb3
 8003abc:	08003bb3 	.word	0x08003bb3
 8003ac0:	08003bb3 	.word	0x08003bb3
 8003ac4:	08003bb3 	.word	0x08003bb3
 8003ac8:	08003bb3 	.word	0x08003bb3
 8003acc:	08003bb3 	.word	0x08003bb3
 8003ad0:	08003bb3 	.word	0x08003bb3
 8003ad4:	08003bb3 	.word	0x08003bb3
 8003ad8:	08003bb3 	.word	0x08003bb3
 8003adc:	08003ba5 	.word	0x08003ba5

				  case 0:
					  if(getSideSensorStatusR() == true){
 8003ae0:	f000 f88e 	bl	8003c00 <getSideSensorStatusR>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d060      	beq.n	8003bac <running+0x144>
						  start_goal_line_cnt++;
 8003aea:	4b3b      	ldr	r3, [pc, #236]	; (8003bd8 <running+0x170>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	3301      	adds	r3, #1
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	4b39      	ldr	r3, [pc, #228]	; (8003bd8 <running+0x170>)
 8003af4:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003af6:	f7fd fb41 	bl	800117c <clearGoalJudgeDistance>
						  pattern = 5;
 8003afa:	2305      	movs	r3, #5
 8003afc:	80fb      	strh	r3, [r7, #6]
					  }
					  break;
 8003afe:	e055      	b.n	8003bac <running+0x144>

				  case 5:
					  if(getSideSensorStatusR() == false) pattern = 10;
 8003b00:	f000 f87e 	bl	8003c00 <getSideSensorStatusR>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f083 0301 	eor.w	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <running+0xac>
 8003b10:	230a      	movs	r3, #10
 8003b12:	80fb      	strh	r3, [r7, #6]

				  case 10:
					  if(getSideSensorStatusL() == true){ //Leght side line detect
 8003b14:	f000 f868 	bl	8003be8 <getSideSensorStatusL>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d004      	beq.n	8003b28 <running+0xc0>
						  goal_judge_flag = false;
 8003b1e:	4b2f      	ldr	r3, [pc, #188]	; (8003bdc <running+0x174>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003b24:	f7fd fb2a 	bl	800117c <clearGoalJudgeDistance>
					  }

					  if(goal_judge_flag == false && getSideSensorStatusR() == true &&  getGoalJudgeDistance() >= 70){
 8003b28:	4b2c      	ldr	r3, [pc, #176]	; (8003bdc <running+0x174>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	f083 0301 	eor.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d015      	beq.n	8003b62 <running+0xfa>
 8003b36:	f000 f863 	bl	8003c00 <getSideSensorStatusR>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d010      	beq.n	8003b62 <running+0xfa>
 8003b40:	f7fd fb0e 	bl	8001160 <getGoalJudgeDistance>
 8003b44:	eeb0 7a40 	vmov.f32	s14, s0
 8003b48:	eddf 7a25 	vldr	s15, [pc, #148]	; 8003be0 <running+0x178>
 8003b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b54:	db05      	blt.n	8003b62 <running+0xfa>
						  goal_judge_flag = true;
 8003b56:	4b21      	ldr	r3, [pc, #132]	; (8003bdc <running+0x174>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003b5c:	f7fd fb0e 	bl	800117c <clearGoalJudgeDistance>
 8003b60:	e019      	b.n	8003b96 <running+0x12e>
					  }

					  else if(goal_judge_flag == true && getGoalJudgeDistance() >= 70){
 8003b62:	4b1e      	ldr	r3, [pc, #120]	; (8003bdc <running+0x174>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d015      	beq.n	8003b96 <running+0x12e>
 8003b6a:	f7fd faf9 	bl	8001160 <getGoalJudgeDistance>
 8003b6e:	eeb0 7a40 	vmov.f32	s14, s0
 8003b72:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8003be0 <running+0x178>
 8003b76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b7e:	db0a      	blt.n	8003b96 <running+0x12e>
						  start_goal_line_cnt++;
 8003b80:	4b15      	ldr	r3, [pc, #84]	; (8003bd8 <running+0x170>)
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	3301      	adds	r3, #1
 8003b86:	b2da      	uxtb	r2, r3
 8003b88:	4b13      	ldr	r3, [pc, #76]	; (8003bd8 <running+0x170>)
 8003b8a:	701a      	strb	r2, [r3, #0]
						  goal_judge_flag = false;
 8003b8c:	4b13      	ldr	r3, [pc, #76]	; (8003bdc <running+0x174>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
						  clearGoalJudgeDistance();
 8003b92:	f7fd faf3 	bl	800117c <clearGoalJudgeDistance>
					  }

					  if(start_goal_line_cnt >= 2){
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <running+0x170>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d908      	bls.n	8003bb0 <running+0x148>
						  pattern = 20;
 8003b9e:	2314      	movs	r3, #20
 8003ba0:	80fb      	strh	r3, [r7, #6]
					  }

					  break;
 8003ba2:	e005      	b.n	8003bb0 <running+0x148>

				  case 20:

					  goal_flag = true;
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	; (8003be4 <running+0x17c>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]

					  break;
 8003baa:	e002      	b.n	8003bb2 <running+0x14a>
					  break;
 8003bac:	bf00      	nop
 8003bae:	e000      	b.n	8003bb2 <running+0x14a>
					  break;
 8003bb0:	bf00      	nop
		}

		if(getCouseOutFlag() == true)
 8003bb2:	f7fd ff5d 	bl	8001a70 <getCouseOutFlag>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <running+0x158>
		{
		    pattern = 20;
 8003bbc:	2314      	movs	r3, #20
 8003bbe:	80fb      	strh	r3, [r7, #6]
	while(goal_flag == false){
 8003bc0:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <running+0x17c>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	f083 0301 	eor.w	r3, r3, #1
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f47f af56 	bne.w	8003a7c <running+0x14>
	    }
	}
	//HAL_Delay(2000);
	//goal_flag = false;
}
 8003bd0:	bf00      	nop
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	200003c8 	.word	0x200003c8
 8003bdc:	200003c7 	.word	0x200003c7
 8003be0:	428c0000 	.word	0x428c0000
 8003be4:	200003c6 	.word	0x200003c6

08003be8 <getSideSensorStatusL>:

bool getSideSensorStatusL()
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
	return side_sensor_l;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <getSideSensorStatusL+0x14>)
 8003bee:	781b      	ldrb	r3, [r3, #0]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	200003c4 	.word	0x200003c4

08003c00 <getSideSensorStatusR>:

bool getSideSensorStatusR()
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
	return side_sensor_r;
 8003c04:	4b03      	ldr	r3, [pc, #12]	; (8003c14 <getSideSensorStatusR+0x14>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
 8003c12:	bf00      	nop
 8003c14:	200003c5 	.word	0x200003c5

08003c18 <getgoalStatus>:

bool getgoalStatus()
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
	return goal_flag;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <getgoalStatus+0x14>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	200003c6 	.word	0x200003c6

08003c30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <HAL_MspInit+0x4c>)
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	4a0f      	ldr	r2, [pc, #60]	; (8003c7c <HAL_MspInit+0x4c>)
 8003c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c44:	6453      	str	r3, [r2, #68]	; 0x44
 8003c46:	4b0d      	ldr	r3, [pc, #52]	; (8003c7c <HAL_MspInit+0x4c>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c4e:	607b      	str	r3, [r7, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	603b      	str	r3, [r7, #0]
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_MspInit+0x4c>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <HAL_MspInit+0x4c>)
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6413      	str	r3, [r2, #64]	; 0x40
 8003c62:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <HAL_MspInit+0x4c>)
 8003c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800

08003c80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08e      	sub	sp, #56	; 0x38
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	605a      	str	r2, [r3, #4]
 8003c92:	609a      	str	r2, [r3, #8]
 8003c94:	60da      	str	r2, [r3, #12]
 8003c96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a79      	ldr	r2, [pc, #484]	; (8003e84 <HAL_ADC_MspInit+0x204>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d158      	bne.n	8003d54 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	4b78      	ldr	r3, [pc, #480]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	4a77      	ldr	r2, [pc, #476]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cb2:	4b75      	ldr	r3, [pc, #468]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cba:	623b      	str	r3, [r7, #32]
 8003cbc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	4b71      	ldr	r3, [pc, #452]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	4a70      	ldr	r2, [pc, #448]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cce:	4b6e      	ldr	r3, [pc, #440]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	61fb      	str	r3, [r7, #28]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003cda:	230e      	movs	r3, #14
 8003cdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cea:	4619      	mov	r1, r3
 8003cec:	4867      	ldr	r0, [pc, #412]	; (8003e8c <HAL_ADC_MspInit+0x20c>)
 8003cee:	f001 fd0d 	bl	800570c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003cf2:	4b67      	ldr	r3, [pc, #412]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003cf4:	4a67      	ldr	r2, [pc, #412]	; (8003e94 <HAL_ADC_MspInit+0x214>)
 8003cf6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003cf8:	4b65      	ldr	r3, [pc, #404]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cfe:	4b64      	ldr	r3, [pc, #400]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d04:	4b62      	ldr	r3, [pc, #392]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003d0a:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003d12:	4b5f      	ldr	r3, [pc, #380]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003d1a:	4b5d      	ldr	r3, [pc, #372]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003d1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003d22:	4b5b      	ldr	r3, [pc, #364]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003d2a:	4b59      	ldr	r3, [pc, #356]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d30:	4b57      	ldr	r3, [pc, #348]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d36:	4856      	ldr	r0, [pc, #344]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003d38:	f001 f97a 	bl	8005030 <HAL_DMA_Init>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003d42:	f7ff fd67 	bl	8003814 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a51      	ldr	r2, [pc, #324]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
 8003d4c:	4a50      	ldr	r2, [pc, #320]	; (8003e90 <HAL_ADC_MspInit+0x210>)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003d52:	e092      	b.n	8003e7a <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a4f      	ldr	r2, [pc, #316]	; (8003e98 <HAL_ADC_MspInit+0x218>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	f040 808d 	bne.w	8003e7a <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003d60:	2300      	movs	r3, #0
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	4b48      	ldr	r3, [pc, #288]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	4a47      	ldr	r2, [pc, #284]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d6e:	6453      	str	r3, [r2, #68]	; 0x44
 8003d70:	4b45      	ldr	r3, [pc, #276]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d78:	61bb      	str	r3, [r7, #24]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	4b41      	ldr	r3, [pc, #260]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	4a40      	ldr	r2, [pc, #256]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003d8c:	4b3e      	ldr	r3, [pc, #248]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	617b      	str	r3, [r7, #20]
 8003d96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d98:	2300      	movs	r3, #0
 8003d9a:	613b      	str	r3, [r7, #16]
 8003d9c:	4b3a      	ldr	r3, [pc, #232]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	4a39      	ldr	r2, [pc, #228]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003da2:	f043 0304 	orr.w	r3, r3, #4
 8003da6:	6313      	str	r3, [r2, #48]	; 0x30
 8003da8:	4b37      	ldr	r3, [pc, #220]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dac:	f003 0304 	and.w	r3, r3, #4
 8003db0:	613b      	str	r3, [r7, #16]
 8003db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db4:	2300      	movs	r3, #0
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	4b33      	ldr	r3, [pc, #204]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	4a32      	ldr	r2, [pc, #200]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003dbe:	f043 0302 	orr.w	r3, r3, #2
 8003dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc4:	4b30      	ldr	r3, [pc, #192]	; (8003e88 <HAL_ADC_MspInit+0x208>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	60fb      	str	r3, [r7, #12]
 8003dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8003dd0:	23ff      	movs	r3, #255	; 0xff
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003de0:	4619      	mov	r1, r3
 8003de2:	482e      	ldr	r0, [pc, #184]	; (8003e9c <HAL_ADC_MspInit+0x21c>)
 8003de4:	f001 fc92 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003de8:	2330      	movs	r3, #48	; 0x30
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dec:	2303      	movs	r3, #3
 8003dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003df8:	4619      	mov	r1, r3
 8003dfa:	4824      	ldr	r0, [pc, #144]	; (8003e8c <HAL_ADC_MspInit+0x20c>)
 8003dfc:	f001 fc86 	bl	800570c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e00:	2303      	movs	r3, #3
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e04:	2303      	movs	r3, #3
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e10:	4619      	mov	r1, r3
 8003e12:	4823      	ldr	r0, [pc, #140]	; (8003ea0 <HAL_ADC_MspInit+0x220>)
 8003e14:	f001 fc7a 	bl	800570c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003e18:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e1a:	4a23      	ldr	r2, [pc, #140]	; (8003ea8 <HAL_ADC_MspInit+0x228>)
 8003e1c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003e1e:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e24:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e26:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e2c:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003e32:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e38:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e40:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e42:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e44:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e48:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003e4a:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e50:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8003e52:	4b14      	ldr	r3, [pc, #80]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e58:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003e5e:	4811      	ldr	r0, [pc, #68]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e60:	f001 f8e6 	bl	8005030 <HAL_DMA_Init>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8003e6a:	f7ff fcd3 	bl	8003814 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a0c      	ldr	r2, [pc, #48]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e72:	639a      	str	r2, [r3, #56]	; 0x38
 8003e74:	4a0b      	ldr	r2, [pc, #44]	; (8003ea4 <HAL_ADC_MspInit+0x224>)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003e7a:	bf00      	nop
 8003e7c:	3738      	adds	r7, #56	; 0x38
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40012000 	.word	0x40012000
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	40020800 	.word	0x40020800
 8003e90:	20000720 	.word	0x20000720
 8003e94:	40026410 	.word	0x40026410
 8003e98:	40012100 	.word	0x40012100
 8003e9c:	40020000 	.word	0x40020000
 8003ea0:	40020400 	.word	0x40020400
 8003ea4:	20000808 	.word	0x20000808
 8003ea8:	40026440 	.word	0x40026440

08003eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b08a      	sub	sp, #40	; 0x28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb4:	f107 0314 	add.w	r3, r7, #20
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a19      	ldr	r2, [pc, #100]	; (8003f30 <HAL_I2C_MspInit+0x84>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d12c      	bne.n	8003f28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	4b18      	ldr	r3, [pc, #96]	; (8003f34 <HAL_I2C_MspInit+0x88>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <HAL_I2C_MspInit+0x88>)
 8003ed8:	f043 0302 	orr.w	r3, r3, #2
 8003edc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <HAL_I2C_MspInit+0x88>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	613b      	str	r3, [r7, #16]
 8003ee8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003eea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ef0:	2312      	movs	r3, #18
 8003ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003efc:	2304      	movs	r3, #4
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f00:	f107 0314 	add.w	r3, r7, #20
 8003f04:	4619      	mov	r1, r3
 8003f06:	480c      	ldr	r0, [pc, #48]	; (8003f38 <HAL_I2C_MspInit+0x8c>)
 8003f08:	f001 fc00 	bl	800570c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <HAL_I2C_MspInit+0x88>)
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	4a07      	ldr	r2, [pc, #28]	; (8003f34 <HAL_I2C_MspInit+0x88>)
 8003f16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8003f1c:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <HAL_I2C_MspInit+0x88>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003f28:	bf00      	nop
 8003f2a:	3728      	adds	r7, #40	; 0x28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40005400 	.word	0x40005400
 8003f34:	40023800 	.word	0x40023800
 8003f38:	40020400 	.word	0x40020400

08003f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	; 0x28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f44:	f107 0314 	add.w	r3, r7, #20
 8003f48:	2200      	movs	r2, #0
 8003f4a:	601a      	str	r2, [r3, #0]
 8003f4c:	605a      	str	r2, [r3, #4]
 8003f4e:	609a      	str	r2, [r3, #8]
 8003f50:	60da      	str	r2, [r3, #12]
 8003f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <HAL_SPI_MspInit+0x84>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d12c      	bne.n	8003fb8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <HAL_SPI_MspInit+0x88>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	4a17      	ldr	r2, [pc, #92]	; (8003fc4 <HAL_SPI_MspInit+0x88>)
 8003f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <HAL_SPI_MspInit+0x88>)
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	4b11      	ldr	r3, [pc, #68]	; (8003fc4 <HAL_SPI_MspInit+0x88>)
 8003f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f82:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <HAL_SPI_MspInit+0x88>)
 8003f84:	f043 0304 	orr.w	r3, r3, #4
 8003f88:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8a:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <HAL_SPI_MspInit+0x88>)
 8003f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003f96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003fa8:	2306      	movs	r3, #6
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fac:	f107 0314 	add.w	r3, r7, #20
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4805      	ldr	r0, [pc, #20]	; (8003fc8 <HAL_SPI_MspInit+0x8c>)
 8003fb4:	f001 fbaa 	bl	800570c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003fb8:	bf00      	nop
 8003fba:	3728      	adds	r7, #40	; 0x28
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40003c00 	.word	0x40003c00
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40020800 	.word	0x40020800

08003fcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a15      	ldr	r2, [pc, #84]	; (8004030 <HAL_TIM_PWM_MspInit+0x64>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d10e      	bne.n	8003ffc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <HAL_TIM_PWM_MspInit+0x68>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	4a13      	ldr	r2, [pc, #76]	; (8004034 <HAL_TIM_PWM_MspInit+0x68>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	6453      	str	r3, [r2, #68]	; 0x44
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <HAL_TIM_PWM_MspInit+0x68>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003ffa:	e012      	b.n	8004022 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM8)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <HAL_TIM_PWM_MspInit+0x6c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10d      	bne.n	8004022 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <HAL_TIM_PWM_MspInit+0x68>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <HAL_TIM_PWM_MspInit+0x68>)
 8004010:	f043 0302 	orr.w	r3, r3, #2
 8004014:	6453      	str	r3, [r2, #68]	; 0x44
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <HAL_TIM_PWM_MspInit+0x68>)
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]
}
 8004022:	bf00      	nop
 8004024:	3714      	adds	r7, #20
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40010000 	.word	0x40010000
 8004034:	40023800 	.word	0x40023800
 8004038:	40010400 	.word	0x40010400

0800403c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b08c      	sub	sp, #48	; 0x30
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004044:	f107 031c 	add.w	r3, r7, #28
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	609a      	str	r2, [r3, #8]
 8004050:	60da      	str	r2, [r3, #12]
 8004052:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a32      	ldr	r2, [pc, #200]	; (8004124 <HAL_TIM_Encoder_MspInit+0xe8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d12c      	bne.n	80040b8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	4b31      	ldr	r3, [pc, #196]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	4a30      	ldr	r2, [pc, #192]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 8004068:	f043 0302 	orr.w	r3, r3, #2
 800406c:	6413      	str	r3, [r2, #64]	; 0x40
 800406e:	4b2e      	ldr	r3, [pc, #184]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
 8004078:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	4b2a      	ldr	r3, [pc, #168]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	4a29      	ldr	r2, [pc, #164]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 8004084:	f043 0302 	orr.w	r3, r3, #2
 8004088:	6313      	str	r3, [r2, #48]	; 0x30
 800408a:	4b27      	ldr	r3, [pc, #156]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	617b      	str	r3, [r7, #20]
 8004094:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004096:	2330      	movs	r3, #48	; 0x30
 8004098:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409a:	2302      	movs	r3, #2
 800409c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80040a6:	2302      	movs	r3, #2
 80040a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040aa:	f107 031c 	add.w	r3, r7, #28
 80040ae:	4619      	mov	r1, r3
 80040b0:	481e      	ldr	r0, [pc, #120]	; (800412c <HAL_TIM_Encoder_MspInit+0xf0>)
 80040b2:	f001 fb2b 	bl	800570c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80040b6:	e030      	b.n	800411a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM4)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1c      	ldr	r2, [pc, #112]	; (8004130 <HAL_TIM_Encoder_MspInit+0xf4>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d12b      	bne.n	800411a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	4a17      	ldr	r2, [pc, #92]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 80040cc:	f043 0304 	orr.w	r3, r3, #4
 80040d0:	6413      	str	r3, [r2, #64]	; 0x40
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	f003 0304 	and.w	r3, r3, #4
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	4a10      	ldr	r2, [pc, #64]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 80040e8:	f043 0302 	orr.w	r3, r3, #2
 80040ec:	6313      	str	r3, [r2, #48]	; 0x30
 80040ee:	4b0e      	ldr	r3, [pc, #56]	; (8004128 <HAL_TIM_Encoder_MspInit+0xec>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040fa:	23c0      	movs	r3, #192	; 0xc0
 80040fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040fe:	2302      	movs	r3, #2
 8004100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004102:	2300      	movs	r3, #0
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004106:	2300      	movs	r3, #0
 8004108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800410a:	2302      	movs	r3, #2
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800410e:	f107 031c 	add.w	r3, r7, #28
 8004112:	4619      	mov	r1, r3
 8004114:	4805      	ldr	r0, [pc, #20]	; (800412c <HAL_TIM_Encoder_MspInit+0xf0>)
 8004116:	f001 faf9 	bl	800570c <HAL_GPIO_Init>
}
 800411a:	bf00      	nop
 800411c:	3730      	adds	r7, #48	; 0x30
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40000400 	.word	0x40000400
 8004128:	40023800 	.word	0x40023800
 800412c:	40020400 	.word	0x40020400
 8004130:	40000800 	.word	0x40000800

08004134 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a1c      	ldr	r2, [pc, #112]	; (80041b4 <HAL_TIM_Base_MspInit+0x80>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d116      	bne.n	8004174 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	4b1b      	ldr	r3, [pc, #108]	; (80041b8 <HAL_TIM_Base_MspInit+0x84>)
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	4a1a      	ldr	r2, [pc, #104]	; (80041b8 <HAL_TIM_Base_MspInit+0x84>)
 8004150:	f043 0310 	orr.w	r3, r3, #16
 8004154:	6413      	str	r3, [r2, #64]	; 0x40
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <HAL_TIM_Base_MspInit+0x84>)
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	f003 0310 	and.w	r3, r3, #16
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004162:	2200      	movs	r2, #0
 8004164:	2101      	movs	r1, #1
 8004166:	2036      	movs	r0, #54	; 0x36
 8004168:	f000 ff2b 	bl	8004fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800416c:	2036      	movs	r0, #54	; 0x36
 800416e:	f000 ff44 	bl	8004ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8004172:	e01a      	b.n	80041aa <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM7)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a10      	ldr	r2, [pc, #64]	; (80041bc <HAL_TIM_Base_MspInit+0x88>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d115      	bne.n	80041aa <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	4b0d      	ldr	r3, [pc, #52]	; (80041b8 <HAL_TIM_Base_MspInit+0x84>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	4a0c      	ldr	r2, [pc, #48]	; (80041b8 <HAL_TIM_Base_MspInit+0x84>)
 8004188:	f043 0320 	orr.w	r3, r3, #32
 800418c:	6413      	str	r3, [r2, #64]	; 0x40
 800418e:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <HAL_TIM_Base_MspInit+0x84>)
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	60bb      	str	r3, [r7, #8]
 8004198:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800419a:	2200      	movs	r2, #0
 800419c:	2100      	movs	r1, #0
 800419e:	2037      	movs	r0, #55	; 0x37
 80041a0:	f000 ff0f 	bl	8004fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80041a4:	2037      	movs	r0, #55	; 0x37
 80041a6:	f000 ff28 	bl	8004ffa <HAL_NVIC_EnableIRQ>
}
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40001000 	.word	0x40001000
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40001400 	.word	0x40001400

080041c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08a      	sub	sp, #40	; 0x28
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a25      	ldr	r2, [pc, #148]	; (8004274 <HAL_TIM_MspPostInit+0xb4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d11f      	bne.n	8004222 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_TIM_MspPostInit+0xb8>)
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4a23      	ldr	r2, [pc, #140]	; (8004278 <HAL_TIM_MspPostInit+0xb8>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	6313      	str	r3, [r2, #48]	; 0x30
 80041f2:	4b21      	ldr	r3, [pc, #132]	; (8004278 <HAL_TIM_MspPostInit+0xb8>)
 80041f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80041fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004204:	2302      	movs	r3, #2
 8004206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004208:	2300      	movs	r3, #0
 800420a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800420c:	2300      	movs	r3, #0
 800420e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004210:	2301      	movs	r3, #1
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004214:	f107 0314 	add.w	r3, r7, #20
 8004218:	4619      	mov	r1, r3
 800421a:	4818      	ldr	r0, [pc, #96]	; (800427c <HAL_TIM_MspPostInit+0xbc>)
 800421c:	f001 fa76 	bl	800570c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004220:	e023      	b.n	800426a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM8)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a16      	ldr	r2, [pc, #88]	; (8004280 <HAL_TIM_MspPostInit+0xc0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d11e      	bne.n	800426a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <HAL_TIM_MspPostInit+0xb8>)
 8004232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004234:	4a10      	ldr	r2, [pc, #64]	; (8004278 <HAL_TIM_MspPostInit+0xb8>)
 8004236:	f043 0304 	orr.w	r3, r3, #4
 800423a:	6313      	str	r3, [r2, #48]	; 0x30
 800423c:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <HAL_TIM_MspPostInit+0xb8>)
 800423e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8004248:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800424c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800424e:	2302      	movs	r3, #2
 8004250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004256:	2300      	movs	r3, #0
 8004258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800425a:	2303      	movs	r3, #3
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800425e:	f107 0314 	add.w	r3, r7, #20
 8004262:	4619      	mov	r1, r3
 8004264:	4807      	ldr	r0, [pc, #28]	; (8004284 <HAL_TIM_MspPostInit+0xc4>)
 8004266:	f001 fa51 	bl	800570c <HAL_GPIO_Init>
}
 800426a:	bf00      	nop
 800426c:	3728      	adds	r7, #40	; 0x28
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	40010000 	.word	0x40010000
 8004278:	40023800 	.word	0x40023800
 800427c:	40020000 	.word	0x40020000
 8004280:	40010400 	.word	0x40010400
 8004284:	40020800 	.word	0x40020800

08004288 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	609a      	str	r2, [r3, #8]
 800429c:	60da      	str	r2, [r3, #12]
 800429e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a19      	ldr	r2, [pc, #100]	; (800430c <HAL_UART_MspInit+0x84>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d12c      	bne.n	8004304 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <HAL_UART_MspInit+0x88>)
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	4a17      	ldr	r2, [pc, #92]	; (8004310 <HAL_UART_MspInit+0x88>)
 80042b4:	f043 0310 	orr.w	r3, r3, #16
 80042b8:	6453      	str	r3, [r2, #68]	; 0x44
 80042ba:	4b15      	ldr	r3, [pc, #84]	; (8004310 <HAL_UART_MspInit+0x88>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <HAL_UART_MspInit+0x88>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ce:	4a10      	ldr	r2, [pc, #64]	; (8004310 <HAL_UART_MspInit+0x88>)
 80042d0:	f043 0301 	orr.w	r3, r3, #1
 80042d4:	6313      	str	r3, [r2, #48]	; 0x30
 80042d6:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <HAL_UART_MspInit+0x88>)
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80042e2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80042e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e8:	2302      	movs	r3, #2
 80042ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042f0:	2303      	movs	r3, #3
 80042f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042f4:	2307      	movs	r3, #7
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f8:	f107 0314 	add.w	r3, r7, #20
 80042fc:	4619      	mov	r1, r3
 80042fe:	4805      	ldr	r0, [pc, #20]	; (8004314 <HAL_UART_MspInit+0x8c>)
 8004300:	f001 fa04 	bl	800570c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004304:	bf00      	nop
 8004306:	3728      	adds	r7, #40	; 0x28
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40011000 	.word	0x40011000
 8004310:	40023800 	.word	0x40023800
 8004314:	40020000 	.word	0x40020000

08004318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800431c:	e7fe      	b.n	800431c <NMI_Handler+0x4>

0800431e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800431e:	b480      	push	{r7}
 8004320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004322:	e7fe      	b.n	8004322 <HardFault_Handler+0x4>

08004324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004328:	e7fe      	b.n	8004328 <MemManage_Handler+0x4>

0800432a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800432a:	b480      	push	{r7}
 800432c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800432e:	e7fe      	b.n	800432e <BusFault_Handler+0x4>

08004330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004334:	e7fe      	b.n	8004334 <UsageFault_Handler+0x4>

08004336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004336:	b480      	push	{r7}
 8004338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004348:	bf00      	nop
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004352:	b480      	push	{r7}
 8004354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004356:	bf00      	nop
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004364:	f000 f91c 	bl	80045a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004368:	bf00      	nop
 800436a:	bd80      	pop	{r7, pc}

0800436c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004370:	4802      	ldr	r0, [pc, #8]	; (800437c <TIM6_DAC_IRQHandler+0x10>)
 8004372:	f002 ffe0 	bl	8007336 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000780 	.word	0x20000780

08004380 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004384:	4802      	ldr	r0, [pc, #8]	; (8004390 <TIM7_IRQHandler+0x10>)
 8004386:	f002 ffd6 	bl	8007336 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000868 	.word	0x20000868

08004394 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004398:	4802      	ldr	r0, [pc, #8]	; (80043a4 <DMA2_Stream0_IRQHandler+0x10>)
 800439a:	f000 ff4f 	bl	800523c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000720 	.word	0x20000720

080043a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80043ac:	4802      	ldr	r0, [pc, #8]	; (80043b8 <DMA2_Stream2_IRQHandler+0x10>)
 80043ae:	f000 ff45 	bl	800523c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000808 	.word	0x20000808

080043bc <getSwitchStatus>:
 */

#include "switch.h"

uint16_t getSwitchStatus(uint8_t position)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	4603      	mov	r3, r0
 80043c4:	71fb      	strb	r3, [r7, #7]

	uint16_t ret = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	81fb      	strh	r3, [r7, #14]

	if(position == 'R' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12) == 0){                      //sw3
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	2b52      	cmp	r3, #82	; 0x52
 80043ce:	d10a      	bne.n	80043e6 <getSwitchStatus+0x2a>
 80043d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043d4:	480d      	ldr	r0, [pc, #52]	; (800440c <getSwitchStatus+0x50>)
 80043d6:	f001 fb33 	bl	8005a40 <HAL_GPIO_ReadPin>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d102      	bne.n	80043e6 <getSwitchStatus+0x2a>
		ret = 1;
 80043e0:	2301      	movs	r3, #1
 80043e2:	81fb      	strh	r3, [r7, #14]
 80043e4:	e00c      	b.n	8004400 <getSwitchStatus+0x44>
	}
	else if (position == 'L' && HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_8) == 0){                 //sw2
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	2b4c      	cmp	r3, #76	; 0x4c
 80043ea:	d109      	bne.n	8004400 <getSwitchStatus+0x44>
 80043ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043f0:	4806      	ldr	r0, [pc, #24]	; (800440c <getSwitchStatus+0x50>)
 80043f2:	f001 fb25 	bl	8005a40 <HAL_GPIO_ReadPin>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <getSwitchStatus+0x44>
		ret = 1;
 80043fc:	2301      	movs	r3, #1
 80043fe:	81fb      	strh	r3, [r7, #14]
	}

	return ret;
 8004400:	89fb      	ldrh	r3, [r7, #14]

}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	40020000 	.word	0x40020000

08004410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004418:	4a14      	ldr	r2, [pc, #80]	; (800446c <_sbrk+0x5c>)
 800441a:	4b15      	ldr	r3, [pc, #84]	; (8004470 <_sbrk+0x60>)
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004424:	4b13      	ldr	r3, [pc, #76]	; (8004474 <_sbrk+0x64>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <_sbrk+0x64>)
 800442e:	4a12      	ldr	r2, [pc, #72]	; (8004478 <_sbrk+0x68>)
 8004430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004432:	4b10      	ldr	r3, [pc, #64]	; (8004474 <_sbrk+0x64>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	429a      	cmp	r2, r3
 800443e:	d207      	bcs.n	8004450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004440:	f004 f892 	bl	8008568 <__errno>
 8004444:	4602      	mov	r2, r0
 8004446:	230c      	movs	r3, #12
 8004448:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800444a:	f04f 33ff 	mov.w	r3, #4294967295
 800444e:	e009      	b.n	8004464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004450:	4b08      	ldr	r3, [pc, #32]	; (8004474 <_sbrk+0x64>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004456:	4b07      	ldr	r3, [pc, #28]	; (8004474 <_sbrk+0x64>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	4a05      	ldr	r2, [pc, #20]	; (8004474 <_sbrk+0x64>)
 8004460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004462:	68fb      	ldr	r3, [r7, #12]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20020000 	.word	0x20020000
 8004470:	00000400 	.word	0x00000400
 8004474:	200003cc 	.word	0x200003cc
 8004478:	200008b8 	.word	0x200008b8

0800447c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <SystemInit+0x28>)
 8004482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004486:	4a07      	ldr	r2, [pc, #28]	; (80044a4 <SystemInit+0x28>)
 8004488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800448c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004490:	4b04      	ldr	r3, [pc, #16]	; (80044a4 <SystemInit+0x28>)
 8004492:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004496:	609a      	str	r2, [r3, #8]
#endif
}
 8004498:	bf00      	nop
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	e000ed00 	.word	0xe000ed00

080044a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80044ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80044ae:	e003      	b.n	80044b8 <LoopCopyDataInit>

080044b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80044b0:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80044b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80044b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80044b6:	3104      	adds	r1, #4

080044b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044b8:	480b      	ldr	r0, [pc, #44]	; (80044e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80044bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044c0:	d3f6      	bcc.n	80044b0 <CopyDataInit>
  ldr  r2, =_sbss
 80044c2:	4a0b      	ldr	r2, [pc, #44]	; (80044f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80044c4:	e002      	b.n	80044cc <LoopFillZerobss>

080044c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044c8:	f842 3b04 	str.w	r3, [r2], #4

080044cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044cc:	4b09      	ldr	r3, [pc, #36]	; (80044f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80044ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044d0:	d3f9      	bcc.n	80044c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044d2:	f7ff ffd3 	bl	800447c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044d6:	f004 f84d 	bl	8008574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044da:	f7fe fab3 	bl	8002a44 <main>
  bx  lr    
 80044de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80044e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80044e4:	0800c340 	.word	0x0800c340
  ldr  r0, =_sdata
 80044e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80044ec:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 80044f0:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 80044f4:	200008b8 	.word	0x200008b8

080044f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044f8:	e7fe      	b.n	80044f8 <ADC_IRQHandler>
	...

080044fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004500:	4b0e      	ldr	r3, [pc, #56]	; (800453c <HAL_Init+0x40>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0d      	ldr	r2, [pc, #52]	; (800453c <HAL_Init+0x40>)
 8004506:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800450a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800450c:	4b0b      	ldr	r3, [pc, #44]	; (800453c <HAL_Init+0x40>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a0a      	ldr	r2, [pc, #40]	; (800453c <HAL_Init+0x40>)
 8004512:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004516:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004518:	4b08      	ldr	r3, [pc, #32]	; (800453c <HAL_Init+0x40>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a07      	ldr	r2, [pc, #28]	; (800453c <HAL_Init+0x40>)
 800451e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004522:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004524:	2003      	movs	r0, #3
 8004526:	f000 fd41 	bl	8004fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800452a:	2000      	movs	r0, #0
 800452c:	f000 f808 	bl	8004540 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004530:	f7ff fb7e 	bl	8003c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40023c00 	.word	0x40023c00

08004540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004548:	4b12      	ldr	r3, [pc, #72]	; (8004594 <HAL_InitTick+0x54>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <HAL_InitTick+0x58>)
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	4619      	mov	r1, r3
 8004552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004556:	fbb3 f3f1 	udiv	r3, r3, r1
 800455a:	fbb2 f3f3 	udiv	r3, r2, r3
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fd59 	bl	8005016 <HAL_SYSTICK_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e00e      	b.n	800458c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b0f      	cmp	r3, #15
 8004572:	d80a      	bhi.n	800458a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004574:	2200      	movs	r2, #0
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	f000 fd21 	bl	8004fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004580:	4a06      	ldr	r2, [pc, #24]	; (800459c <HAL_InitTick+0x5c>)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000034 	.word	0x20000034
 8004598:	2000003c 	.word	0x2000003c
 800459c:	20000038 	.word	0x20000038

080045a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <HAL_IncTick+0x20>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	461a      	mov	r2, r3
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_IncTick+0x24>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4413      	add	r3, r2
 80045b0:	4a04      	ldr	r2, [pc, #16]	; (80045c4 <HAL_IncTick+0x24>)
 80045b2:	6013      	str	r3, [r2, #0]
}
 80045b4:	bf00      	nop
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	2000003c 	.word	0x2000003c
 80045c4:	200008b0 	.word	0x200008b0

080045c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return uwTick;
 80045cc:	4b03      	ldr	r3, [pc, #12]	; (80045dc <HAL_GetTick+0x14>)
 80045ce:	681b      	ldr	r3, [r3, #0]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	200008b0 	.word	0x200008b0

080045e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045e8:	f7ff ffee 	bl	80045c8 <HAL_GetTick>
 80045ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d005      	beq.n	8004606 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <HAL_Delay+0x40>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	461a      	mov	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4413      	add	r3, r2
 8004604:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004606:	bf00      	nop
 8004608:	f7ff ffde 	bl	80045c8 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	429a      	cmp	r2, r3
 8004616:	d8f7      	bhi.n	8004608 <HAL_Delay+0x28>
  {
  }
}
 8004618:	bf00      	nop
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	2000003c 	.word	0x2000003c

08004624 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d101      	bne.n	800463a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e033      	b.n	80046a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	2b00      	cmp	r3, #0
 8004640:	d109      	bne.n	8004656 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f7ff fb1c 	bl	8003c80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b00      	cmp	r3, #0
 8004660:	d118      	bne.n	8004694 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004666:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800466a:	f023 0302 	bic.w	r3, r3, #2
 800466e:	f043 0202 	orr.w	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fa4a 	bl	8004b10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004686:	f023 0303 	bic.w	r3, r3, #3
 800468a:	f043 0201 	orr.w	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	641a      	str	r2, [r3, #64]	; 0x40
 8004692:	e001      	b.n	8004698 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_Start_DMA+0x1e>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e0cc      	b.n	8004864 <HAL_ADC_Start_DMA+0x1b8>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d018      	beq.n	8004712 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80046f0:	4b5e      	ldr	r3, [pc, #376]	; (800486c <HAL_ADC_Start_DMA+0x1c0>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a5e      	ldr	r2, [pc, #376]	; (8004870 <HAL_ADC_Start_DMA+0x1c4>)
 80046f6:	fba2 2303 	umull	r2, r3, r2, r3
 80046fa:	0c9a      	lsrs	r2, r3, #18
 80046fc:	4613      	mov	r3, r2
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	4413      	add	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004704:	e002      	b.n	800470c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	3b01      	subs	r3, #1
 800470a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f9      	bne.n	8004706 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 80a0 	bne.w	8004862 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004726:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004740:	2b00      	cmp	r3, #0
 8004742:	d007      	beq.n	8004754 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004748:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800474c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800475c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004760:	d106      	bne.n	8004770 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f023 0206 	bic.w	r2, r3, #6
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	645a      	str	r2, [r3, #68]	; 0x44
 800476e:	e002      	b.n	8004776 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800477e:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <HAL_ADC_Start_DMA+0x1c8>)
 8004780:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	4a3c      	ldr	r2, [pc, #240]	; (8004878 <HAL_ADC_Start_DMA+0x1cc>)
 8004788:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478e:	4a3b      	ldr	r2, [pc, #236]	; (800487c <HAL_ADC_Start_DMA+0x1d0>)
 8004790:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	4a3a      	ldr	r2, [pc, #232]	; (8004880 <HAL_ADC_Start_DMA+0x1d4>)
 8004798:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80047a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80047b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	334c      	adds	r3, #76	; 0x4c
 80047ce:	4619      	mov	r1, r3
 80047d0:	68ba      	ldr	r2, [r7, #8]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f000 fcda 	bl	800518c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 031f 	and.w	r3, r3, #31
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d12a      	bne.n	800483a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a26      	ldr	r2, [pc, #152]	; (8004884 <HAL_ADC_Start_DMA+0x1d8>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d015      	beq.n	800481a <HAL_ADC_Start_DMA+0x16e>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a25      	ldr	r2, [pc, #148]	; (8004888 <HAL_ADC_Start_DMA+0x1dc>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d105      	bne.n	8004804 <HAL_ADC_Start_DMA+0x158>
 80047f8:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <HAL_ADC_Start_DMA+0x1c8>)
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 031f 	and.w	r3, r3, #31
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00a      	beq.n	800481a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a20      	ldr	r2, [pc, #128]	; (800488c <HAL_ADC_Start_DMA+0x1e0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d129      	bne.n	8004862 <HAL_ADC_Start_DMA+0x1b6>
 800480e:	4b19      	ldr	r3, [pc, #100]	; (8004874 <HAL_ADC_Start_DMA+0x1c8>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2b0f      	cmp	r3, #15
 8004818:	d823      	bhi.n	8004862 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d11c      	bne.n	8004862 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689a      	ldr	r2, [r3, #8]
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004836:	609a      	str	r2, [r3, #8]
 8004838:	e013      	b.n	8004862 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a11      	ldr	r2, [pc, #68]	; (8004884 <HAL_ADC_Start_DMA+0x1d8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d10e      	bne.n	8004862 <HAL_ADC_Start_DMA+0x1b6>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d107      	bne.n	8004862 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004860:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	20000034 	.word	0x20000034
 8004870:	431bde83 	.word	0x431bde83
 8004874:	40012300 	.word	0x40012300
 8004878:	08004d09 	.word	0x08004d09
 800487c:	08004dc3 	.word	0x08004dc3
 8004880:	08004ddf 	.word	0x08004ddf
 8004884:	40012000 	.word	0x40012000
 8004888:	40012100 	.word	0x40012100
 800488c:	40012200 	.word	0x40012200

08004890 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d101      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x1c>
 80048e4:	2302      	movs	r3, #2
 80048e6:	e105      	b.n	8004af4 <HAL_ADC_ConfigChannel+0x228>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	2b09      	cmp	r3, #9
 80048f6:	d925      	bls.n	8004944 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68d9      	ldr	r1, [r3, #12]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	b29b      	uxth	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	4613      	mov	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4413      	add	r3, r2
 800490c:	3b1e      	subs	r3, #30
 800490e:	2207      	movs	r2, #7
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43da      	mvns	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	400a      	ands	r2, r1
 800491c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68d9      	ldr	r1, [r3, #12]
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	b29b      	uxth	r3, r3
 800492e:	4618      	mov	r0, r3
 8004930:	4603      	mov	r3, r0
 8004932:	005b      	lsls	r3, r3, #1
 8004934:	4403      	add	r3, r0
 8004936:	3b1e      	subs	r3, #30
 8004938:	409a      	lsls	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	60da      	str	r2, [r3, #12]
 8004942:	e022      	b.n	800498a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6919      	ldr	r1, [r3, #16]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	b29b      	uxth	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	4613      	mov	r3, r2
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	4413      	add	r3, r2
 8004958:	2207      	movs	r2, #7
 800495a:	fa02 f303 	lsl.w	r3, r2, r3
 800495e:	43da      	mvns	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	400a      	ands	r2, r1
 8004966:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6919      	ldr	r1, [r3, #16]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	b29b      	uxth	r3, r3
 8004978:	4618      	mov	r0, r3
 800497a:	4603      	mov	r3, r0
 800497c:	005b      	lsls	r3, r3, #1
 800497e:	4403      	add	r3, r0
 8004980:	409a      	lsls	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	2b06      	cmp	r3, #6
 8004990:	d824      	bhi.n	80049dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	3b05      	subs	r3, #5
 80049a4:	221f      	movs	r2, #31
 80049a6:	fa02 f303 	lsl.w	r3, r2, r3
 80049aa:	43da      	mvns	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	400a      	ands	r2, r1
 80049b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	b29b      	uxth	r3, r3
 80049c0:	4618      	mov	r0, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	4413      	add	r3, r2
 80049cc:	3b05      	subs	r3, #5
 80049ce:	fa00 f203 	lsl.w	r2, r0, r3
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	635a      	str	r2, [r3, #52]	; 0x34
 80049da:	e04c      	b.n	8004a76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b0c      	cmp	r3, #12
 80049e2:	d824      	bhi.n	8004a2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685a      	ldr	r2, [r3, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	3b23      	subs	r3, #35	; 0x23
 80049f6:	221f      	movs	r2, #31
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	43da      	mvns	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	400a      	ands	r2, r1
 8004a04:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	4618      	mov	r0, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	3b23      	subs	r3, #35	; 0x23
 8004a20:	fa00 f203 	lsl.w	r2, r0, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	430a      	orrs	r2, r1
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8004a2c:	e023      	b.n	8004a76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	3b41      	subs	r3, #65	; 0x41
 8004a40:	221f      	movs	r2, #31
 8004a42:	fa02 f303 	lsl.w	r3, r2, r3
 8004a46:	43da      	mvns	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	400a      	ands	r2, r1
 8004a4e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	3b41      	subs	r3, #65	; 0x41
 8004a6a:	fa00 f203 	lsl.w	r2, r0, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	430a      	orrs	r2, r1
 8004a74:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a76:	4b22      	ldr	r3, [pc, #136]	; (8004b00 <HAL_ADC_ConfigChannel+0x234>)
 8004a78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a21      	ldr	r2, [pc, #132]	; (8004b04 <HAL_ADC_ConfigChannel+0x238>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d109      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x1cc>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b12      	cmp	r3, #18
 8004a8a:	d105      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a19      	ldr	r2, [pc, #100]	; (8004b04 <HAL_ADC_ConfigChannel+0x238>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d123      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x21e>
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b10      	cmp	r3, #16
 8004aa8:	d003      	beq.n	8004ab2 <HAL_ADC_ConfigChannel+0x1e6>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b11      	cmp	r3, #17
 8004ab0:	d11b      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d111      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ac6:	4b10      	ldr	r3, [pc, #64]	; (8004b08 <HAL_ADC_ConfigChannel+0x23c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a10      	ldr	r2, [pc, #64]	; (8004b0c <HAL_ADC_ConfigChannel+0x240>)
 8004acc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad0:	0c9a      	lsrs	r2, r3, #18
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004adc:	e002      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f9      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	40012300 	.word	0x40012300
 8004b04:	40012000 	.word	0x40012000
 8004b08:	20000034 	.word	0x20000034
 8004b0c:	431bde83 	.word	0x431bde83

08004b10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b18:	4b79      	ldr	r3, [pc, #484]	; (8004d00 <ADC_Init+0x1f0>)
 8004b1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	685a      	ldr	r2, [r3, #4]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6859      	ldr	r1, [r3, #4]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	021a      	lsls	r2, r3, #8
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	430a      	orrs	r2, r1
 8004b58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004b68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6859      	ldr	r1, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	689a      	ldr	r2, [r3, #8]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	430a      	orrs	r2, r1
 8004b7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6899      	ldr	r1, [r3, #8]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba2:	4a58      	ldr	r2, [pc, #352]	; (8004d04 <ADC_Init+0x1f4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d022      	beq.n	8004bee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689a      	ldr	r2, [r3, #8]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6899      	ldr	r1, [r3, #8]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004bd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6899      	ldr	r1, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	430a      	orrs	r2, r1
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	e00f      	b.n	8004c0e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004bfc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004c0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0202 	bic.w	r2, r2, #2
 8004c1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6899      	ldr	r1, [r3, #8]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	7e1b      	ldrb	r3, [r3, #24]
 8004c28:	005a      	lsls	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01b      	beq.n	8004c74 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004c5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6859      	ldr	r1, [r3, #4]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	3b01      	subs	r3, #1
 8004c68:	035a      	lsls	r2, r3, #13
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	e007      	b.n	8004c84 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	051a      	lsls	r2, r3, #20
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004cb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6899      	ldr	r1, [r3, #8]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004cc6:	025a      	lsls	r2, r3, #9
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689a      	ldr	r2, [r3, #8]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6899      	ldr	r1, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	029a      	lsls	r2, r3, #10
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	609a      	str	r2, [r3, #8]
}
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	40012300 	.word	0x40012300
 8004d04:	0f000001 	.word	0x0f000001

08004d08 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d13c      	bne.n	8004d9c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d12b      	bne.n	8004d94 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d127      	bne.n	8004d94 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d006      	beq.n	8004d60 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d119      	bne.n	8004d94 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0220 	bic.w	r2, r2, #32
 8004d6e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d105      	bne.n	8004d94 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	f043 0201 	orr.w	r2, r3, #1
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff fd7b 	bl	8004890 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d9a:	e00e      	b.n	8004dba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	f003 0310 	and.w	r3, r3, #16
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d003      	beq.n	8004db0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f7ff fd85 	bl	80048b8 <HAL_ADC_ErrorCallback>
}
 8004dae:	e004      	b.n	8004dba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4798      	blx	r3
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004dc2:	b580      	push	{r7, lr}
 8004dc4:	b084      	sub	sp, #16
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff fd67 	bl	80048a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004dde:	b580      	push	{r7, lr}
 8004de0:	b084      	sub	sp, #16
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2240      	movs	r2, #64	; 0x40
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	f043 0204 	orr.w	r2, r3, #4
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004dfe:	68f8      	ldr	r0, [r7, #12]
 8004e00:	f7ff fd5a 	bl	80048b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e1c:	4b0c      	ldr	r3, [pc, #48]	; (8004e50 <__NVIC_SetPriorityGrouping+0x44>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e3e:	4a04      	ldr	r2, [pc, #16]	; (8004e50 <__NVIC_SetPriorityGrouping+0x44>)
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	60d3      	str	r3, [r2, #12]
}
 8004e44:	bf00      	nop
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	e000ed00 	.word	0xe000ed00

08004e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004e58:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <__NVIC_GetPriorityGrouping+0x18>)
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	0a1b      	lsrs	r3, r3, #8
 8004e5e:	f003 0307 	and.w	r3, r3, #7
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	e000ed00 	.word	0xe000ed00

08004e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4603      	mov	r3, r0
 8004e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	db0b      	blt.n	8004e9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e82:	79fb      	ldrb	r3, [r7, #7]
 8004e84:	f003 021f 	and.w	r2, r3, #31
 8004e88:	4907      	ldr	r1, [pc, #28]	; (8004ea8 <__NVIC_EnableIRQ+0x38>)
 8004e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e8e:	095b      	lsrs	r3, r3, #5
 8004e90:	2001      	movs	r0, #1
 8004e92:	fa00 f202 	lsl.w	r2, r0, r2
 8004e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	e000e100 	.word	0xe000e100

08004eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	6039      	str	r1, [r7, #0]
 8004eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	db0a      	blt.n	8004ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	b2da      	uxtb	r2, r3
 8004ec4:	490c      	ldr	r1, [pc, #48]	; (8004ef8 <__NVIC_SetPriority+0x4c>)
 8004ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eca:	0112      	lsls	r2, r2, #4
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	440b      	add	r3, r1
 8004ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ed4:	e00a      	b.n	8004eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	4908      	ldr	r1, [pc, #32]	; (8004efc <__NVIC_SetPriority+0x50>)
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	3b04      	subs	r3, #4
 8004ee4:	0112      	lsls	r2, r2, #4
 8004ee6:	b2d2      	uxtb	r2, r2
 8004ee8:	440b      	add	r3, r1
 8004eea:	761a      	strb	r2, [r3, #24]
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	e000e100 	.word	0xe000e100
 8004efc:	e000ed00 	.word	0xe000ed00

08004f00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b089      	sub	sp, #36	; 0x24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f1c3 0307 	rsb	r3, r3, #7
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	bf28      	it	cs
 8004f1e:	2304      	movcs	r3, #4
 8004f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	3304      	adds	r3, #4
 8004f26:	2b06      	cmp	r3, #6
 8004f28:	d902      	bls.n	8004f30 <NVIC_EncodePriority+0x30>
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	3b03      	subs	r3, #3
 8004f2e:	e000      	b.n	8004f32 <NVIC_EncodePriority+0x32>
 8004f30:	2300      	movs	r3, #0
 8004f32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f34:	f04f 32ff 	mov.w	r2, #4294967295
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f3e:	43da      	mvns	r2, r3
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	401a      	ands	r2, r3
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004f48:	f04f 31ff 	mov.w	r1, #4294967295
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f52:	43d9      	mvns	r1, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f58:	4313      	orrs	r3, r2
         );
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3724      	adds	r7, #36	; 0x24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
	...

08004f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f78:	d301      	bcc.n	8004f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e00f      	b.n	8004f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <SysTick_Config+0x40>)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3b01      	subs	r3, #1
 8004f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f86:	210f      	movs	r1, #15
 8004f88:	f04f 30ff 	mov.w	r0, #4294967295
 8004f8c:	f7ff ff8e 	bl	8004eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f90:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <SysTick_Config+0x40>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f96:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <SysTick_Config+0x40>)
 8004f98:	2207      	movs	r2, #7
 8004f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	e000e010 	.word	0xe000e010

08004fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ff29 	bl	8004e0c <__NVIC_SetPriorityGrouping>
}
 8004fba:	bf00      	nop
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	4603      	mov	r3, r0
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
 8004fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004fd4:	f7ff ff3e 	bl	8004e54 <__NVIC_GetPriorityGrouping>
 8004fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	68b9      	ldr	r1, [r7, #8]
 8004fde:	6978      	ldr	r0, [r7, #20]
 8004fe0:	f7ff ff8e 	bl	8004f00 <NVIC_EncodePriority>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff ff5d 	bl	8004eac <__NVIC_SetPriority>
}
 8004ff2:	bf00      	nop
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	4603      	mov	r3, r0
 8005002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff ff31 	bl	8004e70 <__NVIC_EnableIRQ>
}
 800500e:	bf00      	nop
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b082      	sub	sp, #8
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff ffa2 	bl	8004f68 <SysTick_Config>
 8005024:	4603      	mov	r3, r0
}
 8005026:	4618      	mov	r0, r3
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
	...

08005030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b086      	sub	sp, #24
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800503c:	f7ff fac4 	bl	80045c8 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d101      	bne.n	800504c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e099      	b.n	8005180 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800506c:	e00f      	b.n	800508e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800506e:	f7ff faab 	bl	80045c8 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b05      	cmp	r3, #5
 800507a:	d908      	bls.n	800508e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2203      	movs	r2, #3
 8005086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e078      	b.n	8005180 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e8      	bne.n	800506e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4b38      	ldr	r3, [pc, #224]	; (8005188 <HAL_DMA_Init+0x158>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	4313      	orrs	r3, r2
 80050de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e4:	2b04      	cmp	r3, #4
 80050e6:	d107      	bne.n	80050f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	4313      	orrs	r3, r2
 80050f2:	697a      	ldr	r2, [r7, #20]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	f023 0307 	bic.w	r3, r3, #7
 800510e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511e:	2b04      	cmp	r3, #4
 8005120:	d117      	bne.n	8005152 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00e      	beq.n	8005152 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fa6f 	bl	8005618 <DMA_CheckFifoParam>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d008      	beq.n	8005152 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2240      	movs	r2, #64	; 0x40
 8005144:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2201      	movs	r2, #1
 800514a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800514e:	2301      	movs	r3, #1
 8005150:	e016      	b.n	8005180 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fa26 	bl	80055ac <DMA_CalcBaseAndBitshift>
 8005160:	4603      	mov	r3, r0
 8005162:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005168:	223f      	movs	r2, #63	; 0x3f
 800516a:	409a      	lsls	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	f010803f 	.word	0xf010803f

0800518c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b086      	sub	sp, #24
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d101      	bne.n	80051b2 <HAL_DMA_Start_IT+0x26>
 80051ae:	2302      	movs	r3, #2
 80051b0:	e040      	b.n	8005234 <HAL_DMA_Start_IT+0xa8>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d12f      	bne.n	8005226 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2202      	movs	r2, #2
 80051ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68b9      	ldr	r1, [r7, #8]
 80051da:	68f8      	ldr	r0, [r7, #12]
 80051dc:	f000 f9b8 	bl	8005550 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e4:	223f      	movs	r2, #63	; 0x3f
 80051e6:	409a      	lsls	r2, r3
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0216 	orr.w	r2, r2, #22
 80051fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0208 	orr.w	r2, r2, #8
 8005212:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	e005      	b.n	8005232 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800522e:	2302      	movs	r3, #2
 8005230:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005232:	7dfb      	ldrb	r3, [r7, #23]
}
 8005234:	4618      	mov	r0, r3
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005244:	2300      	movs	r3, #0
 8005246:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005248:	4b92      	ldr	r3, [pc, #584]	; (8005494 <HAL_DMA_IRQHandler+0x258>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a92      	ldr	r2, [pc, #584]	; (8005498 <HAL_DMA_IRQHandler+0x25c>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	0a9b      	lsrs	r3, r3, #10
 8005254:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005266:	2208      	movs	r2, #8
 8005268:	409a      	lsls	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	4013      	ands	r3, r2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d01a      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	d013      	beq.n	80052a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f022 0204 	bic.w	r2, r2, #4
 800528e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005294:	2208      	movs	r2, #8
 8005296:	409a      	lsls	r2, r3
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a0:	f043 0201 	orr.w	r2, r3, #1
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ac:	2201      	movs	r2, #1
 80052ae:	409a      	lsls	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4013      	ands	r3, r2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d012      	beq.n	80052de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00b      	beq.n	80052de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ca:	2201      	movs	r2, #1
 80052cc:	409a      	lsls	r2, r3
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052d6:	f043 0202 	orr.w	r2, r3, #2
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052e2:	2204      	movs	r2, #4
 80052e4:	409a      	lsls	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4013      	ands	r3, r2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d012      	beq.n	8005314 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00b      	beq.n	8005314 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005300:	2204      	movs	r2, #4
 8005302:	409a      	lsls	r2, r3
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530c:	f043 0204 	orr.w	r2, r3, #4
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005318:	2210      	movs	r2, #16
 800531a:	409a      	lsls	r2, r3
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4013      	ands	r3, r2
 8005320:	2b00      	cmp	r3, #0
 8005322:	d043      	beq.n	80053ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	2b00      	cmp	r3, #0
 8005330:	d03c      	beq.n	80053ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005336:	2210      	movs	r2, #16
 8005338:	409a      	lsls	r2, r3
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d018      	beq.n	800537e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d108      	bne.n	800536c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	2b00      	cmp	r3, #0
 8005360:	d024      	beq.n	80053ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	4798      	blx	r3
 800536a:	e01f      	b.n	80053ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005370:	2b00      	cmp	r3, #0
 8005372:	d01b      	beq.n	80053ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	4798      	blx	r3
 800537c:	e016      	b.n	80053ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005388:	2b00      	cmp	r3, #0
 800538a:	d107      	bne.n	800539c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0208 	bic.w	r2, r2, #8
 800539a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b0:	2220      	movs	r2, #32
 80053b2:	409a      	lsls	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	4013      	ands	r3, r2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 808e 	beq.w	80054da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0310 	and.w	r3, r3, #16
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	f000 8086 	beq.w	80054da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d2:	2220      	movs	r2, #32
 80053d4:	409a      	lsls	r2, r3
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b05      	cmp	r3, #5
 80053e4:	d136      	bne.n	8005454 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f022 0216 	bic.w	r2, r2, #22
 80053f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	695a      	ldr	r2, [r3, #20]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005404:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d103      	bne.n	8005416 <HAL_DMA_IRQHandler+0x1da>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005412:	2b00      	cmp	r3, #0
 8005414:	d007      	beq.n	8005426 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0208 	bic.w	r2, r2, #8
 8005424:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800542a:	223f      	movs	r2, #63	; 0x3f
 800542c:	409a      	lsls	r2, r3
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005446:	2b00      	cmp	r3, #0
 8005448:	d07d      	beq.n	8005546 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	4798      	blx	r3
        }
        return;
 8005452:	e078      	b.n	8005546 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d01c      	beq.n	800549c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d108      	bne.n	8005482 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005474:	2b00      	cmp	r3, #0
 8005476:	d030      	beq.n	80054da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	4798      	blx	r3
 8005480:	e02b      	b.n	80054da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005486:	2b00      	cmp	r3, #0
 8005488:	d027      	beq.n	80054da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	4798      	blx	r3
 8005492:	e022      	b.n	80054da <HAL_DMA_IRQHandler+0x29e>
 8005494:	20000034 	.word	0x20000034
 8005498:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10f      	bne.n	80054ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 0210 	bic.w	r2, r2, #16
 80054b8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d032      	beq.n	8005548 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d022      	beq.n	8005534 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2205      	movs	r2, #5
 80054f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0201 	bic.w	r2, r2, #1
 8005504:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	3301      	adds	r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	429a      	cmp	r2, r3
 8005510:	d307      	bcc.n	8005522 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1f2      	bne.n	8005506 <HAL_DMA_IRQHandler+0x2ca>
 8005520:	e000      	b.n	8005524 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005522:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005538:	2b00      	cmp	r3, #0
 800553a:	d005      	beq.n	8005548 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	4798      	blx	r3
 8005544:	e000      	b.n	8005548 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005546:	bf00      	nop
    }
  }
}
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop

08005550 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800556c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b40      	cmp	r3, #64	; 0x40
 800557c:	d108      	bne.n	8005590 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800558e:	e007      	b.n	80055a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	60da      	str	r2, [r3, #12]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	3b10      	subs	r3, #16
 80055bc:	4a14      	ldr	r2, [pc, #80]	; (8005610 <DMA_CalcBaseAndBitshift+0x64>)
 80055be:	fba2 2303 	umull	r2, r3, r2, r3
 80055c2:	091b      	lsrs	r3, r3, #4
 80055c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055c6:	4a13      	ldr	r2, [pc, #76]	; (8005614 <DMA_CalcBaseAndBitshift+0x68>)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	4413      	add	r3, r2
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	461a      	mov	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d909      	bls.n	80055ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055e2:	f023 0303 	bic.w	r3, r3, #3
 80055e6:	1d1a      	adds	r2, r3, #4
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	659a      	str	r2, [r3, #88]	; 0x58
 80055ec:	e007      	b.n	80055fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80055f6:	f023 0303 	bic.w	r3, r3, #3
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	aaaaaaab 	.word	0xaaaaaaab
 8005614:	0800c070 	.word	0x0800c070

08005618 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d11f      	bne.n	8005672 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d855      	bhi.n	80056e4 <DMA_CheckFifoParam+0xcc>
 8005638:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <DMA_CheckFifoParam+0x28>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08005651 	.word	0x08005651
 8005644:	08005663 	.word	0x08005663
 8005648:	08005651 	.word	0x08005651
 800564c:	080056e5 	.word	0x080056e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005658:	2b00      	cmp	r3, #0
 800565a:	d045      	beq.n	80056e8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005660:	e042      	b.n	80056e8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800566a:	d13f      	bne.n	80056ec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005670:	e03c      	b.n	80056ec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800567a:	d121      	bne.n	80056c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b03      	cmp	r3, #3
 8005680:	d836      	bhi.n	80056f0 <DMA_CheckFifoParam+0xd8>
 8005682:	a201      	add	r2, pc, #4	; (adr r2, 8005688 <DMA_CheckFifoParam+0x70>)
 8005684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005688:	08005699 	.word	0x08005699
 800568c:	0800569f 	.word	0x0800569f
 8005690:	08005699 	.word	0x08005699
 8005694:	080056b1 	.word	0x080056b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
      break;
 800569c:	e02f      	b.n	80056fe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d024      	beq.n	80056f4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056ae:	e021      	b.n	80056f4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80056b8:	d11e      	bne.n	80056f8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056be:	e01b      	b.n	80056f8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d902      	bls.n	80056cc <DMA_CheckFifoParam+0xb4>
 80056c6:	2b03      	cmp	r3, #3
 80056c8:	d003      	beq.n	80056d2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056ca:	e018      	b.n	80056fe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      break;
 80056d0:	e015      	b.n	80056fe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00e      	beq.n	80056fc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
      break;
 80056e2:	e00b      	b.n	80056fc <DMA_CheckFifoParam+0xe4>
      break;
 80056e4:	bf00      	nop
 80056e6:	e00a      	b.n	80056fe <DMA_CheckFifoParam+0xe6>
      break;
 80056e8:	bf00      	nop
 80056ea:	e008      	b.n	80056fe <DMA_CheckFifoParam+0xe6>
      break;
 80056ec:	bf00      	nop
 80056ee:	e006      	b.n	80056fe <DMA_CheckFifoParam+0xe6>
      break;
 80056f0:	bf00      	nop
 80056f2:	e004      	b.n	80056fe <DMA_CheckFifoParam+0xe6>
      break;
 80056f4:	bf00      	nop
 80056f6:	e002      	b.n	80056fe <DMA_CheckFifoParam+0xe6>
      break;   
 80056f8:	bf00      	nop
 80056fa:	e000      	b.n	80056fe <DMA_CheckFifoParam+0xe6>
      break;
 80056fc:	bf00      	nop
    }
  } 
  
  return status; 
 80056fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800570c:	b480      	push	{r7}
 800570e:	b089      	sub	sp, #36	; 0x24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005716:	2300      	movs	r3, #0
 8005718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800571a:	2300      	movs	r3, #0
 800571c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800571e:	2300      	movs	r3, #0
 8005720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	e16b      	b.n	8005a00 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005728:	2201      	movs	r2, #1
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	fa02 f303 	lsl.w	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	4013      	ands	r3, r2
 800573a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	429a      	cmp	r2, r3
 8005742:	f040 815a 	bne.w	80059fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d00b      	beq.n	8005766 <HAL_GPIO_Init+0x5a>
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d007      	beq.n	8005766 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800575a:	2b11      	cmp	r3, #17
 800575c:	d003      	beq.n	8005766 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2b12      	cmp	r3, #18
 8005764:	d130      	bne.n	80057c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	2203      	movs	r2, #3
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	43db      	mvns	r3, r3
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	4013      	ands	r3, r2
 800577c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68da      	ldr	r2, [r3, #12]
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	005b      	lsls	r3, r3, #1
 8005786:	fa02 f303 	lsl.w	r3, r2, r3
 800578a:	69ba      	ldr	r2, [r7, #24]
 800578c:	4313      	orrs	r3, r2
 800578e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	69ba      	ldr	r2, [r7, #24]
 8005794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800579c:	2201      	movs	r2, #1
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	fa02 f303 	lsl.w	r3, r2, r3
 80057a4:	43db      	mvns	r3, r3
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	4013      	ands	r3, r2
 80057aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	091b      	lsrs	r3, r3, #4
 80057b2:	f003 0201 	and.w	r2, r3, #1
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	69ba      	ldr	r2, [r7, #24]
 80057be:	4313      	orrs	r3, r2
 80057c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69ba      	ldr	r2, [r7, #24]
 80057c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	005b      	lsls	r3, r3, #1
 80057d2:	2203      	movs	r2, #3
 80057d4:	fa02 f303 	lsl.w	r3, r2, r3
 80057d8:	43db      	mvns	r3, r3
 80057da:	69ba      	ldr	r2, [r7, #24]
 80057dc:	4013      	ands	r3, r2
 80057de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	005b      	lsls	r3, r3, #1
 80057e8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69ba      	ldr	r2, [r7, #24]
 80057f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d003      	beq.n	8005808 <HAL_GPIO_Init+0xfc>
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	2b12      	cmp	r3, #18
 8005806:	d123      	bne.n	8005850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	08da      	lsrs	r2, r3, #3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3208      	adds	r2, #8
 8005810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	f003 0307 	and.w	r3, r3, #7
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	220f      	movs	r2, #15
 8005820:	fa02 f303 	lsl.w	r3, r2, r3
 8005824:	43db      	mvns	r3, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4013      	ands	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	691a      	ldr	r2, [r3, #16]
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	69ba      	ldr	r2, [r7, #24]
 800583e:	4313      	orrs	r3, r2
 8005840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	08da      	lsrs	r2, r3, #3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	3208      	adds	r2, #8
 800584a:	69b9      	ldr	r1, [r7, #24]
 800584c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	2203      	movs	r2, #3
 800585c:	fa02 f303 	lsl.w	r3, r2, r3
 8005860:	43db      	mvns	r3, r3
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	4013      	ands	r3, r2
 8005866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f003 0203 	and.w	r2, r3, #3
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	fa02 f303 	lsl.w	r3, r2, r3
 8005878:	69ba      	ldr	r2, [r7, #24]
 800587a:	4313      	orrs	r3, r2
 800587c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 80b4 	beq.w	80059fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	4b5f      	ldr	r3, [pc, #380]	; (8005a14 <HAL_GPIO_Init+0x308>)
 8005898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800589a:	4a5e      	ldr	r2, [pc, #376]	; (8005a14 <HAL_GPIO_Init+0x308>)
 800589c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058a0:	6453      	str	r3, [r2, #68]	; 0x44
 80058a2:	4b5c      	ldr	r3, [pc, #368]	; (8005a14 <HAL_GPIO_Init+0x308>)
 80058a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058ae:	4a5a      	ldr	r2, [pc, #360]	; (8005a18 <HAL_GPIO_Init+0x30c>)
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	089b      	lsrs	r3, r3, #2
 80058b4:	3302      	adds	r3, #2
 80058b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	220f      	movs	r2, #15
 80058c6:	fa02 f303 	lsl.w	r3, r2, r3
 80058ca:	43db      	mvns	r3, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4013      	ands	r3, r2
 80058d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a51      	ldr	r2, [pc, #324]	; (8005a1c <HAL_GPIO_Init+0x310>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d02b      	beq.n	8005932 <HAL_GPIO_Init+0x226>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a50      	ldr	r2, [pc, #320]	; (8005a20 <HAL_GPIO_Init+0x314>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d025      	beq.n	800592e <HAL_GPIO_Init+0x222>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a4f      	ldr	r2, [pc, #316]	; (8005a24 <HAL_GPIO_Init+0x318>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01f      	beq.n	800592a <HAL_GPIO_Init+0x21e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a4e      	ldr	r2, [pc, #312]	; (8005a28 <HAL_GPIO_Init+0x31c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d019      	beq.n	8005926 <HAL_GPIO_Init+0x21a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a4d      	ldr	r2, [pc, #308]	; (8005a2c <HAL_GPIO_Init+0x320>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d013      	beq.n	8005922 <HAL_GPIO_Init+0x216>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a4c      	ldr	r2, [pc, #304]	; (8005a30 <HAL_GPIO_Init+0x324>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00d      	beq.n	800591e <HAL_GPIO_Init+0x212>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a4b      	ldr	r2, [pc, #300]	; (8005a34 <HAL_GPIO_Init+0x328>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d007      	beq.n	800591a <HAL_GPIO_Init+0x20e>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a4a      	ldr	r2, [pc, #296]	; (8005a38 <HAL_GPIO_Init+0x32c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d101      	bne.n	8005916 <HAL_GPIO_Init+0x20a>
 8005912:	2307      	movs	r3, #7
 8005914:	e00e      	b.n	8005934 <HAL_GPIO_Init+0x228>
 8005916:	2308      	movs	r3, #8
 8005918:	e00c      	b.n	8005934 <HAL_GPIO_Init+0x228>
 800591a:	2306      	movs	r3, #6
 800591c:	e00a      	b.n	8005934 <HAL_GPIO_Init+0x228>
 800591e:	2305      	movs	r3, #5
 8005920:	e008      	b.n	8005934 <HAL_GPIO_Init+0x228>
 8005922:	2304      	movs	r3, #4
 8005924:	e006      	b.n	8005934 <HAL_GPIO_Init+0x228>
 8005926:	2303      	movs	r3, #3
 8005928:	e004      	b.n	8005934 <HAL_GPIO_Init+0x228>
 800592a:	2302      	movs	r3, #2
 800592c:	e002      	b.n	8005934 <HAL_GPIO_Init+0x228>
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <HAL_GPIO_Init+0x228>
 8005932:	2300      	movs	r3, #0
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	f002 0203 	and.w	r2, r2, #3
 800593a:	0092      	lsls	r2, r2, #2
 800593c:	4093      	lsls	r3, r2
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	4313      	orrs	r3, r2
 8005942:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005944:	4934      	ldr	r1, [pc, #208]	; (8005a18 <HAL_GPIO_Init+0x30c>)
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	089b      	lsrs	r3, r3, #2
 800594a:	3302      	adds	r3, #2
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005952:	4b3a      	ldr	r3, [pc, #232]	; (8005a3c <HAL_GPIO_Init+0x330>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	43db      	mvns	r3, r3
 800595c:	69ba      	ldr	r2, [r7, #24]
 800595e:	4013      	ands	r3, r2
 8005960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	4313      	orrs	r3, r2
 8005974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005976:	4a31      	ldr	r2, [pc, #196]	; (8005a3c <HAL_GPIO_Init+0x330>)
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800597c:	4b2f      	ldr	r3, [pc, #188]	; (8005a3c <HAL_GPIO_Init+0x330>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	43db      	mvns	r3, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	4013      	ands	r3, r2
 800598a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059a0:	4a26      	ldr	r2, [pc, #152]	; (8005a3c <HAL_GPIO_Init+0x330>)
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80059a6:	4b25      	ldr	r3, [pc, #148]	; (8005a3c <HAL_GPIO_Init+0x330>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	43db      	mvns	r3, r3
 80059b0:	69ba      	ldr	r2, [r7, #24]
 80059b2:	4013      	ands	r3, r2
 80059b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059ca:	4a1c      	ldr	r2, [pc, #112]	; (8005a3c <HAL_GPIO_Init+0x330>)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059d0:	4b1a      	ldr	r3, [pc, #104]	; (8005a3c <HAL_GPIO_Init+0x330>)
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	43db      	mvns	r3, r3
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4013      	ands	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80059ec:	69ba      	ldr	r2, [r7, #24]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059f4:	4a11      	ldr	r2, [pc, #68]	; (8005a3c <HAL_GPIO_Init+0x330>)
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	3301      	adds	r3, #1
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	2b0f      	cmp	r3, #15
 8005a04:	f67f ae90 	bls.w	8005728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a08:	bf00      	nop
 8005a0a:	3724      	adds	r7, #36	; 0x24
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	40023800 	.word	0x40023800
 8005a18:	40013800 	.word	0x40013800
 8005a1c:	40020000 	.word	0x40020000
 8005a20:	40020400 	.word	0x40020400
 8005a24:	40020800 	.word	0x40020800
 8005a28:	40020c00 	.word	0x40020c00
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	40021400 	.word	0x40021400
 8005a34:	40021800 	.word	0x40021800
 8005a38:	40021c00 	.word	0x40021c00
 8005a3c:	40013c00 	.word	0x40013c00

08005a40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691a      	ldr	r2, [r3, #16]
 8005a50:	887b      	ldrh	r3, [r7, #2]
 8005a52:	4013      	ands	r3, r2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	73fb      	strb	r3, [r7, #15]
 8005a5c:	e001      	b.n	8005a62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3714      	adds	r7, #20
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	460b      	mov	r3, r1
 8005a7a:	807b      	strh	r3, [r7, #2]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a80:	787b      	ldrb	r3, [r7, #1]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d003      	beq.n	8005a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a86:	887a      	ldrh	r2, [r7, #2]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a8c:	e003      	b.n	8005a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a8e:	887b      	ldrh	r3, [r7, #2]
 8005a90:	041a      	lsls	r2, r3, #16
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	619a      	str	r2, [r3, #24]
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
	...

08005aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e11f      	b.n	8005cf6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fe f9ee 	bl	8003eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2224      	movs	r2, #36	; 0x24
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005af6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b08:	f000 fd18 	bl	800653c <HAL_RCC_GetPCLK1Freq>
 8005b0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4a7b      	ldr	r2, [pc, #492]	; (8005d00 <HAL_I2C_Init+0x25c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d807      	bhi.n	8005b28 <HAL_I2C_Init+0x84>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4a7a      	ldr	r2, [pc, #488]	; (8005d04 <HAL_I2C_Init+0x260>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	bf94      	ite	ls
 8005b20:	2301      	movls	r3, #1
 8005b22:	2300      	movhi	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	e006      	b.n	8005b36 <HAL_I2C_Init+0x92>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a77      	ldr	r2, [pc, #476]	; (8005d08 <HAL_I2C_Init+0x264>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	bf94      	ite	ls
 8005b30:	2301      	movls	r3, #1
 8005b32:	2300      	movhi	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e0db      	b.n	8005cf6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4a72      	ldr	r2, [pc, #456]	; (8005d0c <HAL_I2C_Init+0x268>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	0c9b      	lsrs	r3, r3, #18
 8005b48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	4a64      	ldr	r2, [pc, #400]	; (8005d00 <HAL_I2C_Init+0x25c>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d802      	bhi.n	8005b78 <HAL_I2C_Init+0xd4>
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	3301      	adds	r3, #1
 8005b76:	e009      	b.n	8005b8c <HAL_I2C_Init+0xe8>
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	4a63      	ldr	r2, [pc, #396]	; (8005d10 <HAL_I2C_Init+0x26c>)
 8005b84:	fba2 2303 	umull	r2, r3, r2, r3
 8005b88:	099b      	lsrs	r3, r3, #6
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	430b      	orrs	r3, r1
 8005b92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	4956      	ldr	r1, [pc, #344]	; (8005d00 <HAL_I2C_Init+0x25c>)
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	d80d      	bhi.n	8005bc8 <HAL_I2C_Init+0x124>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	1e59      	subs	r1, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bba:	3301      	adds	r3, #1
 8005bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	bf38      	it	cc
 8005bc4:	2304      	movcc	r3, #4
 8005bc6:	e04f      	b.n	8005c68 <HAL_I2C_Init+0x1c4>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d111      	bne.n	8005bf4 <HAL_I2C_Init+0x150>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	1e58      	subs	r0, r3, #1
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6859      	ldr	r1, [r3, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	005b      	lsls	r3, r3, #1
 8005bdc:	440b      	add	r3, r1
 8005bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8005be2:	3301      	adds	r3, #1
 8005be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	bf0c      	ite	eq
 8005bec:	2301      	moveq	r3, #1
 8005bee:	2300      	movne	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	e012      	b.n	8005c1a <HAL_I2C_Init+0x176>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	1e58      	subs	r0, r3, #1
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6859      	ldr	r1, [r3, #4]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	0099      	lsls	r1, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	bf0c      	ite	eq
 8005c14:	2301      	moveq	r3, #1
 8005c16:	2300      	movne	r3, #0
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d001      	beq.n	8005c22 <HAL_I2C_Init+0x17e>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e022      	b.n	8005c68 <HAL_I2C_Init+0x1c4>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10e      	bne.n	8005c48 <HAL_I2C_Init+0x1a4>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	1e58      	subs	r0, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6859      	ldr	r1, [r3, #4]
 8005c32:	460b      	mov	r3, r1
 8005c34:	005b      	lsls	r3, r3, #1
 8005c36:	440b      	add	r3, r1
 8005c38:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c46:	e00f      	b.n	8005c68 <HAL_I2C_Init+0x1c4>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	1e58      	subs	r0, r3, #1
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6859      	ldr	r1, [r3, #4]
 8005c50:	460b      	mov	r3, r1
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	440b      	add	r3, r1
 8005c56:	0099      	lsls	r1, r3, #2
 8005c58:	440b      	add	r3, r1
 8005c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c5e:	3301      	adds	r3, #1
 8005c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	6809      	ldr	r1, [r1, #0]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	69da      	ldr	r2, [r3, #28]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a1b      	ldr	r3, [r3, #32]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6911      	ldr	r1, [r2, #16]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	68d2      	ldr	r2, [r2, #12]
 8005ca2:	4311      	orrs	r1, r2
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	430b      	orrs	r3, r1
 8005caa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695a      	ldr	r2, [r3, #20]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f042 0201 	orr.w	r2, r2, #1
 8005cd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	000186a0 	.word	0x000186a0
 8005d04:	001e847f 	.word	0x001e847f
 8005d08:	003d08ff 	.word	0x003d08ff
 8005d0c:	431bde83 	.word	0x431bde83
 8005d10:	10624dd3 	.word	0x10624dd3

08005d14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b086      	sub	sp, #24
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e25b      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d075      	beq.n	8005e1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d32:	4ba3      	ldr	r3, [pc, #652]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 030c 	and.w	r3, r3, #12
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	d00c      	beq.n	8005d58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d3e:	4ba0      	ldr	r3, [pc, #640]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d46:	2b08      	cmp	r3, #8
 8005d48:	d112      	bne.n	8005d70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d4a:	4b9d      	ldr	r3, [pc, #628]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d56:	d10b      	bne.n	8005d70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d58:	4b99      	ldr	r3, [pc, #612]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d05b      	beq.n	8005e1c <HAL_RCC_OscConfig+0x108>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d157      	bne.n	8005e1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e236      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d78:	d106      	bne.n	8005d88 <HAL_RCC_OscConfig+0x74>
 8005d7a:	4b91      	ldr	r3, [pc, #580]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a90      	ldr	r2, [pc, #576]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	e01d      	b.n	8005dc4 <HAL_RCC_OscConfig+0xb0>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d90:	d10c      	bne.n	8005dac <HAL_RCC_OscConfig+0x98>
 8005d92:	4b8b      	ldr	r3, [pc, #556]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a8a      	ldr	r2, [pc, #552]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	4b88      	ldr	r3, [pc, #544]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a87      	ldr	r2, [pc, #540]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	e00b      	b.n	8005dc4 <HAL_RCC_OscConfig+0xb0>
 8005dac:	4b84      	ldr	r3, [pc, #528]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a83      	ldr	r2, [pc, #524]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	4b81      	ldr	r3, [pc, #516]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a80      	ldr	r2, [pc, #512]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d013      	beq.n	8005df4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dcc:	f7fe fbfc 	bl	80045c8 <HAL_GetTick>
 8005dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dd4:	f7fe fbf8 	bl	80045c8 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b64      	cmp	r3, #100	; 0x64
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e1fb      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005de6:	4b76      	ldr	r3, [pc, #472]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0f0      	beq.n	8005dd4 <HAL_RCC_OscConfig+0xc0>
 8005df2:	e014      	b.n	8005e1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df4:	f7fe fbe8 	bl	80045c8 <HAL_GetTick>
 8005df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dfa:	e008      	b.n	8005e0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dfc:	f7fe fbe4 	bl	80045c8 <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b64      	cmp	r3, #100	; 0x64
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e1e7      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e0e:	4b6c      	ldr	r3, [pc, #432]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1f0      	bne.n	8005dfc <HAL_RCC_OscConfig+0xe8>
 8005e1a:	e000      	b.n	8005e1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d063      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e2a:	4b65      	ldr	r3, [pc, #404]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e36:	4b62      	ldr	r3, [pc, #392]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d11c      	bne.n	8005e7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e42:	4b5f      	ldr	r3, [pc, #380]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d116      	bne.n	8005e7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e4e:	4b5c      	ldr	r3, [pc, #368]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <HAL_RCC_OscConfig+0x152>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d001      	beq.n	8005e66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e1bb      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e66:	4b56      	ldr	r3, [pc, #344]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	00db      	lsls	r3, r3, #3
 8005e74:	4952      	ldr	r1, [pc, #328]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005e76:	4313      	orrs	r3, r2
 8005e78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e7a:	e03a      	b.n	8005ef2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d020      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e84:	4b4f      	ldr	r3, [pc, #316]	; (8005fc4 <HAL_RCC_OscConfig+0x2b0>)
 8005e86:	2201      	movs	r2, #1
 8005e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8a:	f7fe fb9d 	bl	80045c8 <HAL_GetTick>
 8005e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e90:	e008      	b.n	8005ea4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e92:	f7fe fb99 	bl	80045c8 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d901      	bls.n	8005ea4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e19c      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ea4:	4b46      	ldr	r3, [pc, #280]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d0f0      	beq.n	8005e92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eb0:	4b43      	ldr	r3, [pc, #268]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	00db      	lsls	r3, r3, #3
 8005ebe:	4940      	ldr	r1, [pc, #256]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	600b      	str	r3, [r1, #0]
 8005ec4:	e015      	b.n	8005ef2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ec6:	4b3f      	ldr	r3, [pc, #252]	; (8005fc4 <HAL_RCC_OscConfig+0x2b0>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ecc:	f7fe fb7c 	bl	80045c8 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ed4:	f7fe fb78 	bl	80045c8 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e17b      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ee6:	4b36      	ldr	r3, [pc, #216]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0302 	and.w	r3, r3, #2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d030      	beq.n	8005f60 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d016      	beq.n	8005f34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f06:	4b30      	ldr	r3, [pc, #192]	; (8005fc8 <HAL_RCC_OscConfig+0x2b4>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f0c:	f7fe fb5c 	bl	80045c8 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f14:	f7fe fb58 	bl	80045c8 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e15b      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f26:	4b26      	ldr	r3, [pc, #152]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005f28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0f0      	beq.n	8005f14 <HAL_RCC_OscConfig+0x200>
 8005f32:	e015      	b.n	8005f60 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f34:	4b24      	ldr	r3, [pc, #144]	; (8005fc8 <HAL_RCC_OscConfig+0x2b4>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f3a:	f7fe fb45 	bl	80045c8 <HAL_GetTick>
 8005f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f40:	e008      	b.n	8005f54 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f42:	f7fe fb41 	bl	80045c8 <HAL_GetTick>
 8005f46:	4602      	mov	r2, r0
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	2b02      	cmp	r3, #2
 8005f4e:	d901      	bls.n	8005f54 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f50:	2303      	movs	r3, #3
 8005f52:	e144      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f54:	4b1a      	ldr	r3, [pc, #104]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1f0      	bne.n	8005f42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 80a0 	beq.w	80060ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f72:	4b13      	ldr	r3, [pc, #76]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10f      	bne.n	8005f9e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	4b0f      	ldr	r3, [pc, #60]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	4a0e      	ldr	r2, [pc, #56]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f8e:	4b0c      	ldr	r3, [pc, #48]	; (8005fc0 <HAL_RCC_OscConfig+0x2ac>)
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <HAL_RCC_OscConfig+0x2b8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d121      	bne.n	8005fee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005faa:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <HAL_RCC_OscConfig+0x2b8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a07      	ldr	r2, [pc, #28]	; (8005fcc <HAL_RCC_OscConfig+0x2b8>)
 8005fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb6:	f7fe fb07 	bl	80045c8 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbc:	e011      	b.n	8005fe2 <HAL_RCC_OscConfig+0x2ce>
 8005fbe:	bf00      	nop
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	42470000 	.word	0x42470000
 8005fc8:	42470e80 	.word	0x42470e80
 8005fcc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd0:	f7fe fafa 	bl	80045c8 <HAL_GetTick>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1ad3      	subs	r3, r2, r3
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e0fd      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe2:	4b81      	ldr	r3, [pc, #516]	; (80061e8 <HAL_RCC_OscConfig+0x4d4>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0f0      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d106      	bne.n	8006004 <HAL_RCC_OscConfig+0x2f0>
 8005ff6:	4b7d      	ldr	r3, [pc, #500]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	4a7c      	ldr	r2, [pc, #496]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 8005ffc:	f043 0301 	orr.w	r3, r3, #1
 8006000:	6713      	str	r3, [r2, #112]	; 0x70
 8006002:	e01c      	b.n	800603e <HAL_RCC_OscConfig+0x32a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	2b05      	cmp	r3, #5
 800600a:	d10c      	bne.n	8006026 <HAL_RCC_OscConfig+0x312>
 800600c:	4b77      	ldr	r3, [pc, #476]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 800600e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006010:	4a76      	ldr	r2, [pc, #472]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 8006012:	f043 0304 	orr.w	r3, r3, #4
 8006016:	6713      	str	r3, [r2, #112]	; 0x70
 8006018:	4b74      	ldr	r3, [pc, #464]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601c:	4a73      	ldr	r2, [pc, #460]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 800601e:	f043 0301 	orr.w	r3, r3, #1
 8006022:	6713      	str	r3, [r2, #112]	; 0x70
 8006024:	e00b      	b.n	800603e <HAL_RCC_OscConfig+0x32a>
 8006026:	4b71      	ldr	r3, [pc, #452]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 8006028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800602a:	4a70      	ldr	r2, [pc, #448]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 800602c:	f023 0301 	bic.w	r3, r3, #1
 8006030:	6713      	str	r3, [r2, #112]	; 0x70
 8006032:	4b6e      	ldr	r3, [pc, #440]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	4a6d      	ldr	r2, [pc, #436]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 8006038:	f023 0304 	bic.w	r3, r3, #4
 800603c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d015      	beq.n	8006072 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006046:	f7fe fabf 	bl	80045c8 <HAL_GetTick>
 800604a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800604c:	e00a      	b.n	8006064 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800604e:	f7fe fabb 	bl	80045c8 <HAL_GetTick>
 8006052:	4602      	mov	r2, r0
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	1ad3      	subs	r3, r2, r3
 8006058:	f241 3288 	movw	r2, #5000	; 0x1388
 800605c:	4293      	cmp	r3, r2
 800605e:	d901      	bls.n	8006064 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e0bc      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006064:	4b61      	ldr	r3, [pc, #388]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 8006066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006068:	f003 0302 	and.w	r3, r3, #2
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0ee      	beq.n	800604e <HAL_RCC_OscConfig+0x33a>
 8006070:	e014      	b.n	800609c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006072:	f7fe faa9 	bl	80045c8 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006078:	e00a      	b.n	8006090 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800607a:	f7fe faa5 	bl	80045c8 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	f241 3288 	movw	r2, #5000	; 0x1388
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e0a6      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006090:	4b56      	ldr	r3, [pc, #344]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 8006092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006094:	f003 0302 	and.w	r3, r3, #2
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1ee      	bne.n	800607a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800609c:	7dfb      	ldrb	r3, [r7, #23]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d105      	bne.n	80060ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a2:	4b52      	ldr	r3, [pc, #328]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 80060a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a6:	4a51      	ldr	r2, [pc, #324]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 80060a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	699b      	ldr	r3, [r3, #24]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f000 8092 	beq.w	80061dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060b8:	4b4c      	ldr	r3, [pc, #304]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f003 030c 	and.w	r3, r3, #12
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d05c      	beq.n	800617e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	2b02      	cmp	r3, #2
 80060ca:	d141      	bne.n	8006150 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060cc:	4b48      	ldr	r3, [pc, #288]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 80060ce:	2200      	movs	r2, #0
 80060d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d2:	f7fe fa79 	bl	80045c8 <HAL_GetTick>
 80060d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d8:	e008      	b.n	80060ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060da:	f7fe fa75 	bl	80045c8 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d901      	bls.n	80060ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80060e8:	2303      	movs	r3, #3
 80060ea:	e078      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ec:	4b3f      	ldr	r3, [pc, #252]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f0      	bne.n	80060da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	69da      	ldr	r2, [r3, #28]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a1b      	ldr	r3, [r3, #32]
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	019b      	lsls	r3, r3, #6
 8006108:	431a      	orrs	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	085b      	lsrs	r3, r3, #1
 8006110:	3b01      	subs	r3, #1
 8006112:	041b      	lsls	r3, r3, #16
 8006114:	431a      	orrs	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611a:	061b      	lsls	r3, r3, #24
 800611c:	4933      	ldr	r1, [pc, #204]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 800611e:	4313      	orrs	r3, r2
 8006120:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006122:	4b33      	ldr	r3, [pc, #204]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8006124:	2201      	movs	r2, #1
 8006126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006128:	f7fe fa4e 	bl	80045c8 <HAL_GetTick>
 800612c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800612e:	e008      	b.n	8006142 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006130:	f7fe fa4a 	bl	80045c8 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e04d      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006142:	4b2a      	ldr	r3, [pc, #168]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0f0      	beq.n	8006130 <HAL_RCC_OscConfig+0x41c>
 800614e:	e045      	b.n	80061dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006150:	4b27      	ldr	r3, [pc, #156]	; (80061f0 <HAL_RCC_OscConfig+0x4dc>)
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006156:	f7fe fa37 	bl	80045c8 <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800615e:	f7fe fa33 	bl	80045c8 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e036      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006170:	4b1e      	ldr	r3, [pc, #120]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f0      	bne.n	800615e <HAL_RCC_OscConfig+0x44a>
 800617c:	e02e      	b.n	80061dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	699b      	ldr	r3, [r3, #24]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e029      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800618a:	4b18      	ldr	r3, [pc, #96]	; (80061ec <HAL_RCC_OscConfig+0x4d8>)
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	429a      	cmp	r2, r3
 800619c:	d11c      	bne.n	80061d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d115      	bne.n	80061d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061b2:	4013      	ands	r3, r2
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d10d      	bne.n	80061d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d106      	bne.n	80061d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d001      	beq.n	80061dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e000      	b.n	80061de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40007000 	.word	0x40007000
 80061ec:	40023800 	.word	0x40023800
 80061f0:	42470060 	.word	0x42470060

080061f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d101      	bne.n	8006208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0cc      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006208:	4b68      	ldr	r3, [pc, #416]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d90c      	bls.n	8006230 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006216:	4b65      	ldr	r3, [pc, #404]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	b2d2      	uxtb	r2, r2
 800621c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800621e:	4b63      	ldr	r3, [pc, #396]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0b8      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d020      	beq.n	800627e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d005      	beq.n	8006254 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006248:	4b59      	ldr	r3, [pc, #356]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	4a58      	ldr	r2, [pc, #352]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006252:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006260:	4b53      	ldr	r3, [pc, #332]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	4a52      	ldr	r2, [pc, #328]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800626a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800626c:	4b50      	ldr	r3, [pc, #320]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	494d      	ldr	r1, [pc, #308]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 800627a:	4313      	orrs	r3, r2
 800627c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b00      	cmp	r3, #0
 8006288:	d044      	beq.n	8006314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d107      	bne.n	80062a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006292:	4b47      	ldr	r3, [pc, #284]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d119      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e07f      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d003      	beq.n	80062b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062ae:	2b03      	cmp	r3, #3
 80062b0:	d107      	bne.n	80062c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b2:	4b3f      	ldr	r3, [pc, #252]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d109      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e06f      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c2:	4b3b      	ldr	r3, [pc, #236]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0302 	and.w	r3, r3, #2
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e067      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062d2:	4b37      	ldr	r3, [pc, #220]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f023 0203 	bic.w	r2, r3, #3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	4934      	ldr	r1, [pc, #208]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 80062e0:	4313      	orrs	r3, r2
 80062e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062e4:	f7fe f970 	bl	80045c8 <HAL_GetTick>
 80062e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ea:	e00a      	b.n	8006302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062ec:	f7fe f96c 	bl	80045c8 <HAL_GetTick>
 80062f0:	4602      	mov	r2, r0
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d901      	bls.n	8006302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e04f      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006302:	4b2b      	ldr	r3, [pc, #172]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	f003 020c 	and.w	r2, r3, #12
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	429a      	cmp	r2, r3
 8006312:	d1eb      	bne.n	80062ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006314:	4b25      	ldr	r3, [pc, #148]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	683a      	ldr	r2, [r7, #0]
 800631e:	429a      	cmp	r2, r3
 8006320:	d20c      	bcs.n	800633c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006322:	4b22      	ldr	r3, [pc, #136]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 8006324:	683a      	ldr	r2, [r7, #0]
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800632a:	4b20      	ldr	r3, [pc, #128]	; (80063ac <HAL_RCC_ClockConfig+0x1b8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	683a      	ldr	r2, [r7, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	d001      	beq.n	800633c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006338:	2301      	movs	r3, #1
 800633a:	e032      	b.n	80063a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0304 	and.w	r3, r3, #4
 8006344:	2b00      	cmp	r3, #0
 8006346:	d008      	beq.n	800635a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006348:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	4916      	ldr	r1, [pc, #88]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	4313      	orrs	r3, r2
 8006358:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0308 	and.w	r3, r3, #8
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006366:	4b12      	ldr	r3, [pc, #72]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	00db      	lsls	r3, r3, #3
 8006374:	490e      	ldr	r1, [pc, #56]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006376:	4313      	orrs	r3, r2
 8006378:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800637a:	f000 f821 	bl	80063c0 <HAL_RCC_GetSysClockFreq>
 800637e:	4601      	mov	r1, r0
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <HAL_RCC_ClockConfig+0x1bc>)
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	091b      	lsrs	r3, r3, #4
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	4a0a      	ldr	r2, [pc, #40]	; (80063b4 <HAL_RCC_ClockConfig+0x1c0>)
 800638c:	5cd3      	ldrb	r3, [r2, r3]
 800638e:	fa21 f303 	lsr.w	r3, r1, r3
 8006392:	4a09      	ldr	r2, [pc, #36]	; (80063b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006394:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_RCC_ClockConfig+0x1c8>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f7fe f8d0 	bl	8004540 <HAL_InitTick>

  return HAL_OK;
 80063a0:	2300      	movs	r3, #0
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3710      	adds	r7, #16
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	40023c00 	.word	0x40023c00
 80063b0:	40023800 	.word	0x40023800
 80063b4:	0800c058 	.word	0x0800c058
 80063b8:	20000034 	.word	0x20000034
 80063bc:	20000038 	.word	0x20000038

080063c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]
 80063ca:	2300      	movs	r3, #0
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	2300      	movs	r3, #0
 80063d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063d6:	4b50      	ldr	r3, [pc, #320]	; (8006518 <HAL_RCC_GetSysClockFreq+0x158>)
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	f003 030c 	and.w	r3, r3, #12
 80063de:	2b04      	cmp	r3, #4
 80063e0:	d007      	beq.n	80063f2 <HAL_RCC_GetSysClockFreq+0x32>
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d008      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0x38>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f040 808d 	bne.w	8006506 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063ec:	4b4b      	ldr	r3, [pc, #300]	; (800651c <HAL_RCC_GetSysClockFreq+0x15c>)
 80063ee:	60bb      	str	r3, [r7, #8]
       break;
 80063f0:	e08c      	b.n	800650c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063f2:	4b4b      	ldr	r3, [pc, #300]	; (8006520 <HAL_RCC_GetSysClockFreq+0x160>)
 80063f4:	60bb      	str	r3, [r7, #8]
      break;
 80063f6:	e089      	b.n	800650c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063f8:	4b47      	ldr	r3, [pc, #284]	; (8006518 <HAL_RCC_GetSysClockFreq+0x158>)
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006400:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006402:	4b45      	ldr	r3, [pc, #276]	; (8006518 <HAL_RCC_GetSysClockFreq+0x158>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d023      	beq.n	8006456 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800640e:	4b42      	ldr	r3, [pc, #264]	; (8006518 <HAL_RCC_GetSysClockFreq+0x158>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	099b      	lsrs	r3, r3, #6
 8006414:	f04f 0400 	mov.w	r4, #0
 8006418:	f240 11ff 	movw	r1, #511	; 0x1ff
 800641c:	f04f 0200 	mov.w	r2, #0
 8006420:	ea03 0501 	and.w	r5, r3, r1
 8006424:	ea04 0602 	and.w	r6, r4, r2
 8006428:	4a3d      	ldr	r2, [pc, #244]	; (8006520 <HAL_RCC_GetSysClockFreq+0x160>)
 800642a:	fb02 f106 	mul.w	r1, r2, r6
 800642e:	2200      	movs	r2, #0
 8006430:	fb02 f205 	mul.w	r2, r2, r5
 8006434:	440a      	add	r2, r1
 8006436:	493a      	ldr	r1, [pc, #232]	; (8006520 <HAL_RCC_GetSysClockFreq+0x160>)
 8006438:	fba5 0101 	umull	r0, r1, r5, r1
 800643c:	1853      	adds	r3, r2, r1
 800643e:	4619      	mov	r1, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f04f 0400 	mov.w	r4, #0
 8006446:	461a      	mov	r2, r3
 8006448:	4623      	mov	r3, r4
 800644a:	f7fa fc1d 	bl	8000c88 <__aeabi_uldivmod>
 800644e:	4603      	mov	r3, r0
 8006450:	460c      	mov	r4, r1
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	e049      	b.n	80064ea <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006456:	4b30      	ldr	r3, [pc, #192]	; (8006518 <HAL_RCC_GetSysClockFreq+0x158>)
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	099b      	lsrs	r3, r3, #6
 800645c:	f04f 0400 	mov.w	r4, #0
 8006460:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006464:	f04f 0200 	mov.w	r2, #0
 8006468:	ea03 0501 	and.w	r5, r3, r1
 800646c:	ea04 0602 	and.w	r6, r4, r2
 8006470:	4629      	mov	r1, r5
 8006472:	4632      	mov	r2, r6
 8006474:	f04f 0300 	mov.w	r3, #0
 8006478:	f04f 0400 	mov.w	r4, #0
 800647c:	0154      	lsls	r4, r2, #5
 800647e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006482:	014b      	lsls	r3, r1, #5
 8006484:	4619      	mov	r1, r3
 8006486:	4622      	mov	r2, r4
 8006488:	1b49      	subs	r1, r1, r5
 800648a:	eb62 0206 	sbc.w	r2, r2, r6
 800648e:	f04f 0300 	mov.w	r3, #0
 8006492:	f04f 0400 	mov.w	r4, #0
 8006496:	0194      	lsls	r4, r2, #6
 8006498:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800649c:	018b      	lsls	r3, r1, #6
 800649e:	1a5b      	subs	r3, r3, r1
 80064a0:	eb64 0402 	sbc.w	r4, r4, r2
 80064a4:	f04f 0100 	mov.w	r1, #0
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	00e2      	lsls	r2, r4, #3
 80064ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80064b2:	00d9      	lsls	r1, r3, #3
 80064b4:	460b      	mov	r3, r1
 80064b6:	4614      	mov	r4, r2
 80064b8:	195b      	adds	r3, r3, r5
 80064ba:	eb44 0406 	adc.w	r4, r4, r6
 80064be:	f04f 0100 	mov.w	r1, #0
 80064c2:	f04f 0200 	mov.w	r2, #0
 80064c6:	02a2      	lsls	r2, r4, #10
 80064c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80064cc:	0299      	lsls	r1, r3, #10
 80064ce:	460b      	mov	r3, r1
 80064d0:	4614      	mov	r4, r2
 80064d2:	4618      	mov	r0, r3
 80064d4:	4621      	mov	r1, r4
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f04f 0400 	mov.w	r4, #0
 80064dc:	461a      	mov	r2, r3
 80064de:	4623      	mov	r3, r4
 80064e0:	f7fa fbd2 	bl	8000c88 <__aeabi_uldivmod>
 80064e4:	4603      	mov	r3, r0
 80064e6:	460c      	mov	r4, r1
 80064e8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064ea:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <HAL_RCC_GetSysClockFreq+0x158>)
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	0c1b      	lsrs	r3, r3, #16
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	3301      	adds	r3, #1
 80064f6:	005b      	lsls	r3, r3, #1
 80064f8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006502:	60bb      	str	r3, [r7, #8]
      break;
 8006504:	e002      	b.n	800650c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006506:	4b05      	ldr	r3, [pc, #20]	; (800651c <HAL_RCC_GetSysClockFreq+0x15c>)
 8006508:	60bb      	str	r3, [r7, #8]
      break;
 800650a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800650c:	68bb      	ldr	r3, [r7, #8]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3714      	adds	r7, #20
 8006512:	46bd      	mov	sp, r7
 8006514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006516:	bf00      	nop
 8006518:	40023800 	.word	0x40023800
 800651c:	00f42400 	.word	0x00f42400
 8006520:	00bebc20 	.word	0x00bebc20

08006524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006524:	b480      	push	{r7}
 8006526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006528:	4b03      	ldr	r3, [pc, #12]	; (8006538 <HAL_RCC_GetHCLKFreq+0x14>)
 800652a:	681b      	ldr	r3, [r3, #0]
}
 800652c:	4618      	mov	r0, r3
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	20000034 	.word	0x20000034

0800653c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006540:	f7ff fff0 	bl	8006524 <HAL_RCC_GetHCLKFreq>
 8006544:	4601      	mov	r1, r0
 8006546:	4b05      	ldr	r3, [pc, #20]	; (800655c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	0a9b      	lsrs	r3, r3, #10
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	4a03      	ldr	r2, [pc, #12]	; (8006560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006552:	5cd3      	ldrb	r3, [r2, r3]
 8006554:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006558:	4618      	mov	r0, r3
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40023800 	.word	0x40023800
 8006560:	0800c068 	.word	0x0800c068

08006564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006568:	f7ff ffdc 	bl	8006524 <HAL_RCC_GetHCLKFreq>
 800656c:	4601      	mov	r1, r0
 800656e:	4b05      	ldr	r3, [pc, #20]	; (8006584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	0b5b      	lsrs	r3, r3, #13
 8006574:	f003 0307 	and.w	r3, r3, #7
 8006578:	4a03      	ldr	r2, [pc, #12]	; (8006588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800657a:	5cd3      	ldrb	r3, [r2, r3]
 800657c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006580:	4618      	mov	r0, r3
 8006582:	bd80      	pop	{r7, pc}
 8006584:	40023800 	.word	0x40023800
 8006588:	0800c068 	.word	0x0800c068

0800658c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d101      	bne.n	800659e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e056      	b.n	800664c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d106      	bne.n	80065be <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f7fd fcbf 	bl	8003f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2202      	movs	r2, #2
 80065c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065d4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	431a      	orrs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	431a      	orrs	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	431a      	orrs	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a1b      	ldr	r3, [r3, #32]
 8006606:	ea42 0103 	orr.w	r1, r2, r3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	0c1b      	lsrs	r3, r3, #16
 800661c:	f003 0104 	and.w	r1, r3, #4
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	430a      	orrs	r2, r1
 800662a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	69da      	ldr	r2, [r3, #28]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800663a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	603b      	str	r3, [r7, #0]
 8006660:	4613      	mov	r3, r2
 8006662:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006664:	2300      	movs	r3, #0
 8006666:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800666e:	2b01      	cmp	r3, #1
 8006670:	d101      	bne.n	8006676 <HAL_SPI_Transmit+0x22>
 8006672:	2302      	movs	r3, #2
 8006674:	e11e      	b.n	80068b4 <HAL_SPI_Transmit+0x260>
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800667e:	f7fd ffa3 	bl	80045c8 <HAL_GetTick>
 8006682:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b01      	cmp	r3, #1
 8006692:	d002      	beq.n	800669a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006694:	2302      	movs	r3, #2
 8006696:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006698:	e103      	b.n	80068a2 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_SPI_Transmit+0x52>
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d102      	bne.n	80066ac <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066aa:	e0fa      	b.n	80068a2 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2203      	movs	r2, #3
 80066b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	88fa      	ldrh	r2, [r7, #6]
 80066ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f2:	d107      	bne.n	8006704 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006702:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670e:	2b40      	cmp	r3, #64	; 0x40
 8006710:	d007      	beq.n	8006722 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006720:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800672a:	d14b      	bne.n	80067c4 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <HAL_SPI_Transmit+0xe6>
 8006734:	8afb      	ldrh	r3, [r7, #22]
 8006736:	2b01      	cmp	r3, #1
 8006738:	d13e      	bne.n	80067b8 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	881a      	ldrh	r2, [r3, #0]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674a:	1c9a      	adds	r2, r3, #2
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006754:	b29b      	uxth	r3, r3
 8006756:	3b01      	subs	r3, #1
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800675e:	e02b      	b.n	80067b8 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 0302 	and.w	r3, r3, #2
 800676a:	2b02      	cmp	r3, #2
 800676c:	d112      	bne.n	8006794 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006772:	881a      	ldrh	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	1c9a      	adds	r2, r3, #2
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006788:	b29b      	uxth	r3, r3
 800678a:	3b01      	subs	r3, #1
 800678c:	b29a      	uxth	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	86da      	strh	r2, [r3, #54]	; 0x36
 8006792:	e011      	b.n	80067b8 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006794:	f7fd ff18 	bl	80045c8 <HAL_GetTick>
 8006798:	4602      	mov	r2, r0
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d803      	bhi.n	80067ac <HAL_SPI_Transmit+0x158>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067aa:	d102      	bne.n	80067b2 <HAL_SPI_Transmit+0x15e>
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d102      	bne.n	80067b8 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067b6:	e074      	b.n	80068a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1ce      	bne.n	8006760 <HAL_SPI_Transmit+0x10c>
 80067c2:	e04c      	b.n	800685e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <HAL_SPI_Transmit+0x17e>
 80067cc:	8afb      	ldrh	r3, [r7, #22]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d140      	bne.n	8006854 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	330c      	adds	r3, #12
 80067dc:	7812      	ldrb	r2, [r2, #0]
 80067de:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80067f8:	e02c      	b.n	8006854 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b02      	cmp	r3, #2
 8006806:	d113      	bne.n	8006830 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	7812      	ldrb	r2, [r2, #0]
 8006814:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006824:	b29b      	uxth	r3, r3
 8006826:	3b01      	subs	r3, #1
 8006828:	b29a      	uxth	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	86da      	strh	r2, [r3, #54]	; 0x36
 800682e:	e011      	b.n	8006854 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006830:	f7fd feca 	bl	80045c8 <HAL_GetTick>
 8006834:	4602      	mov	r2, r0
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	1ad3      	subs	r3, r2, r3
 800683a:	683a      	ldr	r2, [r7, #0]
 800683c:	429a      	cmp	r2, r3
 800683e:	d803      	bhi.n	8006848 <HAL_SPI_Transmit+0x1f4>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	d102      	bne.n	800684e <HAL_SPI_Transmit+0x1fa>
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d102      	bne.n	8006854 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006852:	e026      	b.n	80068a2 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006858:	b29b      	uxth	r3, r3
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1cd      	bne.n	80067fa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	68f8      	ldr	r0, [r7, #12]
 8006864:	f000 fba4 	bl	8006fb0 <SPI_EndRxTxTransaction>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2220      	movs	r2, #32
 8006872:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10a      	bne.n	8006892 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800687c:	2300      	movs	r3, #0
 800687e:	613b      	str	r3, [r7, #16]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	613b      	str	r3, [r7, #16]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	613b      	str	r3, [r7, #16]
 8006890:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006896:	2b00      	cmp	r3, #0
 8006898:	d002      	beq.n	80068a0 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	77fb      	strb	r3, [r7, #31]
 800689e:	e000      	b.n	80068a2 <HAL_SPI_Transmit+0x24e>
  }

error:
 80068a0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3720      	adds	r7, #32
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	4613      	mov	r3, r2
 80068ca:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068d8:	d112      	bne.n	8006900 <HAL_SPI_Receive+0x44>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10e      	bne.n	8006900 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2204      	movs	r2, #4
 80068e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 f8e9 	bl	8006ace <HAL_SPI_TransmitReceive>
 80068fc:	4603      	mov	r3, r0
 80068fe:	e0e2      	b.n	8006ac6 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006906:	2b01      	cmp	r3, #1
 8006908:	d101      	bne.n	800690e <HAL_SPI_Receive+0x52>
 800690a:	2302      	movs	r3, #2
 800690c:	e0db      	b.n	8006ac6 <HAL_SPI_Receive+0x20a>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006916:	f7fd fe57 	bl	80045c8 <HAL_GetTick>
 800691a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006922:	b2db      	uxtb	r3, r3
 8006924:	2b01      	cmp	r3, #1
 8006926:	d002      	beq.n	800692e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006928:	2302      	movs	r3, #2
 800692a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800692c:	e0c2      	b.n	8006ab4 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d002      	beq.n	800693a <HAL_SPI_Receive+0x7e>
 8006934:	88fb      	ldrh	r3, [r7, #6]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d102      	bne.n	8006940 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800693e:	e0b9      	b.n	8006ab4 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2204      	movs	r2, #4
 8006944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	88fa      	ldrh	r2, [r7, #6]
 800695e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2200      	movs	r2, #0
 8006976:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006986:	d107      	bne.n	8006998 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006996:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a2:	2b40      	cmp	r3, #64	; 0x40
 80069a4:	d007      	beq.n	80069b6 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069b4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d162      	bne.n	8006a84 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80069be:	e02e      	b.n	8006a1e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d115      	bne.n	80069fa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f103 020c 	add.w	r2, r3, #12
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069da:	7812      	ldrb	r2, [r2, #0]
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069f8:	e011      	b.n	8006a1e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069fa:	f7fd fde5 	bl	80045c8 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d803      	bhi.n	8006a12 <HAL_SPI_Receive+0x156>
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a10:	d102      	bne.n	8006a18 <HAL_SPI_Receive+0x15c>
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a1c:	e04a      	b.n	8006ab4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1cb      	bne.n	80069c0 <HAL_SPI_Receive+0x104>
 8006a28:	e031      	b.n	8006a8e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d113      	bne.n	8006a60 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a42:	b292      	uxth	r2, r2
 8006a44:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	1c9a      	adds	r2, r3, #2
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a5e:	e011      	b.n	8006a84 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a60:	f7fd fdb2 	bl	80045c8 <HAL_GetTick>
 8006a64:	4602      	mov	r2, r0
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d803      	bhi.n	8006a78 <HAL_SPI_Receive+0x1bc>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a76:	d102      	bne.n	8006a7e <HAL_SPI_Receive+0x1c2>
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d102      	bne.n	8006a84 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006a82:	e017      	b.n	8006ab4 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1cd      	bne.n	8006a2a <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006a8e:	693a      	ldr	r2, [r7, #16]
 8006a90:	6839      	ldr	r1, [r7, #0]
 8006a92:	68f8      	ldr	r0, [r7, #12]
 8006a94:	f000 fa27 	bl	8006ee6 <SPI_EndRxTransaction>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	75fb      	strb	r3, [r7, #23]
 8006ab0:	e000      	b.n	8006ab4 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006ab2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}

08006ace <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ace:	b580      	push	{r7, lr}
 8006ad0:	b08c      	sub	sp, #48	; 0x30
 8006ad2:	af00      	add	r7, sp, #0
 8006ad4:	60f8      	str	r0, [r7, #12]
 8006ad6:	60b9      	str	r1, [r7, #8]
 8006ad8:	607a      	str	r2, [r7, #4]
 8006ada:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006adc:	2301      	movs	r3, #1
 8006ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_SPI_TransmitReceive+0x26>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e18a      	b.n	8006e0a <HAL_SPI_TransmitReceive+0x33c>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006afc:	f7fd fd64 	bl	80045c8 <HAL_GetTick>
 8006b00:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006b12:	887b      	ldrh	r3, [r7, #2]
 8006b14:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d00f      	beq.n	8006b3e <HAL_SPI_TransmitReceive+0x70>
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b24:	d107      	bne.n	8006b36 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <HAL_SPI_TransmitReceive+0x68>
 8006b2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	d003      	beq.n	8006b3e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006b36:	2302      	movs	r3, #2
 8006b38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b3c:	e15b      	b.n	8006df6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <HAL_SPI_TransmitReceive+0x82>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <HAL_SPI_TransmitReceive+0x82>
 8006b4a:	887b      	ldrh	r3, [r7, #2]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d103      	bne.n	8006b58 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006b56:	e14e      	b.n	8006df6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b04      	cmp	r3, #4
 8006b62:	d003      	beq.n	8006b6c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2205      	movs	r2, #5
 8006b68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	887a      	ldrh	r2, [r7, #2]
 8006b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	887a      	ldrh	r2, [r7, #2]
 8006b82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	887a      	ldrh	r2, [r7, #2]
 8006b8e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	887a      	ldrh	r2, [r7, #2]
 8006b94:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d007      	beq.n	8006bc0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bc8:	d178      	bne.n	8006cbc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_SPI_TransmitReceive+0x10a>
 8006bd2:	8b7b      	ldrh	r3, [r7, #26]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d166      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bdc:	881a      	ldrh	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be8:	1c9a      	adds	r2, r3, #2
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bfc:	e053      	b.n	8006ca6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d11b      	bne.n	8006c44 <HAL_SPI_TransmitReceive+0x176>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d016      	beq.n	8006c44 <HAL_SPI_TransmitReceive+0x176>
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d113      	bne.n	8006c44 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c20:	881a      	ldrh	r2, [r3, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2c:	1c9a      	adds	r2, r3, #2
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d119      	bne.n	8006c86 <HAL_SPI_TransmitReceive+0x1b8>
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d014      	beq.n	8006c86 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68da      	ldr	r2, [r3, #12]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c66:	b292      	uxth	r2, r2
 8006c68:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	1c9a      	adds	r2, r3, #2
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c82:	2301      	movs	r3, #1
 8006c84:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c86:	f7fd fc9f 	bl	80045c8 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d807      	bhi.n	8006ca6 <HAL_SPI_TransmitReceive+0x1d8>
 8006c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9c:	d003      	beq.n	8006ca6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ca4:	e0a7      	b.n	8006df6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1a6      	bne.n	8006bfe <HAL_SPI_TransmitReceive+0x130>
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1a1      	bne.n	8006bfe <HAL_SPI_TransmitReceive+0x130>
 8006cba:	e07c      	b.n	8006db6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <HAL_SPI_TransmitReceive+0x1fc>
 8006cc4:	8b7b      	ldrh	r3, [r7, #26]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d16b      	bne.n	8006da2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	7812      	ldrb	r2, [r2, #0]
 8006cd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cf0:	e057      	b.n	8006da2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d11c      	bne.n	8006d3a <HAL_SPI_TransmitReceive+0x26c>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d017      	beq.n	8006d3a <HAL_SPI_TransmitReceive+0x26c>
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d114      	bne.n	8006d3a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	330c      	adds	r3, #12
 8006d1a:	7812      	ldrb	r2, [r2, #0]
 8006d1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	b29a      	uxth	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d119      	bne.n	8006d7c <HAL_SPI_TransmitReceive+0x2ae>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d014      	beq.n	8006d7c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68da      	ldr	r2, [r3, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	3b01      	subs	r3, #1
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d7c:	f7fd fc24 	bl	80045c8 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d803      	bhi.n	8006d94 <HAL_SPI_TransmitReceive+0x2c6>
 8006d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d92:	d102      	bne.n	8006d9a <HAL_SPI_TransmitReceive+0x2cc>
 8006d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d103      	bne.n	8006da2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006da0:	e029      	b.n	8006df6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1a2      	bne.n	8006cf2 <HAL_SPI_TransmitReceive+0x224>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d19d      	bne.n	8006cf2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 f8f8 	bl	8006fb0 <SPI_EndRxTxTransaction>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d006      	beq.n	8006dd4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2220      	movs	r2, #32
 8006dd0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006dd2:	e010      	b.n	8006df6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10b      	bne.n	8006df4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	617b      	str	r3, [r7, #20]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	e000      	b.n	8006df6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006df4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3730      	adds	r7, #48	; 0x30
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b084      	sub	sp, #16
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	60f8      	str	r0, [r7, #12]
 8006e1a:	60b9      	str	r1, [r7, #8]
 8006e1c:	603b      	str	r3, [r7, #0]
 8006e1e:	4613      	mov	r3, r2
 8006e20:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e22:	e04c      	b.n	8006ebe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	d048      	beq.n	8006ebe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006e2c:	f7fd fbcc 	bl	80045c8 <HAL_GetTick>
 8006e30:	4602      	mov	r2, r0
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	1ad3      	subs	r3, r2, r3
 8006e36:	683a      	ldr	r2, [r7, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d902      	bls.n	8006e42 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d13d      	bne.n	8006ebe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	685a      	ldr	r2, [r3, #4]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e5a:	d111      	bne.n	8006e80 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e64:	d004      	beq.n	8006e70 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e6e:	d107      	bne.n	8006e80 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e88:	d10f      	bne.n	8006eaa <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ea8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2201      	movs	r2, #1
 8006eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e00f      	b.n	8006ede <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	bf0c      	ite	eq
 8006ece:	2301      	moveq	r3, #1
 8006ed0:	2300      	movne	r3, #0
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	79fb      	ldrb	r3, [r7, #7]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d1a3      	bne.n	8006e24 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3710      	adds	r7, #16
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b086      	sub	sp, #24
 8006eea:	af02      	add	r7, sp, #8
 8006eec:	60f8      	str	r0, [r7, #12]
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006efa:	d111      	bne.n	8006f20 <SPI_EndRxTransaction+0x3a>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f04:	d004      	beq.n	8006f10 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0e:	d107      	bne.n	8006f20 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	681a      	ldr	r2, [r3, #0]
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f1e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f28:	d12a      	bne.n	8006f80 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f32:	d012      	beq.n	8006f5a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2180      	movs	r1, #128	; 0x80
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f7ff ff67 	bl	8006e12 <SPI_WaitFlagStateUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d02d      	beq.n	8006fa6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4e:	f043 0220 	orr.w	r2, r3, #32
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e026      	b.n	8006fa8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	9300      	str	r3, [sp, #0]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	2200      	movs	r2, #0
 8006f62:	2101      	movs	r1, #1
 8006f64:	68f8      	ldr	r0, [r7, #12]
 8006f66:	f7ff ff54 	bl	8006e12 <SPI_WaitFlagStateUntilTimeout>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d01a      	beq.n	8006fa6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f74:	f043 0220 	orr.w	r2, r3, #32
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e013      	b.n	8006fa8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	2101      	movs	r1, #1
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f7ff ff41 	bl	8006e12 <SPI_WaitFlagStateUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d007      	beq.n	8006fa6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	f043 0220 	orr.w	r2, r3, #32
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e000      	b.n	8006fa8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b088      	sub	sp, #32
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006fbc:	4b1b      	ldr	r3, [pc, #108]	; (800702c <SPI_EndRxTxTransaction+0x7c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a1b      	ldr	r2, [pc, #108]	; (8007030 <SPI_EndRxTxTransaction+0x80>)
 8006fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc6:	0d5b      	lsrs	r3, r3, #21
 8006fc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006fcc:	fb02 f303 	mul.w	r3, r2, r3
 8006fd0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fda:	d112      	bne.n	8007002 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2180      	movs	r1, #128	; 0x80
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7ff ff13 	bl	8006e12 <SPI_WaitFlagStateUntilTimeout>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d016      	beq.n	8007020 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	f043 0220 	orr.w	r2, r3, #32
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e00f      	b.n	8007022 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00a      	beq.n	800701e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	3b01      	subs	r3, #1
 800700c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007018:	2b80      	cmp	r3, #128	; 0x80
 800701a:	d0f2      	beq.n	8007002 <SPI_EndRxTxTransaction+0x52>
 800701c:	e000      	b.n	8007020 <SPI_EndRxTxTransaction+0x70>
        break;
 800701e:	bf00      	nop
  }

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20000034 	.word	0x20000034
 8007030:	165e9f81 	.word	0x165e9f81

08007034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e01d      	b.n	8007082 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b00      	cmp	r3, #0
 8007050:	d106      	bne.n	8007060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fd f86a 	bl	8004134 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3304      	adds	r3, #4
 8007070:	4619      	mov	r1, r3
 8007072:	4610      	mov	r0, r2
 8007074:	f000 fb56 	bl	8007724 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800708a:	b480      	push	{r7}
 800708c:	b085      	sub	sp, #20
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68da      	ldr	r2, [r3, #12]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f042 0201 	orr.w	r2, r2, #1
 80070a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b06      	cmp	r3, #6
 80070b2:	d007      	beq.n	80070c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0201 	orr.w	r2, r2, #1
 80070c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b082      	sub	sp, #8
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d101      	bne.n	80070e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	e01d      	b.n	8007120 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070ea:	b2db      	uxtb	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d106      	bne.n	80070fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7fc ff67 	bl	8003fcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2202      	movs	r2, #2
 8007102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	3304      	adds	r3, #4
 800710e:	4619      	mov	r1, r3
 8007110:	4610      	mov	r0, r2
 8007112:	f000 fb07 	bl	8007724 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2201      	movs	r2, #1
 800711a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}

08007128 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2201      	movs	r2, #1
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fd42 	bl	8007bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a15      	ldr	r2, [pc, #84]	; (800719c <HAL_TIM_PWM_Start+0x74>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <HAL_TIM_PWM_Start+0x2c>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a14      	ldr	r2, [pc, #80]	; (80071a0 <HAL_TIM_PWM_Start+0x78>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d101      	bne.n	8007158 <HAL_TIM_PWM_Start+0x30>
 8007154:	2301      	movs	r3, #1
 8007156:	e000      	b.n	800715a <HAL_TIM_PWM_Start+0x32>
 8007158:	2300      	movs	r3, #0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d007      	beq.n	800716e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800716c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f003 0307 	and.w	r3, r3, #7
 8007178:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2b06      	cmp	r3, #6
 800717e:	d007      	beq.n	8007190 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0201 	orr.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40010000 	.word	0x40010000
 80071a0:	40010400 	.word	0x40010400

080071a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
 80071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e083      	b.n	80072c0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d106      	bne.n	80071d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7fc ff35 	bl	800403c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2202      	movs	r2, #2
 80071d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6812      	ldr	r2, [r2, #0]
 80071e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e8:	f023 0307 	bic.w	r3, r3, #7
 80071ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f000 fa93 	bl	8007724 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007226:	f023 0303 	bic.w	r3, r3, #3
 800722a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	021b      	lsls	r3, r3, #8
 8007236:	4313      	orrs	r3, r2
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	4313      	orrs	r3, r2
 800723c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007244:	f023 030c 	bic.w	r3, r3, #12
 8007248:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007250:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007254:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	68da      	ldr	r2, [r3, #12]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	69db      	ldr	r3, [r3, #28]
 800725e:	021b      	lsls	r3, r3, #8
 8007260:	4313      	orrs	r3, r2
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	4313      	orrs	r3, r2
 8007266:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	011a      	lsls	r2, r3, #4
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	031b      	lsls	r3, r3, #12
 8007274:	4313      	orrs	r3, r2
 8007276:	693a      	ldr	r2, [r7, #16]
 8007278:	4313      	orrs	r3, r2
 800727a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007282:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800728a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	4313      	orrs	r3, r2
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	4313      	orrs	r3, r2
 800729c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d002      	beq.n	80072de <HAL_TIM_Encoder_Start+0x16>
 80072d8:	2b04      	cmp	r3, #4
 80072da:	d008      	beq.n	80072ee <HAL_TIM_Encoder_Start+0x26>
 80072dc:	e00f      	b.n	80072fe <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2201      	movs	r2, #1
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fc6c 	bl	8007bc4 <TIM_CCxChannelCmd>
      break;
 80072ec:	e016      	b.n	800731c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	2201      	movs	r2, #1
 80072f4:	2104      	movs	r1, #4
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fc64 	bl	8007bc4 <TIM_CCxChannelCmd>
      break;
 80072fc:	e00e      	b.n	800731c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2201      	movs	r2, #1
 8007304:	2100      	movs	r1, #0
 8007306:	4618      	mov	r0, r3
 8007308:	f000 fc5c 	bl	8007bc4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2201      	movs	r2, #1
 8007312:	2104      	movs	r1, #4
 8007314:	4618      	mov	r0, r3
 8007316:	f000 fc55 	bl	8007bc4 <TIM_CCxChannelCmd>
      break;
 800731a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0201 	orr.w	r2, r2, #1
 800732a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b02      	cmp	r3, #2
 800734a:	d122      	bne.n	8007392 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b02      	cmp	r3, #2
 8007358:	d11b      	bne.n	8007392 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f06f 0202 	mvn.w	r2, #2
 8007362:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2201      	movs	r2, #1
 8007368:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	f003 0303 	and.w	r3, r3, #3
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f9b5 	bl	80076e8 <HAL_TIM_IC_CaptureCallback>
 800737e:	e005      	b.n	800738c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f9a7 	bl	80076d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f9b8 	bl	80076fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	f003 0304 	and.w	r3, r3, #4
 800739c:	2b04      	cmp	r3, #4
 800739e:	d122      	bne.n	80073e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	f003 0304 	and.w	r3, r3, #4
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d11b      	bne.n	80073e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f06f 0204 	mvn.w	r2, #4
 80073b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f98b 	bl	80076e8 <HAL_TIM_IC_CaptureCallback>
 80073d2:	e005      	b.n	80073e0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f97d 	bl	80076d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f98e 	bl	80076fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	691b      	ldr	r3, [r3, #16]
 80073ec:	f003 0308 	and.w	r3, r3, #8
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d122      	bne.n	800743a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f003 0308 	and.w	r3, r3, #8
 80073fe:	2b08      	cmp	r3, #8
 8007400:	d11b      	bne.n	800743a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f06f 0208 	mvn.w	r2, #8
 800740a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2204      	movs	r2, #4
 8007410:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	69db      	ldr	r3, [r3, #28]
 8007418:	f003 0303 	and.w	r3, r3, #3
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f961 	bl	80076e8 <HAL_TIM_IC_CaptureCallback>
 8007426:	e005      	b.n	8007434 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 f953 	bl	80076d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f964 	bl	80076fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	f003 0310 	and.w	r3, r3, #16
 8007444:	2b10      	cmp	r3, #16
 8007446:	d122      	bne.n	800748e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f003 0310 	and.w	r3, r3, #16
 8007452:	2b10      	cmp	r3, #16
 8007454:	d11b      	bne.n	800748e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f06f 0210 	mvn.w	r2, #16
 800745e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2208      	movs	r2, #8
 8007464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69db      	ldr	r3, [r3, #28]
 800746c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f937 	bl	80076e8 <HAL_TIM_IC_CaptureCallback>
 800747a:	e005      	b.n	8007488 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f929 	bl	80076d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f93a 	bl	80076fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b01      	cmp	r3, #1
 800749a:	d10e      	bne.n	80074ba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d107      	bne.n	80074ba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f06f 0201 	mvn.w	r2, #1
 80074b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7fb fa63 	bl	8002980 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074c4:	2b80      	cmp	r3, #128	; 0x80
 80074c6:	d10e      	bne.n	80074e6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d2:	2b80      	cmp	r3, #128	; 0x80
 80074d4:	d107      	bne.n	80074e6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fc6d 	bl	8007dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074f0:	2b40      	cmp	r3, #64	; 0x40
 80074f2:	d10e      	bne.n	8007512 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074fe:	2b40      	cmp	r3, #64	; 0x40
 8007500:	d107      	bne.n	8007512 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800750a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f8ff 	bl	8007710 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b20      	cmp	r3, #32
 800751e:	d10e      	bne.n	800753e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f003 0320 	and.w	r3, r3, #32
 800752a:	2b20      	cmp	r3, #32
 800752c:	d107      	bne.n	800753e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f06f 0220 	mvn.w	r2, #32
 8007536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 fc37 	bl	8007dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800753e:	bf00      	nop
 8007540:	3708      	adds	r7, #8
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
	...

08007548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800755a:	2b01      	cmp	r3, #1
 800755c:	d101      	bne.n	8007562 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800755e:	2302      	movs	r3, #2
 8007560:	e0b4      	b.n	80076cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2201      	movs	r2, #1
 8007566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2202      	movs	r2, #2
 800756e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b0c      	cmp	r3, #12
 8007576:	f200 809f 	bhi.w	80076b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800757a:	a201      	add	r2, pc, #4	; (adr r2, 8007580 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800757c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007580:	080075b5 	.word	0x080075b5
 8007584:	080076b9 	.word	0x080076b9
 8007588:	080076b9 	.word	0x080076b9
 800758c:	080076b9 	.word	0x080076b9
 8007590:	080075f5 	.word	0x080075f5
 8007594:	080076b9 	.word	0x080076b9
 8007598:	080076b9 	.word	0x080076b9
 800759c:	080076b9 	.word	0x080076b9
 80075a0:	08007637 	.word	0x08007637
 80075a4:	080076b9 	.word	0x080076b9
 80075a8:	080076b9 	.word	0x080076b9
 80075ac:	080076b9 	.word	0x080076b9
 80075b0:	08007677 	.word	0x08007677
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	4618      	mov	r0, r3
 80075bc:	f000 f952 	bl	8007864 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	699a      	ldr	r2, [r3, #24]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0208 	orr.w	r2, r2, #8
 80075ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	699a      	ldr	r2, [r3, #24]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 0204 	bic.w	r2, r2, #4
 80075de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6999      	ldr	r1, [r3, #24]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	691a      	ldr	r2, [r3, #16]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	619a      	str	r2, [r3, #24]
      break;
 80075f2:	e062      	b.n	80076ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	68b9      	ldr	r1, [r7, #8]
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 f9a2 	bl	8007944 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800760e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	699a      	ldr	r2, [r3, #24]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800761e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6999      	ldr	r1, [r3, #24]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	021a      	lsls	r2, r3, #8
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	619a      	str	r2, [r3, #24]
      break;
 8007634:	e041      	b.n	80076ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	4618      	mov	r0, r3
 800763e:	f000 f9f7 	bl	8007a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69da      	ldr	r2, [r3, #28]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0208 	orr.w	r2, r2, #8
 8007650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	69da      	ldr	r2, [r3, #28]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0204 	bic.w	r2, r2, #4
 8007660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	69d9      	ldr	r1, [r3, #28]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	61da      	str	r2, [r3, #28]
      break;
 8007674:	e021      	b.n	80076ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	68b9      	ldr	r1, [r7, #8]
 800767c:	4618      	mov	r0, r3
 800767e:	f000 fa4b 	bl	8007b18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007690:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69da      	ldr	r2, [r3, #28]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69d9      	ldr	r1, [r3, #28]
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	021a      	lsls	r2, r3, #8
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	430a      	orrs	r2, r1
 80076b4:	61da      	str	r2, [r3, #28]
      break;
 80076b6:	e000      	b.n	80076ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80076b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a40      	ldr	r2, [pc, #256]	; (8007838 <TIM_Base_SetConfig+0x114>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d013      	beq.n	8007764 <TIM_Base_SetConfig+0x40>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007742:	d00f      	beq.n	8007764 <TIM_Base_SetConfig+0x40>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a3d      	ldr	r2, [pc, #244]	; (800783c <TIM_Base_SetConfig+0x118>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00b      	beq.n	8007764 <TIM_Base_SetConfig+0x40>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a3c      	ldr	r2, [pc, #240]	; (8007840 <TIM_Base_SetConfig+0x11c>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d007      	beq.n	8007764 <TIM_Base_SetConfig+0x40>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a3b      	ldr	r2, [pc, #236]	; (8007844 <TIM_Base_SetConfig+0x120>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d003      	beq.n	8007764 <TIM_Base_SetConfig+0x40>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a3a      	ldr	r2, [pc, #232]	; (8007848 <TIM_Base_SetConfig+0x124>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d108      	bne.n	8007776 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	4313      	orrs	r3, r2
 8007774:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a2f      	ldr	r2, [pc, #188]	; (8007838 <TIM_Base_SetConfig+0x114>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d02b      	beq.n	80077d6 <TIM_Base_SetConfig+0xb2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007784:	d027      	beq.n	80077d6 <TIM_Base_SetConfig+0xb2>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a2c      	ldr	r2, [pc, #176]	; (800783c <TIM_Base_SetConfig+0x118>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d023      	beq.n	80077d6 <TIM_Base_SetConfig+0xb2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	4a2b      	ldr	r2, [pc, #172]	; (8007840 <TIM_Base_SetConfig+0x11c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d01f      	beq.n	80077d6 <TIM_Base_SetConfig+0xb2>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	4a2a      	ldr	r2, [pc, #168]	; (8007844 <TIM_Base_SetConfig+0x120>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d01b      	beq.n	80077d6 <TIM_Base_SetConfig+0xb2>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	4a29      	ldr	r2, [pc, #164]	; (8007848 <TIM_Base_SetConfig+0x124>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d017      	beq.n	80077d6 <TIM_Base_SetConfig+0xb2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	4a28      	ldr	r2, [pc, #160]	; (800784c <TIM_Base_SetConfig+0x128>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d013      	beq.n	80077d6 <TIM_Base_SetConfig+0xb2>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a27      	ldr	r2, [pc, #156]	; (8007850 <TIM_Base_SetConfig+0x12c>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00f      	beq.n	80077d6 <TIM_Base_SetConfig+0xb2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a26      	ldr	r2, [pc, #152]	; (8007854 <TIM_Base_SetConfig+0x130>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d00b      	beq.n	80077d6 <TIM_Base_SetConfig+0xb2>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a25      	ldr	r2, [pc, #148]	; (8007858 <TIM_Base_SetConfig+0x134>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d007      	beq.n	80077d6 <TIM_Base_SetConfig+0xb2>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a24      	ldr	r2, [pc, #144]	; (800785c <TIM_Base_SetConfig+0x138>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d003      	beq.n	80077d6 <TIM_Base_SetConfig+0xb2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a23      	ldr	r2, [pc, #140]	; (8007860 <TIM_Base_SetConfig+0x13c>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d108      	bne.n	80077e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	68fa      	ldr	r2, [r7, #12]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	695b      	ldr	r3, [r3, #20]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	689a      	ldr	r2, [r3, #8]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a0a      	ldr	r2, [pc, #40]	; (8007838 <TIM_Base_SetConfig+0x114>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d003      	beq.n	800781c <TIM_Base_SetConfig+0xf8>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	4a0c      	ldr	r2, [pc, #48]	; (8007848 <TIM_Base_SetConfig+0x124>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d103      	bne.n	8007824 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	691a      	ldr	r2, [r3, #16]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	615a      	str	r2, [r3, #20]
}
 800782a:	bf00      	nop
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	40010000 	.word	0x40010000
 800783c:	40000400 	.word	0x40000400
 8007840:	40000800 	.word	0x40000800
 8007844:	40000c00 	.word	0x40000c00
 8007848:	40010400 	.word	0x40010400
 800784c:	40014000 	.word	0x40014000
 8007850:	40014400 	.word	0x40014400
 8007854:	40014800 	.word	0x40014800
 8007858:	40001800 	.word	0x40001800
 800785c:	40001c00 	.word	0x40001c00
 8007860:	40002000 	.word	0x40002000

08007864 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007864:	b480      	push	{r7}
 8007866:	b087      	sub	sp, #28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a1b      	ldr	r3, [r3, #32]
 8007872:	f023 0201 	bic.w	r2, r3, #1
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a1b      	ldr	r3, [r3, #32]
 800787e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0303 	bic.w	r3, r3, #3
 800789a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f023 0302 	bic.w	r3, r3, #2
 80078ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a20      	ldr	r2, [pc, #128]	; (800793c <TIM_OC1_SetConfig+0xd8>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d003      	beq.n	80078c8 <TIM_OC1_SetConfig+0x64>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a1f      	ldr	r2, [pc, #124]	; (8007940 <TIM_OC1_SetConfig+0xdc>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d10c      	bne.n	80078e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f023 0308 	bic.w	r3, r3, #8
 80078ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	697a      	ldr	r2, [r7, #20]
 80078d6:	4313      	orrs	r3, r2
 80078d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	f023 0304 	bic.w	r3, r3, #4
 80078e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a15      	ldr	r2, [pc, #84]	; (800793c <TIM_OC1_SetConfig+0xd8>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d003      	beq.n	80078f2 <TIM_OC1_SetConfig+0x8e>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a14      	ldr	r2, [pc, #80]	; (8007940 <TIM_OC1_SetConfig+0xdc>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d111      	bne.n	8007916 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4313      	orrs	r3, r2
 800790a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	693a      	ldr	r2, [r7, #16]
 8007912:	4313      	orrs	r3, r2
 8007914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	685a      	ldr	r2, [r3, #4]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	621a      	str	r2, [r3, #32]
}
 8007930:	bf00      	nop
 8007932:	371c      	adds	r7, #28
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	40010000 	.word	0x40010000
 8007940:	40010400 	.word	0x40010400

08007944 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	f023 0210 	bic.w	r2, r3, #16
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800797a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	021b      	lsls	r3, r3, #8
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4313      	orrs	r3, r2
 8007986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	f023 0320 	bic.w	r3, r3, #32
 800798e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	697a      	ldr	r2, [r7, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a22      	ldr	r2, [pc, #136]	; (8007a28 <TIM_OC2_SetConfig+0xe4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d003      	beq.n	80079ac <TIM_OC2_SetConfig+0x68>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a21      	ldr	r2, [pc, #132]	; (8007a2c <TIM_OC2_SetConfig+0xe8>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d10d      	bne.n	80079c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	011b      	lsls	r3, r3, #4
 80079ba:	697a      	ldr	r2, [r7, #20]
 80079bc:	4313      	orrs	r3, r2
 80079be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a17      	ldr	r2, [pc, #92]	; (8007a28 <TIM_OC2_SetConfig+0xe4>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d003      	beq.n	80079d8 <TIM_OC2_SetConfig+0x94>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a16      	ldr	r2, [pc, #88]	; (8007a2c <TIM_OC2_SetConfig+0xe8>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d113      	bne.n	8007a00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80079e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	693a      	ldr	r2, [r7, #16]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	699b      	ldr	r3, [r3, #24]
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	693a      	ldr	r2, [r7, #16]
 80079fc:	4313      	orrs	r3, r2
 80079fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685a      	ldr	r2, [r3, #4]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	621a      	str	r2, [r3, #32]
}
 8007a1a:	bf00      	nop
 8007a1c:	371c      	adds	r7, #28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	40010000 	.word	0x40010000
 8007a2c:	40010400 	.word	0x40010400

08007a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	69db      	ldr	r3, [r3, #28]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0303 	bic.w	r3, r3, #3
 8007a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	021b      	lsls	r3, r3, #8
 8007a80:	697a      	ldr	r2, [r7, #20]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	4a21      	ldr	r2, [pc, #132]	; (8007b10 <TIM_OC3_SetConfig+0xe0>)
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d003      	beq.n	8007a96 <TIM_OC3_SetConfig+0x66>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a20      	ldr	r2, [pc, #128]	; (8007b14 <TIM_OC3_SetConfig+0xe4>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d10d      	bne.n	8007ab2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	021b      	lsls	r3, r3, #8
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ab0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	4a16      	ldr	r2, [pc, #88]	; (8007b10 <TIM_OC3_SetConfig+0xe0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d003      	beq.n	8007ac2 <TIM_OC3_SetConfig+0x92>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	4a15      	ldr	r2, [pc, #84]	; (8007b14 <TIM_OC3_SetConfig+0xe4>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d113      	bne.n	8007aea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ac8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	011b      	lsls	r3, r3, #4
 8007ae4:	693a      	ldr	r2, [r7, #16]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	693a      	ldr	r2, [r7, #16]
 8007aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	685a      	ldr	r2, [r3, #4]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	621a      	str	r2, [r3, #32]
}
 8007b04:	bf00      	nop
 8007b06:	371c      	adds	r7, #28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr
 8007b10:	40010000 	.word	0x40010000
 8007b14:	40010400 	.word	0x40010400

08007b18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	021b      	lsls	r3, r3, #8
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	031b      	lsls	r3, r3, #12
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a12      	ldr	r2, [pc, #72]	; (8007bbc <TIM_OC4_SetConfig+0xa4>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d003      	beq.n	8007b80 <TIM_OC4_SetConfig+0x68>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a11      	ldr	r2, [pc, #68]	; (8007bc0 <TIM_OC4_SetConfig+0xa8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d109      	bne.n	8007b94 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b86:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	695b      	ldr	r3, [r3, #20]
 8007b8c:	019b      	lsls	r3, r3, #6
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	697a      	ldr	r2, [r7, #20]
 8007b98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	621a      	str	r2, [r3, #32]
}
 8007bae:	bf00      	nop
 8007bb0:	371c      	adds	r7, #28
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	40010000 	.word	0x40010000
 8007bc0:	40010400 	.word	0x40010400

08007bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b087      	sub	sp, #28
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	f003 031f 	and.w	r3, r3, #31
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6a1a      	ldr	r2, [r3, #32]
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	43db      	mvns	r3, r3
 8007be6:	401a      	ands	r2, r3
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a1a      	ldr	r2, [r3, #32]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f003 031f 	and.w	r3, r3, #31
 8007bf6:	6879      	ldr	r1, [r7, #4]
 8007bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bfc:	431a      	orrs	r2, r3
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	621a      	str	r2, [r3, #32]
}
 8007c02:	bf00      	nop
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
	...

08007c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d101      	bne.n	8007c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c24:	2302      	movs	r3, #2
 8007c26:	e05a      	b.n	8007cde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	68fa      	ldr	r2, [r7, #12]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a21      	ldr	r2, [pc, #132]	; (8007cec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d022      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c74:	d01d      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4a1d      	ldr	r2, [pc, #116]	; (8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d018      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a1b      	ldr	r2, [pc, #108]	; (8007cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d013      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1a      	ldr	r2, [pc, #104]	; (8007cf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d00e      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a18      	ldr	r2, [pc, #96]	; (8007cfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d009      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a17      	ldr	r2, [pc, #92]	; (8007d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d004      	beq.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a15      	ldr	r2, [pc, #84]	; (8007d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d10c      	bne.n	8007ccc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007cb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	40010000 	.word	0x40010000
 8007cf0:	40000400 	.word	0x40000400
 8007cf4:	40000800 	.word	0x40000800
 8007cf8:	40000c00 	.word	0x40000c00
 8007cfc:	40010400 	.word	0x40010400
 8007d00:	40014000 	.word	0x40014000
 8007d04:	40001800 	.word	0x40001800

08007d08 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007d12:	2300      	movs	r3, #0
 8007d14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d101      	bne.n	8007d24 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007d20:	2302      	movs	r3, #2
 8007d22:	e03d      	b.n	8007da0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	4313      	orrs	r3, r2
 8007d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	695b      	ldr	r3, [r3, #20]
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	e03f      	b.n	8007e66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d106      	bne.n	8007e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f7fc fa44 	bl	8004288 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2224      	movs	r2, #36	; 0x24
 8007e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68da      	ldr	r2, [r3, #12]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f829 	bl	8007e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	691a      	ldr	r2, [r3, #16]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	695a      	ldr	r2, [r3, #20]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68da      	ldr	r2, [r3, #12]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2220      	movs	r2, #32
 8007e60:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007e64:	2300      	movs	r3, #0
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3708      	adds	r7, #8
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
	...

08007e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	691b      	ldr	r3, [r3, #16]
 8007e80:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68da      	ldr	r2, [r3, #12]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007eb2:	f023 030c 	bic.w	r3, r3, #12
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	68f9      	ldr	r1, [r7, #12]
 8007ebc:	430b      	orrs	r3, r1
 8007ebe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699a      	ldr	r2, [r3, #24]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ede:	f040 818b 	bne.w	80081f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4ac1      	ldr	r2, [pc, #772]	; (80081ec <UART_SetConfig+0x37c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d005      	beq.n	8007ef8 <UART_SetConfig+0x88>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4abf      	ldr	r2, [pc, #764]	; (80081f0 <UART_SetConfig+0x380>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	f040 80bd 	bne.w	8008072 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ef8:	f7fe fb34 	bl	8006564 <HAL_RCC_GetPCLK2Freq>
 8007efc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	461d      	mov	r5, r3
 8007f02:	f04f 0600 	mov.w	r6, #0
 8007f06:	46a8      	mov	r8, r5
 8007f08:	46b1      	mov	r9, r6
 8007f0a:	eb18 0308 	adds.w	r3, r8, r8
 8007f0e:	eb49 0409 	adc.w	r4, r9, r9
 8007f12:	4698      	mov	r8, r3
 8007f14:	46a1      	mov	r9, r4
 8007f16:	eb18 0805 	adds.w	r8, r8, r5
 8007f1a:	eb49 0906 	adc.w	r9, r9, r6
 8007f1e:	f04f 0100 	mov.w	r1, #0
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f2a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f2e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f32:	4688      	mov	r8, r1
 8007f34:	4691      	mov	r9, r2
 8007f36:	eb18 0005 	adds.w	r0, r8, r5
 8007f3a:	eb49 0106 	adc.w	r1, r9, r6
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	461d      	mov	r5, r3
 8007f44:	f04f 0600 	mov.w	r6, #0
 8007f48:	196b      	adds	r3, r5, r5
 8007f4a:	eb46 0406 	adc.w	r4, r6, r6
 8007f4e:	461a      	mov	r2, r3
 8007f50:	4623      	mov	r3, r4
 8007f52:	f7f8 fe99 	bl	8000c88 <__aeabi_uldivmod>
 8007f56:	4603      	mov	r3, r0
 8007f58:	460c      	mov	r4, r1
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	4ba5      	ldr	r3, [pc, #660]	; (80081f4 <UART_SetConfig+0x384>)
 8007f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007f62:	095b      	lsrs	r3, r3, #5
 8007f64:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	461d      	mov	r5, r3
 8007f6c:	f04f 0600 	mov.w	r6, #0
 8007f70:	46a9      	mov	r9, r5
 8007f72:	46b2      	mov	sl, r6
 8007f74:	eb19 0309 	adds.w	r3, r9, r9
 8007f78:	eb4a 040a 	adc.w	r4, sl, sl
 8007f7c:	4699      	mov	r9, r3
 8007f7e:	46a2      	mov	sl, r4
 8007f80:	eb19 0905 	adds.w	r9, r9, r5
 8007f84:	eb4a 0a06 	adc.w	sl, sl, r6
 8007f88:	f04f 0100 	mov.w	r1, #0
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f94:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f98:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f9c:	4689      	mov	r9, r1
 8007f9e:	4692      	mov	sl, r2
 8007fa0:	eb19 0005 	adds.w	r0, r9, r5
 8007fa4:	eb4a 0106 	adc.w	r1, sl, r6
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	685b      	ldr	r3, [r3, #4]
 8007fac:	461d      	mov	r5, r3
 8007fae:	f04f 0600 	mov.w	r6, #0
 8007fb2:	196b      	adds	r3, r5, r5
 8007fb4:	eb46 0406 	adc.w	r4, r6, r6
 8007fb8:	461a      	mov	r2, r3
 8007fba:	4623      	mov	r3, r4
 8007fbc:	f7f8 fe64 	bl	8000c88 <__aeabi_uldivmod>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4b8b      	ldr	r3, [pc, #556]	; (80081f4 <UART_SetConfig+0x384>)
 8007fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	2164      	movs	r1, #100	; 0x64
 8007fd0:	fb01 f303 	mul.w	r3, r1, r3
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	3332      	adds	r3, #50	; 0x32
 8007fda:	4a86      	ldr	r2, [pc, #536]	; (80081f4 <UART_SetConfig+0x384>)
 8007fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe0:	095b      	lsrs	r3, r3, #5
 8007fe2:	005b      	lsls	r3, r3, #1
 8007fe4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007fe8:	4498      	add	r8, r3
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	461d      	mov	r5, r3
 8007fee:	f04f 0600 	mov.w	r6, #0
 8007ff2:	46a9      	mov	r9, r5
 8007ff4:	46b2      	mov	sl, r6
 8007ff6:	eb19 0309 	adds.w	r3, r9, r9
 8007ffa:	eb4a 040a 	adc.w	r4, sl, sl
 8007ffe:	4699      	mov	r9, r3
 8008000:	46a2      	mov	sl, r4
 8008002:	eb19 0905 	adds.w	r9, r9, r5
 8008006:	eb4a 0a06 	adc.w	sl, sl, r6
 800800a:	f04f 0100 	mov.w	r1, #0
 800800e:	f04f 0200 	mov.w	r2, #0
 8008012:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008016:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800801a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800801e:	4689      	mov	r9, r1
 8008020:	4692      	mov	sl, r2
 8008022:	eb19 0005 	adds.w	r0, r9, r5
 8008026:	eb4a 0106 	adc.w	r1, sl, r6
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	461d      	mov	r5, r3
 8008030:	f04f 0600 	mov.w	r6, #0
 8008034:	196b      	adds	r3, r5, r5
 8008036:	eb46 0406 	adc.w	r4, r6, r6
 800803a:	461a      	mov	r2, r3
 800803c:	4623      	mov	r3, r4
 800803e:	f7f8 fe23 	bl	8000c88 <__aeabi_uldivmod>
 8008042:	4603      	mov	r3, r0
 8008044:	460c      	mov	r4, r1
 8008046:	461a      	mov	r2, r3
 8008048:	4b6a      	ldr	r3, [pc, #424]	; (80081f4 <UART_SetConfig+0x384>)
 800804a:	fba3 1302 	umull	r1, r3, r3, r2
 800804e:	095b      	lsrs	r3, r3, #5
 8008050:	2164      	movs	r1, #100	; 0x64
 8008052:	fb01 f303 	mul.w	r3, r1, r3
 8008056:	1ad3      	subs	r3, r2, r3
 8008058:	00db      	lsls	r3, r3, #3
 800805a:	3332      	adds	r3, #50	; 0x32
 800805c:	4a65      	ldr	r2, [pc, #404]	; (80081f4 <UART_SetConfig+0x384>)
 800805e:	fba2 2303 	umull	r2, r3, r2, r3
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	f003 0207 	and.w	r2, r3, #7
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4442      	add	r2, r8
 800806e:	609a      	str	r2, [r3, #8]
 8008070:	e26f      	b.n	8008552 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008072:	f7fe fa63 	bl	800653c <HAL_RCC_GetPCLK1Freq>
 8008076:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	461d      	mov	r5, r3
 800807c:	f04f 0600 	mov.w	r6, #0
 8008080:	46a8      	mov	r8, r5
 8008082:	46b1      	mov	r9, r6
 8008084:	eb18 0308 	adds.w	r3, r8, r8
 8008088:	eb49 0409 	adc.w	r4, r9, r9
 800808c:	4698      	mov	r8, r3
 800808e:	46a1      	mov	r9, r4
 8008090:	eb18 0805 	adds.w	r8, r8, r5
 8008094:	eb49 0906 	adc.w	r9, r9, r6
 8008098:	f04f 0100 	mov.w	r1, #0
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80080a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80080a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80080ac:	4688      	mov	r8, r1
 80080ae:	4691      	mov	r9, r2
 80080b0:	eb18 0005 	adds.w	r0, r8, r5
 80080b4:	eb49 0106 	adc.w	r1, r9, r6
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	461d      	mov	r5, r3
 80080be:	f04f 0600 	mov.w	r6, #0
 80080c2:	196b      	adds	r3, r5, r5
 80080c4:	eb46 0406 	adc.w	r4, r6, r6
 80080c8:	461a      	mov	r2, r3
 80080ca:	4623      	mov	r3, r4
 80080cc:	f7f8 fddc 	bl	8000c88 <__aeabi_uldivmod>
 80080d0:	4603      	mov	r3, r0
 80080d2:	460c      	mov	r4, r1
 80080d4:	461a      	mov	r2, r3
 80080d6:	4b47      	ldr	r3, [pc, #284]	; (80081f4 <UART_SetConfig+0x384>)
 80080d8:	fba3 2302 	umull	r2, r3, r3, r2
 80080dc:	095b      	lsrs	r3, r3, #5
 80080de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	461d      	mov	r5, r3
 80080e6:	f04f 0600 	mov.w	r6, #0
 80080ea:	46a9      	mov	r9, r5
 80080ec:	46b2      	mov	sl, r6
 80080ee:	eb19 0309 	adds.w	r3, r9, r9
 80080f2:	eb4a 040a 	adc.w	r4, sl, sl
 80080f6:	4699      	mov	r9, r3
 80080f8:	46a2      	mov	sl, r4
 80080fa:	eb19 0905 	adds.w	r9, r9, r5
 80080fe:	eb4a 0a06 	adc.w	sl, sl, r6
 8008102:	f04f 0100 	mov.w	r1, #0
 8008106:	f04f 0200 	mov.w	r2, #0
 800810a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800810e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008112:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008116:	4689      	mov	r9, r1
 8008118:	4692      	mov	sl, r2
 800811a:	eb19 0005 	adds.w	r0, r9, r5
 800811e:	eb4a 0106 	adc.w	r1, sl, r6
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	461d      	mov	r5, r3
 8008128:	f04f 0600 	mov.w	r6, #0
 800812c:	196b      	adds	r3, r5, r5
 800812e:	eb46 0406 	adc.w	r4, r6, r6
 8008132:	461a      	mov	r2, r3
 8008134:	4623      	mov	r3, r4
 8008136:	f7f8 fda7 	bl	8000c88 <__aeabi_uldivmod>
 800813a:	4603      	mov	r3, r0
 800813c:	460c      	mov	r4, r1
 800813e:	461a      	mov	r2, r3
 8008140:	4b2c      	ldr	r3, [pc, #176]	; (80081f4 <UART_SetConfig+0x384>)
 8008142:	fba3 1302 	umull	r1, r3, r3, r2
 8008146:	095b      	lsrs	r3, r3, #5
 8008148:	2164      	movs	r1, #100	; 0x64
 800814a:	fb01 f303 	mul.w	r3, r1, r3
 800814e:	1ad3      	subs	r3, r2, r3
 8008150:	00db      	lsls	r3, r3, #3
 8008152:	3332      	adds	r3, #50	; 0x32
 8008154:	4a27      	ldr	r2, [pc, #156]	; (80081f4 <UART_SetConfig+0x384>)
 8008156:	fba2 2303 	umull	r2, r3, r2, r3
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008162:	4498      	add	r8, r3
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	461d      	mov	r5, r3
 8008168:	f04f 0600 	mov.w	r6, #0
 800816c:	46a9      	mov	r9, r5
 800816e:	46b2      	mov	sl, r6
 8008170:	eb19 0309 	adds.w	r3, r9, r9
 8008174:	eb4a 040a 	adc.w	r4, sl, sl
 8008178:	4699      	mov	r9, r3
 800817a:	46a2      	mov	sl, r4
 800817c:	eb19 0905 	adds.w	r9, r9, r5
 8008180:	eb4a 0a06 	adc.w	sl, sl, r6
 8008184:	f04f 0100 	mov.w	r1, #0
 8008188:	f04f 0200 	mov.w	r2, #0
 800818c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008190:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008194:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008198:	4689      	mov	r9, r1
 800819a:	4692      	mov	sl, r2
 800819c:	eb19 0005 	adds.w	r0, r9, r5
 80081a0:	eb4a 0106 	adc.w	r1, sl, r6
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	461d      	mov	r5, r3
 80081aa:	f04f 0600 	mov.w	r6, #0
 80081ae:	196b      	adds	r3, r5, r5
 80081b0:	eb46 0406 	adc.w	r4, r6, r6
 80081b4:	461a      	mov	r2, r3
 80081b6:	4623      	mov	r3, r4
 80081b8:	f7f8 fd66 	bl	8000c88 <__aeabi_uldivmod>
 80081bc:	4603      	mov	r3, r0
 80081be:	460c      	mov	r4, r1
 80081c0:	461a      	mov	r2, r3
 80081c2:	4b0c      	ldr	r3, [pc, #48]	; (80081f4 <UART_SetConfig+0x384>)
 80081c4:	fba3 1302 	umull	r1, r3, r3, r2
 80081c8:	095b      	lsrs	r3, r3, #5
 80081ca:	2164      	movs	r1, #100	; 0x64
 80081cc:	fb01 f303 	mul.w	r3, r1, r3
 80081d0:	1ad3      	subs	r3, r2, r3
 80081d2:	00db      	lsls	r3, r3, #3
 80081d4:	3332      	adds	r3, #50	; 0x32
 80081d6:	4a07      	ldr	r2, [pc, #28]	; (80081f4 <UART_SetConfig+0x384>)
 80081d8:	fba2 2303 	umull	r2, r3, r2, r3
 80081dc:	095b      	lsrs	r3, r3, #5
 80081de:	f003 0207 	and.w	r2, r3, #7
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4442      	add	r2, r8
 80081e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80081ea:	e1b2      	b.n	8008552 <UART_SetConfig+0x6e2>
 80081ec:	40011000 	.word	0x40011000
 80081f0:	40011400 	.word	0x40011400
 80081f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4ad7      	ldr	r2, [pc, #860]	; (800855c <UART_SetConfig+0x6ec>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d005      	beq.n	800820e <UART_SetConfig+0x39e>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4ad6      	ldr	r2, [pc, #856]	; (8008560 <UART_SetConfig+0x6f0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	f040 80d1 	bne.w	80083b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800820e:	f7fe f9a9 	bl	8006564 <HAL_RCC_GetPCLK2Freq>
 8008212:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	469a      	mov	sl, r3
 8008218:	f04f 0b00 	mov.w	fp, #0
 800821c:	46d0      	mov	r8, sl
 800821e:	46d9      	mov	r9, fp
 8008220:	eb18 0308 	adds.w	r3, r8, r8
 8008224:	eb49 0409 	adc.w	r4, r9, r9
 8008228:	4698      	mov	r8, r3
 800822a:	46a1      	mov	r9, r4
 800822c:	eb18 080a 	adds.w	r8, r8, sl
 8008230:	eb49 090b 	adc.w	r9, r9, fp
 8008234:	f04f 0100 	mov.w	r1, #0
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008240:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008244:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008248:	4688      	mov	r8, r1
 800824a:	4691      	mov	r9, r2
 800824c:	eb1a 0508 	adds.w	r5, sl, r8
 8008250:	eb4b 0609 	adc.w	r6, fp, r9
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	4619      	mov	r1, r3
 800825a:	f04f 0200 	mov.w	r2, #0
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	f04f 0400 	mov.w	r4, #0
 8008266:	0094      	lsls	r4, r2, #2
 8008268:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800826c:	008b      	lsls	r3, r1, #2
 800826e:	461a      	mov	r2, r3
 8008270:	4623      	mov	r3, r4
 8008272:	4628      	mov	r0, r5
 8008274:	4631      	mov	r1, r6
 8008276:	f7f8 fd07 	bl	8000c88 <__aeabi_uldivmod>
 800827a:	4603      	mov	r3, r0
 800827c:	460c      	mov	r4, r1
 800827e:	461a      	mov	r2, r3
 8008280:	4bb8      	ldr	r3, [pc, #736]	; (8008564 <UART_SetConfig+0x6f4>)
 8008282:	fba3 2302 	umull	r2, r3, r3, r2
 8008286:	095b      	lsrs	r3, r3, #5
 8008288:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	469b      	mov	fp, r3
 8008290:	f04f 0c00 	mov.w	ip, #0
 8008294:	46d9      	mov	r9, fp
 8008296:	46e2      	mov	sl, ip
 8008298:	eb19 0309 	adds.w	r3, r9, r9
 800829c:	eb4a 040a 	adc.w	r4, sl, sl
 80082a0:	4699      	mov	r9, r3
 80082a2:	46a2      	mov	sl, r4
 80082a4:	eb19 090b 	adds.w	r9, r9, fp
 80082a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80082ac:	f04f 0100 	mov.w	r1, #0
 80082b0:	f04f 0200 	mov.w	r2, #0
 80082b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082c0:	4689      	mov	r9, r1
 80082c2:	4692      	mov	sl, r2
 80082c4:	eb1b 0509 	adds.w	r5, fp, r9
 80082c8:	eb4c 060a 	adc.w	r6, ip, sl
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	4619      	mov	r1, r3
 80082d2:	f04f 0200 	mov.w	r2, #0
 80082d6:	f04f 0300 	mov.w	r3, #0
 80082da:	f04f 0400 	mov.w	r4, #0
 80082de:	0094      	lsls	r4, r2, #2
 80082e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80082e4:	008b      	lsls	r3, r1, #2
 80082e6:	461a      	mov	r2, r3
 80082e8:	4623      	mov	r3, r4
 80082ea:	4628      	mov	r0, r5
 80082ec:	4631      	mov	r1, r6
 80082ee:	f7f8 fccb 	bl	8000c88 <__aeabi_uldivmod>
 80082f2:	4603      	mov	r3, r0
 80082f4:	460c      	mov	r4, r1
 80082f6:	461a      	mov	r2, r3
 80082f8:	4b9a      	ldr	r3, [pc, #616]	; (8008564 <UART_SetConfig+0x6f4>)
 80082fa:	fba3 1302 	umull	r1, r3, r3, r2
 80082fe:	095b      	lsrs	r3, r3, #5
 8008300:	2164      	movs	r1, #100	; 0x64
 8008302:	fb01 f303 	mul.w	r3, r1, r3
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	011b      	lsls	r3, r3, #4
 800830a:	3332      	adds	r3, #50	; 0x32
 800830c:	4a95      	ldr	r2, [pc, #596]	; (8008564 <UART_SetConfig+0x6f4>)
 800830e:	fba2 2303 	umull	r2, r3, r2, r3
 8008312:	095b      	lsrs	r3, r3, #5
 8008314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008318:	4498      	add	r8, r3
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	469b      	mov	fp, r3
 800831e:	f04f 0c00 	mov.w	ip, #0
 8008322:	46d9      	mov	r9, fp
 8008324:	46e2      	mov	sl, ip
 8008326:	eb19 0309 	adds.w	r3, r9, r9
 800832a:	eb4a 040a 	adc.w	r4, sl, sl
 800832e:	4699      	mov	r9, r3
 8008330:	46a2      	mov	sl, r4
 8008332:	eb19 090b 	adds.w	r9, r9, fp
 8008336:	eb4a 0a0c 	adc.w	sl, sl, ip
 800833a:	f04f 0100 	mov.w	r1, #0
 800833e:	f04f 0200 	mov.w	r2, #0
 8008342:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008346:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800834a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800834e:	4689      	mov	r9, r1
 8008350:	4692      	mov	sl, r2
 8008352:	eb1b 0509 	adds.w	r5, fp, r9
 8008356:	eb4c 060a 	adc.w	r6, ip, sl
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	4619      	mov	r1, r3
 8008360:	f04f 0200 	mov.w	r2, #0
 8008364:	f04f 0300 	mov.w	r3, #0
 8008368:	f04f 0400 	mov.w	r4, #0
 800836c:	0094      	lsls	r4, r2, #2
 800836e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008372:	008b      	lsls	r3, r1, #2
 8008374:	461a      	mov	r2, r3
 8008376:	4623      	mov	r3, r4
 8008378:	4628      	mov	r0, r5
 800837a:	4631      	mov	r1, r6
 800837c:	f7f8 fc84 	bl	8000c88 <__aeabi_uldivmod>
 8008380:	4603      	mov	r3, r0
 8008382:	460c      	mov	r4, r1
 8008384:	461a      	mov	r2, r3
 8008386:	4b77      	ldr	r3, [pc, #476]	; (8008564 <UART_SetConfig+0x6f4>)
 8008388:	fba3 1302 	umull	r1, r3, r3, r2
 800838c:	095b      	lsrs	r3, r3, #5
 800838e:	2164      	movs	r1, #100	; 0x64
 8008390:	fb01 f303 	mul.w	r3, r1, r3
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	011b      	lsls	r3, r3, #4
 8008398:	3332      	adds	r3, #50	; 0x32
 800839a:	4a72      	ldr	r2, [pc, #456]	; (8008564 <UART_SetConfig+0x6f4>)
 800839c:	fba2 2303 	umull	r2, r3, r2, r3
 80083a0:	095b      	lsrs	r3, r3, #5
 80083a2:	f003 020f 	and.w	r2, r3, #15
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4442      	add	r2, r8
 80083ac:	609a      	str	r2, [r3, #8]
 80083ae:	e0d0      	b.n	8008552 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80083b0:	f7fe f8c4 	bl	800653c <HAL_RCC_GetPCLK1Freq>
 80083b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	469a      	mov	sl, r3
 80083ba:	f04f 0b00 	mov.w	fp, #0
 80083be:	46d0      	mov	r8, sl
 80083c0:	46d9      	mov	r9, fp
 80083c2:	eb18 0308 	adds.w	r3, r8, r8
 80083c6:	eb49 0409 	adc.w	r4, r9, r9
 80083ca:	4698      	mov	r8, r3
 80083cc:	46a1      	mov	r9, r4
 80083ce:	eb18 080a 	adds.w	r8, r8, sl
 80083d2:	eb49 090b 	adc.w	r9, r9, fp
 80083d6:	f04f 0100 	mov.w	r1, #0
 80083da:	f04f 0200 	mov.w	r2, #0
 80083de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80083e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80083e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80083ea:	4688      	mov	r8, r1
 80083ec:	4691      	mov	r9, r2
 80083ee:	eb1a 0508 	adds.w	r5, sl, r8
 80083f2:	eb4b 0609 	adc.w	r6, fp, r9
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	4619      	mov	r1, r3
 80083fc:	f04f 0200 	mov.w	r2, #0
 8008400:	f04f 0300 	mov.w	r3, #0
 8008404:	f04f 0400 	mov.w	r4, #0
 8008408:	0094      	lsls	r4, r2, #2
 800840a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800840e:	008b      	lsls	r3, r1, #2
 8008410:	461a      	mov	r2, r3
 8008412:	4623      	mov	r3, r4
 8008414:	4628      	mov	r0, r5
 8008416:	4631      	mov	r1, r6
 8008418:	f7f8 fc36 	bl	8000c88 <__aeabi_uldivmod>
 800841c:	4603      	mov	r3, r0
 800841e:	460c      	mov	r4, r1
 8008420:	461a      	mov	r2, r3
 8008422:	4b50      	ldr	r3, [pc, #320]	; (8008564 <UART_SetConfig+0x6f4>)
 8008424:	fba3 2302 	umull	r2, r3, r3, r2
 8008428:	095b      	lsrs	r3, r3, #5
 800842a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	469b      	mov	fp, r3
 8008432:	f04f 0c00 	mov.w	ip, #0
 8008436:	46d9      	mov	r9, fp
 8008438:	46e2      	mov	sl, ip
 800843a:	eb19 0309 	adds.w	r3, r9, r9
 800843e:	eb4a 040a 	adc.w	r4, sl, sl
 8008442:	4699      	mov	r9, r3
 8008444:	46a2      	mov	sl, r4
 8008446:	eb19 090b 	adds.w	r9, r9, fp
 800844a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800844e:	f04f 0100 	mov.w	r1, #0
 8008452:	f04f 0200 	mov.w	r2, #0
 8008456:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800845a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800845e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008462:	4689      	mov	r9, r1
 8008464:	4692      	mov	sl, r2
 8008466:	eb1b 0509 	adds.w	r5, fp, r9
 800846a:	eb4c 060a 	adc.w	r6, ip, sl
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	4619      	mov	r1, r3
 8008474:	f04f 0200 	mov.w	r2, #0
 8008478:	f04f 0300 	mov.w	r3, #0
 800847c:	f04f 0400 	mov.w	r4, #0
 8008480:	0094      	lsls	r4, r2, #2
 8008482:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008486:	008b      	lsls	r3, r1, #2
 8008488:	461a      	mov	r2, r3
 800848a:	4623      	mov	r3, r4
 800848c:	4628      	mov	r0, r5
 800848e:	4631      	mov	r1, r6
 8008490:	f7f8 fbfa 	bl	8000c88 <__aeabi_uldivmod>
 8008494:	4603      	mov	r3, r0
 8008496:	460c      	mov	r4, r1
 8008498:	461a      	mov	r2, r3
 800849a:	4b32      	ldr	r3, [pc, #200]	; (8008564 <UART_SetConfig+0x6f4>)
 800849c:	fba3 1302 	umull	r1, r3, r3, r2
 80084a0:	095b      	lsrs	r3, r3, #5
 80084a2:	2164      	movs	r1, #100	; 0x64
 80084a4:	fb01 f303 	mul.w	r3, r1, r3
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	3332      	adds	r3, #50	; 0x32
 80084ae:	4a2d      	ldr	r2, [pc, #180]	; (8008564 <UART_SetConfig+0x6f4>)
 80084b0:	fba2 2303 	umull	r2, r3, r2, r3
 80084b4:	095b      	lsrs	r3, r3, #5
 80084b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084ba:	4498      	add	r8, r3
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	469b      	mov	fp, r3
 80084c0:	f04f 0c00 	mov.w	ip, #0
 80084c4:	46d9      	mov	r9, fp
 80084c6:	46e2      	mov	sl, ip
 80084c8:	eb19 0309 	adds.w	r3, r9, r9
 80084cc:	eb4a 040a 	adc.w	r4, sl, sl
 80084d0:	4699      	mov	r9, r3
 80084d2:	46a2      	mov	sl, r4
 80084d4:	eb19 090b 	adds.w	r9, r9, fp
 80084d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80084dc:	f04f 0100 	mov.w	r1, #0
 80084e0:	f04f 0200 	mov.w	r2, #0
 80084e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084f0:	4689      	mov	r9, r1
 80084f2:	4692      	mov	sl, r2
 80084f4:	eb1b 0509 	adds.w	r5, fp, r9
 80084f8:	eb4c 060a 	adc.w	r6, ip, sl
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	4619      	mov	r1, r3
 8008502:	f04f 0200 	mov.w	r2, #0
 8008506:	f04f 0300 	mov.w	r3, #0
 800850a:	f04f 0400 	mov.w	r4, #0
 800850e:	0094      	lsls	r4, r2, #2
 8008510:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008514:	008b      	lsls	r3, r1, #2
 8008516:	461a      	mov	r2, r3
 8008518:	4623      	mov	r3, r4
 800851a:	4628      	mov	r0, r5
 800851c:	4631      	mov	r1, r6
 800851e:	f7f8 fbb3 	bl	8000c88 <__aeabi_uldivmod>
 8008522:	4603      	mov	r3, r0
 8008524:	460c      	mov	r4, r1
 8008526:	461a      	mov	r2, r3
 8008528:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <UART_SetConfig+0x6f4>)
 800852a:	fba3 1302 	umull	r1, r3, r3, r2
 800852e:	095b      	lsrs	r3, r3, #5
 8008530:	2164      	movs	r1, #100	; 0x64
 8008532:	fb01 f303 	mul.w	r3, r1, r3
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	011b      	lsls	r3, r3, #4
 800853a:	3332      	adds	r3, #50	; 0x32
 800853c:	4a09      	ldr	r2, [pc, #36]	; (8008564 <UART_SetConfig+0x6f4>)
 800853e:	fba2 2303 	umull	r2, r3, r2, r3
 8008542:	095b      	lsrs	r3, r3, #5
 8008544:	f003 020f 	and.w	r2, r3, #15
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4442      	add	r2, r8
 800854e:	609a      	str	r2, [r3, #8]
}
 8008550:	e7ff      	b.n	8008552 <UART_SetConfig+0x6e2>
 8008552:	bf00      	nop
 8008554:	3714      	adds	r7, #20
 8008556:	46bd      	mov	sp, r7
 8008558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855c:	40011000 	.word	0x40011000
 8008560:	40011400 	.word	0x40011400
 8008564:	51eb851f 	.word	0x51eb851f

08008568 <__errno>:
 8008568:	4b01      	ldr	r3, [pc, #4]	; (8008570 <__errno+0x8>)
 800856a:	6818      	ldr	r0, [r3, #0]
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	20000040 	.word	0x20000040

08008574 <__libc_init_array>:
 8008574:	b570      	push	{r4, r5, r6, lr}
 8008576:	4e0d      	ldr	r6, [pc, #52]	; (80085ac <__libc_init_array+0x38>)
 8008578:	4c0d      	ldr	r4, [pc, #52]	; (80085b0 <__libc_init_array+0x3c>)
 800857a:	1ba4      	subs	r4, r4, r6
 800857c:	10a4      	asrs	r4, r4, #2
 800857e:	2500      	movs	r5, #0
 8008580:	42a5      	cmp	r5, r4
 8008582:	d109      	bne.n	8008598 <__libc_init_array+0x24>
 8008584:	4e0b      	ldr	r6, [pc, #44]	; (80085b4 <__libc_init_array+0x40>)
 8008586:	4c0c      	ldr	r4, [pc, #48]	; (80085b8 <__libc_init_array+0x44>)
 8008588:	f003 fd58 	bl	800c03c <_init>
 800858c:	1ba4      	subs	r4, r4, r6
 800858e:	10a4      	asrs	r4, r4, #2
 8008590:	2500      	movs	r5, #0
 8008592:	42a5      	cmp	r5, r4
 8008594:	d105      	bne.n	80085a2 <__libc_init_array+0x2e>
 8008596:	bd70      	pop	{r4, r5, r6, pc}
 8008598:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800859c:	4798      	blx	r3
 800859e:	3501      	adds	r5, #1
 80085a0:	e7ee      	b.n	8008580 <__libc_init_array+0xc>
 80085a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085a6:	4798      	blx	r3
 80085a8:	3501      	adds	r5, #1
 80085aa:	e7f2      	b.n	8008592 <__libc_init_array+0x1e>
 80085ac:	0800c338 	.word	0x0800c338
 80085b0:	0800c338 	.word	0x0800c338
 80085b4:	0800c338 	.word	0x0800c338
 80085b8:	0800c33c 	.word	0x0800c33c

080085bc <memset>:
 80085bc:	4402      	add	r2, r0
 80085be:	4603      	mov	r3, r0
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d100      	bne.n	80085c6 <memset+0xa>
 80085c4:	4770      	bx	lr
 80085c6:	f803 1b01 	strb.w	r1, [r3], #1
 80085ca:	e7f9      	b.n	80085c0 <memset+0x4>

080085cc <__cvt>:
 80085cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085d0:	ec55 4b10 	vmov	r4, r5, d0
 80085d4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80085d6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085da:	2d00      	cmp	r5, #0
 80085dc:	460e      	mov	r6, r1
 80085de:	4691      	mov	r9, r2
 80085e0:	4619      	mov	r1, r3
 80085e2:	bfb8      	it	lt
 80085e4:	4622      	movlt	r2, r4
 80085e6:	462b      	mov	r3, r5
 80085e8:	f027 0720 	bic.w	r7, r7, #32
 80085ec:	bfbb      	ittet	lt
 80085ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085f2:	461d      	movlt	r5, r3
 80085f4:	2300      	movge	r3, #0
 80085f6:	232d      	movlt	r3, #45	; 0x2d
 80085f8:	bfb8      	it	lt
 80085fa:	4614      	movlt	r4, r2
 80085fc:	2f46      	cmp	r7, #70	; 0x46
 80085fe:	700b      	strb	r3, [r1, #0]
 8008600:	d004      	beq.n	800860c <__cvt+0x40>
 8008602:	2f45      	cmp	r7, #69	; 0x45
 8008604:	d100      	bne.n	8008608 <__cvt+0x3c>
 8008606:	3601      	adds	r6, #1
 8008608:	2102      	movs	r1, #2
 800860a:	e000      	b.n	800860e <__cvt+0x42>
 800860c:	2103      	movs	r1, #3
 800860e:	ab03      	add	r3, sp, #12
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	ab02      	add	r3, sp, #8
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	4632      	mov	r2, r6
 8008618:	4653      	mov	r3, sl
 800861a:	ec45 4b10 	vmov	d0, r4, r5
 800861e:	f001 fd77 	bl	800a110 <_dtoa_r>
 8008622:	2f47      	cmp	r7, #71	; 0x47
 8008624:	4680      	mov	r8, r0
 8008626:	d102      	bne.n	800862e <__cvt+0x62>
 8008628:	f019 0f01 	tst.w	r9, #1
 800862c:	d026      	beq.n	800867c <__cvt+0xb0>
 800862e:	2f46      	cmp	r7, #70	; 0x46
 8008630:	eb08 0906 	add.w	r9, r8, r6
 8008634:	d111      	bne.n	800865a <__cvt+0x8e>
 8008636:	f898 3000 	ldrb.w	r3, [r8]
 800863a:	2b30      	cmp	r3, #48	; 0x30
 800863c:	d10a      	bne.n	8008654 <__cvt+0x88>
 800863e:	2200      	movs	r2, #0
 8008640:	2300      	movs	r3, #0
 8008642:	4620      	mov	r0, r4
 8008644:	4629      	mov	r1, r5
 8008646:	f7f8 fa3f 	bl	8000ac8 <__aeabi_dcmpeq>
 800864a:	b918      	cbnz	r0, 8008654 <__cvt+0x88>
 800864c:	f1c6 0601 	rsb	r6, r6, #1
 8008650:	f8ca 6000 	str.w	r6, [sl]
 8008654:	f8da 3000 	ldr.w	r3, [sl]
 8008658:	4499      	add	r9, r3
 800865a:	2200      	movs	r2, #0
 800865c:	2300      	movs	r3, #0
 800865e:	4620      	mov	r0, r4
 8008660:	4629      	mov	r1, r5
 8008662:	f7f8 fa31 	bl	8000ac8 <__aeabi_dcmpeq>
 8008666:	b938      	cbnz	r0, 8008678 <__cvt+0xac>
 8008668:	2230      	movs	r2, #48	; 0x30
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	454b      	cmp	r3, r9
 800866e:	d205      	bcs.n	800867c <__cvt+0xb0>
 8008670:	1c59      	adds	r1, r3, #1
 8008672:	9103      	str	r1, [sp, #12]
 8008674:	701a      	strb	r2, [r3, #0]
 8008676:	e7f8      	b.n	800866a <__cvt+0x9e>
 8008678:	f8cd 900c 	str.w	r9, [sp, #12]
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008680:	eba3 0308 	sub.w	r3, r3, r8
 8008684:	4640      	mov	r0, r8
 8008686:	6013      	str	r3, [r2, #0]
 8008688:	b004      	add	sp, #16
 800868a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800868e <__exponent>:
 800868e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008690:	2900      	cmp	r1, #0
 8008692:	4604      	mov	r4, r0
 8008694:	bfba      	itte	lt
 8008696:	4249      	neglt	r1, r1
 8008698:	232d      	movlt	r3, #45	; 0x2d
 800869a:	232b      	movge	r3, #43	; 0x2b
 800869c:	2909      	cmp	r1, #9
 800869e:	f804 2b02 	strb.w	r2, [r4], #2
 80086a2:	7043      	strb	r3, [r0, #1]
 80086a4:	dd20      	ble.n	80086e8 <__exponent+0x5a>
 80086a6:	f10d 0307 	add.w	r3, sp, #7
 80086aa:	461f      	mov	r7, r3
 80086ac:	260a      	movs	r6, #10
 80086ae:	fb91 f5f6 	sdiv	r5, r1, r6
 80086b2:	fb06 1115 	mls	r1, r6, r5, r1
 80086b6:	3130      	adds	r1, #48	; 0x30
 80086b8:	2d09      	cmp	r5, #9
 80086ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80086be:	f103 32ff 	add.w	r2, r3, #4294967295
 80086c2:	4629      	mov	r1, r5
 80086c4:	dc09      	bgt.n	80086da <__exponent+0x4c>
 80086c6:	3130      	adds	r1, #48	; 0x30
 80086c8:	3b02      	subs	r3, #2
 80086ca:	f802 1c01 	strb.w	r1, [r2, #-1]
 80086ce:	42bb      	cmp	r3, r7
 80086d0:	4622      	mov	r2, r4
 80086d2:	d304      	bcc.n	80086de <__exponent+0x50>
 80086d4:	1a10      	subs	r0, r2, r0
 80086d6:	b003      	add	sp, #12
 80086d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086da:	4613      	mov	r3, r2
 80086dc:	e7e7      	b.n	80086ae <__exponent+0x20>
 80086de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086e2:	f804 2b01 	strb.w	r2, [r4], #1
 80086e6:	e7f2      	b.n	80086ce <__exponent+0x40>
 80086e8:	2330      	movs	r3, #48	; 0x30
 80086ea:	4419      	add	r1, r3
 80086ec:	7083      	strb	r3, [r0, #2]
 80086ee:	1d02      	adds	r2, r0, #4
 80086f0:	70c1      	strb	r1, [r0, #3]
 80086f2:	e7ef      	b.n	80086d4 <__exponent+0x46>

080086f4 <_printf_float>:
 80086f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f8:	b08d      	sub	sp, #52	; 0x34
 80086fa:	460c      	mov	r4, r1
 80086fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008700:	4616      	mov	r6, r2
 8008702:	461f      	mov	r7, r3
 8008704:	4605      	mov	r5, r0
 8008706:	f002 fde7 	bl	800b2d8 <_localeconv_r>
 800870a:	6803      	ldr	r3, [r0, #0]
 800870c:	9304      	str	r3, [sp, #16]
 800870e:	4618      	mov	r0, r3
 8008710:	f7f7 fd5e 	bl	80001d0 <strlen>
 8008714:	2300      	movs	r3, #0
 8008716:	930a      	str	r3, [sp, #40]	; 0x28
 8008718:	f8d8 3000 	ldr.w	r3, [r8]
 800871c:	9005      	str	r0, [sp, #20]
 800871e:	3307      	adds	r3, #7
 8008720:	f023 0307 	bic.w	r3, r3, #7
 8008724:	f103 0208 	add.w	r2, r3, #8
 8008728:	f894 a018 	ldrb.w	sl, [r4, #24]
 800872c:	f8d4 b000 	ldr.w	fp, [r4]
 8008730:	f8c8 2000 	str.w	r2, [r8]
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800873c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008740:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008744:	9307      	str	r3, [sp, #28]
 8008746:	f8cd 8018 	str.w	r8, [sp, #24]
 800874a:	f04f 32ff 	mov.w	r2, #4294967295
 800874e:	4ba7      	ldr	r3, [pc, #668]	; (80089ec <_printf_float+0x2f8>)
 8008750:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008754:	f7f8 f9ea 	bl	8000b2c <__aeabi_dcmpun>
 8008758:	bb70      	cbnz	r0, 80087b8 <_printf_float+0xc4>
 800875a:	f04f 32ff 	mov.w	r2, #4294967295
 800875e:	4ba3      	ldr	r3, [pc, #652]	; (80089ec <_printf_float+0x2f8>)
 8008760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008764:	f7f8 f9c4 	bl	8000af0 <__aeabi_dcmple>
 8008768:	bb30      	cbnz	r0, 80087b8 <_printf_float+0xc4>
 800876a:	2200      	movs	r2, #0
 800876c:	2300      	movs	r3, #0
 800876e:	4640      	mov	r0, r8
 8008770:	4649      	mov	r1, r9
 8008772:	f7f8 f9b3 	bl	8000adc <__aeabi_dcmplt>
 8008776:	b110      	cbz	r0, 800877e <_printf_float+0x8a>
 8008778:	232d      	movs	r3, #45	; 0x2d
 800877a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800877e:	4a9c      	ldr	r2, [pc, #624]	; (80089f0 <_printf_float+0x2fc>)
 8008780:	4b9c      	ldr	r3, [pc, #624]	; (80089f4 <_printf_float+0x300>)
 8008782:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008786:	bf8c      	ite	hi
 8008788:	4690      	movhi	r8, r2
 800878a:	4698      	movls	r8, r3
 800878c:	2303      	movs	r3, #3
 800878e:	f02b 0204 	bic.w	r2, fp, #4
 8008792:	6123      	str	r3, [r4, #16]
 8008794:	6022      	str	r2, [r4, #0]
 8008796:	f04f 0900 	mov.w	r9, #0
 800879a:	9700      	str	r7, [sp, #0]
 800879c:	4633      	mov	r3, r6
 800879e:	aa0b      	add	r2, sp, #44	; 0x2c
 80087a0:	4621      	mov	r1, r4
 80087a2:	4628      	mov	r0, r5
 80087a4:	f000 f9e6 	bl	8008b74 <_printf_common>
 80087a8:	3001      	adds	r0, #1
 80087aa:	f040 808d 	bne.w	80088c8 <_printf_float+0x1d4>
 80087ae:	f04f 30ff 	mov.w	r0, #4294967295
 80087b2:	b00d      	add	sp, #52	; 0x34
 80087b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b8:	4642      	mov	r2, r8
 80087ba:	464b      	mov	r3, r9
 80087bc:	4640      	mov	r0, r8
 80087be:	4649      	mov	r1, r9
 80087c0:	f7f8 f9b4 	bl	8000b2c <__aeabi_dcmpun>
 80087c4:	b110      	cbz	r0, 80087cc <_printf_float+0xd8>
 80087c6:	4a8c      	ldr	r2, [pc, #560]	; (80089f8 <_printf_float+0x304>)
 80087c8:	4b8c      	ldr	r3, [pc, #560]	; (80089fc <_printf_float+0x308>)
 80087ca:	e7da      	b.n	8008782 <_printf_float+0x8e>
 80087cc:	6861      	ldr	r1, [r4, #4]
 80087ce:	1c4b      	adds	r3, r1, #1
 80087d0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80087d4:	a80a      	add	r0, sp, #40	; 0x28
 80087d6:	d13e      	bne.n	8008856 <_printf_float+0x162>
 80087d8:	2306      	movs	r3, #6
 80087da:	6063      	str	r3, [r4, #4]
 80087dc:	2300      	movs	r3, #0
 80087de:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80087e2:	ab09      	add	r3, sp, #36	; 0x24
 80087e4:	9300      	str	r3, [sp, #0]
 80087e6:	ec49 8b10 	vmov	d0, r8, r9
 80087ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80087ee:	6022      	str	r2, [r4, #0]
 80087f0:	f8cd a004 	str.w	sl, [sp, #4]
 80087f4:	6861      	ldr	r1, [r4, #4]
 80087f6:	4628      	mov	r0, r5
 80087f8:	f7ff fee8 	bl	80085cc <__cvt>
 80087fc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008800:	2b47      	cmp	r3, #71	; 0x47
 8008802:	4680      	mov	r8, r0
 8008804:	d109      	bne.n	800881a <_printf_float+0x126>
 8008806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008808:	1cd8      	adds	r0, r3, #3
 800880a:	db02      	blt.n	8008812 <_printf_float+0x11e>
 800880c:	6862      	ldr	r2, [r4, #4]
 800880e:	4293      	cmp	r3, r2
 8008810:	dd47      	ble.n	80088a2 <_printf_float+0x1ae>
 8008812:	f1aa 0a02 	sub.w	sl, sl, #2
 8008816:	fa5f fa8a 	uxtb.w	sl, sl
 800881a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800881e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008820:	d824      	bhi.n	800886c <_printf_float+0x178>
 8008822:	3901      	subs	r1, #1
 8008824:	4652      	mov	r2, sl
 8008826:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800882a:	9109      	str	r1, [sp, #36]	; 0x24
 800882c:	f7ff ff2f 	bl	800868e <__exponent>
 8008830:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008832:	1813      	adds	r3, r2, r0
 8008834:	2a01      	cmp	r2, #1
 8008836:	4681      	mov	r9, r0
 8008838:	6123      	str	r3, [r4, #16]
 800883a:	dc02      	bgt.n	8008842 <_printf_float+0x14e>
 800883c:	6822      	ldr	r2, [r4, #0]
 800883e:	07d1      	lsls	r1, r2, #31
 8008840:	d501      	bpl.n	8008846 <_printf_float+0x152>
 8008842:	3301      	adds	r3, #1
 8008844:	6123      	str	r3, [r4, #16]
 8008846:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800884a:	2b00      	cmp	r3, #0
 800884c:	d0a5      	beq.n	800879a <_printf_float+0xa6>
 800884e:	232d      	movs	r3, #45	; 0x2d
 8008850:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008854:	e7a1      	b.n	800879a <_printf_float+0xa6>
 8008856:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800885a:	f000 8177 	beq.w	8008b4c <_printf_float+0x458>
 800885e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008862:	d1bb      	bne.n	80087dc <_printf_float+0xe8>
 8008864:	2900      	cmp	r1, #0
 8008866:	d1b9      	bne.n	80087dc <_printf_float+0xe8>
 8008868:	2301      	movs	r3, #1
 800886a:	e7b6      	b.n	80087da <_printf_float+0xe6>
 800886c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008870:	d119      	bne.n	80088a6 <_printf_float+0x1b2>
 8008872:	2900      	cmp	r1, #0
 8008874:	6863      	ldr	r3, [r4, #4]
 8008876:	dd0c      	ble.n	8008892 <_printf_float+0x19e>
 8008878:	6121      	str	r1, [r4, #16]
 800887a:	b913      	cbnz	r3, 8008882 <_printf_float+0x18e>
 800887c:	6822      	ldr	r2, [r4, #0]
 800887e:	07d2      	lsls	r2, r2, #31
 8008880:	d502      	bpl.n	8008888 <_printf_float+0x194>
 8008882:	3301      	adds	r3, #1
 8008884:	440b      	add	r3, r1
 8008886:	6123      	str	r3, [r4, #16]
 8008888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888a:	65a3      	str	r3, [r4, #88]	; 0x58
 800888c:	f04f 0900 	mov.w	r9, #0
 8008890:	e7d9      	b.n	8008846 <_printf_float+0x152>
 8008892:	b913      	cbnz	r3, 800889a <_printf_float+0x1a6>
 8008894:	6822      	ldr	r2, [r4, #0]
 8008896:	07d0      	lsls	r0, r2, #31
 8008898:	d501      	bpl.n	800889e <_printf_float+0x1aa>
 800889a:	3302      	adds	r3, #2
 800889c:	e7f3      	b.n	8008886 <_printf_float+0x192>
 800889e:	2301      	movs	r3, #1
 80088a0:	e7f1      	b.n	8008886 <_printf_float+0x192>
 80088a2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80088a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80088aa:	4293      	cmp	r3, r2
 80088ac:	db05      	blt.n	80088ba <_printf_float+0x1c6>
 80088ae:	6822      	ldr	r2, [r4, #0]
 80088b0:	6123      	str	r3, [r4, #16]
 80088b2:	07d1      	lsls	r1, r2, #31
 80088b4:	d5e8      	bpl.n	8008888 <_printf_float+0x194>
 80088b6:	3301      	adds	r3, #1
 80088b8:	e7e5      	b.n	8008886 <_printf_float+0x192>
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	bfd4      	ite	le
 80088be:	f1c3 0302 	rsble	r3, r3, #2
 80088c2:	2301      	movgt	r3, #1
 80088c4:	4413      	add	r3, r2
 80088c6:	e7de      	b.n	8008886 <_printf_float+0x192>
 80088c8:	6823      	ldr	r3, [r4, #0]
 80088ca:	055a      	lsls	r2, r3, #21
 80088cc:	d407      	bmi.n	80088de <_printf_float+0x1ea>
 80088ce:	6923      	ldr	r3, [r4, #16]
 80088d0:	4642      	mov	r2, r8
 80088d2:	4631      	mov	r1, r6
 80088d4:	4628      	mov	r0, r5
 80088d6:	47b8      	blx	r7
 80088d8:	3001      	adds	r0, #1
 80088da:	d12b      	bne.n	8008934 <_printf_float+0x240>
 80088dc:	e767      	b.n	80087ae <_printf_float+0xba>
 80088de:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80088e2:	f240 80dc 	bls.w	8008a9e <_printf_float+0x3aa>
 80088e6:	2200      	movs	r2, #0
 80088e8:	2300      	movs	r3, #0
 80088ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088ee:	f7f8 f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80088f2:	2800      	cmp	r0, #0
 80088f4:	d033      	beq.n	800895e <_printf_float+0x26a>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4a41      	ldr	r2, [pc, #260]	; (8008a00 <_printf_float+0x30c>)
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f af54 	beq.w	80087ae <_printf_float+0xba>
 8008906:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800890a:	429a      	cmp	r2, r3
 800890c:	db02      	blt.n	8008914 <_printf_float+0x220>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	07d8      	lsls	r0, r3, #31
 8008912:	d50f      	bpl.n	8008934 <_printf_float+0x240>
 8008914:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008918:	4631      	mov	r1, r6
 800891a:	4628      	mov	r0, r5
 800891c:	47b8      	blx	r7
 800891e:	3001      	adds	r0, #1
 8008920:	f43f af45 	beq.w	80087ae <_printf_float+0xba>
 8008924:	f04f 0800 	mov.w	r8, #0
 8008928:	f104 091a 	add.w	r9, r4, #26
 800892c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892e:	3b01      	subs	r3, #1
 8008930:	4543      	cmp	r3, r8
 8008932:	dc09      	bgt.n	8008948 <_printf_float+0x254>
 8008934:	6823      	ldr	r3, [r4, #0]
 8008936:	079b      	lsls	r3, r3, #30
 8008938:	f100 8103 	bmi.w	8008b42 <_printf_float+0x44e>
 800893c:	68e0      	ldr	r0, [r4, #12]
 800893e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008940:	4298      	cmp	r0, r3
 8008942:	bfb8      	it	lt
 8008944:	4618      	movlt	r0, r3
 8008946:	e734      	b.n	80087b2 <_printf_float+0xbe>
 8008948:	2301      	movs	r3, #1
 800894a:	464a      	mov	r2, r9
 800894c:	4631      	mov	r1, r6
 800894e:	4628      	mov	r0, r5
 8008950:	47b8      	blx	r7
 8008952:	3001      	adds	r0, #1
 8008954:	f43f af2b 	beq.w	80087ae <_printf_float+0xba>
 8008958:	f108 0801 	add.w	r8, r8, #1
 800895c:	e7e6      	b.n	800892c <_printf_float+0x238>
 800895e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008960:	2b00      	cmp	r3, #0
 8008962:	dc2b      	bgt.n	80089bc <_printf_float+0x2c8>
 8008964:	2301      	movs	r3, #1
 8008966:	4a26      	ldr	r2, [pc, #152]	; (8008a00 <_printf_float+0x30c>)
 8008968:	4631      	mov	r1, r6
 800896a:	4628      	mov	r0, r5
 800896c:	47b8      	blx	r7
 800896e:	3001      	adds	r0, #1
 8008970:	f43f af1d 	beq.w	80087ae <_printf_float+0xba>
 8008974:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008976:	b923      	cbnz	r3, 8008982 <_printf_float+0x28e>
 8008978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800897a:	b913      	cbnz	r3, 8008982 <_printf_float+0x28e>
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	07d9      	lsls	r1, r3, #31
 8008980:	d5d8      	bpl.n	8008934 <_printf_float+0x240>
 8008982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008986:	4631      	mov	r1, r6
 8008988:	4628      	mov	r0, r5
 800898a:	47b8      	blx	r7
 800898c:	3001      	adds	r0, #1
 800898e:	f43f af0e 	beq.w	80087ae <_printf_float+0xba>
 8008992:	f04f 0900 	mov.w	r9, #0
 8008996:	f104 0a1a 	add.w	sl, r4, #26
 800899a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800899c:	425b      	negs	r3, r3
 800899e:	454b      	cmp	r3, r9
 80089a0:	dc01      	bgt.n	80089a6 <_printf_float+0x2b2>
 80089a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089a4:	e794      	b.n	80088d0 <_printf_float+0x1dc>
 80089a6:	2301      	movs	r3, #1
 80089a8:	4652      	mov	r2, sl
 80089aa:	4631      	mov	r1, r6
 80089ac:	4628      	mov	r0, r5
 80089ae:	47b8      	blx	r7
 80089b0:	3001      	adds	r0, #1
 80089b2:	f43f aefc 	beq.w	80087ae <_printf_float+0xba>
 80089b6:	f109 0901 	add.w	r9, r9, #1
 80089ba:	e7ee      	b.n	800899a <_printf_float+0x2a6>
 80089bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089c0:	429a      	cmp	r2, r3
 80089c2:	bfa8      	it	ge
 80089c4:	461a      	movge	r2, r3
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	4691      	mov	r9, r2
 80089ca:	dd07      	ble.n	80089dc <_printf_float+0x2e8>
 80089cc:	4613      	mov	r3, r2
 80089ce:	4631      	mov	r1, r6
 80089d0:	4642      	mov	r2, r8
 80089d2:	4628      	mov	r0, r5
 80089d4:	47b8      	blx	r7
 80089d6:	3001      	adds	r0, #1
 80089d8:	f43f aee9 	beq.w	80087ae <_printf_float+0xba>
 80089dc:	f104 031a 	add.w	r3, r4, #26
 80089e0:	f04f 0b00 	mov.w	fp, #0
 80089e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80089e8:	9306      	str	r3, [sp, #24]
 80089ea:	e015      	b.n	8008a18 <_printf_float+0x324>
 80089ec:	7fefffff 	.word	0x7fefffff
 80089f0:	0800c07c 	.word	0x0800c07c
 80089f4:	0800c078 	.word	0x0800c078
 80089f8:	0800c084 	.word	0x0800c084
 80089fc:	0800c080 	.word	0x0800c080
 8008a00:	0800c088 	.word	0x0800c088
 8008a04:	2301      	movs	r3, #1
 8008a06:	9a06      	ldr	r2, [sp, #24]
 8008a08:	4631      	mov	r1, r6
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	47b8      	blx	r7
 8008a0e:	3001      	adds	r0, #1
 8008a10:	f43f aecd 	beq.w	80087ae <_printf_float+0xba>
 8008a14:	f10b 0b01 	add.w	fp, fp, #1
 8008a18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008a1c:	ebaa 0309 	sub.w	r3, sl, r9
 8008a20:	455b      	cmp	r3, fp
 8008a22:	dcef      	bgt.n	8008a04 <_printf_float+0x310>
 8008a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	44d0      	add	r8, sl
 8008a2c:	db15      	blt.n	8008a5a <_printf_float+0x366>
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	07da      	lsls	r2, r3, #31
 8008a32:	d412      	bmi.n	8008a5a <_printf_float+0x366>
 8008a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a38:	eba3 020a 	sub.w	r2, r3, sl
 8008a3c:	eba3 0a01 	sub.w	sl, r3, r1
 8008a40:	4592      	cmp	sl, r2
 8008a42:	bfa8      	it	ge
 8008a44:	4692      	movge	sl, r2
 8008a46:	f1ba 0f00 	cmp.w	sl, #0
 8008a4a:	dc0e      	bgt.n	8008a6a <_printf_float+0x376>
 8008a4c:	f04f 0800 	mov.w	r8, #0
 8008a50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a54:	f104 091a 	add.w	r9, r4, #26
 8008a58:	e019      	b.n	8008a8e <_printf_float+0x39a>
 8008a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	d1e5      	bne.n	8008a34 <_printf_float+0x340>
 8008a68:	e6a1      	b.n	80087ae <_printf_float+0xba>
 8008a6a:	4653      	mov	r3, sl
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	4631      	mov	r1, r6
 8008a70:	4628      	mov	r0, r5
 8008a72:	47b8      	blx	r7
 8008a74:	3001      	adds	r0, #1
 8008a76:	d1e9      	bne.n	8008a4c <_printf_float+0x358>
 8008a78:	e699      	b.n	80087ae <_printf_float+0xba>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	464a      	mov	r2, r9
 8008a7e:	4631      	mov	r1, r6
 8008a80:	4628      	mov	r0, r5
 8008a82:	47b8      	blx	r7
 8008a84:	3001      	adds	r0, #1
 8008a86:	f43f ae92 	beq.w	80087ae <_printf_float+0xba>
 8008a8a:	f108 0801 	add.w	r8, r8, #1
 8008a8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a92:	1a9b      	subs	r3, r3, r2
 8008a94:	eba3 030a 	sub.w	r3, r3, sl
 8008a98:	4543      	cmp	r3, r8
 8008a9a:	dcee      	bgt.n	8008a7a <_printf_float+0x386>
 8008a9c:	e74a      	b.n	8008934 <_printf_float+0x240>
 8008a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008aa0:	2a01      	cmp	r2, #1
 8008aa2:	dc01      	bgt.n	8008aa8 <_printf_float+0x3b4>
 8008aa4:	07db      	lsls	r3, r3, #31
 8008aa6:	d53a      	bpl.n	8008b1e <_printf_float+0x42a>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	4642      	mov	r2, r8
 8008aac:	4631      	mov	r1, r6
 8008aae:	4628      	mov	r0, r5
 8008ab0:	47b8      	blx	r7
 8008ab2:	3001      	adds	r0, #1
 8008ab4:	f43f ae7b 	beq.w	80087ae <_printf_float+0xba>
 8008ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008abc:	4631      	mov	r1, r6
 8008abe:	4628      	mov	r0, r5
 8008ac0:	47b8      	blx	r7
 8008ac2:	3001      	adds	r0, #1
 8008ac4:	f108 0801 	add.w	r8, r8, #1
 8008ac8:	f43f ae71 	beq.w	80087ae <_printf_float+0xba>
 8008acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f103 3aff 	add.w	sl, r3, #4294967295
 8008ad4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ad8:	2300      	movs	r3, #0
 8008ada:	f7f7 fff5 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ade:	b9c8      	cbnz	r0, 8008b14 <_printf_float+0x420>
 8008ae0:	4653      	mov	r3, sl
 8008ae2:	4642      	mov	r2, r8
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	d10e      	bne.n	8008b0c <_printf_float+0x418>
 8008aee:	e65e      	b.n	80087ae <_printf_float+0xba>
 8008af0:	2301      	movs	r3, #1
 8008af2:	4652      	mov	r2, sl
 8008af4:	4631      	mov	r1, r6
 8008af6:	4628      	mov	r0, r5
 8008af8:	47b8      	blx	r7
 8008afa:	3001      	adds	r0, #1
 8008afc:	f43f ae57 	beq.w	80087ae <_printf_float+0xba>
 8008b00:	f108 0801 	add.w	r8, r8, #1
 8008b04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b06:	3b01      	subs	r3, #1
 8008b08:	4543      	cmp	r3, r8
 8008b0a:	dcf1      	bgt.n	8008af0 <_printf_float+0x3fc>
 8008b0c:	464b      	mov	r3, r9
 8008b0e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b12:	e6de      	b.n	80088d2 <_printf_float+0x1de>
 8008b14:	f04f 0800 	mov.w	r8, #0
 8008b18:	f104 0a1a 	add.w	sl, r4, #26
 8008b1c:	e7f2      	b.n	8008b04 <_printf_float+0x410>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e7df      	b.n	8008ae2 <_printf_float+0x3ee>
 8008b22:	2301      	movs	r3, #1
 8008b24:	464a      	mov	r2, r9
 8008b26:	4631      	mov	r1, r6
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b8      	blx	r7
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	f43f ae3e 	beq.w	80087ae <_printf_float+0xba>
 8008b32:	f108 0801 	add.w	r8, r8, #1
 8008b36:	68e3      	ldr	r3, [r4, #12]
 8008b38:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b3a:	1a9b      	subs	r3, r3, r2
 8008b3c:	4543      	cmp	r3, r8
 8008b3e:	dcf0      	bgt.n	8008b22 <_printf_float+0x42e>
 8008b40:	e6fc      	b.n	800893c <_printf_float+0x248>
 8008b42:	f04f 0800 	mov.w	r8, #0
 8008b46:	f104 0919 	add.w	r9, r4, #25
 8008b4a:	e7f4      	b.n	8008b36 <_printf_float+0x442>
 8008b4c:	2900      	cmp	r1, #0
 8008b4e:	f43f ae8b 	beq.w	8008868 <_printf_float+0x174>
 8008b52:	2300      	movs	r3, #0
 8008b54:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008b58:	ab09      	add	r3, sp, #36	; 0x24
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	ec49 8b10 	vmov	d0, r8, r9
 8008b60:	6022      	str	r2, [r4, #0]
 8008b62:	f8cd a004 	str.w	sl, [sp, #4]
 8008b66:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f7ff fd2e 	bl	80085cc <__cvt>
 8008b70:	4680      	mov	r8, r0
 8008b72:	e648      	b.n	8008806 <_printf_float+0x112>

08008b74 <_printf_common>:
 8008b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b78:	4691      	mov	r9, r2
 8008b7a:	461f      	mov	r7, r3
 8008b7c:	688a      	ldr	r2, [r1, #8]
 8008b7e:	690b      	ldr	r3, [r1, #16]
 8008b80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b84:	4293      	cmp	r3, r2
 8008b86:	bfb8      	it	lt
 8008b88:	4613      	movlt	r3, r2
 8008b8a:	f8c9 3000 	str.w	r3, [r9]
 8008b8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b92:	4606      	mov	r6, r0
 8008b94:	460c      	mov	r4, r1
 8008b96:	b112      	cbz	r2, 8008b9e <_printf_common+0x2a>
 8008b98:	3301      	adds	r3, #1
 8008b9a:	f8c9 3000 	str.w	r3, [r9]
 8008b9e:	6823      	ldr	r3, [r4, #0]
 8008ba0:	0699      	lsls	r1, r3, #26
 8008ba2:	bf42      	ittt	mi
 8008ba4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ba8:	3302      	addmi	r3, #2
 8008baa:	f8c9 3000 	strmi.w	r3, [r9]
 8008bae:	6825      	ldr	r5, [r4, #0]
 8008bb0:	f015 0506 	ands.w	r5, r5, #6
 8008bb4:	d107      	bne.n	8008bc6 <_printf_common+0x52>
 8008bb6:	f104 0a19 	add.w	sl, r4, #25
 8008bba:	68e3      	ldr	r3, [r4, #12]
 8008bbc:	f8d9 2000 	ldr.w	r2, [r9]
 8008bc0:	1a9b      	subs	r3, r3, r2
 8008bc2:	42ab      	cmp	r3, r5
 8008bc4:	dc28      	bgt.n	8008c18 <_printf_common+0xa4>
 8008bc6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008bca:	6822      	ldr	r2, [r4, #0]
 8008bcc:	3300      	adds	r3, #0
 8008bce:	bf18      	it	ne
 8008bd0:	2301      	movne	r3, #1
 8008bd2:	0692      	lsls	r2, r2, #26
 8008bd4:	d42d      	bmi.n	8008c32 <_printf_common+0xbe>
 8008bd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bda:	4639      	mov	r1, r7
 8008bdc:	4630      	mov	r0, r6
 8008bde:	47c0      	blx	r8
 8008be0:	3001      	adds	r0, #1
 8008be2:	d020      	beq.n	8008c26 <_printf_common+0xb2>
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	68e5      	ldr	r5, [r4, #12]
 8008be8:	f8d9 2000 	ldr.w	r2, [r9]
 8008bec:	f003 0306 	and.w	r3, r3, #6
 8008bf0:	2b04      	cmp	r3, #4
 8008bf2:	bf08      	it	eq
 8008bf4:	1aad      	subeq	r5, r5, r2
 8008bf6:	68a3      	ldr	r3, [r4, #8]
 8008bf8:	6922      	ldr	r2, [r4, #16]
 8008bfa:	bf0c      	ite	eq
 8008bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c00:	2500      	movne	r5, #0
 8008c02:	4293      	cmp	r3, r2
 8008c04:	bfc4      	itt	gt
 8008c06:	1a9b      	subgt	r3, r3, r2
 8008c08:	18ed      	addgt	r5, r5, r3
 8008c0a:	f04f 0900 	mov.w	r9, #0
 8008c0e:	341a      	adds	r4, #26
 8008c10:	454d      	cmp	r5, r9
 8008c12:	d11a      	bne.n	8008c4a <_printf_common+0xd6>
 8008c14:	2000      	movs	r0, #0
 8008c16:	e008      	b.n	8008c2a <_printf_common+0xb6>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	4652      	mov	r2, sl
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	4630      	mov	r0, r6
 8008c20:	47c0      	blx	r8
 8008c22:	3001      	adds	r0, #1
 8008c24:	d103      	bne.n	8008c2e <_printf_common+0xba>
 8008c26:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2e:	3501      	adds	r5, #1
 8008c30:	e7c3      	b.n	8008bba <_printf_common+0x46>
 8008c32:	18e1      	adds	r1, r4, r3
 8008c34:	1c5a      	adds	r2, r3, #1
 8008c36:	2030      	movs	r0, #48	; 0x30
 8008c38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c3c:	4422      	add	r2, r4
 8008c3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c46:	3302      	adds	r3, #2
 8008c48:	e7c5      	b.n	8008bd6 <_printf_common+0x62>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	4622      	mov	r2, r4
 8008c4e:	4639      	mov	r1, r7
 8008c50:	4630      	mov	r0, r6
 8008c52:	47c0      	blx	r8
 8008c54:	3001      	adds	r0, #1
 8008c56:	d0e6      	beq.n	8008c26 <_printf_common+0xb2>
 8008c58:	f109 0901 	add.w	r9, r9, #1
 8008c5c:	e7d8      	b.n	8008c10 <_printf_common+0x9c>
	...

08008c60 <_printf_i>:
 8008c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c64:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008c68:	460c      	mov	r4, r1
 8008c6a:	7e09      	ldrb	r1, [r1, #24]
 8008c6c:	b085      	sub	sp, #20
 8008c6e:	296e      	cmp	r1, #110	; 0x6e
 8008c70:	4617      	mov	r7, r2
 8008c72:	4606      	mov	r6, r0
 8008c74:	4698      	mov	r8, r3
 8008c76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008c78:	f000 80b3 	beq.w	8008de2 <_printf_i+0x182>
 8008c7c:	d822      	bhi.n	8008cc4 <_printf_i+0x64>
 8008c7e:	2963      	cmp	r1, #99	; 0x63
 8008c80:	d036      	beq.n	8008cf0 <_printf_i+0x90>
 8008c82:	d80a      	bhi.n	8008c9a <_printf_i+0x3a>
 8008c84:	2900      	cmp	r1, #0
 8008c86:	f000 80b9 	beq.w	8008dfc <_printf_i+0x19c>
 8008c8a:	2958      	cmp	r1, #88	; 0x58
 8008c8c:	f000 8083 	beq.w	8008d96 <_printf_i+0x136>
 8008c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c94:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008c98:	e032      	b.n	8008d00 <_printf_i+0xa0>
 8008c9a:	2964      	cmp	r1, #100	; 0x64
 8008c9c:	d001      	beq.n	8008ca2 <_printf_i+0x42>
 8008c9e:	2969      	cmp	r1, #105	; 0x69
 8008ca0:	d1f6      	bne.n	8008c90 <_printf_i+0x30>
 8008ca2:	6820      	ldr	r0, [r4, #0]
 8008ca4:	6813      	ldr	r3, [r2, #0]
 8008ca6:	0605      	lsls	r5, r0, #24
 8008ca8:	f103 0104 	add.w	r1, r3, #4
 8008cac:	d52a      	bpl.n	8008d04 <_printf_i+0xa4>
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	6011      	str	r1, [r2, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	da03      	bge.n	8008cbe <_printf_i+0x5e>
 8008cb6:	222d      	movs	r2, #45	; 0x2d
 8008cb8:	425b      	negs	r3, r3
 8008cba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008cbe:	486f      	ldr	r0, [pc, #444]	; (8008e7c <_printf_i+0x21c>)
 8008cc0:	220a      	movs	r2, #10
 8008cc2:	e039      	b.n	8008d38 <_printf_i+0xd8>
 8008cc4:	2973      	cmp	r1, #115	; 0x73
 8008cc6:	f000 809d 	beq.w	8008e04 <_printf_i+0x1a4>
 8008cca:	d808      	bhi.n	8008cde <_printf_i+0x7e>
 8008ccc:	296f      	cmp	r1, #111	; 0x6f
 8008cce:	d020      	beq.n	8008d12 <_printf_i+0xb2>
 8008cd0:	2970      	cmp	r1, #112	; 0x70
 8008cd2:	d1dd      	bne.n	8008c90 <_printf_i+0x30>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	f043 0320 	orr.w	r3, r3, #32
 8008cda:	6023      	str	r3, [r4, #0]
 8008cdc:	e003      	b.n	8008ce6 <_printf_i+0x86>
 8008cde:	2975      	cmp	r1, #117	; 0x75
 8008ce0:	d017      	beq.n	8008d12 <_printf_i+0xb2>
 8008ce2:	2978      	cmp	r1, #120	; 0x78
 8008ce4:	d1d4      	bne.n	8008c90 <_printf_i+0x30>
 8008ce6:	2378      	movs	r3, #120	; 0x78
 8008ce8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008cec:	4864      	ldr	r0, [pc, #400]	; (8008e80 <_printf_i+0x220>)
 8008cee:	e055      	b.n	8008d9c <_printf_i+0x13c>
 8008cf0:	6813      	ldr	r3, [r2, #0]
 8008cf2:	1d19      	adds	r1, r3, #4
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6011      	str	r1, [r2, #0]
 8008cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d00:	2301      	movs	r3, #1
 8008d02:	e08c      	b.n	8008e1e <_printf_i+0x1be>
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	6011      	str	r1, [r2, #0]
 8008d08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d0c:	bf18      	it	ne
 8008d0e:	b21b      	sxthne	r3, r3
 8008d10:	e7cf      	b.n	8008cb2 <_printf_i+0x52>
 8008d12:	6813      	ldr	r3, [r2, #0]
 8008d14:	6825      	ldr	r5, [r4, #0]
 8008d16:	1d18      	adds	r0, r3, #4
 8008d18:	6010      	str	r0, [r2, #0]
 8008d1a:	0628      	lsls	r0, r5, #24
 8008d1c:	d501      	bpl.n	8008d22 <_printf_i+0xc2>
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	e002      	b.n	8008d28 <_printf_i+0xc8>
 8008d22:	0668      	lsls	r0, r5, #25
 8008d24:	d5fb      	bpl.n	8008d1e <_printf_i+0xbe>
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	4854      	ldr	r0, [pc, #336]	; (8008e7c <_printf_i+0x21c>)
 8008d2a:	296f      	cmp	r1, #111	; 0x6f
 8008d2c:	bf14      	ite	ne
 8008d2e:	220a      	movne	r2, #10
 8008d30:	2208      	moveq	r2, #8
 8008d32:	2100      	movs	r1, #0
 8008d34:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d38:	6865      	ldr	r5, [r4, #4]
 8008d3a:	60a5      	str	r5, [r4, #8]
 8008d3c:	2d00      	cmp	r5, #0
 8008d3e:	f2c0 8095 	blt.w	8008e6c <_printf_i+0x20c>
 8008d42:	6821      	ldr	r1, [r4, #0]
 8008d44:	f021 0104 	bic.w	r1, r1, #4
 8008d48:	6021      	str	r1, [r4, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d13d      	bne.n	8008dca <_printf_i+0x16a>
 8008d4e:	2d00      	cmp	r5, #0
 8008d50:	f040 808e 	bne.w	8008e70 <_printf_i+0x210>
 8008d54:	4665      	mov	r5, ip
 8008d56:	2a08      	cmp	r2, #8
 8008d58:	d10b      	bne.n	8008d72 <_printf_i+0x112>
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	07db      	lsls	r3, r3, #31
 8008d5e:	d508      	bpl.n	8008d72 <_printf_i+0x112>
 8008d60:	6923      	ldr	r3, [r4, #16]
 8008d62:	6862      	ldr	r2, [r4, #4]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	bfde      	ittt	le
 8008d68:	2330      	movle	r3, #48	; 0x30
 8008d6a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d6e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d72:	ebac 0305 	sub.w	r3, ip, r5
 8008d76:	6123      	str	r3, [r4, #16]
 8008d78:	f8cd 8000 	str.w	r8, [sp]
 8008d7c:	463b      	mov	r3, r7
 8008d7e:	aa03      	add	r2, sp, #12
 8008d80:	4621      	mov	r1, r4
 8008d82:	4630      	mov	r0, r6
 8008d84:	f7ff fef6 	bl	8008b74 <_printf_common>
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d14d      	bne.n	8008e28 <_printf_i+0x1c8>
 8008d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d90:	b005      	add	sp, #20
 8008d92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d96:	4839      	ldr	r0, [pc, #228]	; (8008e7c <_printf_i+0x21c>)
 8008d98:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008d9c:	6813      	ldr	r3, [r2, #0]
 8008d9e:	6821      	ldr	r1, [r4, #0]
 8008da0:	1d1d      	adds	r5, r3, #4
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6015      	str	r5, [r2, #0]
 8008da6:	060a      	lsls	r2, r1, #24
 8008da8:	d50b      	bpl.n	8008dc2 <_printf_i+0x162>
 8008daa:	07ca      	lsls	r2, r1, #31
 8008dac:	bf44      	itt	mi
 8008dae:	f041 0120 	orrmi.w	r1, r1, #32
 8008db2:	6021      	strmi	r1, [r4, #0]
 8008db4:	b91b      	cbnz	r3, 8008dbe <_printf_i+0x15e>
 8008db6:	6822      	ldr	r2, [r4, #0]
 8008db8:	f022 0220 	bic.w	r2, r2, #32
 8008dbc:	6022      	str	r2, [r4, #0]
 8008dbe:	2210      	movs	r2, #16
 8008dc0:	e7b7      	b.n	8008d32 <_printf_i+0xd2>
 8008dc2:	064d      	lsls	r5, r1, #25
 8008dc4:	bf48      	it	mi
 8008dc6:	b29b      	uxthmi	r3, r3
 8008dc8:	e7ef      	b.n	8008daa <_printf_i+0x14a>
 8008dca:	4665      	mov	r5, ip
 8008dcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008dd0:	fb02 3311 	mls	r3, r2, r1, r3
 8008dd4:	5cc3      	ldrb	r3, [r0, r3]
 8008dd6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008dda:	460b      	mov	r3, r1
 8008ddc:	2900      	cmp	r1, #0
 8008dde:	d1f5      	bne.n	8008dcc <_printf_i+0x16c>
 8008de0:	e7b9      	b.n	8008d56 <_printf_i+0xf6>
 8008de2:	6813      	ldr	r3, [r2, #0]
 8008de4:	6825      	ldr	r5, [r4, #0]
 8008de6:	6961      	ldr	r1, [r4, #20]
 8008de8:	1d18      	adds	r0, r3, #4
 8008dea:	6010      	str	r0, [r2, #0]
 8008dec:	0628      	lsls	r0, r5, #24
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	d501      	bpl.n	8008df6 <_printf_i+0x196>
 8008df2:	6019      	str	r1, [r3, #0]
 8008df4:	e002      	b.n	8008dfc <_printf_i+0x19c>
 8008df6:	066a      	lsls	r2, r5, #25
 8008df8:	d5fb      	bpl.n	8008df2 <_printf_i+0x192>
 8008dfa:	8019      	strh	r1, [r3, #0]
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	6123      	str	r3, [r4, #16]
 8008e00:	4665      	mov	r5, ip
 8008e02:	e7b9      	b.n	8008d78 <_printf_i+0x118>
 8008e04:	6813      	ldr	r3, [r2, #0]
 8008e06:	1d19      	adds	r1, r3, #4
 8008e08:	6011      	str	r1, [r2, #0]
 8008e0a:	681d      	ldr	r5, [r3, #0]
 8008e0c:	6862      	ldr	r2, [r4, #4]
 8008e0e:	2100      	movs	r1, #0
 8008e10:	4628      	mov	r0, r5
 8008e12:	f7f7 f9e5 	bl	80001e0 <memchr>
 8008e16:	b108      	cbz	r0, 8008e1c <_printf_i+0x1bc>
 8008e18:	1b40      	subs	r0, r0, r5
 8008e1a:	6060      	str	r0, [r4, #4]
 8008e1c:	6863      	ldr	r3, [r4, #4]
 8008e1e:	6123      	str	r3, [r4, #16]
 8008e20:	2300      	movs	r3, #0
 8008e22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e26:	e7a7      	b.n	8008d78 <_printf_i+0x118>
 8008e28:	6923      	ldr	r3, [r4, #16]
 8008e2a:	462a      	mov	r2, r5
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4630      	mov	r0, r6
 8008e30:	47c0      	blx	r8
 8008e32:	3001      	adds	r0, #1
 8008e34:	d0aa      	beq.n	8008d8c <_printf_i+0x12c>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	079b      	lsls	r3, r3, #30
 8008e3a:	d413      	bmi.n	8008e64 <_printf_i+0x204>
 8008e3c:	68e0      	ldr	r0, [r4, #12]
 8008e3e:	9b03      	ldr	r3, [sp, #12]
 8008e40:	4298      	cmp	r0, r3
 8008e42:	bfb8      	it	lt
 8008e44:	4618      	movlt	r0, r3
 8008e46:	e7a3      	b.n	8008d90 <_printf_i+0x130>
 8008e48:	2301      	movs	r3, #1
 8008e4a:	464a      	mov	r2, r9
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	4630      	mov	r0, r6
 8008e50:	47c0      	blx	r8
 8008e52:	3001      	adds	r0, #1
 8008e54:	d09a      	beq.n	8008d8c <_printf_i+0x12c>
 8008e56:	3501      	adds	r5, #1
 8008e58:	68e3      	ldr	r3, [r4, #12]
 8008e5a:	9a03      	ldr	r2, [sp, #12]
 8008e5c:	1a9b      	subs	r3, r3, r2
 8008e5e:	42ab      	cmp	r3, r5
 8008e60:	dcf2      	bgt.n	8008e48 <_printf_i+0x1e8>
 8008e62:	e7eb      	b.n	8008e3c <_printf_i+0x1dc>
 8008e64:	2500      	movs	r5, #0
 8008e66:	f104 0919 	add.w	r9, r4, #25
 8008e6a:	e7f5      	b.n	8008e58 <_printf_i+0x1f8>
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1ac      	bne.n	8008dca <_printf_i+0x16a>
 8008e70:	7803      	ldrb	r3, [r0, #0]
 8008e72:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e7a:	e76c      	b.n	8008d56 <_printf_i+0xf6>
 8008e7c:	0800c08a 	.word	0x0800c08a
 8008e80:	0800c09b 	.word	0x0800c09b

08008e84 <_scanf_float>:
 8008e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e88:	469a      	mov	sl, r3
 8008e8a:	688b      	ldr	r3, [r1, #8]
 8008e8c:	4616      	mov	r6, r2
 8008e8e:	1e5a      	subs	r2, r3, #1
 8008e90:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008e94:	b087      	sub	sp, #28
 8008e96:	bf83      	ittte	hi
 8008e98:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8008e9c:	189b      	addhi	r3, r3, r2
 8008e9e:	9301      	strhi	r3, [sp, #4]
 8008ea0:	2300      	movls	r3, #0
 8008ea2:	bf86      	itte	hi
 8008ea4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ea8:	608b      	strhi	r3, [r1, #8]
 8008eaa:	9301      	strls	r3, [sp, #4]
 8008eac:	680b      	ldr	r3, [r1, #0]
 8008eae:	4688      	mov	r8, r1
 8008eb0:	f04f 0b00 	mov.w	fp, #0
 8008eb4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008eb8:	f848 3b1c 	str.w	r3, [r8], #28
 8008ebc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8008ec0:	4607      	mov	r7, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	4645      	mov	r5, r8
 8008ec6:	465a      	mov	r2, fp
 8008ec8:	46d9      	mov	r9, fp
 8008eca:	f8cd b008 	str.w	fp, [sp, #8]
 8008ece:	68a1      	ldr	r1, [r4, #8]
 8008ed0:	b181      	cbz	r1, 8008ef4 <_scanf_float+0x70>
 8008ed2:	6833      	ldr	r3, [r6, #0]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b49      	cmp	r3, #73	; 0x49
 8008ed8:	d071      	beq.n	8008fbe <_scanf_float+0x13a>
 8008eda:	d84d      	bhi.n	8008f78 <_scanf_float+0xf4>
 8008edc:	2b39      	cmp	r3, #57	; 0x39
 8008ede:	d840      	bhi.n	8008f62 <_scanf_float+0xde>
 8008ee0:	2b31      	cmp	r3, #49	; 0x31
 8008ee2:	f080 8088 	bcs.w	8008ff6 <_scanf_float+0x172>
 8008ee6:	2b2d      	cmp	r3, #45	; 0x2d
 8008ee8:	f000 8090 	beq.w	800900c <_scanf_float+0x188>
 8008eec:	d815      	bhi.n	8008f1a <_scanf_float+0x96>
 8008eee:	2b2b      	cmp	r3, #43	; 0x2b
 8008ef0:	f000 808c 	beq.w	800900c <_scanf_float+0x188>
 8008ef4:	f1b9 0f00 	cmp.w	r9, #0
 8008ef8:	d003      	beq.n	8008f02 <_scanf_float+0x7e>
 8008efa:	6823      	ldr	r3, [r4, #0]
 8008efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	3a01      	subs	r2, #1
 8008f04:	2a01      	cmp	r2, #1
 8008f06:	f200 80ea 	bhi.w	80090de <_scanf_float+0x25a>
 8008f0a:	4545      	cmp	r5, r8
 8008f0c:	f200 80dc 	bhi.w	80090c8 <_scanf_float+0x244>
 8008f10:	2601      	movs	r6, #1
 8008f12:	4630      	mov	r0, r6
 8008f14:	b007      	add	sp, #28
 8008f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8008f1c:	f000 809f 	beq.w	800905e <_scanf_float+0x1da>
 8008f20:	2b30      	cmp	r3, #48	; 0x30
 8008f22:	d1e7      	bne.n	8008ef4 <_scanf_float+0x70>
 8008f24:	6820      	ldr	r0, [r4, #0]
 8008f26:	f410 7f80 	tst.w	r0, #256	; 0x100
 8008f2a:	d064      	beq.n	8008ff6 <_scanf_float+0x172>
 8008f2c:	9b01      	ldr	r3, [sp, #4]
 8008f2e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8008f32:	6020      	str	r0, [r4, #0]
 8008f34:	f109 0901 	add.w	r9, r9, #1
 8008f38:	b11b      	cbz	r3, 8008f42 <_scanf_float+0xbe>
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	3101      	adds	r1, #1
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	60a1      	str	r1, [r4, #8]
 8008f42:	68a3      	ldr	r3, [r4, #8]
 8008f44:	3b01      	subs	r3, #1
 8008f46:	60a3      	str	r3, [r4, #8]
 8008f48:	6923      	ldr	r3, [r4, #16]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	6123      	str	r3, [r4, #16]
 8008f4e:	6873      	ldr	r3, [r6, #4]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	6073      	str	r3, [r6, #4]
 8008f56:	f340 80ac 	ble.w	80090b2 <_scanf_float+0x22e>
 8008f5a:	6833      	ldr	r3, [r6, #0]
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	6033      	str	r3, [r6, #0]
 8008f60:	e7b5      	b.n	8008ece <_scanf_float+0x4a>
 8008f62:	2b45      	cmp	r3, #69	; 0x45
 8008f64:	f000 8085 	beq.w	8009072 <_scanf_float+0x1ee>
 8008f68:	2b46      	cmp	r3, #70	; 0x46
 8008f6a:	d06a      	beq.n	8009042 <_scanf_float+0x1be>
 8008f6c:	2b41      	cmp	r3, #65	; 0x41
 8008f6e:	d1c1      	bne.n	8008ef4 <_scanf_float+0x70>
 8008f70:	2a01      	cmp	r2, #1
 8008f72:	d1bf      	bne.n	8008ef4 <_scanf_float+0x70>
 8008f74:	2202      	movs	r2, #2
 8008f76:	e046      	b.n	8009006 <_scanf_float+0x182>
 8008f78:	2b65      	cmp	r3, #101	; 0x65
 8008f7a:	d07a      	beq.n	8009072 <_scanf_float+0x1ee>
 8008f7c:	d818      	bhi.n	8008fb0 <_scanf_float+0x12c>
 8008f7e:	2b54      	cmp	r3, #84	; 0x54
 8008f80:	d066      	beq.n	8009050 <_scanf_float+0x1cc>
 8008f82:	d811      	bhi.n	8008fa8 <_scanf_float+0x124>
 8008f84:	2b4e      	cmp	r3, #78	; 0x4e
 8008f86:	d1b5      	bne.n	8008ef4 <_scanf_float+0x70>
 8008f88:	2a00      	cmp	r2, #0
 8008f8a:	d146      	bne.n	800901a <_scanf_float+0x196>
 8008f8c:	f1b9 0f00 	cmp.w	r9, #0
 8008f90:	d145      	bne.n	800901e <_scanf_float+0x19a>
 8008f92:	6821      	ldr	r1, [r4, #0]
 8008f94:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008f98:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008f9c:	d13f      	bne.n	800901e <_scanf_float+0x19a>
 8008f9e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008fa2:	6021      	str	r1, [r4, #0]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	e02e      	b.n	8009006 <_scanf_float+0x182>
 8008fa8:	2b59      	cmp	r3, #89	; 0x59
 8008faa:	d01e      	beq.n	8008fea <_scanf_float+0x166>
 8008fac:	2b61      	cmp	r3, #97	; 0x61
 8008fae:	e7de      	b.n	8008f6e <_scanf_float+0xea>
 8008fb0:	2b6e      	cmp	r3, #110	; 0x6e
 8008fb2:	d0e9      	beq.n	8008f88 <_scanf_float+0x104>
 8008fb4:	d815      	bhi.n	8008fe2 <_scanf_float+0x15e>
 8008fb6:	2b66      	cmp	r3, #102	; 0x66
 8008fb8:	d043      	beq.n	8009042 <_scanf_float+0x1be>
 8008fba:	2b69      	cmp	r3, #105	; 0x69
 8008fbc:	d19a      	bne.n	8008ef4 <_scanf_float+0x70>
 8008fbe:	f1bb 0f00 	cmp.w	fp, #0
 8008fc2:	d138      	bne.n	8009036 <_scanf_float+0x1b2>
 8008fc4:	f1b9 0f00 	cmp.w	r9, #0
 8008fc8:	d197      	bne.n	8008efa <_scanf_float+0x76>
 8008fca:	6821      	ldr	r1, [r4, #0]
 8008fcc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8008fd0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8008fd4:	d195      	bne.n	8008f02 <_scanf_float+0x7e>
 8008fd6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8008fda:	6021      	str	r1, [r4, #0]
 8008fdc:	f04f 0b01 	mov.w	fp, #1
 8008fe0:	e011      	b.n	8009006 <_scanf_float+0x182>
 8008fe2:	2b74      	cmp	r3, #116	; 0x74
 8008fe4:	d034      	beq.n	8009050 <_scanf_float+0x1cc>
 8008fe6:	2b79      	cmp	r3, #121	; 0x79
 8008fe8:	d184      	bne.n	8008ef4 <_scanf_float+0x70>
 8008fea:	f1bb 0f07 	cmp.w	fp, #7
 8008fee:	d181      	bne.n	8008ef4 <_scanf_float+0x70>
 8008ff0:	f04f 0b08 	mov.w	fp, #8
 8008ff4:	e007      	b.n	8009006 <_scanf_float+0x182>
 8008ff6:	eb12 0f0b 	cmn.w	r2, fp
 8008ffa:	f47f af7b 	bne.w	8008ef4 <_scanf_float+0x70>
 8008ffe:	6821      	ldr	r1, [r4, #0]
 8009000:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8009004:	6021      	str	r1, [r4, #0]
 8009006:	702b      	strb	r3, [r5, #0]
 8009008:	3501      	adds	r5, #1
 800900a:	e79a      	b.n	8008f42 <_scanf_float+0xbe>
 800900c:	6821      	ldr	r1, [r4, #0]
 800900e:	0608      	lsls	r0, r1, #24
 8009010:	f57f af70 	bpl.w	8008ef4 <_scanf_float+0x70>
 8009014:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009018:	e7f4      	b.n	8009004 <_scanf_float+0x180>
 800901a:	2a02      	cmp	r2, #2
 800901c:	d047      	beq.n	80090ae <_scanf_float+0x22a>
 800901e:	f1bb 0f01 	cmp.w	fp, #1
 8009022:	d003      	beq.n	800902c <_scanf_float+0x1a8>
 8009024:	f1bb 0f04 	cmp.w	fp, #4
 8009028:	f47f af64 	bne.w	8008ef4 <_scanf_float+0x70>
 800902c:	f10b 0b01 	add.w	fp, fp, #1
 8009030:	fa5f fb8b 	uxtb.w	fp, fp
 8009034:	e7e7      	b.n	8009006 <_scanf_float+0x182>
 8009036:	f1bb 0f03 	cmp.w	fp, #3
 800903a:	d0f7      	beq.n	800902c <_scanf_float+0x1a8>
 800903c:	f1bb 0f05 	cmp.w	fp, #5
 8009040:	e7f2      	b.n	8009028 <_scanf_float+0x1a4>
 8009042:	f1bb 0f02 	cmp.w	fp, #2
 8009046:	f47f af55 	bne.w	8008ef4 <_scanf_float+0x70>
 800904a:	f04f 0b03 	mov.w	fp, #3
 800904e:	e7da      	b.n	8009006 <_scanf_float+0x182>
 8009050:	f1bb 0f06 	cmp.w	fp, #6
 8009054:	f47f af4e 	bne.w	8008ef4 <_scanf_float+0x70>
 8009058:	f04f 0b07 	mov.w	fp, #7
 800905c:	e7d3      	b.n	8009006 <_scanf_float+0x182>
 800905e:	6821      	ldr	r1, [r4, #0]
 8009060:	0588      	lsls	r0, r1, #22
 8009062:	f57f af47 	bpl.w	8008ef4 <_scanf_float+0x70>
 8009066:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800906a:	6021      	str	r1, [r4, #0]
 800906c:	f8cd 9008 	str.w	r9, [sp, #8]
 8009070:	e7c9      	b.n	8009006 <_scanf_float+0x182>
 8009072:	6821      	ldr	r1, [r4, #0]
 8009074:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8009078:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800907c:	d006      	beq.n	800908c <_scanf_float+0x208>
 800907e:	0548      	lsls	r0, r1, #21
 8009080:	f57f af38 	bpl.w	8008ef4 <_scanf_float+0x70>
 8009084:	f1b9 0f00 	cmp.w	r9, #0
 8009088:	f43f af3b 	beq.w	8008f02 <_scanf_float+0x7e>
 800908c:	0588      	lsls	r0, r1, #22
 800908e:	bf58      	it	pl
 8009090:	9802      	ldrpl	r0, [sp, #8]
 8009092:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8009096:	bf58      	it	pl
 8009098:	eba9 0000 	subpl.w	r0, r9, r0
 800909c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80090a0:	bf58      	it	pl
 80090a2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80090a6:	6021      	str	r1, [r4, #0]
 80090a8:	f04f 0900 	mov.w	r9, #0
 80090ac:	e7ab      	b.n	8009006 <_scanf_float+0x182>
 80090ae:	2203      	movs	r2, #3
 80090b0:	e7a9      	b.n	8009006 <_scanf_float+0x182>
 80090b2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80090b6:	9205      	str	r2, [sp, #20]
 80090b8:	4631      	mov	r1, r6
 80090ba:	4638      	mov	r0, r7
 80090bc:	4798      	blx	r3
 80090be:	9a05      	ldr	r2, [sp, #20]
 80090c0:	2800      	cmp	r0, #0
 80090c2:	f43f af04 	beq.w	8008ece <_scanf_float+0x4a>
 80090c6:	e715      	b.n	8008ef4 <_scanf_float+0x70>
 80090c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090cc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80090d0:	4632      	mov	r2, r6
 80090d2:	4638      	mov	r0, r7
 80090d4:	4798      	blx	r3
 80090d6:	6923      	ldr	r3, [r4, #16]
 80090d8:	3b01      	subs	r3, #1
 80090da:	6123      	str	r3, [r4, #16]
 80090dc:	e715      	b.n	8008f0a <_scanf_float+0x86>
 80090de:	f10b 33ff 	add.w	r3, fp, #4294967295
 80090e2:	2b06      	cmp	r3, #6
 80090e4:	d80a      	bhi.n	80090fc <_scanf_float+0x278>
 80090e6:	f1bb 0f02 	cmp.w	fp, #2
 80090ea:	d968      	bls.n	80091be <_scanf_float+0x33a>
 80090ec:	f1ab 0b03 	sub.w	fp, fp, #3
 80090f0:	fa5f fb8b 	uxtb.w	fp, fp
 80090f4:	eba5 0b0b 	sub.w	fp, r5, fp
 80090f8:	455d      	cmp	r5, fp
 80090fa:	d14b      	bne.n	8009194 <_scanf_float+0x310>
 80090fc:	6823      	ldr	r3, [r4, #0]
 80090fe:	05da      	lsls	r2, r3, #23
 8009100:	d51f      	bpl.n	8009142 <_scanf_float+0x2be>
 8009102:	055b      	lsls	r3, r3, #21
 8009104:	d468      	bmi.n	80091d8 <_scanf_float+0x354>
 8009106:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800910a:	6923      	ldr	r3, [r4, #16]
 800910c:	2965      	cmp	r1, #101	; 0x65
 800910e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009112:	f105 3bff 	add.w	fp, r5, #4294967295
 8009116:	6123      	str	r3, [r4, #16]
 8009118:	d00d      	beq.n	8009136 <_scanf_float+0x2b2>
 800911a:	2945      	cmp	r1, #69	; 0x45
 800911c:	d00b      	beq.n	8009136 <_scanf_float+0x2b2>
 800911e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009122:	4632      	mov	r2, r6
 8009124:	4638      	mov	r0, r7
 8009126:	4798      	blx	r3
 8009128:	6923      	ldr	r3, [r4, #16]
 800912a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800912e:	3b01      	subs	r3, #1
 8009130:	f1a5 0b02 	sub.w	fp, r5, #2
 8009134:	6123      	str	r3, [r4, #16]
 8009136:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800913a:	4632      	mov	r2, r6
 800913c:	4638      	mov	r0, r7
 800913e:	4798      	blx	r3
 8009140:	465d      	mov	r5, fp
 8009142:	6826      	ldr	r6, [r4, #0]
 8009144:	f016 0610 	ands.w	r6, r6, #16
 8009148:	d17a      	bne.n	8009240 <_scanf_float+0x3bc>
 800914a:	702e      	strb	r6, [r5, #0]
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009156:	d142      	bne.n	80091de <_scanf_float+0x35a>
 8009158:	9b02      	ldr	r3, [sp, #8]
 800915a:	eba9 0303 	sub.w	r3, r9, r3
 800915e:	425a      	negs	r2, r3
 8009160:	2b00      	cmp	r3, #0
 8009162:	d149      	bne.n	80091f8 <_scanf_float+0x374>
 8009164:	2200      	movs	r2, #0
 8009166:	4641      	mov	r1, r8
 8009168:	4638      	mov	r0, r7
 800916a:	f000 fea5 	bl	8009eb8 <_strtod_r>
 800916e:	6825      	ldr	r5, [r4, #0]
 8009170:	f8da 3000 	ldr.w	r3, [sl]
 8009174:	f015 0f02 	tst.w	r5, #2
 8009178:	f103 0204 	add.w	r2, r3, #4
 800917c:	ec59 8b10 	vmov	r8, r9, d0
 8009180:	f8ca 2000 	str.w	r2, [sl]
 8009184:	d043      	beq.n	800920e <_scanf_float+0x38a>
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	e9c3 8900 	strd	r8, r9, [r3]
 800918c:	68e3      	ldr	r3, [r4, #12]
 800918e:	3301      	adds	r3, #1
 8009190:	60e3      	str	r3, [r4, #12]
 8009192:	e6be      	b.n	8008f12 <_scanf_float+0x8e>
 8009194:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009198:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800919c:	4632      	mov	r2, r6
 800919e:	4638      	mov	r0, r7
 80091a0:	4798      	blx	r3
 80091a2:	6923      	ldr	r3, [r4, #16]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	6123      	str	r3, [r4, #16]
 80091a8:	e7a6      	b.n	80090f8 <_scanf_float+0x274>
 80091aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091ae:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80091b2:	4632      	mov	r2, r6
 80091b4:	4638      	mov	r0, r7
 80091b6:	4798      	blx	r3
 80091b8:	6923      	ldr	r3, [r4, #16]
 80091ba:	3b01      	subs	r3, #1
 80091bc:	6123      	str	r3, [r4, #16]
 80091be:	4545      	cmp	r5, r8
 80091c0:	d8f3      	bhi.n	80091aa <_scanf_float+0x326>
 80091c2:	e6a5      	b.n	8008f10 <_scanf_float+0x8c>
 80091c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80091c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80091cc:	4632      	mov	r2, r6
 80091ce:	4638      	mov	r0, r7
 80091d0:	4798      	blx	r3
 80091d2:	6923      	ldr	r3, [r4, #16]
 80091d4:	3b01      	subs	r3, #1
 80091d6:	6123      	str	r3, [r4, #16]
 80091d8:	4545      	cmp	r5, r8
 80091da:	d8f3      	bhi.n	80091c4 <_scanf_float+0x340>
 80091dc:	e698      	b.n	8008f10 <_scanf_float+0x8c>
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d0bf      	beq.n	8009164 <_scanf_float+0x2e0>
 80091e4:	9904      	ldr	r1, [sp, #16]
 80091e6:	230a      	movs	r3, #10
 80091e8:	4632      	mov	r2, r6
 80091ea:	3101      	adds	r1, #1
 80091ec:	4638      	mov	r0, r7
 80091ee:	f000 feef 	bl	8009fd0 <_strtol_r>
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	9d04      	ldr	r5, [sp, #16]
 80091f6:	1ac2      	subs	r2, r0, r3
 80091f8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80091fc:	429d      	cmp	r5, r3
 80091fe:	bf28      	it	cs
 8009200:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8009204:	490f      	ldr	r1, [pc, #60]	; (8009244 <_scanf_float+0x3c0>)
 8009206:	4628      	mov	r0, r5
 8009208:	f000 f824 	bl	8009254 <siprintf>
 800920c:	e7aa      	b.n	8009164 <_scanf_float+0x2e0>
 800920e:	f015 0504 	ands.w	r5, r5, #4
 8009212:	d1b8      	bne.n	8009186 <_scanf_float+0x302>
 8009214:	681f      	ldr	r7, [r3, #0]
 8009216:	ee10 2a10 	vmov	r2, s0
 800921a:	464b      	mov	r3, r9
 800921c:	ee10 0a10 	vmov	r0, s0
 8009220:	4649      	mov	r1, r9
 8009222:	f7f7 fc83 	bl	8000b2c <__aeabi_dcmpun>
 8009226:	b128      	cbz	r0, 8009234 <_scanf_float+0x3b0>
 8009228:	4628      	mov	r0, r5
 800922a:	f000 f80d 	bl	8009248 <nanf>
 800922e:	ed87 0a00 	vstr	s0, [r7]
 8009232:	e7ab      	b.n	800918c <_scanf_float+0x308>
 8009234:	4640      	mov	r0, r8
 8009236:	4649      	mov	r1, r9
 8009238:	f7f7 fcd6 	bl	8000be8 <__aeabi_d2f>
 800923c:	6038      	str	r0, [r7, #0]
 800923e:	e7a5      	b.n	800918c <_scanf_float+0x308>
 8009240:	2600      	movs	r6, #0
 8009242:	e666      	b.n	8008f12 <_scanf_float+0x8e>
 8009244:	0800c0ac 	.word	0x0800c0ac

08009248 <nanf>:
 8009248:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009250 <nanf+0x8>
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	7fc00000 	.word	0x7fc00000

08009254 <siprintf>:
 8009254:	b40e      	push	{r1, r2, r3}
 8009256:	b500      	push	{lr}
 8009258:	b09c      	sub	sp, #112	; 0x70
 800925a:	ab1d      	add	r3, sp, #116	; 0x74
 800925c:	9002      	str	r0, [sp, #8]
 800925e:	9006      	str	r0, [sp, #24]
 8009260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009264:	4809      	ldr	r0, [pc, #36]	; (800928c <siprintf+0x38>)
 8009266:	9107      	str	r1, [sp, #28]
 8009268:	9104      	str	r1, [sp, #16]
 800926a:	4909      	ldr	r1, [pc, #36]	; (8009290 <siprintf+0x3c>)
 800926c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009270:	9105      	str	r1, [sp, #20]
 8009272:	6800      	ldr	r0, [r0, #0]
 8009274:	9301      	str	r3, [sp, #4]
 8009276:	a902      	add	r1, sp, #8
 8009278:	f002 fd70 	bl	800bd5c <_svfiprintf_r>
 800927c:	9b02      	ldr	r3, [sp, #8]
 800927e:	2200      	movs	r2, #0
 8009280:	701a      	strb	r2, [r3, #0]
 8009282:	b01c      	add	sp, #112	; 0x70
 8009284:	f85d eb04 	ldr.w	lr, [sp], #4
 8009288:	b003      	add	sp, #12
 800928a:	4770      	bx	lr
 800928c:	20000040 	.word	0x20000040
 8009290:	ffff0208 	.word	0xffff0208

08009294 <sulp>:
 8009294:	b570      	push	{r4, r5, r6, lr}
 8009296:	4604      	mov	r4, r0
 8009298:	460d      	mov	r5, r1
 800929a:	ec45 4b10 	vmov	d0, r4, r5
 800929e:	4616      	mov	r6, r2
 80092a0:	f002 fb18 	bl	800b8d4 <__ulp>
 80092a4:	ec51 0b10 	vmov	r0, r1, d0
 80092a8:	b17e      	cbz	r6, 80092ca <sulp+0x36>
 80092aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80092ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	dd09      	ble.n	80092ca <sulp+0x36>
 80092b6:	051b      	lsls	r3, r3, #20
 80092b8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80092bc:	2400      	movs	r4, #0
 80092be:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80092c2:	4622      	mov	r2, r4
 80092c4:	462b      	mov	r3, r5
 80092c6:	f7f7 f997 	bl	80005f8 <__aeabi_dmul>
 80092ca:	bd70      	pop	{r4, r5, r6, pc}
 80092cc:	0000      	movs	r0, r0
	...

080092d0 <_strtod_l>:
 80092d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d4:	461f      	mov	r7, r3
 80092d6:	b0a1      	sub	sp, #132	; 0x84
 80092d8:	2300      	movs	r3, #0
 80092da:	4681      	mov	r9, r0
 80092dc:	4638      	mov	r0, r7
 80092de:	460e      	mov	r6, r1
 80092e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80092e2:	931c      	str	r3, [sp, #112]	; 0x70
 80092e4:	f001 fff5 	bl	800b2d2 <__localeconv_l>
 80092e8:	4680      	mov	r8, r0
 80092ea:	6800      	ldr	r0, [r0, #0]
 80092ec:	f7f6 ff70 	bl	80001d0 <strlen>
 80092f0:	f04f 0a00 	mov.w	sl, #0
 80092f4:	4604      	mov	r4, r0
 80092f6:	f04f 0b00 	mov.w	fp, #0
 80092fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80092fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80092fe:	781a      	ldrb	r2, [r3, #0]
 8009300:	2a0d      	cmp	r2, #13
 8009302:	d832      	bhi.n	800936a <_strtod_l+0x9a>
 8009304:	2a09      	cmp	r2, #9
 8009306:	d236      	bcs.n	8009376 <_strtod_l+0xa6>
 8009308:	2a00      	cmp	r2, #0
 800930a:	d03e      	beq.n	800938a <_strtod_l+0xba>
 800930c:	2300      	movs	r3, #0
 800930e:	930d      	str	r3, [sp, #52]	; 0x34
 8009310:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009312:	782b      	ldrb	r3, [r5, #0]
 8009314:	2b30      	cmp	r3, #48	; 0x30
 8009316:	f040 80ac 	bne.w	8009472 <_strtod_l+0x1a2>
 800931a:	786b      	ldrb	r3, [r5, #1]
 800931c:	2b58      	cmp	r3, #88	; 0x58
 800931e:	d001      	beq.n	8009324 <_strtod_l+0x54>
 8009320:	2b78      	cmp	r3, #120	; 0x78
 8009322:	d167      	bne.n	80093f4 <_strtod_l+0x124>
 8009324:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009326:	9301      	str	r3, [sp, #4]
 8009328:	ab1c      	add	r3, sp, #112	; 0x70
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	9702      	str	r7, [sp, #8]
 800932e:	ab1d      	add	r3, sp, #116	; 0x74
 8009330:	4a88      	ldr	r2, [pc, #544]	; (8009554 <_strtod_l+0x284>)
 8009332:	a91b      	add	r1, sp, #108	; 0x6c
 8009334:	4648      	mov	r0, r9
 8009336:	f001 fcf2 	bl	800ad1e <__gethex>
 800933a:	f010 0407 	ands.w	r4, r0, #7
 800933e:	4606      	mov	r6, r0
 8009340:	d005      	beq.n	800934e <_strtod_l+0x7e>
 8009342:	2c06      	cmp	r4, #6
 8009344:	d12b      	bne.n	800939e <_strtod_l+0xce>
 8009346:	3501      	adds	r5, #1
 8009348:	2300      	movs	r3, #0
 800934a:	951b      	str	r5, [sp, #108]	; 0x6c
 800934c:	930d      	str	r3, [sp, #52]	; 0x34
 800934e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009350:	2b00      	cmp	r3, #0
 8009352:	f040 859a 	bne.w	8009e8a <_strtod_l+0xbba>
 8009356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009358:	b1e3      	cbz	r3, 8009394 <_strtod_l+0xc4>
 800935a:	4652      	mov	r2, sl
 800935c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009360:	ec43 2b10 	vmov	d0, r2, r3
 8009364:	b021      	add	sp, #132	; 0x84
 8009366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936a:	2a2b      	cmp	r2, #43	; 0x2b
 800936c:	d015      	beq.n	800939a <_strtod_l+0xca>
 800936e:	2a2d      	cmp	r2, #45	; 0x2d
 8009370:	d004      	beq.n	800937c <_strtod_l+0xac>
 8009372:	2a20      	cmp	r2, #32
 8009374:	d1ca      	bne.n	800930c <_strtod_l+0x3c>
 8009376:	3301      	adds	r3, #1
 8009378:	931b      	str	r3, [sp, #108]	; 0x6c
 800937a:	e7bf      	b.n	80092fc <_strtod_l+0x2c>
 800937c:	2201      	movs	r2, #1
 800937e:	920d      	str	r2, [sp, #52]	; 0x34
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	921b      	str	r2, [sp, #108]	; 0x6c
 8009384:	785b      	ldrb	r3, [r3, #1]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1c2      	bne.n	8009310 <_strtod_l+0x40>
 800938a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800938c:	961b      	str	r6, [sp, #108]	; 0x6c
 800938e:	2b00      	cmp	r3, #0
 8009390:	f040 8579 	bne.w	8009e86 <_strtod_l+0xbb6>
 8009394:	4652      	mov	r2, sl
 8009396:	465b      	mov	r3, fp
 8009398:	e7e2      	b.n	8009360 <_strtod_l+0x90>
 800939a:	2200      	movs	r2, #0
 800939c:	e7ef      	b.n	800937e <_strtod_l+0xae>
 800939e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80093a0:	b13a      	cbz	r2, 80093b2 <_strtod_l+0xe2>
 80093a2:	2135      	movs	r1, #53	; 0x35
 80093a4:	a81e      	add	r0, sp, #120	; 0x78
 80093a6:	f002 fb8d 	bl	800bac4 <__copybits>
 80093aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80093ac:	4648      	mov	r0, r9
 80093ae:	f001 fffa 	bl	800b3a6 <_Bfree>
 80093b2:	3c01      	subs	r4, #1
 80093b4:	2c04      	cmp	r4, #4
 80093b6:	d806      	bhi.n	80093c6 <_strtod_l+0xf6>
 80093b8:	e8df f004 	tbb	[pc, r4]
 80093bc:	1714030a 	.word	0x1714030a
 80093c0:	0a          	.byte	0x0a
 80093c1:	00          	.byte	0x00
 80093c2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80093c6:	0730      	lsls	r0, r6, #28
 80093c8:	d5c1      	bpl.n	800934e <_strtod_l+0x7e>
 80093ca:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80093ce:	e7be      	b.n	800934e <_strtod_l+0x7e>
 80093d0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80093d4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80093d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80093da:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80093de:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80093e2:	e7f0      	b.n	80093c6 <_strtod_l+0xf6>
 80093e4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8009558 <_strtod_l+0x288>
 80093e8:	e7ed      	b.n	80093c6 <_strtod_l+0xf6>
 80093ea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80093ee:	f04f 3aff 	mov.w	sl, #4294967295
 80093f2:	e7e8      	b.n	80093c6 <_strtod_l+0xf6>
 80093f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80093f6:	1c5a      	adds	r2, r3, #1
 80093f8:	921b      	str	r2, [sp, #108]	; 0x6c
 80093fa:	785b      	ldrb	r3, [r3, #1]
 80093fc:	2b30      	cmp	r3, #48	; 0x30
 80093fe:	d0f9      	beq.n	80093f4 <_strtod_l+0x124>
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0a4      	beq.n	800934e <_strtod_l+0x7e>
 8009404:	2301      	movs	r3, #1
 8009406:	2500      	movs	r5, #0
 8009408:	9306      	str	r3, [sp, #24]
 800940a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800940c:	9308      	str	r3, [sp, #32]
 800940e:	9507      	str	r5, [sp, #28]
 8009410:	9505      	str	r5, [sp, #20]
 8009412:	220a      	movs	r2, #10
 8009414:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8009416:	7807      	ldrb	r7, [r0, #0]
 8009418:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800941c:	b2d9      	uxtb	r1, r3
 800941e:	2909      	cmp	r1, #9
 8009420:	d929      	bls.n	8009476 <_strtod_l+0x1a6>
 8009422:	4622      	mov	r2, r4
 8009424:	f8d8 1000 	ldr.w	r1, [r8]
 8009428:	f002 fda0 	bl	800bf6c <strncmp>
 800942c:	2800      	cmp	r0, #0
 800942e:	d031      	beq.n	8009494 <_strtod_l+0x1c4>
 8009430:	2000      	movs	r0, #0
 8009432:	9c05      	ldr	r4, [sp, #20]
 8009434:	9004      	str	r0, [sp, #16]
 8009436:	463b      	mov	r3, r7
 8009438:	4602      	mov	r2, r0
 800943a:	2b65      	cmp	r3, #101	; 0x65
 800943c:	d001      	beq.n	8009442 <_strtod_l+0x172>
 800943e:	2b45      	cmp	r3, #69	; 0x45
 8009440:	d114      	bne.n	800946c <_strtod_l+0x19c>
 8009442:	b924      	cbnz	r4, 800944e <_strtod_l+0x17e>
 8009444:	b910      	cbnz	r0, 800944c <_strtod_l+0x17c>
 8009446:	9b06      	ldr	r3, [sp, #24]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d09e      	beq.n	800938a <_strtod_l+0xba>
 800944c:	2400      	movs	r4, #0
 800944e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8009450:	1c73      	adds	r3, r6, #1
 8009452:	931b      	str	r3, [sp, #108]	; 0x6c
 8009454:	7873      	ldrb	r3, [r6, #1]
 8009456:	2b2b      	cmp	r3, #43	; 0x2b
 8009458:	d078      	beq.n	800954c <_strtod_l+0x27c>
 800945a:	2b2d      	cmp	r3, #45	; 0x2d
 800945c:	d070      	beq.n	8009540 <_strtod_l+0x270>
 800945e:	f04f 0c00 	mov.w	ip, #0
 8009462:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8009466:	2f09      	cmp	r7, #9
 8009468:	d97c      	bls.n	8009564 <_strtod_l+0x294>
 800946a:	961b      	str	r6, [sp, #108]	; 0x6c
 800946c:	f04f 0e00 	mov.w	lr, #0
 8009470:	e09a      	b.n	80095a8 <_strtod_l+0x2d8>
 8009472:	2300      	movs	r3, #0
 8009474:	e7c7      	b.n	8009406 <_strtod_l+0x136>
 8009476:	9905      	ldr	r1, [sp, #20]
 8009478:	2908      	cmp	r1, #8
 800947a:	bfdd      	ittte	le
 800947c:	9907      	ldrle	r1, [sp, #28]
 800947e:	fb02 3301 	mlale	r3, r2, r1, r3
 8009482:	9307      	strle	r3, [sp, #28]
 8009484:	fb02 3505 	mlagt	r5, r2, r5, r3
 8009488:	9b05      	ldr	r3, [sp, #20]
 800948a:	3001      	adds	r0, #1
 800948c:	3301      	adds	r3, #1
 800948e:	9305      	str	r3, [sp, #20]
 8009490:	901b      	str	r0, [sp, #108]	; 0x6c
 8009492:	e7bf      	b.n	8009414 <_strtod_l+0x144>
 8009494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009496:	191a      	adds	r2, r3, r4
 8009498:	921b      	str	r2, [sp, #108]	; 0x6c
 800949a:	9a05      	ldr	r2, [sp, #20]
 800949c:	5d1b      	ldrb	r3, [r3, r4]
 800949e:	2a00      	cmp	r2, #0
 80094a0:	d037      	beq.n	8009512 <_strtod_l+0x242>
 80094a2:	9c05      	ldr	r4, [sp, #20]
 80094a4:	4602      	mov	r2, r0
 80094a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80094aa:	2909      	cmp	r1, #9
 80094ac:	d913      	bls.n	80094d6 <_strtod_l+0x206>
 80094ae:	2101      	movs	r1, #1
 80094b0:	9104      	str	r1, [sp, #16]
 80094b2:	e7c2      	b.n	800943a <_strtod_l+0x16a>
 80094b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80094b6:	1c5a      	adds	r2, r3, #1
 80094b8:	921b      	str	r2, [sp, #108]	; 0x6c
 80094ba:	785b      	ldrb	r3, [r3, #1]
 80094bc:	3001      	adds	r0, #1
 80094be:	2b30      	cmp	r3, #48	; 0x30
 80094c0:	d0f8      	beq.n	80094b4 <_strtod_l+0x1e4>
 80094c2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80094c6:	2a08      	cmp	r2, #8
 80094c8:	f200 84e4 	bhi.w	8009e94 <_strtod_l+0xbc4>
 80094cc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80094ce:	9208      	str	r2, [sp, #32]
 80094d0:	4602      	mov	r2, r0
 80094d2:	2000      	movs	r0, #0
 80094d4:	4604      	mov	r4, r0
 80094d6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80094da:	f100 0101 	add.w	r1, r0, #1
 80094de:	d012      	beq.n	8009506 <_strtod_l+0x236>
 80094e0:	440a      	add	r2, r1
 80094e2:	eb00 0c04 	add.w	ip, r0, r4
 80094e6:	4621      	mov	r1, r4
 80094e8:	270a      	movs	r7, #10
 80094ea:	458c      	cmp	ip, r1
 80094ec:	d113      	bne.n	8009516 <_strtod_l+0x246>
 80094ee:	1821      	adds	r1, r4, r0
 80094f0:	2908      	cmp	r1, #8
 80094f2:	f104 0401 	add.w	r4, r4, #1
 80094f6:	4404      	add	r4, r0
 80094f8:	dc19      	bgt.n	800952e <_strtod_l+0x25e>
 80094fa:	9b07      	ldr	r3, [sp, #28]
 80094fc:	210a      	movs	r1, #10
 80094fe:	fb01 e303 	mla	r3, r1, r3, lr
 8009502:	9307      	str	r3, [sp, #28]
 8009504:	2100      	movs	r1, #0
 8009506:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009508:	1c58      	adds	r0, r3, #1
 800950a:	901b      	str	r0, [sp, #108]	; 0x6c
 800950c:	785b      	ldrb	r3, [r3, #1]
 800950e:	4608      	mov	r0, r1
 8009510:	e7c9      	b.n	80094a6 <_strtod_l+0x1d6>
 8009512:	9805      	ldr	r0, [sp, #20]
 8009514:	e7d3      	b.n	80094be <_strtod_l+0x1ee>
 8009516:	2908      	cmp	r1, #8
 8009518:	f101 0101 	add.w	r1, r1, #1
 800951c:	dc03      	bgt.n	8009526 <_strtod_l+0x256>
 800951e:	9b07      	ldr	r3, [sp, #28]
 8009520:	437b      	muls	r3, r7
 8009522:	9307      	str	r3, [sp, #28]
 8009524:	e7e1      	b.n	80094ea <_strtod_l+0x21a>
 8009526:	2910      	cmp	r1, #16
 8009528:	bfd8      	it	le
 800952a:	437d      	mulle	r5, r7
 800952c:	e7dd      	b.n	80094ea <_strtod_l+0x21a>
 800952e:	2c10      	cmp	r4, #16
 8009530:	bfdc      	itt	le
 8009532:	210a      	movle	r1, #10
 8009534:	fb01 e505 	mlale	r5, r1, r5, lr
 8009538:	e7e4      	b.n	8009504 <_strtod_l+0x234>
 800953a:	2301      	movs	r3, #1
 800953c:	9304      	str	r3, [sp, #16]
 800953e:	e781      	b.n	8009444 <_strtod_l+0x174>
 8009540:	f04f 0c01 	mov.w	ip, #1
 8009544:	1cb3      	adds	r3, r6, #2
 8009546:	931b      	str	r3, [sp, #108]	; 0x6c
 8009548:	78b3      	ldrb	r3, [r6, #2]
 800954a:	e78a      	b.n	8009462 <_strtod_l+0x192>
 800954c:	f04f 0c00 	mov.w	ip, #0
 8009550:	e7f8      	b.n	8009544 <_strtod_l+0x274>
 8009552:	bf00      	nop
 8009554:	0800c0b4 	.word	0x0800c0b4
 8009558:	7ff00000 	.word	0x7ff00000
 800955c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800955e:	1c5f      	adds	r7, r3, #1
 8009560:	971b      	str	r7, [sp, #108]	; 0x6c
 8009562:	785b      	ldrb	r3, [r3, #1]
 8009564:	2b30      	cmp	r3, #48	; 0x30
 8009566:	d0f9      	beq.n	800955c <_strtod_l+0x28c>
 8009568:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800956c:	2f08      	cmp	r7, #8
 800956e:	f63f af7d 	bhi.w	800946c <_strtod_l+0x19c>
 8009572:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8009576:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009578:	930a      	str	r3, [sp, #40]	; 0x28
 800957a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800957c:	1c5f      	adds	r7, r3, #1
 800957e:	971b      	str	r7, [sp, #108]	; 0x6c
 8009580:	785b      	ldrb	r3, [r3, #1]
 8009582:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8009586:	f1b8 0f09 	cmp.w	r8, #9
 800958a:	d937      	bls.n	80095fc <_strtod_l+0x32c>
 800958c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800958e:	1a7f      	subs	r7, r7, r1
 8009590:	2f08      	cmp	r7, #8
 8009592:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009596:	dc37      	bgt.n	8009608 <_strtod_l+0x338>
 8009598:	45be      	cmp	lr, r7
 800959a:	bfa8      	it	ge
 800959c:	46be      	movge	lr, r7
 800959e:	f1bc 0f00 	cmp.w	ip, #0
 80095a2:	d001      	beq.n	80095a8 <_strtod_l+0x2d8>
 80095a4:	f1ce 0e00 	rsb	lr, lr, #0
 80095a8:	2c00      	cmp	r4, #0
 80095aa:	d151      	bne.n	8009650 <_strtod_l+0x380>
 80095ac:	2800      	cmp	r0, #0
 80095ae:	f47f aece 	bne.w	800934e <_strtod_l+0x7e>
 80095b2:	9a06      	ldr	r2, [sp, #24]
 80095b4:	2a00      	cmp	r2, #0
 80095b6:	f47f aeca 	bne.w	800934e <_strtod_l+0x7e>
 80095ba:	9a04      	ldr	r2, [sp, #16]
 80095bc:	2a00      	cmp	r2, #0
 80095be:	f47f aee4 	bne.w	800938a <_strtod_l+0xba>
 80095c2:	2b4e      	cmp	r3, #78	; 0x4e
 80095c4:	d027      	beq.n	8009616 <_strtod_l+0x346>
 80095c6:	dc21      	bgt.n	800960c <_strtod_l+0x33c>
 80095c8:	2b49      	cmp	r3, #73	; 0x49
 80095ca:	f47f aede 	bne.w	800938a <_strtod_l+0xba>
 80095ce:	49a0      	ldr	r1, [pc, #640]	; (8009850 <_strtod_l+0x580>)
 80095d0:	a81b      	add	r0, sp, #108	; 0x6c
 80095d2:	f001 fdd7 	bl	800b184 <__match>
 80095d6:	2800      	cmp	r0, #0
 80095d8:	f43f aed7 	beq.w	800938a <_strtod_l+0xba>
 80095dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095de:	499d      	ldr	r1, [pc, #628]	; (8009854 <_strtod_l+0x584>)
 80095e0:	3b01      	subs	r3, #1
 80095e2:	a81b      	add	r0, sp, #108	; 0x6c
 80095e4:	931b      	str	r3, [sp, #108]	; 0x6c
 80095e6:	f001 fdcd 	bl	800b184 <__match>
 80095ea:	b910      	cbnz	r0, 80095f2 <_strtod_l+0x322>
 80095ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80095ee:	3301      	adds	r3, #1
 80095f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80095f2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8009868 <_strtod_l+0x598>
 80095f6:	f04f 0a00 	mov.w	sl, #0
 80095fa:	e6a8      	b.n	800934e <_strtod_l+0x7e>
 80095fc:	210a      	movs	r1, #10
 80095fe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009602:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009606:	e7b8      	b.n	800957a <_strtod_l+0x2aa>
 8009608:	46be      	mov	lr, r7
 800960a:	e7c8      	b.n	800959e <_strtod_l+0x2ce>
 800960c:	2b69      	cmp	r3, #105	; 0x69
 800960e:	d0de      	beq.n	80095ce <_strtod_l+0x2fe>
 8009610:	2b6e      	cmp	r3, #110	; 0x6e
 8009612:	f47f aeba 	bne.w	800938a <_strtod_l+0xba>
 8009616:	4990      	ldr	r1, [pc, #576]	; (8009858 <_strtod_l+0x588>)
 8009618:	a81b      	add	r0, sp, #108	; 0x6c
 800961a:	f001 fdb3 	bl	800b184 <__match>
 800961e:	2800      	cmp	r0, #0
 8009620:	f43f aeb3 	beq.w	800938a <_strtod_l+0xba>
 8009624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	2b28      	cmp	r3, #40	; 0x28
 800962a:	d10e      	bne.n	800964a <_strtod_l+0x37a>
 800962c:	aa1e      	add	r2, sp, #120	; 0x78
 800962e:	498b      	ldr	r1, [pc, #556]	; (800985c <_strtod_l+0x58c>)
 8009630:	a81b      	add	r0, sp, #108	; 0x6c
 8009632:	f001 fdbb 	bl	800b1ac <__hexnan>
 8009636:	2805      	cmp	r0, #5
 8009638:	d107      	bne.n	800964a <_strtod_l+0x37a>
 800963a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800963c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8009640:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009644:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009648:	e681      	b.n	800934e <_strtod_l+0x7e>
 800964a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8009870 <_strtod_l+0x5a0>
 800964e:	e7d2      	b.n	80095f6 <_strtod_l+0x326>
 8009650:	ebae 0302 	sub.w	r3, lr, r2
 8009654:	9306      	str	r3, [sp, #24]
 8009656:	9b05      	ldr	r3, [sp, #20]
 8009658:	9807      	ldr	r0, [sp, #28]
 800965a:	2b00      	cmp	r3, #0
 800965c:	bf08      	it	eq
 800965e:	4623      	moveq	r3, r4
 8009660:	2c10      	cmp	r4, #16
 8009662:	9305      	str	r3, [sp, #20]
 8009664:	46a0      	mov	r8, r4
 8009666:	bfa8      	it	ge
 8009668:	f04f 0810 	movge.w	r8, #16
 800966c:	f7f6 ff4a 	bl	8000504 <__aeabi_ui2d>
 8009670:	2c09      	cmp	r4, #9
 8009672:	4682      	mov	sl, r0
 8009674:	468b      	mov	fp, r1
 8009676:	dc13      	bgt.n	80096a0 <_strtod_l+0x3d0>
 8009678:	9b06      	ldr	r3, [sp, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	f43f ae67 	beq.w	800934e <_strtod_l+0x7e>
 8009680:	9b06      	ldr	r3, [sp, #24]
 8009682:	dd7a      	ble.n	800977a <_strtod_l+0x4aa>
 8009684:	2b16      	cmp	r3, #22
 8009686:	dc61      	bgt.n	800974c <_strtod_l+0x47c>
 8009688:	4a75      	ldr	r2, [pc, #468]	; (8009860 <_strtod_l+0x590>)
 800968a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800968e:	e9de 0100 	ldrd	r0, r1, [lr]
 8009692:	4652      	mov	r2, sl
 8009694:	465b      	mov	r3, fp
 8009696:	f7f6 ffaf 	bl	80005f8 <__aeabi_dmul>
 800969a:	4682      	mov	sl, r0
 800969c:	468b      	mov	fp, r1
 800969e:	e656      	b.n	800934e <_strtod_l+0x7e>
 80096a0:	4b6f      	ldr	r3, [pc, #444]	; (8009860 <_strtod_l+0x590>)
 80096a2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80096a6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80096aa:	f7f6 ffa5 	bl	80005f8 <__aeabi_dmul>
 80096ae:	4606      	mov	r6, r0
 80096b0:	4628      	mov	r0, r5
 80096b2:	460f      	mov	r7, r1
 80096b4:	f7f6 ff26 	bl	8000504 <__aeabi_ui2d>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4630      	mov	r0, r6
 80096be:	4639      	mov	r1, r7
 80096c0:	f7f6 fde4 	bl	800028c <__adddf3>
 80096c4:	2c0f      	cmp	r4, #15
 80096c6:	4682      	mov	sl, r0
 80096c8:	468b      	mov	fp, r1
 80096ca:	ddd5      	ble.n	8009678 <_strtod_l+0x3a8>
 80096cc:	9b06      	ldr	r3, [sp, #24]
 80096ce:	eba4 0808 	sub.w	r8, r4, r8
 80096d2:	4498      	add	r8, r3
 80096d4:	f1b8 0f00 	cmp.w	r8, #0
 80096d8:	f340 8096 	ble.w	8009808 <_strtod_l+0x538>
 80096dc:	f018 030f 	ands.w	r3, r8, #15
 80096e0:	d00a      	beq.n	80096f8 <_strtod_l+0x428>
 80096e2:	495f      	ldr	r1, [pc, #380]	; (8009860 <_strtod_l+0x590>)
 80096e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80096e8:	4652      	mov	r2, sl
 80096ea:	465b      	mov	r3, fp
 80096ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f0:	f7f6 ff82 	bl	80005f8 <__aeabi_dmul>
 80096f4:	4682      	mov	sl, r0
 80096f6:	468b      	mov	fp, r1
 80096f8:	f038 080f 	bics.w	r8, r8, #15
 80096fc:	d073      	beq.n	80097e6 <_strtod_l+0x516>
 80096fe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009702:	dd47      	ble.n	8009794 <_strtod_l+0x4c4>
 8009704:	2400      	movs	r4, #0
 8009706:	46a0      	mov	r8, r4
 8009708:	9407      	str	r4, [sp, #28]
 800970a:	9405      	str	r4, [sp, #20]
 800970c:	2322      	movs	r3, #34	; 0x22
 800970e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009868 <_strtod_l+0x598>
 8009712:	f8c9 3000 	str.w	r3, [r9]
 8009716:	f04f 0a00 	mov.w	sl, #0
 800971a:	9b07      	ldr	r3, [sp, #28]
 800971c:	2b00      	cmp	r3, #0
 800971e:	f43f ae16 	beq.w	800934e <_strtod_l+0x7e>
 8009722:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009724:	4648      	mov	r0, r9
 8009726:	f001 fe3e 	bl	800b3a6 <_Bfree>
 800972a:	9905      	ldr	r1, [sp, #20]
 800972c:	4648      	mov	r0, r9
 800972e:	f001 fe3a 	bl	800b3a6 <_Bfree>
 8009732:	4641      	mov	r1, r8
 8009734:	4648      	mov	r0, r9
 8009736:	f001 fe36 	bl	800b3a6 <_Bfree>
 800973a:	9907      	ldr	r1, [sp, #28]
 800973c:	4648      	mov	r0, r9
 800973e:	f001 fe32 	bl	800b3a6 <_Bfree>
 8009742:	4621      	mov	r1, r4
 8009744:	4648      	mov	r0, r9
 8009746:	f001 fe2e 	bl	800b3a6 <_Bfree>
 800974a:	e600      	b.n	800934e <_strtod_l+0x7e>
 800974c:	9a06      	ldr	r2, [sp, #24]
 800974e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009752:	4293      	cmp	r3, r2
 8009754:	dbba      	blt.n	80096cc <_strtod_l+0x3fc>
 8009756:	4d42      	ldr	r5, [pc, #264]	; (8009860 <_strtod_l+0x590>)
 8009758:	f1c4 040f 	rsb	r4, r4, #15
 800975c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009760:	4652      	mov	r2, sl
 8009762:	465b      	mov	r3, fp
 8009764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009768:	f7f6 ff46 	bl	80005f8 <__aeabi_dmul>
 800976c:	9b06      	ldr	r3, [sp, #24]
 800976e:	1b1c      	subs	r4, r3, r4
 8009770:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009774:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009778:	e78d      	b.n	8009696 <_strtod_l+0x3c6>
 800977a:	f113 0f16 	cmn.w	r3, #22
 800977e:	dba5      	blt.n	80096cc <_strtod_l+0x3fc>
 8009780:	4a37      	ldr	r2, [pc, #220]	; (8009860 <_strtod_l+0x590>)
 8009782:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8009786:	e9d2 2300 	ldrd	r2, r3, [r2]
 800978a:	4650      	mov	r0, sl
 800978c:	4659      	mov	r1, fp
 800978e:	f7f7 f85d 	bl	800084c <__aeabi_ddiv>
 8009792:	e782      	b.n	800969a <_strtod_l+0x3ca>
 8009794:	2300      	movs	r3, #0
 8009796:	4e33      	ldr	r6, [pc, #204]	; (8009864 <_strtod_l+0x594>)
 8009798:	ea4f 1828 	mov.w	r8, r8, asr #4
 800979c:	4650      	mov	r0, sl
 800979e:	4659      	mov	r1, fp
 80097a0:	461d      	mov	r5, r3
 80097a2:	f1b8 0f01 	cmp.w	r8, #1
 80097a6:	dc21      	bgt.n	80097ec <_strtod_l+0x51c>
 80097a8:	b10b      	cbz	r3, 80097ae <_strtod_l+0x4de>
 80097aa:	4682      	mov	sl, r0
 80097ac:	468b      	mov	fp, r1
 80097ae:	4b2d      	ldr	r3, [pc, #180]	; (8009864 <_strtod_l+0x594>)
 80097b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80097b4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80097b8:	4652      	mov	r2, sl
 80097ba:	465b      	mov	r3, fp
 80097bc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80097c0:	f7f6 ff1a 	bl	80005f8 <__aeabi_dmul>
 80097c4:	4b28      	ldr	r3, [pc, #160]	; (8009868 <_strtod_l+0x598>)
 80097c6:	460a      	mov	r2, r1
 80097c8:	400b      	ands	r3, r1
 80097ca:	4928      	ldr	r1, [pc, #160]	; (800986c <_strtod_l+0x59c>)
 80097cc:	428b      	cmp	r3, r1
 80097ce:	4682      	mov	sl, r0
 80097d0:	d898      	bhi.n	8009704 <_strtod_l+0x434>
 80097d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80097d6:	428b      	cmp	r3, r1
 80097d8:	bf86      	itte	hi
 80097da:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8009874 <_strtod_l+0x5a4>
 80097de:	f04f 3aff 	movhi.w	sl, #4294967295
 80097e2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80097e6:	2300      	movs	r3, #0
 80097e8:	9304      	str	r3, [sp, #16]
 80097ea:	e077      	b.n	80098dc <_strtod_l+0x60c>
 80097ec:	f018 0f01 	tst.w	r8, #1
 80097f0:	d006      	beq.n	8009800 <_strtod_l+0x530>
 80097f2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80097f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097fa:	f7f6 fefd 	bl	80005f8 <__aeabi_dmul>
 80097fe:	2301      	movs	r3, #1
 8009800:	3501      	adds	r5, #1
 8009802:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009806:	e7cc      	b.n	80097a2 <_strtod_l+0x4d2>
 8009808:	d0ed      	beq.n	80097e6 <_strtod_l+0x516>
 800980a:	f1c8 0800 	rsb	r8, r8, #0
 800980e:	f018 020f 	ands.w	r2, r8, #15
 8009812:	d00a      	beq.n	800982a <_strtod_l+0x55a>
 8009814:	4b12      	ldr	r3, [pc, #72]	; (8009860 <_strtod_l+0x590>)
 8009816:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800981a:	4650      	mov	r0, sl
 800981c:	4659      	mov	r1, fp
 800981e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009822:	f7f7 f813 	bl	800084c <__aeabi_ddiv>
 8009826:	4682      	mov	sl, r0
 8009828:	468b      	mov	fp, r1
 800982a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800982e:	d0da      	beq.n	80097e6 <_strtod_l+0x516>
 8009830:	f1b8 0f1f 	cmp.w	r8, #31
 8009834:	dd20      	ble.n	8009878 <_strtod_l+0x5a8>
 8009836:	2400      	movs	r4, #0
 8009838:	46a0      	mov	r8, r4
 800983a:	9407      	str	r4, [sp, #28]
 800983c:	9405      	str	r4, [sp, #20]
 800983e:	2322      	movs	r3, #34	; 0x22
 8009840:	f04f 0a00 	mov.w	sl, #0
 8009844:	f04f 0b00 	mov.w	fp, #0
 8009848:	f8c9 3000 	str.w	r3, [r9]
 800984c:	e765      	b.n	800971a <_strtod_l+0x44a>
 800984e:	bf00      	nop
 8009850:	0800c07d 	.word	0x0800c07d
 8009854:	0800c10b 	.word	0x0800c10b
 8009858:	0800c085 	.word	0x0800c085
 800985c:	0800c0c8 	.word	0x0800c0c8
 8009860:	0800c148 	.word	0x0800c148
 8009864:	0800c120 	.word	0x0800c120
 8009868:	7ff00000 	.word	0x7ff00000
 800986c:	7ca00000 	.word	0x7ca00000
 8009870:	fff80000 	.word	0xfff80000
 8009874:	7fefffff 	.word	0x7fefffff
 8009878:	f018 0310 	ands.w	r3, r8, #16
 800987c:	bf18      	it	ne
 800987e:	236a      	movne	r3, #106	; 0x6a
 8009880:	4da0      	ldr	r5, [pc, #640]	; (8009b04 <_strtod_l+0x834>)
 8009882:	9304      	str	r3, [sp, #16]
 8009884:	4650      	mov	r0, sl
 8009886:	4659      	mov	r1, fp
 8009888:	2300      	movs	r3, #0
 800988a:	f1b8 0f00 	cmp.w	r8, #0
 800988e:	f300 810a 	bgt.w	8009aa6 <_strtod_l+0x7d6>
 8009892:	b10b      	cbz	r3, 8009898 <_strtod_l+0x5c8>
 8009894:	4682      	mov	sl, r0
 8009896:	468b      	mov	fp, r1
 8009898:	9b04      	ldr	r3, [sp, #16]
 800989a:	b1bb      	cbz	r3, 80098cc <_strtod_l+0x5fc>
 800989c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80098a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	4659      	mov	r1, fp
 80098a8:	dd10      	ble.n	80098cc <_strtod_l+0x5fc>
 80098aa:	2b1f      	cmp	r3, #31
 80098ac:	f340 8107 	ble.w	8009abe <_strtod_l+0x7ee>
 80098b0:	2b34      	cmp	r3, #52	; 0x34
 80098b2:	bfde      	ittt	le
 80098b4:	3b20      	suble	r3, #32
 80098b6:	f04f 32ff 	movle.w	r2, #4294967295
 80098ba:	fa02 f303 	lslle.w	r3, r2, r3
 80098be:	f04f 0a00 	mov.w	sl, #0
 80098c2:	bfcc      	ite	gt
 80098c4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80098c8:	ea03 0b01 	andle.w	fp, r3, r1
 80098cc:	2200      	movs	r2, #0
 80098ce:	2300      	movs	r3, #0
 80098d0:	4650      	mov	r0, sl
 80098d2:	4659      	mov	r1, fp
 80098d4:	f7f7 f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80098d8:	2800      	cmp	r0, #0
 80098da:	d1ac      	bne.n	8009836 <_strtod_l+0x566>
 80098dc:	9b07      	ldr	r3, [sp, #28]
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	9a05      	ldr	r2, [sp, #20]
 80098e2:	9908      	ldr	r1, [sp, #32]
 80098e4:	4623      	mov	r3, r4
 80098e6:	4648      	mov	r0, r9
 80098e8:	f001 fdaf 	bl	800b44a <__s2b>
 80098ec:	9007      	str	r0, [sp, #28]
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f43f af08 	beq.w	8009704 <_strtod_l+0x434>
 80098f4:	9a06      	ldr	r2, [sp, #24]
 80098f6:	9b06      	ldr	r3, [sp, #24]
 80098f8:	2a00      	cmp	r2, #0
 80098fa:	f1c3 0300 	rsb	r3, r3, #0
 80098fe:	bfa8      	it	ge
 8009900:	2300      	movge	r3, #0
 8009902:	930e      	str	r3, [sp, #56]	; 0x38
 8009904:	2400      	movs	r4, #0
 8009906:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800990a:	9316      	str	r3, [sp, #88]	; 0x58
 800990c:	46a0      	mov	r8, r4
 800990e:	9b07      	ldr	r3, [sp, #28]
 8009910:	4648      	mov	r0, r9
 8009912:	6859      	ldr	r1, [r3, #4]
 8009914:	f001 fd13 	bl	800b33e <_Balloc>
 8009918:	9005      	str	r0, [sp, #20]
 800991a:	2800      	cmp	r0, #0
 800991c:	f43f aef6 	beq.w	800970c <_strtod_l+0x43c>
 8009920:	9b07      	ldr	r3, [sp, #28]
 8009922:	691a      	ldr	r2, [r3, #16]
 8009924:	3202      	adds	r2, #2
 8009926:	f103 010c 	add.w	r1, r3, #12
 800992a:	0092      	lsls	r2, r2, #2
 800992c:	300c      	adds	r0, #12
 800992e:	f001 fcfb 	bl	800b328 <memcpy>
 8009932:	aa1e      	add	r2, sp, #120	; 0x78
 8009934:	a91d      	add	r1, sp, #116	; 0x74
 8009936:	ec4b ab10 	vmov	d0, sl, fp
 800993a:	4648      	mov	r0, r9
 800993c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8009940:	f002 f83e 	bl	800b9c0 <__d2b>
 8009944:	901c      	str	r0, [sp, #112]	; 0x70
 8009946:	2800      	cmp	r0, #0
 8009948:	f43f aee0 	beq.w	800970c <_strtod_l+0x43c>
 800994c:	2101      	movs	r1, #1
 800994e:	4648      	mov	r0, r9
 8009950:	f001 fe07 	bl	800b562 <__i2b>
 8009954:	4680      	mov	r8, r0
 8009956:	2800      	cmp	r0, #0
 8009958:	f43f aed8 	beq.w	800970c <_strtod_l+0x43c>
 800995c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800995e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009960:	2e00      	cmp	r6, #0
 8009962:	bfab      	itete	ge
 8009964:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009966:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009968:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800996a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800996c:	bfac      	ite	ge
 800996e:	18f7      	addge	r7, r6, r3
 8009970:	1b9d      	sublt	r5, r3, r6
 8009972:	9b04      	ldr	r3, [sp, #16]
 8009974:	1af6      	subs	r6, r6, r3
 8009976:	4416      	add	r6, r2
 8009978:	4b63      	ldr	r3, [pc, #396]	; (8009b08 <_strtod_l+0x838>)
 800997a:	3e01      	subs	r6, #1
 800997c:	429e      	cmp	r6, r3
 800997e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009982:	f280 80af 	bge.w	8009ae4 <_strtod_l+0x814>
 8009986:	1b9b      	subs	r3, r3, r6
 8009988:	2b1f      	cmp	r3, #31
 800998a:	eba2 0203 	sub.w	r2, r2, r3
 800998e:	f04f 0101 	mov.w	r1, #1
 8009992:	f300 809b 	bgt.w	8009acc <_strtod_l+0x7fc>
 8009996:	fa01 f303 	lsl.w	r3, r1, r3
 800999a:	930f      	str	r3, [sp, #60]	; 0x3c
 800999c:	2300      	movs	r3, #0
 800999e:	930a      	str	r3, [sp, #40]	; 0x28
 80099a0:	18be      	adds	r6, r7, r2
 80099a2:	9b04      	ldr	r3, [sp, #16]
 80099a4:	42b7      	cmp	r7, r6
 80099a6:	4415      	add	r5, r2
 80099a8:	441d      	add	r5, r3
 80099aa:	463b      	mov	r3, r7
 80099ac:	bfa8      	it	ge
 80099ae:	4633      	movge	r3, r6
 80099b0:	42ab      	cmp	r3, r5
 80099b2:	bfa8      	it	ge
 80099b4:	462b      	movge	r3, r5
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	bfc2      	ittt	gt
 80099ba:	1af6      	subgt	r6, r6, r3
 80099bc:	1aed      	subgt	r5, r5, r3
 80099be:	1aff      	subgt	r7, r7, r3
 80099c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099c2:	b1bb      	cbz	r3, 80099f4 <_strtod_l+0x724>
 80099c4:	4641      	mov	r1, r8
 80099c6:	461a      	mov	r2, r3
 80099c8:	4648      	mov	r0, r9
 80099ca:	f001 fe69 	bl	800b6a0 <__pow5mult>
 80099ce:	4680      	mov	r8, r0
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f43f ae9b 	beq.w	800970c <_strtod_l+0x43c>
 80099d6:	4601      	mov	r1, r0
 80099d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80099da:	4648      	mov	r0, r9
 80099dc:	f001 fdca 	bl	800b574 <__multiply>
 80099e0:	900c      	str	r0, [sp, #48]	; 0x30
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f43f ae92 	beq.w	800970c <_strtod_l+0x43c>
 80099e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80099ea:	4648      	mov	r0, r9
 80099ec:	f001 fcdb 	bl	800b3a6 <_Bfree>
 80099f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099f2:	931c      	str	r3, [sp, #112]	; 0x70
 80099f4:	2e00      	cmp	r6, #0
 80099f6:	dc7a      	bgt.n	8009aee <_strtod_l+0x81e>
 80099f8:	9b06      	ldr	r3, [sp, #24]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	dd08      	ble.n	8009a10 <_strtod_l+0x740>
 80099fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009a00:	9905      	ldr	r1, [sp, #20]
 8009a02:	4648      	mov	r0, r9
 8009a04:	f001 fe4c 	bl	800b6a0 <__pow5mult>
 8009a08:	9005      	str	r0, [sp, #20]
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f43f ae7e 	beq.w	800970c <_strtod_l+0x43c>
 8009a10:	2d00      	cmp	r5, #0
 8009a12:	dd08      	ble.n	8009a26 <_strtod_l+0x756>
 8009a14:	462a      	mov	r2, r5
 8009a16:	9905      	ldr	r1, [sp, #20]
 8009a18:	4648      	mov	r0, r9
 8009a1a:	f001 fe8f 	bl	800b73c <__lshift>
 8009a1e:	9005      	str	r0, [sp, #20]
 8009a20:	2800      	cmp	r0, #0
 8009a22:	f43f ae73 	beq.w	800970c <_strtod_l+0x43c>
 8009a26:	2f00      	cmp	r7, #0
 8009a28:	dd08      	ble.n	8009a3c <_strtod_l+0x76c>
 8009a2a:	4641      	mov	r1, r8
 8009a2c:	463a      	mov	r2, r7
 8009a2e:	4648      	mov	r0, r9
 8009a30:	f001 fe84 	bl	800b73c <__lshift>
 8009a34:	4680      	mov	r8, r0
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f43f ae68 	beq.w	800970c <_strtod_l+0x43c>
 8009a3c:	9a05      	ldr	r2, [sp, #20]
 8009a3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009a40:	4648      	mov	r0, r9
 8009a42:	f001 fee9 	bl	800b818 <__mdiff>
 8009a46:	4604      	mov	r4, r0
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	f43f ae5f 	beq.w	800970c <_strtod_l+0x43c>
 8009a4e:	68c3      	ldr	r3, [r0, #12]
 8009a50:	930c      	str	r3, [sp, #48]	; 0x30
 8009a52:	2300      	movs	r3, #0
 8009a54:	60c3      	str	r3, [r0, #12]
 8009a56:	4641      	mov	r1, r8
 8009a58:	f001 fec4 	bl	800b7e4 <__mcmp>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	da55      	bge.n	8009b0c <_strtod_l+0x83c>
 8009a60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a62:	b9e3      	cbnz	r3, 8009a9e <_strtod_l+0x7ce>
 8009a64:	f1ba 0f00 	cmp.w	sl, #0
 8009a68:	d119      	bne.n	8009a9e <_strtod_l+0x7ce>
 8009a6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a6e:	b9b3      	cbnz	r3, 8009a9e <_strtod_l+0x7ce>
 8009a70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009a74:	0d1b      	lsrs	r3, r3, #20
 8009a76:	051b      	lsls	r3, r3, #20
 8009a78:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009a7c:	d90f      	bls.n	8009a9e <_strtod_l+0x7ce>
 8009a7e:	6963      	ldr	r3, [r4, #20]
 8009a80:	b913      	cbnz	r3, 8009a88 <_strtod_l+0x7b8>
 8009a82:	6923      	ldr	r3, [r4, #16]
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	dd0a      	ble.n	8009a9e <_strtod_l+0x7ce>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	4648      	mov	r0, r9
 8009a8e:	f001 fe55 	bl	800b73c <__lshift>
 8009a92:	4641      	mov	r1, r8
 8009a94:	4604      	mov	r4, r0
 8009a96:	f001 fea5 	bl	800b7e4 <__mcmp>
 8009a9a:	2800      	cmp	r0, #0
 8009a9c:	dc67      	bgt.n	8009b6e <_strtod_l+0x89e>
 8009a9e:	9b04      	ldr	r3, [sp, #16]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d171      	bne.n	8009b88 <_strtod_l+0x8b8>
 8009aa4:	e63d      	b.n	8009722 <_strtod_l+0x452>
 8009aa6:	f018 0f01 	tst.w	r8, #1
 8009aaa:	d004      	beq.n	8009ab6 <_strtod_l+0x7e6>
 8009aac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ab0:	f7f6 fda2 	bl	80005f8 <__aeabi_dmul>
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009aba:	3508      	adds	r5, #8
 8009abc:	e6e5      	b.n	800988a <_strtod_l+0x5ba>
 8009abe:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ac6:	ea03 0a0a 	and.w	sl, r3, sl
 8009aca:	e6ff      	b.n	80098cc <_strtod_l+0x5fc>
 8009acc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009ad0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009ad4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009ad8:	36e2      	adds	r6, #226	; 0xe2
 8009ada:	fa01 f306 	lsl.w	r3, r1, r6
 8009ade:	930a      	str	r3, [sp, #40]	; 0x28
 8009ae0:	910f      	str	r1, [sp, #60]	; 0x3c
 8009ae2:	e75d      	b.n	80099a0 <_strtod_l+0x6d0>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ae8:	2301      	movs	r3, #1
 8009aea:	930f      	str	r3, [sp, #60]	; 0x3c
 8009aec:	e758      	b.n	80099a0 <_strtod_l+0x6d0>
 8009aee:	4632      	mov	r2, r6
 8009af0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009af2:	4648      	mov	r0, r9
 8009af4:	f001 fe22 	bl	800b73c <__lshift>
 8009af8:	901c      	str	r0, [sp, #112]	; 0x70
 8009afa:	2800      	cmp	r0, #0
 8009afc:	f47f af7c 	bne.w	80099f8 <_strtod_l+0x728>
 8009b00:	e604      	b.n	800970c <_strtod_l+0x43c>
 8009b02:	bf00      	nop
 8009b04:	0800c0e0 	.word	0x0800c0e0
 8009b08:	fffffc02 	.word	0xfffffc02
 8009b0c:	465d      	mov	r5, fp
 8009b0e:	f040 8086 	bne.w	8009c1e <_strtod_l+0x94e>
 8009b12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b14:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009b18:	b32a      	cbz	r2, 8009b66 <_strtod_l+0x896>
 8009b1a:	4aaf      	ldr	r2, [pc, #700]	; (8009dd8 <_strtod_l+0xb08>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d153      	bne.n	8009bc8 <_strtod_l+0x8f8>
 8009b20:	9b04      	ldr	r3, [sp, #16]
 8009b22:	4650      	mov	r0, sl
 8009b24:	b1d3      	cbz	r3, 8009b5c <_strtod_l+0x88c>
 8009b26:	4aad      	ldr	r2, [pc, #692]	; (8009ddc <_strtod_l+0xb0c>)
 8009b28:	402a      	ands	r2, r5
 8009b2a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009b2e:	f04f 31ff 	mov.w	r1, #4294967295
 8009b32:	d816      	bhi.n	8009b62 <_strtod_l+0x892>
 8009b34:	0d12      	lsrs	r2, r2, #20
 8009b36:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b3e:	4298      	cmp	r0, r3
 8009b40:	d142      	bne.n	8009bc8 <_strtod_l+0x8f8>
 8009b42:	4ba7      	ldr	r3, [pc, #668]	; (8009de0 <_strtod_l+0xb10>)
 8009b44:	429d      	cmp	r5, r3
 8009b46:	d102      	bne.n	8009b4e <_strtod_l+0x87e>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f43f addf 	beq.w	800970c <_strtod_l+0x43c>
 8009b4e:	4ba3      	ldr	r3, [pc, #652]	; (8009ddc <_strtod_l+0xb0c>)
 8009b50:	402b      	ands	r3, r5
 8009b52:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009b56:	f04f 0a00 	mov.w	sl, #0
 8009b5a:	e7a0      	b.n	8009a9e <_strtod_l+0x7ce>
 8009b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009b60:	e7ed      	b.n	8009b3e <_strtod_l+0x86e>
 8009b62:	460b      	mov	r3, r1
 8009b64:	e7eb      	b.n	8009b3e <_strtod_l+0x86e>
 8009b66:	bb7b      	cbnz	r3, 8009bc8 <_strtod_l+0x8f8>
 8009b68:	f1ba 0f00 	cmp.w	sl, #0
 8009b6c:	d12c      	bne.n	8009bc8 <_strtod_l+0x8f8>
 8009b6e:	9904      	ldr	r1, [sp, #16]
 8009b70:	4a9a      	ldr	r2, [pc, #616]	; (8009ddc <_strtod_l+0xb0c>)
 8009b72:	465b      	mov	r3, fp
 8009b74:	b1f1      	cbz	r1, 8009bb4 <_strtod_l+0x8e4>
 8009b76:	ea02 010b 	and.w	r1, r2, fp
 8009b7a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009b7e:	dc19      	bgt.n	8009bb4 <_strtod_l+0x8e4>
 8009b80:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009b84:	f77f ae5b 	ble.w	800983e <_strtod_l+0x56e>
 8009b88:	4a96      	ldr	r2, [pc, #600]	; (8009de4 <_strtod_l+0xb14>)
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009b90:	4650      	mov	r0, sl
 8009b92:	4659      	mov	r1, fp
 8009b94:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009b98:	f7f6 fd2e 	bl	80005f8 <__aeabi_dmul>
 8009b9c:	4682      	mov	sl, r0
 8009b9e:	468b      	mov	fp, r1
 8009ba0:	2900      	cmp	r1, #0
 8009ba2:	f47f adbe 	bne.w	8009722 <_strtod_l+0x452>
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	f47f adbb 	bne.w	8009722 <_strtod_l+0x452>
 8009bac:	2322      	movs	r3, #34	; 0x22
 8009bae:	f8c9 3000 	str.w	r3, [r9]
 8009bb2:	e5b6      	b.n	8009722 <_strtod_l+0x452>
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009bba:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009bbe:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009bc2:	f04f 3aff 	mov.w	sl, #4294967295
 8009bc6:	e76a      	b.n	8009a9e <_strtod_l+0x7ce>
 8009bc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bca:	b193      	cbz	r3, 8009bf2 <_strtod_l+0x922>
 8009bcc:	422b      	tst	r3, r5
 8009bce:	f43f af66 	beq.w	8009a9e <_strtod_l+0x7ce>
 8009bd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bd4:	9a04      	ldr	r2, [sp, #16]
 8009bd6:	4650      	mov	r0, sl
 8009bd8:	4659      	mov	r1, fp
 8009bda:	b173      	cbz	r3, 8009bfa <_strtod_l+0x92a>
 8009bdc:	f7ff fb5a 	bl	8009294 <sulp>
 8009be0:	4602      	mov	r2, r0
 8009be2:	460b      	mov	r3, r1
 8009be4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009be8:	f7f6 fb50 	bl	800028c <__adddf3>
 8009bec:	4682      	mov	sl, r0
 8009bee:	468b      	mov	fp, r1
 8009bf0:	e755      	b.n	8009a9e <_strtod_l+0x7ce>
 8009bf2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009bf4:	ea13 0f0a 	tst.w	r3, sl
 8009bf8:	e7e9      	b.n	8009bce <_strtod_l+0x8fe>
 8009bfa:	f7ff fb4b 	bl	8009294 <sulp>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009c06:	f7f6 fb3f 	bl	8000288 <__aeabi_dsub>
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	4682      	mov	sl, r0
 8009c10:	468b      	mov	fp, r1
 8009c12:	f7f6 ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c16:	2800      	cmp	r0, #0
 8009c18:	f47f ae11 	bne.w	800983e <_strtod_l+0x56e>
 8009c1c:	e73f      	b.n	8009a9e <_strtod_l+0x7ce>
 8009c1e:	4641      	mov	r1, r8
 8009c20:	4620      	mov	r0, r4
 8009c22:	f001 ff1c 	bl	800ba5e <__ratio>
 8009c26:	ec57 6b10 	vmov	r6, r7, d0
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009c30:	ee10 0a10 	vmov	r0, s0
 8009c34:	4639      	mov	r1, r7
 8009c36:	f7f6 ff5b 	bl	8000af0 <__aeabi_dcmple>
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d077      	beq.n	8009d2e <_strtod_l+0xa5e>
 8009c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d04a      	beq.n	8009cda <_strtod_l+0xa0a>
 8009c44:	4b68      	ldr	r3, [pc, #416]	; (8009de8 <_strtod_l+0xb18>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009c4c:	4f66      	ldr	r7, [pc, #408]	; (8009de8 <_strtod_l+0xb18>)
 8009c4e:	2600      	movs	r6, #0
 8009c50:	4b62      	ldr	r3, [pc, #392]	; (8009ddc <_strtod_l+0xb0c>)
 8009c52:	402b      	ands	r3, r5
 8009c54:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c58:	4b64      	ldr	r3, [pc, #400]	; (8009dec <_strtod_l+0xb1c>)
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	f040 80ce 	bne.w	8009dfc <_strtod_l+0xb2c>
 8009c60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009c64:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c68:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8009c6c:	ec4b ab10 	vmov	d0, sl, fp
 8009c70:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8009c74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009c78:	f001 fe2c 	bl	800b8d4 <__ulp>
 8009c7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c80:	ec53 2b10 	vmov	r2, r3, d0
 8009c84:	f7f6 fcb8 	bl	80005f8 <__aeabi_dmul>
 8009c88:	4652      	mov	r2, sl
 8009c8a:	465b      	mov	r3, fp
 8009c8c:	f7f6 fafe 	bl	800028c <__adddf3>
 8009c90:	460b      	mov	r3, r1
 8009c92:	4952      	ldr	r1, [pc, #328]	; (8009ddc <_strtod_l+0xb0c>)
 8009c94:	4a56      	ldr	r2, [pc, #344]	; (8009df0 <_strtod_l+0xb20>)
 8009c96:	4019      	ands	r1, r3
 8009c98:	4291      	cmp	r1, r2
 8009c9a:	4682      	mov	sl, r0
 8009c9c:	d95b      	bls.n	8009d56 <_strtod_l+0xa86>
 8009c9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ca0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d103      	bne.n	8009cb0 <_strtod_l+0x9e0>
 8009ca8:	9b08      	ldr	r3, [sp, #32]
 8009caa:	3301      	adds	r3, #1
 8009cac:	f43f ad2e 	beq.w	800970c <_strtod_l+0x43c>
 8009cb0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8009de0 <_strtod_l+0xb10>
 8009cb4:	f04f 3aff 	mov.w	sl, #4294967295
 8009cb8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009cba:	4648      	mov	r0, r9
 8009cbc:	f001 fb73 	bl	800b3a6 <_Bfree>
 8009cc0:	9905      	ldr	r1, [sp, #20]
 8009cc2:	4648      	mov	r0, r9
 8009cc4:	f001 fb6f 	bl	800b3a6 <_Bfree>
 8009cc8:	4641      	mov	r1, r8
 8009cca:	4648      	mov	r0, r9
 8009ccc:	f001 fb6b 	bl	800b3a6 <_Bfree>
 8009cd0:	4621      	mov	r1, r4
 8009cd2:	4648      	mov	r0, r9
 8009cd4:	f001 fb67 	bl	800b3a6 <_Bfree>
 8009cd8:	e619      	b.n	800990e <_strtod_l+0x63e>
 8009cda:	f1ba 0f00 	cmp.w	sl, #0
 8009cde:	d11a      	bne.n	8009d16 <_strtod_l+0xa46>
 8009ce0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ce4:	b9eb      	cbnz	r3, 8009d22 <_strtod_l+0xa52>
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	4b3f      	ldr	r3, [pc, #252]	; (8009de8 <_strtod_l+0xb18>)
 8009cea:	4630      	mov	r0, r6
 8009cec:	4639      	mov	r1, r7
 8009cee:	f7f6 fef5 	bl	8000adc <__aeabi_dcmplt>
 8009cf2:	b9c8      	cbnz	r0, 8009d28 <_strtod_l+0xa58>
 8009cf4:	4630      	mov	r0, r6
 8009cf6:	4639      	mov	r1, r7
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4b3e      	ldr	r3, [pc, #248]	; (8009df4 <_strtod_l+0xb24>)
 8009cfc:	f7f6 fc7c 	bl	80005f8 <__aeabi_dmul>
 8009d00:	4606      	mov	r6, r0
 8009d02:	460f      	mov	r7, r1
 8009d04:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8009d08:	9618      	str	r6, [sp, #96]	; 0x60
 8009d0a:	9319      	str	r3, [sp, #100]	; 0x64
 8009d0c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8009d10:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009d14:	e79c      	b.n	8009c50 <_strtod_l+0x980>
 8009d16:	f1ba 0f01 	cmp.w	sl, #1
 8009d1a:	d102      	bne.n	8009d22 <_strtod_l+0xa52>
 8009d1c:	2d00      	cmp	r5, #0
 8009d1e:	f43f ad8e 	beq.w	800983e <_strtod_l+0x56e>
 8009d22:	2200      	movs	r2, #0
 8009d24:	4b34      	ldr	r3, [pc, #208]	; (8009df8 <_strtod_l+0xb28>)
 8009d26:	e78f      	b.n	8009c48 <_strtod_l+0x978>
 8009d28:	2600      	movs	r6, #0
 8009d2a:	4f32      	ldr	r7, [pc, #200]	; (8009df4 <_strtod_l+0xb24>)
 8009d2c:	e7ea      	b.n	8009d04 <_strtod_l+0xa34>
 8009d2e:	4b31      	ldr	r3, [pc, #196]	; (8009df4 <_strtod_l+0xb24>)
 8009d30:	4630      	mov	r0, r6
 8009d32:	4639      	mov	r1, r7
 8009d34:	2200      	movs	r2, #0
 8009d36:	f7f6 fc5f 	bl	80005f8 <__aeabi_dmul>
 8009d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	460f      	mov	r7, r1
 8009d40:	b933      	cbnz	r3, 8009d50 <_strtod_l+0xa80>
 8009d42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d46:	9010      	str	r0, [sp, #64]	; 0x40
 8009d48:	9311      	str	r3, [sp, #68]	; 0x44
 8009d4a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d4e:	e7df      	b.n	8009d10 <_strtod_l+0xa40>
 8009d50:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8009d54:	e7f9      	b.n	8009d4a <_strtod_l+0xa7a>
 8009d56:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009d5a:	9b04      	ldr	r3, [sp, #16]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1ab      	bne.n	8009cb8 <_strtod_l+0x9e8>
 8009d60:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d64:	0d1b      	lsrs	r3, r3, #20
 8009d66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d68:	051b      	lsls	r3, r3, #20
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	465d      	mov	r5, fp
 8009d6e:	d1a3      	bne.n	8009cb8 <_strtod_l+0x9e8>
 8009d70:	4639      	mov	r1, r7
 8009d72:	4630      	mov	r0, r6
 8009d74:	f7f6 fef0 	bl	8000b58 <__aeabi_d2iz>
 8009d78:	f7f6 fbd4 	bl	8000524 <__aeabi_i2d>
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4602      	mov	r2, r0
 8009d80:	4639      	mov	r1, r7
 8009d82:	4630      	mov	r0, r6
 8009d84:	f7f6 fa80 	bl	8000288 <__aeabi_dsub>
 8009d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d8a:	4606      	mov	r6, r0
 8009d8c:	460f      	mov	r7, r1
 8009d8e:	b933      	cbnz	r3, 8009d9e <_strtod_l+0xace>
 8009d90:	f1ba 0f00 	cmp.w	sl, #0
 8009d94:	d103      	bne.n	8009d9e <_strtod_l+0xace>
 8009d96:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8009d9a:	2d00      	cmp	r5, #0
 8009d9c:	d06d      	beq.n	8009e7a <_strtod_l+0xbaa>
 8009d9e:	a30a      	add	r3, pc, #40	; (adr r3, 8009dc8 <_strtod_l+0xaf8>)
 8009da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da4:	4630      	mov	r0, r6
 8009da6:	4639      	mov	r1, r7
 8009da8:	f7f6 fe98 	bl	8000adc <__aeabi_dcmplt>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	f47f acb8 	bne.w	8009722 <_strtod_l+0x452>
 8009db2:	a307      	add	r3, pc, #28	; (adr r3, 8009dd0 <_strtod_l+0xb00>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	4630      	mov	r0, r6
 8009dba:	4639      	mov	r1, r7
 8009dbc:	f7f6 feac 	bl	8000b18 <__aeabi_dcmpgt>
 8009dc0:	2800      	cmp	r0, #0
 8009dc2:	f43f af79 	beq.w	8009cb8 <_strtod_l+0x9e8>
 8009dc6:	e4ac      	b.n	8009722 <_strtod_l+0x452>
 8009dc8:	94a03595 	.word	0x94a03595
 8009dcc:	3fdfffff 	.word	0x3fdfffff
 8009dd0:	35afe535 	.word	0x35afe535
 8009dd4:	3fe00000 	.word	0x3fe00000
 8009dd8:	000fffff 	.word	0x000fffff
 8009ddc:	7ff00000 	.word	0x7ff00000
 8009de0:	7fefffff 	.word	0x7fefffff
 8009de4:	39500000 	.word	0x39500000
 8009de8:	3ff00000 	.word	0x3ff00000
 8009dec:	7fe00000 	.word	0x7fe00000
 8009df0:	7c9fffff 	.word	0x7c9fffff
 8009df4:	3fe00000 	.word	0x3fe00000
 8009df8:	bff00000 	.word	0xbff00000
 8009dfc:	9b04      	ldr	r3, [sp, #16]
 8009dfe:	b333      	cbz	r3, 8009e4e <_strtod_l+0xb7e>
 8009e00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e02:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009e06:	d822      	bhi.n	8009e4e <_strtod_l+0xb7e>
 8009e08:	a327      	add	r3, pc, #156	; (adr r3, 8009ea8 <_strtod_l+0xbd8>)
 8009e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0e:	4630      	mov	r0, r6
 8009e10:	4639      	mov	r1, r7
 8009e12:	f7f6 fe6d 	bl	8000af0 <__aeabi_dcmple>
 8009e16:	b1a0      	cbz	r0, 8009e42 <_strtod_l+0xb72>
 8009e18:	4639      	mov	r1, r7
 8009e1a:	4630      	mov	r0, r6
 8009e1c:	f7f6 fec4 	bl	8000ba8 <__aeabi_d2uiz>
 8009e20:	2800      	cmp	r0, #0
 8009e22:	bf08      	it	eq
 8009e24:	2001      	moveq	r0, #1
 8009e26:	f7f6 fb6d 	bl	8000504 <__aeabi_ui2d>
 8009e2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e2c:	4606      	mov	r6, r0
 8009e2e:	460f      	mov	r7, r1
 8009e30:	bb03      	cbnz	r3, 8009e74 <_strtod_l+0xba4>
 8009e32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e36:	9012      	str	r0, [sp, #72]	; 0x48
 8009e38:	9313      	str	r3, [sp, #76]	; 0x4c
 8009e3a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009e3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8009e42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009e46:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	930b      	str	r3, [sp, #44]	; 0x2c
 8009e4e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8009e52:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8009e56:	f001 fd3d 	bl	800b8d4 <__ulp>
 8009e5a:	4650      	mov	r0, sl
 8009e5c:	ec53 2b10 	vmov	r2, r3, d0
 8009e60:	4659      	mov	r1, fp
 8009e62:	f7f6 fbc9 	bl	80005f8 <__aeabi_dmul>
 8009e66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e6a:	f7f6 fa0f 	bl	800028c <__adddf3>
 8009e6e:	4682      	mov	sl, r0
 8009e70:	468b      	mov	fp, r1
 8009e72:	e772      	b.n	8009d5a <_strtod_l+0xa8a>
 8009e74:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8009e78:	e7df      	b.n	8009e3a <_strtod_l+0xb6a>
 8009e7a:	a30d      	add	r3, pc, #52	; (adr r3, 8009eb0 <_strtod_l+0xbe0>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7f6 fe2c 	bl	8000adc <__aeabi_dcmplt>
 8009e84:	e79c      	b.n	8009dc0 <_strtod_l+0xaf0>
 8009e86:	2300      	movs	r3, #0
 8009e88:	930d      	str	r3, [sp, #52]	; 0x34
 8009e8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009e8e:	6013      	str	r3, [r2, #0]
 8009e90:	f7ff ba61 	b.w	8009356 <_strtod_l+0x86>
 8009e94:	2b65      	cmp	r3, #101	; 0x65
 8009e96:	f04f 0200 	mov.w	r2, #0
 8009e9a:	f43f ab4e 	beq.w	800953a <_strtod_l+0x26a>
 8009e9e:	2101      	movs	r1, #1
 8009ea0:	4614      	mov	r4, r2
 8009ea2:	9104      	str	r1, [sp, #16]
 8009ea4:	f7ff bacb 	b.w	800943e <_strtod_l+0x16e>
 8009ea8:	ffc00000 	.word	0xffc00000
 8009eac:	41dfffff 	.word	0x41dfffff
 8009eb0:	94a03595 	.word	0x94a03595
 8009eb4:	3fcfffff 	.word	0x3fcfffff

08009eb8 <_strtod_r>:
 8009eb8:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <_strtod_r+0x18>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	b410      	push	{r4}
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
 8009ec0:	4c04      	ldr	r4, [pc, #16]	; (8009ed4 <_strtod_r+0x1c>)
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	bf08      	it	eq
 8009ec6:	4623      	moveq	r3, r4
 8009ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ecc:	f7ff ba00 	b.w	80092d0 <_strtod_l>
 8009ed0:	20000040 	.word	0x20000040
 8009ed4:	200000a4 	.word	0x200000a4

08009ed8 <_strtol_l.isra.0>:
 8009ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009edc:	4680      	mov	r8, r0
 8009ede:	4689      	mov	r9, r1
 8009ee0:	4692      	mov	sl, r2
 8009ee2:	461e      	mov	r6, r3
 8009ee4:	460f      	mov	r7, r1
 8009ee6:	463d      	mov	r5, r7
 8009ee8:	9808      	ldr	r0, [sp, #32]
 8009eea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009eee:	f001 f9ed 	bl	800b2cc <__locale_ctype_ptr_l>
 8009ef2:	4420      	add	r0, r4
 8009ef4:	7843      	ldrb	r3, [r0, #1]
 8009ef6:	f013 0308 	ands.w	r3, r3, #8
 8009efa:	d132      	bne.n	8009f62 <_strtol_l.isra.0+0x8a>
 8009efc:	2c2d      	cmp	r4, #45	; 0x2d
 8009efe:	d132      	bne.n	8009f66 <_strtol_l.isra.0+0x8e>
 8009f00:	787c      	ldrb	r4, [r7, #1]
 8009f02:	1cbd      	adds	r5, r7, #2
 8009f04:	2201      	movs	r2, #1
 8009f06:	2e00      	cmp	r6, #0
 8009f08:	d05d      	beq.n	8009fc6 <_strtol_l.isra.0+0xee>
 8009f0a:	2e10      	cmp	r6, #16
 8009f0c:	d109      	bne.n	8009f22 <_strtol_l.isra.0+0x4a>
 8009f0e:	2c30      	cmp	r4, #48	; 0x30
 8009f10:	d107      	bne.n	8009f22 <_strtol_l.isra.0+0x4a>
 8009f12:	782b      	ldrb	r3, [r5, #0]
 8009f14:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009f18:	2b58      	cmp	r3, #88	; 0x58
 8009f1a:	d14f      	bne.n	8009fbc <_strtol_l.isra.0+0xe4>
 8009f1c:	786c      	ldrb	r4, [r5, #1]
 8009f1e:	2610      	movs	r6, #16
 8009f20:	3502      	adds	r5, #2
 8009f22:	2a00      	cmp	r2, #0
 8009f24:	bf14      	ite	ne
 8009f26:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009f2a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009f2e:	2700      	movs	r7, #0
 8009f30:	fbb1 fcf6 	udiv	ip, r1, r6
 8009f34:	4638      	mov	r0, r7
 8009f36:	fb06 1e1c 	mls	lr, r6, ip, r1
 8009f3a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009f3e:	2b09      	cmp	r3, #9
 8009f40:	d817      	bhi.n	8009f72 <_strtol_l.isra.0+0x9a>
 8009f42:	461c      	mov	r4, r3
 8009f44:	42a6      	cmp	r6, r4
 8009f46:	dd23      	ble.n	8009f90 <_strtol_l.isra.0+0xb8>
 8009f48:	1c7b      	adds	r3, r7, #1
 8009f4a:	d007      	beq.n	8009f5c <_strtol_l.isra.0+0x84>
 8009f4c:	4584      	cmp	ip, r0
 8009f4e:	d31c      	bcc.n	8009f8a <_strtol_l.isra.0+0xb2>
 8009f50:	d101      	bne.n	8009f56 <_strtol_l.isra.0+0x7e>
 8009f52:	45a6      	cmp	lr, r4
 8009f54:	db19      	blt.n	8009f8a <_strtol_l.isra.0+0xb2>
 8009f56:	fb00 4006 	mla	r0, r0, r6, r4
 8009f5a:	2701      	movs	r7, #1
 8009f5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009f60:	e7eb      	b.n	8009f3a <_strtol_l.isra.0+0x62>
 8009f62:	462f      	mov	r7, r5
 8009f64:	e7bf      	b.n	8009ee6 <_strtol_l.isra.0+0xe>
 8009f66:	2c2b      	cmp	r4, #43	; 0x2b
 8009f68:	bf04      	itt	eq
 8009f6a:	1cbd      	addeq	r5, r7, #2
 8009f6c:	787c      	ldrbeq	r4, [r7, #1]
 8009f6e:	461a      	mov	r2, r3
 8009f70:	e7c9      	b.n	8009f06 <_strtol_l.isra.0+0x2e>
 8009f72:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009f76:	2b19      	cmp	r3, #25
 8009f78:	d801      	bhi.n	8009f7e <_strtol_l.isra.0+0xa6>
 8009f7a:	3c37      	subs	r4, #55	; 0x37
 8009f7c:	e7e2      	b.n	8009f44 <_strtol_l.isra.0+0x6c>
 8009f7e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009f82:	2b19      	cmp	r3, #25
 8009f84:	d804      	bhi.n	8009f90 <_strtol_l.isra.0+0xb8>
 8009f86:	3c57      	subs	r4, #87	; 0x57
 8009f88:	e7dc      	b.n	8009f44 <_strtol_l.isra.0+0x6c>
 8009f8a:	f04f 37ff 	mov.w	r7, #4294967295
 8009f8e:	e7e5      	b.n	8009f5c <_strtol_l.isra.0+0x84>
 8009f90:	1c7b      	adds	r3, r7, #1
 8009f92:	d108      	bne.n	8009fa6 <_strtol_l.isra.0+0xce>
 8009f94:	2322      	movs	r3, #34	; 0x22
 8009f96:	f8c8 3000 	str.w	r3, [r8]
 8009f9a:	4608      	mov	r0, r1
 8009f9c:	f1ba 0f00 	cmp.w	sl, #0
 8009fa0:	d107      	bne.n	8009fb2 <_strtol_l.isra.0+0xda>
 8009fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa6:	b102      	cbz	r2, 8009faa <_strtol_l.isra.0+0xd2>
 8009fa8:	4240      	negs	r0, r0
 8009faa:	f1ba 0f00 	cmp.w	sl, #0
 8009fae:	d0f8      	beq.n	8009fa2 <_strtol_l.isra.0+0xca>
 8009fb0:	b10f      	cbz	r7, 8009fb6 <_strtol_l.isra.0+0xde>
 8009fb2:	f105 39ff 	add.w	r9, r5, #4294967295
 8009fb6:	f8ca 9000 	str.w	r9, [sl]
 8009fba:	e7f2      	b.n	8009fa2 <_strtol_l.isra.0+0xca>
 8009fbc:	2430      	movs	r4, #48	; 0x30
 8009fbe:	2e00      	cmp	r6, #0
 8009fc0:	d1af      	bne.n	8009f22 <_strtol_l.isra.0+0x4a>
 8009fc2:	2608      	movs	r6, #8
 8009fc4:	e7ad      	b.n	8009f22 <_strtol_l.isra.0+0x4a>
 8009fc6:	2c30      	cmp	r4, #48	; 0x30
 8009fc8:	d0a3      	beq.n	8009f12 <_strtol_l.isra.0+0x3a>
 8009fca:	260a      	movs	r6, #10
 8009fcc:	e7a9      	b.n	8009f22 <_strtol_l.isra.0+0x4a>
	...

08009fd0 <_strtol_r>:
 8009fd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fd2:	4c06      	ldr	r4, [pc, #24]	; (8009fec <_strtol_r+0x1c>)
 8009fd4:	4d06      	ldr	r5, [pc, #24]	; (8009ff0 <_strtol_r+0x20>)
 8009fd6:	6824      	ldr	r4, [r4, #0]
 8009fd8:	6a24      	ldr	r4, [r4, #32]
 8009fda:	2c00      	cmp	r4, #0
 8009fdc:	bf08      	it	eq
 8009fde:	462c      	moveq	r4, r5
 8009fe0:	9400      	str	r4, [sp, #0]
 8009fe2:	f7ff ff79 	bl	8009ed8 <_strtol_l.isra.0>
 8009fe6:	b003      	add	sp, #12
 8009fe8:	bd30      	pop	{r4, r5, pc}
 8009fea:	bf00      	nop
 8009fec:	20000040 	.word	0x20000040
 8009ff0:	200000a4 	.word	0x200000a4

08009ff4 <quorem>:
 8009ff4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff8:	6903      	ldr	r3, [r0, #16]
 8009ffa:	690c      	ldr	r4, [r1, #16]
 8009ffc:	42a3      	cmp	r3, r4
 8009ffe:	4680      	mov	r8, r0
 800a000:	f2c0 8082 	blt.w	800a108 <quorem+0x114>
 800a004:	3c01      	subs	r4, #1
 800a006:	f101 0714 	add.w	r7, r1, #20
 800a00a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800a00e:	f100 0614 	add.w	r6, r0, #20
 800a012:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800a016:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800a01a:	eb06 030c 	add.w	r3, r6, ip
 800a01e:	3501      	adds	r5, #1
 800a020:	eb07 090c 	add.w	r9, r7, ip
 800a024:	9301      	str	r3, [sp, #4]
 800a026:	fbb0 f5f5 	udiv	r5, r0, r5
 800a02a:	b395      	cbz	r5, 800a092 <quorem+0x9e>
 800a02c:	f04f 0a00 	mov.w	sl, #0
 800a030:	4638      	mov	r0, r7
 800a032:	46b6      	mov	lr, r6
 800a034:	46d3      	mov	fp, sl
 800a036:	f850 2b04 	ldr.w	r2, [r0], #4
 800a03a:	b293      	uxth	r3, r2
 800a03c:	fb05 a303 	mla	r3, r5, r3, sl
 800a040:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a044:	b29b      	uxth	r3, r3
 800a046:	ebab 0303 	sub.w	r3, fp, r3
 800a04a:	0c12      	lsrs	r2, r2, #16
 800a04c:	f8de b000 	ldr.w	fp, [lr]
 800a050:	fb05 a202 	mla	r2, r5, r2, sl
 800a054:	fa13 f38b 	uxtah	r3, r3, fp
 800a058:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800a05c:	fa1f fb82 	uxth.w	fp, r2
 800a060:	f8de 2000 	ldr.w	r2, [lr]
 800a064:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800a068:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a06c:	b29b      	uxth	r3, r3
 800a06e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a072:	4581      	cmp	r9, r0
 800a074:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800a078:	f84e 3b04 	str.w	r3, [lr], #4
 800a07c:	d2db      	bcs.n	800a036 <quorem+0x42>
 800a07e:	f856 300c 	ldr.w	r3, [r6, ip]
 800a082:	b933      	cbnz	r3, 800a092 <quorem+0x9e>
 800a084:	9b01      	ldr	r3, [sp, #4]
 800a086:	3b04      	subs	r3, #4
 800a088:	429e      	cmp	r6, r3
 800a08a:	461a      	mov	r2, r3
 800a08c:	d330      	bcc.n	800a0f0 <quorem+0xfc>
 800a08e:	f8c8 4010 	str.w	r4, [r8, #16]
 800a092:	4640      	mov	r0, r8
 800a094:	f001 fba6 	bl	800b7e4 <__mcmp>
 800a098:	2800      	cmp	r0, #0
 800a09a:	db25      	blt.n	800a0e8 <quorem+0xf4>
 800a09c:	3501      	adds	r5, #1
 800a09e:	4630      	mov	r0, r6
 800a0a0:	f04f 0c00 	mov.w	ip, #0
 800a0a4:	f857 2b04 	ldr.w	r2, [r7], #4
 800a0a8:	f8d0 e000 	ldr.w	lr, [r0]
 800a0ac:	b293      	uxth	r3, r2
 800a0ae:	ebac 0303 	sub.w	r3, ip, r3
 800a0b2:	0c12      	lsrs	r2, r2, #16
 800a0b4:	fa13 f38e 	uxtah	r3, r3, lr
 800a0b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0c0:	b29b      	uxth	r3, r3
 800a0c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0c6:	45b9      	cmp	r9, r7
 800a0c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0cc:	f840 3b04 	str.w	r3, [r0], #4
 800a0d0:	d2e8      	bcs.n	800a0a4 <quorem+0xb0>
 800a0d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a0d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a0da:	b92a      	cbnz	r2, 800a0e8 <quorem+0xf4>
 800a0dc:	3b04      	subs	r3, #4
 800a0de:	429e      	cmp	r6, r3
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	d30b      	bcc.n	800a0fc <quorem+0x108>
 800a0e4:	f8c8 4010 	str.w	r4, [r8, #16]
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	b003      	add	sp, #12
 800a0ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0f0:	6812      	ldr	r2, [r2, #0]
 800a0f2:	3b04      	subs	r3, #4
 800a0f4:	2a00      	cmp	r2, #0
 800a0f6:	d1ca      	bne.n	800a08e <quorem+0x9a>
 800a0f8:	3c01      	subs	r4, #1
 800a0fa:	e7c5      	b.n	800a088 <quorem+0x94>
 800a0fc:	6812      	ldr	r2, [r2, #0]
 800a0fe:	3b04      	subs	r3, #4
 800a100:	2a00      	cmp	r2, #0
 800a102:	d1ef      	bne.n	800a0e4 <quorem+0xf0>
 800a104:	3c01      	subs	r4, #1
 800a106:	e7ea      	b.n	800a0de <quorem+0xea>
 800a108:	2000      	movs	r0, #0
 800a10a:	e7ee      	b.n	800a0ea <quorem+0xf6>
 800a10c:	0000      	movs	r0, r0
	...

0800a110 <_dtoa_r>:
 800a110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a114:	ec57 6b10 	vmov	r6, r7, d0
 800a118:	b097      	sub	sp, #92	; 0x5c
 800a11a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a11c:	9106      	str	r1, [sp, #24]
 800a11e:	4604      	mov	r4, r0
 800a120:	920b      	str	r2, [sp, #44]	; 0x2c
 800a122:	9312      	str	r3, [sp, #72]	; 0x48
 800a124:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a128:	e9cd 6700 	strd	r6, r7, [sp]
 800a12c:	b93d      	cbnz	r5, 800a13e <_dtoa_r+0x2e>
 800a12e:	2010      	movs	r0, #16
 800a130:	f001 f8e0 	bl	800b2f4 <malloc>
 800a134:	6260      	str	r0, [r4, #36]	; 0x24
 800a136:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a13a:	6005      	str	r5, [r0, #0]
 800a13c:	60c5      	str	r5, [r0, #12]
 800a13e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a140:	6819      	ldr	r1, [r3, #0]
 800a142:	b151      	cbz	r1, 800a15a <_dtoa_r+0x4a>
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	604a      	str	r2, [r1, #4]
 800a148:	2301      	movs	r3, #1
 800a14a:	4093      	lsls	r3, r2
 800a14c:	608b      	str	r3, [r1, #8]
 800a14e:	4620      	mov	r0, r4
 800a150:	f001 f929 	bl	800b3a6 <_Bfree>
 800a154:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a156:	2200      	movs	r2, #0
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	1e3b      	subs	r3, r7, #0
 800a15c:	bfbb      	ittet	lt
 800a15e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a162:	9301      	strlt	r3, [sp, #4]
 800a164:	2300      	movge	r3, #0
 800a166:	2201      	movlt	r2, #1
 800a168:	bfac      	ite	ge
 800a16a:	f8c8 3000 	strge.w	r3, [r8]
 800a16e:	f8c8 2000 	strlt.w	r2, [r8]
 800a172:	4baf      	ldr	r3, [pc, #700]	; (800a430 <_dtoa_r+0x320>)
 800a174:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a178:	ea33 0308 	bics.w	r3, r3, r8
 800a17c:	d114      	bne.n	800a1a8 <_dtoa_r+0x98>
 800a17e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a180:	f242 730f 	movw	r3, #9999	; 0x270f
 800a184:	6013      	str	r3, [r2, #0]
 800a186:	9b00      	ldr	r3, [sp, #0]
 800a188:	b923      	cbnz	r3, 800a194 <_dtoa_r+0x84>
 800a18a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a18e:	2800      	cmp	r0, #0
 800a190:	f000 8542 	beq.w	800ac18 <_dtoa_r+0xb08>
 800a194:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a196:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a444 <_dtoa_r+0x334>
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	f000 8544 	beq.w	800ac28 <_dtoa_r+0xb18>
 800a1a0:	f10b 0303 	add.w	r3, fp, #3
 800a1a4:	f000 bd3e 	b.w	800ac24 <_dtoa_r+0xb14>
 800a1a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	f7f6 fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1b8:	4681      	mov	r9, r0
 800a1ba:	b168      	cbz	r0, 800a1d8 <_dtoa_r+0xc8>
 800a1bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a1be:	2301      	movs	r3, #1
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 8524 	beq.w	800ac12 <_dtoa_r+0xb02>
 800a1ca:	4b9a      	ldr	r3, [pc, #616]	; (800a434 <_dtoa_r+0x324>)
 800a1cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1ce:	f103 3bff 	add.w	fp, r3, #4294967295
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	f000 bd28 	b.w	800ac28 <_dtoa_r+0xb18>
 800a1d8:	aa14      	add	r2, sp, #80	; 0x50
 800a1da:	a915      	add	r1, sp, #84	; 0x54
 800a1dc:	ec47 6b10 	vmov	d0, r6, r7
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f001 fbed 	bl	800b9c0 <__d2b>
 800a1e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a1ea:	9004      	str	r0, [sp, #16]
 800a1ec:	2d00      	cmp	r5, #0
 800a1ee:	d07c      	beq.n	800a2ea <_dtoa_r+0x1da>
 800a1f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a1f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a1f8:	46b2      	mov	sl, r6
 800a1fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a1fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a202:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a206:	2200      	movs	r2, #0
 800a208:	4b8b      	ldr	r3, [pc, #556]	; (800a438 <_dtoa_r+0x328>)
 800a20a:	4650      	mov	r0, sl
 800a20c:	4659      	mov	r1, fp
 800a20e:	f7f6 f83b 	bl	8000288 <__aeabi_dsub>
 800a212:	a381      	add	r3, pc, #516	; (adr r3, 800a418 <_dtoa_r+0x308>)
 800a214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a218:	f7f6 f9ee 	bl	80005f8 <__aeabi_dmul>
 800a21c:	a380      	add	r3, pc, #512	; (adr r3, 800a420 <_dtoa_r+0x310>)
 800a21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a222:	f7f6 f833 	bl	800028c <__adddf3>
 800a226:	4606      	mov	r6, r0
 800a228:	4628      	mov	r0, r5
 800a22a:	460f      	mov	r7, r1
 800a22c:	f7f6 f97a 	bl	8000524 <__aeabi_i2d>
 800a230:	a37d      	add	r3, pc, #500	; (adr r3, 800a428 <_dtoa_r+0x318>)
 800a232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a236:	f7f6 f9df 	bl	80005f8 <__aeabi_dmul>
 800a23a:	4602      	mov	r2, r0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4630      	mov	r0, r6
 800a240:	4639      	mov	r1, r7
 800a242:	f7f6 f823 	bl	800028c <__adddf3>
 800a246:	4606      	mov	r6, r0
 800a248:	460f      	mov	r7, r1
 800a24a:	f7f6 fc85 	bl	8000b58 <__aeabi_d2iz>
 800a24e:	2200      	movs	r2, #0
 800a250:	4682      	mov	sl, r0
 800a252:	2300      	movs	r3, #0
 800a254:	4630      	mov	r0, r6
 800a256:	4639      	mov	r1, r7
 800a258:	f7f6 fc40 	bl	8000adc <__aeabi_dcmplt>
 800a25c:	b148      	cbz	r0, 800a272 <_dtoa_r+0x162>
 800a25e:	4650      	mov	r0, sl
 800a260:	f7f6 f960 	bl	8000524 <__aeabi_i2d>
 800a264:	4632      	mov	r2, r6
 800a266:	463b      	mov	r3, r7
 800a268:	f7f6 fc2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a26c:	b908      	cbnz	r0, 800a272 <_dtoa_r+0x162>
 800a26e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a272:	f1ba 0f16 	cmp.w	sl, #22
 800a276:	d859      	bhi.n	800a32c <_dtoa_r+0x21c>
 800a278:	4970      	ldr	r1, [pc, #448]	; (800a43c <_dtoa_r+0x32c>)
 800a27a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a27e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a282:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a286:	f7f6 fc47 	bl	8000b18 <__aeabi_dcmpgt>
 800a28a:	2800      	cmp	r0, #0
 800a28c:	d050      	beq.n	800a330 <_dtoa_r+0x220>
 800a28e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a292:	2300      	movs	r3, #0
 800a294:	930f      	str	r3, [sp, #60]	; 0x3c
 800a296:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a298:	1b5d      	subs	r5, r3, r5
 800a29a:	f1b5 0801 	subs.w	r8, r5, #1
 800a29e:	bf49      	itett	mi
 800a2a0:	f1c5 0301 	rsbmi	r3, r5, #1
 800a2a4:	2300      	movpl	r3, #0
 800a2a6:	9305      	strmi	r3, [sp, #20]
 800a2a8:	f04f 0800 	movmi.w	r8, #0
 800a2ac:	bf58      	it	pl
 800a2ae:	9305      	strpl	r3, [sp, #20]
 800a2b0:	f1ba 0f00 	cmp.w	sl, #0
 800a2b4:	db3e      	blt.n	800a334 <_dtoa_r+0x224>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	44d0      	add	r8, sl
 800a2ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a2be:	9307      	str	r3, [sp, #28]
 800a2c0:	9b06      	ldr	r3, [sp, #24]
 800a2c2:	2b09      	cmp	r3, #9
 800a2c4:	f200 8090 	bhi.w	800a3e8 <_dtoa_r+0x2d8>
 800a2c8:	2b05      	cmp	r3, #5
 800a2ca:	bfc4      	itt	gt
 800a2cc:	3b04      	subgt	r3, #4
 800a2ce:	9306      	strgt	r3, [sp, #24]
 800a2d0:	9b06      	ldr	r3, [sp, #24]
 800a2d2:	f1a3 0302 	sub.w	r3, r3, #2
 800a2d6:	bfcc      	ite	gt
 800a2d8:	2500      	movgt	r5, #0
 800a2da:	2501      	movle	r5, #1
 800a2dc:	2b03      	cmp	r3, #3
 800a2de:	f200 808f 	bhi.w	800a400 <_dtoa_r+0x2f0>
 800a2e2:	e8df f003 	tbb	[pc, r3]
 800a2e6:	7f7d      	.short	0x7f7d
 800a2e8:	7131      	.short	0x7131
 800a2ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a2ee:	441d      	add	r5, r3
 800a2f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a2f4:	2820      	cmp	r0, #32
 800a2f6:	dd13      	ble.n	800a320 <_dtoa_r+0x210>
 800a2f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a2fc:	9b00      	ldr	r3, [sp, #0]
 800a2fe:	fa08 f800 	lsl.w	r8, r8, r0
 800a302:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a306:	fa23 f000 	lsr.w	r0, r3, r0
 800a30a:	ea48 0000 	orr.w	r0, r8, r0
 800a30e:	f7f6 f8f9 	bl	8000504 <__aeabi_ui2d>
 800a312:	2301      	movs	r3, #1
 800a314:	4682      	mov	sl, r0
 800a316:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a31a:	3d01      	subs	r5, #1
 800a31c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a31e:	e772      	b.n	800a206 <_dtoa_r+0xf6>
 800a320:	9b00      	ldr	r3, [sp, #0]
 800a322:	f1c0 0020 	rsb	r0, r0, #32
 800a326:	fa03 f000 	lsl.w	r0, r3, r0
 800a32a:	e7f0      	b.n	800a30e <_dtoa_r+0x1fe>
 800a32c:	2301      	movs	r3, #1
 800a32e:	e7b1      	b.n	800a294 <_dtoa_r+0x184>
 800a330:	900f      	str	r0, [sp, #60]	; 0x3c
 800a332:	e7b0      	b.n	800a296 <_dtoa_r+0x186>
 800a334:	9b05      	ldr	r3, [sp, #20]
 800a336:	eba3 030a 	sub.w	r3, r3, sl
 800a33a:	9305      	str	r3, [sp, #20]
 800a33c:	f1ca 0300 	rsb	r3, sl, #0
 800a340:	9307      	str	r3, [sp, #28]
 800a342:	2300      	movs	r3, #0
 800a344:	930e      	str	r3, [sp, #56]	; 0x38
 800a346:	e7bb      	b.n	800a2c0 <_dtoa_r+0x1b0>
 800a348:	2301      	movs	r3, #1
 800a34a:	930a      	str	r3, [sp, #40]	; 0x28
 800a34c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	dd59      	ble.n	800a406 <_dtoa_r+0x2f6>
 800a352:	9302      	str	r3, [sp, #8]
 800a354:	4699      	mov	r9, r3
 800a356:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a358:	2200      	movs	r2, #0
 800a35a:	6072      	str	r2, [r6, #4]
 800a35c:	2204      	movs	r2, #4
 800a35e:	f102 0014 	add.w	r0, r2, #20
 800a362:	4298      	cmp	r0, r3
 800a364:	6871      	ldr	r1, [r6, #4]
 800a366:	d953      	bls.n	800a410 <_dtoa_r+0x300>
 800a368:	4620      	mov	r0, r4
 800a36a:	f000 ffe8 	bl	800b33e <_Balloc>
 800a36e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a370:	6030      	str	r0, [r6, #0]
 800a372:	f1b9 0f0e 	cmp.w	r9, #14
 800a376:	f8d3 b000 	ldr.w	fp, [r3]
 800a37a:	f200 80e6 	bhi.w	800a54a <_dtoa_r+0x43a>
 800a37e:	2d00      	cmp	r5, #0
 800a380:	f000 80e3 	beq.w	800a54a <_dtoa_r+0x43a>
 800a384:	ed9d 7b00 	vldr	d7, [sp]
 800a388:	f1ba 0f00 	cmp.w	sl, #0
 800a38c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a390:	dd74      	ble.n	800a47c <_dtoa_r+0x36c>
 800a392:	4a2a      	ldr	r2, [pc, #168]	; (800a43c <_dtoa_r+0x32c>)
 800a394:	f00a 030f 	and.w	r3, sl, #15
 800a398:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a39c:	ed93 7b00 	vldr	d7, [r3]
 800a3a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a3a4:	06f0      	lsls	r0, r6, #27
 800a3a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a3aa:	d565      	bpl.n	800a478 <_dtoa_r+0x368>
 800a3ac:	4b24      	ldr	r3, [pc, #144]	; (800a440 <_dtoa_r+0x330>)
 800a3ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3b6:	f7f6 fa49 	bl	800084c <__aeabi_ddiv>
 800a3ba:	e9cd 0100 	strd	r0, r1, [sp]
 800a3be:	f006 060f 	and.w	r6, r6, #15
 800a3c2:	2503      	movs	r5, #3
 800a3c4:	4f1e      	ldr	r7, [pc, #120]	; (800a440 <_dtoa_r+0x330>)
 800a3c6:	e04c      	b.n	800a462 <_dtoa_r+0x352>
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a3cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3ce:	4453      	add	r3, sl
 800a3d0:	f103 0901 	add.w	r9, r3, #1
 800a3d4:	9302      	str	r3, [sp, #8]
 800a3d6:	464b      	mov	r3, r9
 800a3d8:	2b01      	cmp	r3, #1
 800a3da:	bfb8      	it	lt
 800a3dc:	2301      	movlt	r3, #1
 800a3de:	e7ba      	b.n	800a356 <_dtoa_r+0x246>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e7b2      	b.n	800a34a <_dtoa_r+0x23a>
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	e7f0      	b.n	800a3ca <_dtoa_r+0x2ba>
 800a3e8:	2501      	movs	r5, #1
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	9306      	str	r3, [sp, #24]
 800a3ee:	950a      	str	r5, [sp, #40]	; 0x28
 800a3f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3f4:	9302      	str	r3, [sp, #8]
 800a3f6:	4699      	mov	r9, r3
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	2312      	movs	r3, #18
 800a3fc:	920b      	str	r2, [sp, #44]	; 0x2c
 800a3fe:	e7aa      	b.n	800a356 <_dtoa_r+0x246>
 800a400:	2301      	movs	r3, #1
 800a402:	930a      	str	r3, [sp, #40]	; 0x28
 800a404:	e7f4      	b.n	800a3f0 <_dtoa_r+0x2e0>
 800a406:	2301      	movs	r3, #1
 800a408:	9302      	str	r3, [sp, #8]
 800a40a:	4699      	mov	r9, r3
 800a40c:	461a      	mov	r2, r3
 800a40e:	e7f5      	b.n	800a3fc <_dtoa_r+0x2ec>
 800a410:	3101      	adds	r1, #1
 800a412:	6071      	str	r1, [r6, #4]
 800a414:	0052      	lsls	r2, r2, #1
 800a416:	e7a2      	b.n	800a35e <_dtoa_r+0x24e>
 800a418:	636f4361 	.word	0x636f4361
 800a41c:	3fd287a7 	.word	0x3fd287a7
 800a420:	8b60c8b3 	.word	0x8b60c8b3
 800a424:	3fc68a28 	.word	0x3fc68a28
 800a428:	509f79fb 	.word	0x509f79fb
 800a42c:	3fd34413 	.word	0x3fd34413
 800a430:	7ff00000 	.word	0x7ff00000
 800a434:	0800c089 	.word	0x0800c089
 800a438:	3ff80000 	.word	0x3ff80000
 800a43c:	0800c148 	.word	0x0800c148
 800a440:	0800c120 	.word	0x0800c120
 800a444:	0800c111 	.word	0x0800c111
 800a448:	07f1      	lsls	r1, r6, #31
 800a44a:	d508      	bpl.n	800a45e <_dtoa_r+0x34e>
 800a44c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a450:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a454:	f7f6 f8d0 	bl	80005f8 <__aeabi_dmul>
 800a458:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a45c:	3501      	adds	r5, #1
 800a45e:	1076      	asrs	r6, r6, #1
 800a460:	3708      	adds	r7, #8
 800a462:	2e00      	cmp	r6, #0
 800a464:	d1f0      	bne.n	800a448 <_dtoa_r+0x338>
 800a466:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a46a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a46e:	f7f6 f9ed 	bl	800084c <__aeabi_ddiv>
 800a472:	e9cd 0100 	strd	r0, r1, [sp]
 800a476:	e01a      	b.n	800a4ae <_dtoa_r+0x39e>
 800a478:	2502      	movs	r5, #2
 800a47a:	e7a3      	b.n	800a3c4 <_dtoa_r+0x2b4>
 800a47c:	f000 80a0 	beq.w	800a5c0 <_dtoa_r+0x4b0>
 800a480:	f1ca 0600 	rsb	r6, sl, #0
 800a484:	4b9f      	ldr	r3, [pc, #636]	; (800a704 <_dtoa_r+0x5f4>)
 800a486:	4fa0      	ldr	r7, [pc, #640]	; (800a708 <_dtoa_r+0x5f8>)
 800a488:	f006 020f 	and.w	r2, r6, #15
 800a48c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a498:	f7f6 f8ae 	bl	80005f8 <__aeabi_dmul>
 800a49c:	e9cd 0100 	strd	r0, r1, [sp]
 800a4a0:	1136      	asrs	r6, r6, #4
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	2502      	movs	r5, #2
 800a4a6:	2e00      	cmp	r6, #0
 800a4a8:	d17f      	bne.n	800a5aa <_dtoa_r+0x49a>
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d1e1      	bne.n	800a472 <_dtoa_r+0x362>
 800a4ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f000 8087 	beq.w	800a5c4 <_dtoa_r+0x4b4>
 800a4b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a4ba:	2200      	movs	r2, #0
 800a4bc:	4b93      	ldr	r3, [pc, #588]	; (800a70c <_dtoa_r+0x5fc>)
 800a4be:	4630      	mov	r0, r6
 800a4c0:	4639      	mov	r1, r7
 800a4c2:	f7f6 fb0b 	bl	8000adc <__aeabi_dcmplt>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d07c      	beq.n	800a5c4 <_dtoa_r+0x4b4>
 800a4ca:	f1b9 0f00 	cmp.w	r9, #0
 800a4ce:	d079      	beq.n	800a5c4 <_dtoa_r+0x4b4>
 800a4d0:	9b02      	ldr	r3, [sp, #8]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	dd35      	ble.n	800a542 <_dtoa_r+0x432>
 800a4d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a4da:	9308      	str	r3, [sp, #32]
 800a4dc:	4639      	mov	r1, r7
 800a4de:	2200      	movs	r2, #0
 800a4e0:	4b8b      	ldr	r3, [pc, #556]	; (800a710 <_dtoa_r+0x600>)
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f7f6 f888 	bl	80005f8 <__aeabi_dmul>
 800a4e8:	e9cd 0100 	strd	r0, r1, [sp]
 800a4ec:	9f02      	ldr	r7, [sp, #8]
 800a4ee:	3501      	adds	r5, #1
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	f7f6 f817 	bl	8000524 <__aeabi_i2d>
 800a4f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4fa:	f7f6 f87d 	bl	80005f8 <__aeabi_dmul>
 800a4fe:	2200      	movs	r2, #0
 800a500:	4b84      	ldr	r3, [pc, #528]	; (800a714 <_dtoa_r+0x604>)
 800a502:	f7f5 fec3 	bl	800028c <__adddf3>
 800a506:	4605      	mov	r5, r0
 800a508:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a50c:	2f00      	cmp	r7, #0
 800a50e:	d15d      	bne.n	800a5cc <_dtoa_r+0x4bc>
 800a510:	2200      	movs	r2, #0
 800a512:	4b81      	ldr	r3, [pc, #516]	; (800a718 <_dtoa_r+0x608>)
 800a514:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a518:	f7f5 feb6 	bl	8000288 <__aeabi_dsub>
 800a51c:	462a      	mov	r2, r5
 800a51e:	4633      	mov	r3, r6
 800a520:	e9cd 0100 	strd	r0, r1, [sp]
 800a524:	f7f6 faf8 	bl	8000b18 <__aeabi_dcmpgt>
 800a528:	2800      	cmp	r0, #0
 800a52a:	f040 8288 	bne.w	800aa3e <_dtoa_r+0x92e>
 800a52e:	462a      	mov	r2, r5
 800a530:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a534:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a538:	f7f6 fad0 	bl	8000adc <__aeabi_dcmplt>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	f040 827c 	bne.w	800aa3a <_dtoa_r+0x92a>
 800a542:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a546:	e9cd 2300 	strd	r2, r3, [sp]
 800a54a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	f2c0 8150 	blt.w	800a7f2 <_dtoa_r+0x6e2>
 800a552:	f1ba 0f0e 	cmp.w	sl, #14
 800a556:	f300 814c 	bgt.w	800a7f2 <_dtoa_r+0x6e2>
 800a55a:	4b6a      	ldr	r3, [pc, #424]	; (800a704 <_dtoa_r+0x5f4>)
 800a55c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a560:	ed93 7b00 	vldr	d7, [r3]
 800a564:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a566:	2b00      	cmp	r3, #0
 800a568:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a56c:	f280 80d8 	bge.w	800a720 <_dtoa_r+0x610>
 800a570:	f1b9 0f00 	cmp.w	r9, #0
 800a574:	f300 80d4 	bgt.w	800a720 <_dtoa_r+0x610>
 800a578:	f040 825e 	bne.w	800aa38 <_dtoa_r+0x928>
 800a57c:	2200      	movs	r2, #0
 800a57e:	4b66      	ldr	r3, [pc, #408]	; (800a718 <_dtoa_r+0x608>)
 800a580:	ec51 0b17 	vmov	r0, r1, d7
 800a584:	f7f6 f838 	bl	80005f8 <__aeabi_dmul>
 800a588:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a58c:	f7f6 faba 	bl	8000b04 <__aeabi_dcmpge>
 800a590:	464f      	mov	r7, r9
 800a592:	464e      	mov	r6, r9
 800a594:	2800      	cmp	r0, #0
 800a596:	f040 8234 	bne.w	800aa02 <_dtoa_r+0x8f2>
 800a59a:	2331      	movs	r3, #49	; 0x31
 800a59c:	f10b 0501 	add.w	r5, fp, #1
 800a5a0:	f88b 3000 	strb.w	r3, [fp]
 800a5a4:	f10a 0a01 	add.w	sl, sl, #1
 800a5a8:	e22f      	b.n	800aa0a <_dtoa_r+0x8fa>
 800a5aa:	07f2      	lsls	r2, r6, #31
 800a5ac:	d505      	bpl.n	800a5ba <_dtoa_r+0x4aa>
 800a5ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b2:	f7f6 f821 	bl	80005f8 <__aeabi_dmul>
 800a5b6:	3501      	adds	r5, #1
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	1076      	asrs	r6, r6, #1
 800a5bc:	3708      	adds	r7, #8
 800a5be:	e772      	b.n	800a4a6 <_dtoa_r+0x396>
 800a5c0:	2502      	movs	r5, #2
 800a5c2:	e774      	b.n	800a4ae <_dtoa_r+0x39e>
 800a5c4:	f8cd a020 	str.w	sl, [sp, #32]
 800a5c8:	464f      	mov	r7, r9
 800a5ca:	e791      	b.n	800a4f0 <_dtoa_r+0x3e0>
 800a5cc:	4b4d      	ldr	r3, [pc, #308]	; (800a704 <_dtoa_r+0x5f4>)
 800a5ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a5d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a5d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d047      	beq.n	800a66c <_dtoa_r+0x55c>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	494e      	ldr	r1, [pc, #312]	; (800a71c <_dtoa_r+0x60c>)
 800a5e4:	f7f6 f932 	bl	800084c <__aeabi_ddiv>
 800a5e8:	462a      	mov	r2, r5
 800a5ea:	4633      	mov	r3, r6
 800a5ec:	f7f5 fe4c 	bl	8000288 <__aeabi_dsub>
 800a5f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5f4:	465d      	mov	r5, fp
 800a5f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5fa:	f7f6 faad 	bl	8000b58 <__aeabi_d2iz>
 800a5fe:	4606      	mov	r6, r0
 800a600:	f7f5 ff90 	bl	8000524 <__aeabi_i2d>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a60c:	f7f5 fe3c 	bl	8000288 <__aeabi_dsub>
 800a610:	3630      	adds	r6, #48	; 0x30
 800a612:	f805 6b01 	strb.w	r6, [r5], #1
 800a616:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a61a:	e9cd 0100 	strd	r0, r1, [sp]
 800a61e:	f7f6 fa5d 	bl	8000adc <__aeabi_dcmplt>
 800a622:	2800      	cmp	r0, #0
 800a624:	d163      	bne.n	800a6ee <_dtoa_r+0x5de>
 800a626:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a62a:	2000      	movs	r0, #0
 800a62c:	4937      	ldr	r1, [pc, #220]	; (800a70c <_dtoa_r+0x5fc>)
 800a62e:	f7f5 fe2b 	bl	8000288 <__aeabi_dsub>
 800a632:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a636:	f7f6 fa51 	bl	8000adc <__aeabi_dcmplt>
 800a63a:	2800      	cmp	r0, #0
 800a63c:	f040 80b7 	bne.w	800a7ae <_dtoa_r+0x69e>
 800a640:	eba5 030b 	sub.w	r3, r5, fp
 800a644:	429f      	cmp	r7, r3
 800a646:	f77f af7c 	ble.w	800a542 <_dtoa_r+0x432>
 800a64a:	2200      	movs	r2, #0
 800a64c:	4b30      	ldr	r3, [pc, #192]	; (800a710 <_dtoa_r+0x600>)
 800a64e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a652:	f7f5 ffd1 	bl	80005f8 <__aeabi_dmul>
 800a656:	2200      	movs	r2, #0
 800a658:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a65c:	4b2c      	ldr	r3, [pc, #176]	; (800a710 <_dtoa_r+0x600>)
 800a65e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a662:	f7f5 ffc9 	bl	80005f8 <__aeabi_dmul>
 800a666:	e9cd 0100 	strd	r0, r1, [sp]
 800a66a:	e7c4      	b.n	800a5f6 <_dtoa_r+0x4e6>
 800a66c:	462a      	mov	r2, r5
 800a66e:	4633      	mov	r3, r6
 800a670:	f7f5 ffc2 	bl	80005f8 <__aeabi_dmul>
 800a674:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a678:	eb0b 0507 	add.w	r5, fp, r7
 800a67c:	465e      	mov	r6, fp
 800a67e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a682:	f7f6 fa69 	bl	8000b58 <__aeabi_d2iz>
 800a686:	4607      	mov	r7, r0
 800a688:	f7f5 ff4c 	bl	8000524 <__aeabi_i2d>
 800a68c:	3730      	adds	r7, #48	; 0x30
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a696:	f7f5 fdf7 	bl	8000288 <__aeabi_dsub>
 800a69a:	f806 7b01 	strb.w	r7, [r6], #1
 800a69e:	42ae      	cmp	r6, r5
 800a6a0:	e9cd 0100 	strd	r0, r1, [sp]
 800a6a4:	f04f 0200 	mov.w	r2, #0
 800a6a8:	d126      	bne.n	800a6f8 <_dtoa_r+0x5e8>
 800a6aa:	4b1c      	ldr	r3, [pc, #112]	; (800a71c <_dtoa_r+0x60c>)
 800a6ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6b0:	f7f5 fdec 	bl	800028c <__adddf3>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6bc:	f7f6 fa2c 	bl	8000b18 <__aeabi_dcmpgt>
 800a6c0:	2800      	cmp	r0, #0
 800a6c2:	d174      	bne.n	800a7ae <_dtoa_r+0x69e>
 800a6c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	4914      	ldr	r1, [pc, #80]	; (800a71c <_dtoa_r+0x60c>)
 800a6cc:	f7f5 fddc 	bl	8000288 <__aeabi_dsub>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6d8:	f7f6 fa00 	bl	8000adc <__aeabi_dcmplt>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	f43f af30 	beq.w	800a542 <_dtoa_r+0x432>
 800a6e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a6e6:	2b30      	cmp	r3, #48	; 0x30
 800a6e8:	f105 32ff 	add.w	r2, r5, #4294967295
 800a6ec:	d002      	beq.n	800a6f4 <_dtoa_r+0x5e4>
 800a6ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a6f2:	e04a      	b.n	800a78a <_dtoa_r+0x67a>
 800a6f4:	4615      	mov	r5, r2
 800a6f6:	e7f4      	b.n	800a6e2 <_dtoa_r+0x5d2>
 800a6f8:	4b05      	ldr	r3, [pc, #20]	; (800a710 <_dtoa_r+0x600>)
 800a6fa:	f7f5 ff7d 	bl	80005f8 <__aeabi_dmul>
 800a6fe:	e9cd 0100 	strd	r0, r1, [sp]
 800a702:	e7bc      	b.n	800a67e <_dtoa_r+0x56e>
 800a704:	0800c148 	.word	0x0800c148
 800a708:	0800c120 	.word	0x0800c120
 800a70c:	3ff00000 	.word	0x3ff00000
 800a710:	40240000 	.word	0x40240000
 800a714:	401c0000 	.word	0x401c0000
 800a718:	40140000 	.word	0x40140000
 800a71c:	3fe00000 	.word	0x3fe00000
 800a720:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a724:	465d      	mov	r5, fp
 800a726:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a72a:	4630      	mov	r0, r6
 800a72c:	4639      	mov	r1, r7
 800a72e:	f7f6 f88d 	bl	800084c <__aeabi_ddiv>
 800a732:	f7f6 fa11 	bl	8000b58 <__aeabi_d2iz>
 800a736:	4680      	mov	r8, r0
 800a738:	f7f5 fef4 	bl	8000524 <__aeabi_i2d>
 800a73c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a740:	f7f5 ff5a 	bl	80005f8 <__aeabi_dmul>
 800a744:	4602      	mov	r2, r0
 800a746:	460b      	mov	r3, r1
 800a748:	4630      	mov	r0, r6
 800a74a:	4639      	mov	r1, r7
 800a74c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a750:	f7f5 fd9a 	bl	8000288 <__aeabi_dsub>
 800a754:	f805 6b01 	strb.w	r6, [r5], #1
 800a758:	eba5 060b 	sub.w	r6, r5, fp
 800a75c:	45b1      	cmp	r9, r6
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	d139      	bne.n	800a7d8 <_dtoa_r+0x6c8>
 800a764:	f7f5 fd92 	bl	800028c <__adddf3>
 800a768:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a76c:	4606      	mov	r6, r0
 800a76e:	460f      	mov	r7, r1
 800a770:	f7f6 f9d2 	bl	8000b18 <__aeabi_dcmpgt>
 800a774:	b9c8      	cbnz	r0, 800a7aa <_dtoa_r+0x69a>
 800a776:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a77a:	4630      	mov	r0, r6
 800a77c:	4639      	mov	r1, r7
 800a77e:	f7f6 f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a782:	b110      	cbz	r0, 800a78a <_dtoa_r+0x67a>
 800a784:	f018 0f01 	tst.w	r8, #1
 800a788:	d10f      	bne.n	800a7aa <_dtoa_r+0x69a>
 800a78a:	9904      	ldr	r1, [sp, #16]
 800a78c:	4620      	mov	r0, r4
 800a78e:	f000 fe0a 	bl	800b3a6 <_Bfree>
 800a792:	2300      	movs	r3, #0
 800a794:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a796:	702b      	strb	r3, [r5, #0]
 800a798:	f10a 0301 	add.w	r3, sl, #1
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 8241 	beq.w	800ac28 <_dtoa_r+0xb18>
 800a7a6:	601d      	str	r5, [r3, #0]
 800a7a8:	e23e      	b.n	800ac28 <_dtoa_r+0xb18>
 800a7aa:	f8cd a020 	str.w	sl, [sp, #32]
 800a7ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a7b2:	2a39      	cmp	r2, #57	; 0x39
 800a7b4:	f105 33ff 	add.w	r3, r5, #4294967295
 800a7b8:	d108      	bne.n	800a7cc <_dtoa_r+0x6bc>
 800a7ba:	459b      	cmp	fp, r3
 800a7bc:	d10a      	bne.n	800a7d4 <_dtoa_r+0x6c4>
 800a7be:	9b08      	ldr	r3, [sp, #32]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	9308      	str	r3, [sp, #32]
 800a7c4:	2330      	movs	r3, #48	; 0x30
 800a7c6:	f88b 3000 	strb.w	r3, [fp]
 800a7ca:	465b      	mov	r3, fp
 800a7cc:	781a      	ldrb	r2, [r3, #0]
 800a7ce:	3201      	adds	r2, #1
 800a7d0:	701a      	strb	r2, [r3, #0]
 800a7d2:	e78c      	b.n	800a6ee <_dtoa_r+0x5de>
 800a7d4:	461d      	mov	r5, r3
 800a7d6:	e7ea      	b.n	800a7ae <_dtoa_r+0x69e>
 800a7d8:	2200      	movs	r2, #0
 800a7da:	4b9b      	ldr	r3, [pc, #620]	; (800aa48 <_dtoa_r+0x938>)
 800a7dc:	f7f5 ff0c 	bl	80005f8 <__aeabi_dmul>
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	4606      	mov	r6, r0
 800a7e6:	460f      	mov	r7, r1
 800a7e8:	f7f6 f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	d09a      	beq.n	800a726 <_dtoa_r+0x616>
 800a7f0:	e7cb      	b.n	800a78a <_dtoa_r+0x67a>
 800a7f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7f4:	2a00      	cmp	r2, #0
 800a7f6:	f000 808b 	beq.w	800a910 <_dtoa_r+0x800>
 800a7fa:	9a06      	ldr	r2, [sp, #24]
 800a7fc:	2a01      	cmp	r2, #1
 800a7fe:	dc6e      	bgt.n	800a8de <_dtoa_r+0x7ce>
 800a800:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a802:	2a00      	cmp	r2, #0
 800a804:	d067      	beq.n	800a8d6 <_dtoa_r+0x7c6>
 800a806:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a80a:	9f07      	ldr	r7, [sp, #28]
 800a80c:	9d05      	ldr	r5, [sp, #20]
 800a80e:	9a05      	ldr	r2, [sp, #20]
 800a810:	2101      	movs	r1, #1
 800a812:	441a      	add	r2, r3
 800a814:	4620      	mov	r0, r4
 800a816:	9205      	str	r2, [sp, #20]
 800a818:	4498      	add	r8, r3
 800a81a:	f000 fea2 	bl	800b562 <__i2b>
 800a81e:	4606      	mov	r6, r0
 800a820:	2d00      	cmp	r5, #0
 800a822:	dd0c      	ble.n	800a83e <_dtoa_r+0x72e>
 800a824:	f1b8 0f00 	cmp.w	r8, #0
 800a828:	dd09      	ble.n	800a83e <_dtoa_r+0x72e>
 800a82a:	4545      	cmp	r5, r8
 800a82c:	9a05      	ldr	r2, [sp, #20]
 800a82e:	462b      	mov	r3, r5
 800a830:	bfa8      	it	ge
 800a832:	4643      	movge	r3, r8
 800a834:	1ad2      	subs	r2, r2, r3
 800a836:	9205      	str	r2, [sp, #20]
 800a838:	1aed      	subs	r5, r5, r3
 800a83a:	eba8 0803 	sub.w	r8, r8, r3
 800a83e:	9b07      	ldr	r3, [sp, #28]
 800a840:	b1eb      	cbz	r3, 800a87e <_dtoa_r+0x76e>
 800a842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a844:	2b00      	cmp	r3, #0
 800a846:	d067      	beq.n	800a918 <_dtoa_r+0x808>
 800a848:	b18f      	cbz	r7, 800a86e <_dtoa_r+0x75e>
 800a84a:	4631      	mov	r1, r6
 800a84c:	463a      	mov	r2, r7
 800a84e:	4620      	mov	r0, r4
 800a850:	f000 ff26 	bl	800b6a0 <__pow5mult>
 800a854:	9a04      	ldr	r2, [sp, #16]
 800a856:	4601      	mov	r1, r0
 800a858:	4606      	mov	r6, r0
 800a85a:	4620      	mov	r0, r4
 800a85c:	f000 fe8a 	bl	800b574 <__multiply>
 800a860:	9904      	ldr	r1, [sp, #16]
 800a862:	9008      	str	r0, [sp, #32]
 800a864:	4620      	mov	r0, r4
 800a866:	f000 fd9e 	bl	800b3a6 <_Bfree>
 800a86a:	9b08      	ldr	r3, [sp, #32]
 800a86c:	9304      	str	r3, [sp, #16]
 800a86e:	9b07      	ldr	r3, [sp, #28]
 800a870:	1bda      	subs	r2, r3, r7
 800a872:	d004      	beq.n	800a87e <_dtoa_r+0x76e>
 800a874:	9904      	ldr	r1, [sp, #16]
 800a876:	4620      	mov	r0, r4
 800a878:	f000 ff12 	bl	800b6a0 <__pow5mult>
 800a87c:	9004      	str	r0, [sp, #16]
 800a87e:	2101      	movs	r1, #1
 800a880:	4620      	mov	r0, r4
 800a882:	f000 fe6e 	bl	800b562 <__i2b>
 800a886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a888:	4607      	mov	r7, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	f000 81d0 	beq.w	800ac30 <_dtoa_r+0xb20>
 800a890:	461a      	mov	r2, r3
 800a892:	4601      	mov	r1, r0
 800a894:	4620      	mov	r0, r4
 800a896:	f000 ff03 	bl	800b6a0 <__pow5mult>
 800a89a:	9b06      	ldr	r3, [sp, #24]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	4607      	mov	r7, r0
 800a8a0:	dc40      	bgt.n	800a924 <_dtoa_r+0x814>
 800a8a2:	9b00      	ldr	r3, [sp, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d139      	bne.n	800a91c <_dtoa_r+0x80c>
 800a8a8:	9b01      	ldr	r3, [sp, #4]
 800a8aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d136      	bne.n	800a920 <_dtoa_r+0x810>
 800a8b2:	9b01      	ldr	r3, [sp, #4]
 800a8b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8b8:	0d1b      	lsrs	r3, r3, #20
 800a8ba:	051b      	lsls	r3, r3, #20
 800a8bc:	b12b      	cbz	r3, 800a8ca <_dtoa_r+0x7ba>
 800a8be:	9b05      	ldr	r3, [sp, #20]
 800a8c0:	3301      	adds	r3, #1
 800a8c2:	9305      	str	r3, [sp, #20]
 800a8c4:	f108 0801 	add.w	r8, r8, #1
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	9307      	str	r3, [sp, #28]
 800a8cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d12a      	bne.n	800a928 <_dtoa_r+0x818>
 800a8d2:	2001      	movs	r0, #1
 800a8d4:	e030      	b.n	800a938 <_dtoa_r+0x828>
 800a8d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8dc:	e795      	b.n	800a80a <_dtoa_r+0x6fa>
 800a8de:	9b07      	ldr	r3, [sp, #28]
 800a8e0:	f109 37ff 	add.w	r7, r9, #4294967295
 800a8e4:	42bb      	cmp	r3, r7
 800a8e6:	bfbf      	itttt	lt
 800a8e8:	9b07      	ldrlt	r3, [sp, #28]
 800a8ea:	9707      	strlt	r7, [sp, #28]
 800a8ec:	1afa      	sublt	r2, r7, r3
 800a8ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a8f0:	bfbb      	ittet	lt
 800a8f2:	189b      	addlt	r3, r3, r2
 800a8f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a8f6:	1bdf      	subge	r7, r3, r7
 800a8f8:	2700      	movlt	r7, #0
 800a8fa:	f1b9 0f00 	cmp.w	r9, #0
 800a8fe:	bfb5      	itete	lt
 800a900:	9b05      	ldrlt	r3, [sp, #20]
 800a902:	9d05      	ldrge	r5, [sp, #20]
 800a904:	eba3 0509 	sublt.w	r5, r3, r9
 800a908:	464b      	movge	r3, r9
 800a90a:	bfb8      	it	lt
 800a90c:	2300      	movlt	r3, #0
 800a90e:	e77e      	b.n	800a80e <_dtoa_r+0x6fe>
 800a910:	9f07      	ldr	r7, [sp, #28]
 800a912:	9d05      	ldr	r5, [sp, #20]
 800a914:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a916:	e783      	b.n	800a820 <_dtoa_r+0x710>
 800a918:	9a07      	ldr	r2, [sp, #28]
 800a91a:	e7ab      	b.n	800a874 <_dtoa_r+0x764>
 800a91c:	2300      	movs	r3, #0
 800a91e:	e7d4      	b.n	800a8ca <_dtoa_r+0x7ba>
 800a920:	9b00      	ldr	r3, [sp, #0]
 800a922:	e7d2      	b.n	800a8ca <_dtoa_r+0x7ba>
 800a924:	2300      	movs	r3, #0
 800a926:	9307      	str	r3, [sp, #28]
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a92e:	6918      	ldr	r0, [r3, #16]
 800a930:	f000 fdc9 	bl	800b4c6 <__hi0bits>
 800a934:	f1c0 0020 	rsb	r0, r0, #32
 800a938:	4440      	add	r0, r8
 800a93a:	f010 001f 	ands.w	r0, r0, #31
 800a93e:	d047      	beq.n	800a9d0 <_dtoa_r+0x8c0>
 800a940:	f1c0 0320 	rsb	r3, r0, #32
 800a944:	2b04      	cmp	r3, #4
 800a946:	dd3b      	ble.n	800a9c0 <_dtoa_r+0x8b0>
 800a948:	9b05      	ldr	r3, [sp, #20]
 800a94a:	f1c0 001c 	rsb	r0, r0, #28
 800a94e:	4403      	add	r3, r0
 800a950:	9305      	str	r3, [sp, #20]
 800a952:	4405      	add	r5, r0
 800a954:	4480      	add	r8, r0
 800a956:	9b05      	ldr	r3, [sp, #20]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	dd05      	ble.n	800a968 <_dtoa_r+0x858>
 800a95c:	461a      	mov	r2, r3
 800a95e:	9904      	ldr	r1, [sp, #16]
 800a960:	4620      	mov	r0, r4
 800a962:	f000 feeb 	bl	800b73c <__lshift>
 800a966:	9004      	str	r0, [sp, #16]
 800a968:	f1b8 0f00 	cmp.w	r8, #0
 800a96c:	dd05      	ble.n	800a97a <_dtoa_r+0x86a>
 800a96e:	4639      	mov	r1, r7
 800a970:	4642      	mov	r2, r8
 800a972:	4620      	mov	r0, r4
 800a974:	f000 fee2 	bl	800b73c <__lshift>
 800a978:	4607      	mov	r7, r0
 800a97a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a97c:	b353      	cbz	r3, 800a9d4 <_dtoa_r+0x8c4>
 800a97e:	4639      	mov	r1, r7
 800a980:	9804      	ldr	r0, [sp, #16]
 800a982:	f000 ff2f 	bl	800b7e4 <__mcmp>
 800a986:	2800      	cmp	r0, #0
 800a988:	da24      	bge.n	800a9d4 <_dtoa_r+0x8c4>
 800a98a:	2300      	movs	r3, #0
 800a98c:	220a      	movs	r2, #10
 800a98e:	9904      	ldr	r1, [sp, #16]
 800a990:	4620      	mov	r0, r4
 800a992:	f000 fd1f 	bl	800b3d4 <__multadd>
 800a996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a998:	9004      	str	r0, [sp, #16]
 800a99a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 814d 	beq.w	800ac3e <_dtoa_r+0xb2e>
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	4631      	mov	r1, r6
 800a9a8:	220a      	movs	r2, #10
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f000 fd12 	bl	800b3d4 <__multadd>
 800a9b0:	9b02      	ldr	r3, [sp, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	dc4f      	bgt.n	800aa58 <_dtoa_r+0x948>
 800a9b8:	9b06      	ldr	r3, [sp, #24]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	dd4c      	ble.n	800aa58 <_dtoa_r+0x948>
 800a9be:	e011      	b.n	800a9e4 <_dtoa_r+0x8d4>
 800a9c0:	d0c9      	beq.n	800a956 <_dtoa_r+0x846>
 800a9c2:	9a05      	ldr	r2, [sp, #20]
 800a9c4:	331c      	adds	r3, #28
 800a9c6:	441a      	add	r2, r3
 800a9c8:	9205      	str	r2, [sp, #20]
 800a9ca:	441d      	add	r5, r3
 800a9cc:	4498      	add	r8, r3
 800a9ce:	e7c2      	b.n	800a956 <_dtoa_r+0x846>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	e7f6      	b.n	800a9c2 <_dtoa_r+0x8b2>
 800a9d4:	f1b9 0f00 	cmp.w	r9, #0
 800a9d8:	dc38      	bgt.n	800aa4c <_dtoa_r+0x93c>
 800a9da:	9b06      	ldr	r3, [sp, #24]
 800a9dc:	2b02      	cmp	r3, #2
 800a9de:	dd35      	ble.n	800aa4c <_dtoa_r+0x93c>
 800a9e0:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9e4:	9b02      	ldr	r3, [sp, #8]
 800a9e6:	b963      	cbnz	r3, 800aa02 <_dtoa_r+0x8f2>
 800a9e8:	4639      	mov	r1, r7
 800a9ea:	2205      	movs	r2, #5
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	f000 fcf1 	bl	800b3d4 <__multadd>
 800a9f2:	4601      	mov	r1, r0
 800a9f4:	4607      	mov	r7, r0
 800a9f6:	9804      	ldr	r0, [sp, #16]
 800a9f8:	f000 fef4 	bl	800b7e4 <__mcmp>
 800a9fc:	2800      	cmp	r0, #0
 800a9fe:	f73f adcc 	bgt.w	800a59a <_dtoa_r+0x48a>
 800aa02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa04:	465d      	mov	r5, fp
 800aa06:	ea6f 0a03 	mvn.w	sl, r3
 800aa0a:	f04f 0900 	mov.w	r9, #0
 800aa0e:	4639      	mov	r1, r7
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fcc8 	bl	800b3a6 <_Bfree>
 800aa16:	2e00      	cmp	r6, #0
 800aa18:	f43f aeb7 	beq.w	800a78a <_dtoa_r+0x67a>
 800aa1c:	f1b9 0f00 	cmp.w	r9, #0
 800aa20:	d005      	beq.n	800aa2e <_dtoa_r+0x91e>
 800aa22:	45b1      	cmp	r9, r6
 800aa24:	d003      	beq.n	800aa2e <_dtoa_r+0x91e>
 800aa26:	4649      	mov	r1, r9
 800aa28:	4620      	mov	r0, r4
 800aa2a:	f000 fcbc 	bl	800b3a6 <_Bfree>
 800aa2e:	4631      	mov	r1, r6
 800aa30:	4620      	mov	r0, r4
 800aa32:	f000 fcb8 	bl	800b3a6 <_Bfree>
 800aa36:	e6a8      	b.n	800a78a <_dtoa_r+0x67a>
 800aa38:	2700      	movs	r7, #0
 800aa3a:	463e      	mov	r6, r7
 800aa3c:	e7e1      	b.n	800aa02 <_dtoa_r+0x8f2>
 800aa3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aa42:	463e      	mov	r6, r7
 800aa44:	e5a9      	b.n	800a59a <_dtoa_r+0x48a>
 800aa46:	bf00      	nop
 800aa48:	40240000 	.word	0x40240000
 800aa4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa4e:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 80fa 	beq.w	800ac4c <_dtoa_r+0xb3c>
 800aa58:	2d00      	cmp	r5, #0
 800aa5a:	dd05      	ble.n	800aa68 <_dtoa_r+0x958>
 800aa5c:	4631      	mov	r1, r6
 800aa5e:	462a      	mov	r2, r5
 800aa60:	4620      	mov	r0, r4
 800aa62:	f000 fe6b 	bl	800b73c <__lshift>
 800aa66:	4606      	mov	r6, r0
 800aa68:	9b07      	ldr	r3, [sp, #28]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d04c      	beq.n	800ab08 <_dtoa_r+0x9f8>
 800aa6e:	6871      	ldr	r1, [r6, #4]
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 fc64 	bl	800b33e <_Balloc>
 800aa76:	6932      	ldr	r2, [r6, #16]
 800aa78:	3202      	adds	r2, #2
 800aa7a:	4605      	mov	r5, r0
 800aa7c:	0092      	lsls	r2, r2, #2
 800aa7e:	f106 010c 	add.w	r1, r6, #12
 800aa82:	300c      	adds	r0, #12
 800aa84:	f000 fc50 	bl	800b328 <memcpy>
 800aa88:	2201      	movs	r2, #1
 800aa8a:	4629      	mov	r1, r5
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f000 fe55 	bl	800b73c <__lshift>
 800aa92:	9b00      	ldr	r3, [sp, #0]
 800aa94:	f8cd b014 	str.w	fp, [sp, #20]
 800aa98:	f003 0301 	and.w	r3, r3, #1
 800aa9c:	46b1      	mov	r9, r6
 800aa9e:	9307      	str	r3, [sp, #28]
 800aaa0:	4606      	mov	r6, r0
 800aaa2:	4639      	mov	r1, r7
 800aaa4:	9804      	ldr	r0, [sp, #16]
 800aaa6:	f7ff faa5 	bl	8009ff4 <quorem>
 800aaaa:	4649      	mov	r1, r9
 800aaac:	4605      	mov	r5, r0
 800aaae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aab2:	9804      	ldr	r0, [sp, #16]
 800aab4:	f000 fe96 	bl	800b7e4 <__mcmp>
 800aab8:	4632      	mov	r2, r6
 800aaba:	9000      	str	r0, [sp, #0]
 800aabc:	4639      	mov	r1, r7
 800aabe:	4620      	mov	r0, r4
 800aac0:	f000 feaa 	bl	800b818 <__mdiff>
 800aac4:	68c3      	ldr	r3, [r0, #12]
 800aac6:	4602      	mov	r2, r0
 800aac8:	bb03      	cbnz	r3, 800ab0c <_dtoa_r+0x9fc>
 800aaca:	4601      	mov	r1, r0
 800aacc:	9008      	str	r0, [sp, #32]
 800aace:	9804      	ldr	r0, [sp, #16]
 800aad0:	f000 fe88 	bl	800b7e4 <__mcmp>
 800aad4:	9a08      	ldr	r2, [sp, #32]
 800aad6:	4603      	mov	r3, r0
 800aad8:	4611      	mov	r1, r2
 800aada:	4620      	mov	r0, r4
 800aadc:	9308      	str	r3, [sp, #32]
 800aade:	f000 fc62 	bl	800b3a6 <_Bfree>
 800aae2:	9b08      	ldr	r3, [sp, #32]
 800aae4:	b9a3      	cbnz	r3, 800ab10 <_dtoa_r+0xa00>
 800aae6:	9a06      	ldr	r2, [sp, #24]
 800aae8:	b992      	cbnz	r2, 800ab10 <_dtoa_r+0xa00>
 800aaea:	9a07      	ldr	r2, [sp, #28]
 800aaec:	b982      	cbnz	r2, 800ab10 <_dtoa_r+0xa00>
 800aaee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aaf2:	d029      	beq.n	800ab48 <_dtoa_r+0xa38>
 800aaf4:	9b00      	ldr	r3, [sp, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	dd01      	ble.n	800aafe <_dtoa_r+0x9ee>
 800aafa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aafe:	9b05      	ldr	r3, [sp, #20]
 800ab00:	1c5d      	adds	r5, r3, #1
 800ab02:	f883 8000 	strb.w	r8, [r3]
 800ab06:	e782      	b.n	800aa0e <_dtoa_r+0x8fe>
 800ab08:	4630      	mov	r0, r6
 800ab0a:	e7c2      	b.n	800aa92 <_dtoa_r+0x982>
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e7e3      	b.n	800aad8 <_dtoa_r+0x9c8>
 800ab10:	9a00      	ldr	r2, [sp, #0]
 800ab12:	2a00      	cmp	r2, #0
 800ab14:	db04      	blt.n	800ab20 <_dtoa_r+0xa10>
 800ab16:	d125      	bne.n	800ab64 <_dtoa_r+0xa54>
 800ab18:	9a06      	ldr	r2, [sp, #24]
 800ab1a:	bb1a      	cbnz	r2, 800ab64 <_dtoa_r+0xa54>
 800ab1c:	9a07      	ldr	r2, [sp, #28]
 800ab1e:	bb0a      	cbnz	r2, 800ab64 <_dtoa_r+0xa54>
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	ddec      	ble.n	800aafe <_dtoa_r+0x9ee>
 800ab24:	2201      	movs	r2, #1
 800ab26:	9904      	ldr	r1, [sp, #16]
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f000 fe07 	bl	800b73c <__lshift>
 800ab2e:	4639      	mov	r1, r7
 800ab30:	9004      	str	r0, [sp, #16]
 800ab32:	f000 fe57 	bl	800b7e4 <__mcmp>
 800ab36:	2800      	cmp	r0, #0
 800ab38:	dc03      	bgt.n	800ab42 <_dtoa_r+0xa32>
 800ab3a:	d1e0      	bne.n	800aafe <_dtoa_r+0x9ee>
 800ab3c:	f018 0f01 	tst.w	r8, #1
 800ab40:	d0dd      	beq.n	800aafe <_dtoa_r+0x9ee>
 800ab42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ab46:	d1d8      	bne.n	800aafa <_dtoa_r+0x9ea>
 800ab48:	9b05      	ldr	r3, [sp, #20]
 800ab4a:	9a05      	ldr	r2, [sp, #20]
 800ab4c:	1c5d      	adds	r5, r3, #1
 800ab4e:	2339      	movs	r3, #57	; 0x39
 800ab50:	7013      	strb	r3, [r2, #0]
 800ab52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab56:	2b39      	cmp	r3, #57	; 0x39
 800ab58:	f105 32ff 	add.w	r2, r5, #4294967295
 800ab5c:	d04f      	beq.n	800abfe <_dtoa_r+0xaee>
 800ab5e:	3301      	adds	r3, #1
 800ab60:	7013      	strb	r3, [r2, #0]
 800ab62:	e754      	b.n	800aa0e <_dtoa_r+0x8fe>
 800ab64:	9a05      	ldr	r2, [sp, #20]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f102 0501 	add.w	r5, r2, #1
 800ab6c:	dd06      	ble.n	800ab7c <_dtoa_r+0xa6c>
 800ab6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ab72:	d0e9      	beq.n	800ab48 <_dtoa_r+0xa38>
 800ab74:	f108 0801 	add.w	r8, r8, #1
 800ab78:	9b05      	ldr	r3, [sp, #20]
 800ab7a:	e7c2      	b.n	800ab02 <_dtoa_r+0x9f2>
 800ab7c:	9a02      	ldr	r2, [sp, #8]
 800ab7e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800ab82:	eba5 030b 	sub.w	r3, r5, fp
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d021      	beq.n	800abce <_dtoa_r+0xabe>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	220a      	movs	r2, #10
 800ab8e:	9904      	ldr	r1, [sp, #16]
 800ab90:	4620      	mov	r0, r4
 800ab92:	f000 fc1f 	bl	800b3d4 <__multadd>
 800ab96:	45b1      	cmp	r9, r6
 800ab98:	9004      	str	r0, [sp, #16]
 800ab9a:	f04f 0300 	mov.w	r3, #0
 800ab9e:	f04f 020a 	mov.w	r2, #10
 800aba2:	4649      	mov	r1, r9
 800aba4:	4620      	mov	r0, r4
 800aba6:	d105      	bne.n	800abb4 <_dtoa_r+0xaa4>
 800aba8:	f000 fc14 	bl	800b3d4 <__multadd>
 800abac:	4681      	mov	r9, r0
 800abae:	4606      	mov	r6, r0
 800abb0:	9505      	str	r5, [sp, #20]
 800abb2:	e776      	b.n	800aaa2 <_dtoa_r+0x992>
 800abb4:	f000 fc0e 	bl	800b3d4 <__multadd>
 800abb8:	4631      	mov	r1, r6
 800abba:	4681      	mov	r9, r0
 800abbc:	2300      	movs	r3, #0
 800abbe:	220a      	movs	r2, #10
 800abc0:	4620      	mov	r0, r4
 800abc2:	f000 fc07 	bl	800b3d4 <__multadd>
 800abc6:	4606      	mov	r6, r0
 800abc8:	e7f2      	b.n	800abb0 <_dtoa_r+0xaa0>
 800abca:	f04f 0900 	mov.w	r9, #0
 800abce:	2201      	movs	r2, #1
 800abd0:	9904      	ldr	r1, [sp, #16]
 800abd2:	4620      	mov	r0, r4
 800abd4:	f000 fdb2 	bl	800b73c <__lshift>
 800abd8:	4639      	mov	r1, r7
 800abda:	9004      	str	r0, [sp, #16]
 800abdc:	f000 fe02 	bl	800b7e4 <__mcmp>
 800abe0:	2800      	cmp	r0, #0
 800abe2:	dcb6      	bgt.n	800ab52 <_dtoa_r+0xa42>
 800abe4:	d102      	bne.n	800abec <_dtoa_r+0xadc>
 800abe6:	f018 0f01 	tst.w	r8, #1
 800abea:	d1b2      	bne.n	800ab52 <_dtoa_r+0xa42>
 800abec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abf0:	2b30      	cmp	r3, #48	; 0x30
 800abf2:	f105 32ff 	add.w	r2, r5, #4294967295
 800abf6:	f47f af0a 	bne.w	800aa0e <_dtoa_r+0x8fe>
 800abfa:	4615      	mov	r5, r2
 800abfc:	e7f6      	b.n	800abec <_dtoa_r+0xadc>
 800abfe:	4593      	cmp	fp, r2
 800ac00:	d105      	bne.n	800ac0e <_dtoa_r+0xafe>
 800ac02:	2331      	movs	r3, #49	; 0x31
 800ac04:	f10a 0a01 	add.w	sl, sl, #1
 800ac08:	f88b 3000 	strb.w	r3, [fp]
 800ac0c:	e6ff      	b.n	800aa0e <_dtoa_r+0x8fe>
 800ac0e:	4615      	mov	r5, r2
 800ac10:	e79f      	b.n	800ab52 <_dtoa_r+0xa42>
 800ac12:	f8df b064 	ldr.w	fp, [pc, #100]	; 800ac78 <_dtoa_r+0xb68>
 800ac16:	e007      	b.n	800ac28 <_dtoa_r+0xb18>
 800ac18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac1a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800ac7c <_dtoa_r+0xb6c>
 800ac1e:	b11b      	cbz	r3, 800ac28 <_dtoa_r+0xb18>
 800ac20:	f10b 0308 	add.w	r3, fp, #8
 800ac24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ac26:	6013      	str	r3, [r2, #0]
 800ac28:	4658      	mov	r0, fp
 800ac2a:	b017      	add	sp, #92	; 0x5c
 800ac2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac30:	9b06      	ldr	r3, [sp, #24]
 800ac32:	2b01      	cmp	r3, #1
 800ac34:	f77f ae35 	ble.w	800a8a2 <_dtoa_r+0x792>
 800ac38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ac3a:	9307      	str	r3, [sp, #28]
 800ac3c:	e649      	b.n	800a8d2 <_dtoa_r+0x7c2>
 800ac3e:	9b02      	ldr	r3, [sp, #8]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	dc03      	bgt.n	800ac4c <_dtoa_r+0xb3c>
 800ac44:	9b06      	ldr	r3, [sp, #24]
 800ac46:	2b02      	cmp	r3, #2
 800ac48:	f73f aecc 	bgt.w	800a9e4 <_dtoa_r+0x8d4>
 800ac4c:	465d      	mov	r5, fp
 800ac4e:	4639      	mov	r1, r7
 800ac50:	9804      	ldr	r0, [sp, #16]
 800ac52:	f7ff f9cf 	bl	8009ff4 <quorem>
 800ac56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ac5a:	f805 8b01 	strb.w	r8, [r5], #1
 800ac5e:	9a02      	ldr	r2, [sp, #8]
 800ac60:	eba5 030b 	sub.w	r3, r5, fp
 800ac64:	429a      	cmp	r2, r3
 800ac66:	ddb0      	ble.n	800abca <_dtoa_r+0xaba>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	220a      	movs	r2, #10
 800ac6c:	9904      	ldr	r1, [sp, #16]
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f000 fbb0 	bl	800b3d4 <__multadd>
 800ac74:	9004      	str	r0, [sp, #16]
 800ac76:	e7ea      	b.n	800ac4e <_dtoa_r+0xb3e>
 800ac78:	0800c088 	.word	0x0800c088
 800ac7c:	0800c108 	.word	0x0800c108

0800ac80 <rshift>:
 800ac80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac82:	6906      	ldr	r6, [r0, #16]
 800ac84:	114b      	asrs	r3, r1, #5
 800ac86:	429e      	cmp	r6, r3
 800ac88:	f100 0414 	add.w	r4, r0, #20
 800ac8c:	dd30      	ble.n	800acf0 <rshift+0x70>
 800ac8e:	f011 011f 	ands.w	r1, r1, #31
 800ac92:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800ac96:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800ac9a:	d108      	bne.n	800acae <rshift+0x2e>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	42b2      	cmp	r2, r6
 800aca0:	460b      	mov	r3, r1
 800aca2:	d211      	bcs.n	800acc8 <rshift+0x48>
 800aca4:	f852 3b04 	ldr.w	r3, [r2], #4
 800aca8:	f841 3b04 	str.w	r3, [r1], #4
 800acac:	e7f7      	b.n	800ac9e <rshift+0x1e>
 800acae:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800acb2:	f1c1 0c20 	rsb	ip, r1, #32
 800acb6:	40cd      	lsrs	r5, r1
 800acb8:	3204      	adds	r2, #4
 800acba:	4623      	mov	r3, r4
 800acbc:	42b2      	cmp	r2, r6
 800acbe:	4617      	mov	r7, r2
 800acc0:	d30c      	bcc.n	800acdc <rshift+0x5c>
 800acc2:	601d      	str	r5, [r3, #0]
 800acc4:	b105      	cbz	r5, 800acc8 <rshift+0x48>
 800acc6:	3304      	adds	r3, #4
 800acc8:	1b1a      	subs	r2, r3, r4
 800acca:	42a3      	cmp	r3, r4
 800accc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800acd0:	bf08      	it	eq
 800acd2:	2300      	moveq	r3, #0
 800acd4:	6102      	str	r2, [r0, #16]
 800acd6:	bf08      	it	eq
 800acd8:	6143      	streq	r3, [r0, #20]
 800acda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acdc:	683f      	ldr	r7, [r7, #0]
 800acde:	fa07 f70c 	lsl.w	r7, r7, ip
 800ace2:	433d      	orrs	r5, r7
 800ace4:	f843 5b04 	str.w	r5, [r3], #4
 800ace8:	f852 5b04 	ldr.w	r5, [r2], #4
 800acec:	40cd      	lsrs	r5, r1
 800acee:	e7e5      	b.n	800acbc <rshift+0x3c>
 800acf0:	4623      	mov	r3, r4
 800acf2:	e7e9      	b.n	800acc8 <rshift+0x48>

0800acf4 <__hexdig_fun>:
 800acf4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800acf8:	2b09      	cmp	r3, #9
 800acfa:	d802      	bhi.n	800ad02 <__hexdig_fun+0xe>
 800acfc:	3820      	subs	r0, #32
 800acfe:	b2c0      	uxtb	r0, r0
 800ad00:	4770      	bx	lr
 800ad02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ad06:	2b05      	cmp	r3, #5
 800ad08:	d801      	bhi.n	800ad0e <__hexdig_fun+0x1a>
 800ad0a:	3847      	subs	r0, #71	; 0x47
 800ad0c:	e7f7      	b.n	800acfe <__hexdig_fun+0xa>
 800ad0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ad12:	2b05      	cmp	r3, #5
 800ad14:	d801      	bhi.n	800ad1a <__hexdig_fun+0x26>
 800ad16:	3827      	subs	r0, #39	; 0x27
 800ad18:	e7f1      	b.n	800acfe <__hexdig_fun+0xa>
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	4770      	bx	lr

0800ad1e <__gethex>:
 800ad1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad22:	b08b      	sub	sp, #44	; 0x2c
 800ad24:	468a      	mov	sl, r1
 800ad26:	9002      	str	r0, [sp, #8]
 800ad28:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ad2a:	9306      	str	r3, [sp, #24]
 800ad2c:	4690      	mov	r8, r2
 800ad2e:	f000 fad0 	bl	800b2d2 <__localeconv_l>
 800ad32:	6803      	ldr	r3, [r0, #0]
 800ad34:	9303      	str	r3, [sp, #12]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7f5 fa4a 	bl	80001d0 <strlen>
 800ad3c:	9b03      	ldr	r3, [sp, #12]
 800ad3e:	9001      	str	r0, [sp, #4]
 800ad40:	4403      	add	r3, r0
 800ad42:	f04f 0b00 	mov.w	fp, #0
 800ad46:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ad4a:	9307      	str	r3, [sp, #28]
 800ad4c:	f8da 3000 	ldr.w	r3, [sl]
 800ad50:	3302      	adds	r3, #2
 800ad52:	461f      	mov	r7, r3
 800ad54:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ad58:	2830      	cmp	r0, #48	; 0x30
 800ad5a:	d06c      	beq.n	800ae36 <__gethex+0x118>
 800ad5c:	f7ff ffca 	bl	800acf4 <__hexdig_fun>
 800ad60:	4604      	mov	r4, r0
 800ad62:	2800      	cmp	r0, #0
 800ad64:	d16a      	bne.n	800ae3c <__gethex+0x11e>
 800ad66:	9a01      	ldr	r2, [sp, #4]
 800ad68:	9903      	ldr	r1, [sp, #12]
 800ad6a:	4638      	mov	r0, r7
 800ad6c:	f001 f8fe 	bl	800bf6c <strncmp>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	d166      	bne.n	800ae42 <__gethex+0x124>
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	5cf8      	ldrb	r0, [r7, r3]
 800ad78:	18fe      	adds	r6, r7, r3
 800ad7a:	f7ff ffbb 	bl	800acf4 <__hexdig_fun>
 800ad7e:	2800      	cmp	r0, #0
 800ad80:	d062      	beq.n	800ae48 <__gethex+0x12a>
 800ad82:	4633      	mov	r3, r6
 800ad84:	7818      	ldrb	r0, [r3, #0]
 800ad86:	2830      	cmp	r0, #48	; 0x30
 800ad88:	461f      	mov	r7, r3
 800ad8a:	f103 0301 	add.w	r3, r3, #1
 800ad8e:	d0f9      	beq.n	800ad84 <__gethex+0x66>
 800ad90:	f7ff ffb0 	bl	800acf4 <__hexdig_fun>
 800ad94:	fab0 f580 	clz	r5, r0
 800ad98:	096d      	lsrs	r5, r5, #5
 800ad9a:	4634      	mov	r4, r6
 800ad9c:	f04f 0b01 	mov.w	fp, #1
 800ada0:	463a      	mov	r2, r7
 800ada2:	4616      	mov	r6, r2
 800ada4:	3201      	adds	r2, #1
 800ada6:	7830      	ldrb	r0, [r6, #0]
 800ada8:	f7ff ffa4 	bl	800acf4 <__hexdig_fun>
 800adac:	2800      	cmp	r0, #0
 800adae:	d1f8      	bne.n	800ada2 <__gethex+0x84>
 800adb0:	9a01      	ldr	r2, [sp, #4]
 800adb2:	9903      	ldr	r1, [sp, #12]
 800adb4:	4630      	mov	r0, r6
 800adb6:	f001 f8d9 	bl	800bf6c <strncmp>
 800adba:	b950      	cbnz	r0, 800add2 <__gethex+0xb4>
 800adbc:	b954      	cbnz	r4, 800add4 <__gethex+0xb6>
 800adbe:	9b01      	ldr	r3, [sp, #4]
 800adc0:	18f4      	adds	r4, r6, r3
 800adc2:	4622      	mov	r2, r4
 800adc4:	4616      	mov	r6, r2
 800adc6:	3201      	adds	r2, #1
 800adc8:	7830      	ldrb	r0, [r6, #0]
 800adca:	f7ff ff93 	bl	800acf4 <__hexdig_fun>
 800adce:	2800      	cmp	r0, #0
 800add0:	d1f8      	bne.n	800adc4 <__gethex+0xa6>
 800add2:	b10c      	cbz	r4, 800add8 <__gethex+0xba>
 800add4:	1ba4      	subs	r4, r4, r6
 800add6:	00a4      	lsls	r4, r4, #2
 800add8:	7833      	ldrb	r3, [r6, #0]
 800adda:	2b50      	cmp	r3, #80	; 0x50
 800addc:	d001      	beq.n	800ade2 <__gethex+0xc4>
 800adde:	2b70      	cmp	r3, #112	; 0x70
 800ade0:	d140      	bne.n	800ae64 <__gethex+0x146>
 800ade2:	7873      	ldrb	r3, [r6, #1]
 800ade4:	2b2b      	cmp	r3, #43	; 0x2b
 800ade6:	d031      	beq.n	800ae4c <__gethex+0x12e>
 800ade8:	2b2d      	cmp	r3, #45	; 0x2d
 800adea:	d033      	beq.n	800ae54 <__gethex+0x136>
 800adec:	1c71      	adds	r1, r6, #1
 800adee:	f04f 0900 	mov.w	r9, #0
 800adf2:	7808      	ldrb	r0, [r1, #0]
 800adf4:	f7ff ff7e 	bl	800acf4 <__hexdig_fun>
 800adf8:	1e43      	subs	r3, r0, #1
 800adfa:	b2db      	uxtb	r3, r3
 800adfc:	2b18      	cmp	r3, #24
 800adfe:	d831      	bhi.n	800ae64 <__gethex+0x146>
 800ae00:	f1a0 0210 	sub.w	r2, r0, #16
 800ae04:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ae08:	f7ff ff74 	bl	800acf4 <__hexdig_fun>
 800ae0c:	1e43      	subs	r3, r0, #1
 800ae0e:	b2db      	uxtb	r3, r3
 800ae10:	2b18      	cmp	r3, #24
 800ae12:	d922      	bls.n	800ae5a <__gethex+0x13c>
 800ae14:	f1b9 0f00 	cmp.w	r9, #0
 800ae18:	d000      	beq.n	800ae1c <__gethex+0xfe>
 800ae1a:	4252      	negs	r2, r2
 800ae1c:	4414      	add	r4, r2
 800ae1e:	f8ca 1000 	str.w	r1, [sl]
 800ae22:	b30d      	cbz	r5, 800ae68 <__gethex+0x14a>
 800ae24:	f1bb 0f00 	cmp.w	fp, #0
 800ae28:	bf0c      	ite	eq
 800ae2a:	2706      	moveq	r7, #6
 800ae2c:	2700      	movne	r7, #0
 800ae2e:	4638      	mov	r0, r7
 800ae30:	b00b      	add	sp, #44	; 0x2c
 800ae32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae36:	f10b 0b01 	add.w	fp, fp, #1
 800ae3a:	e78a      	b.n	800ad52 <__gethex+0x34>
 800ae3c:	2500      	movs	r5, #0
 800ae3e:	462c      	mov	r4, r5
 800ae40:	e7ae      	b.n	800ada0 <__gethex+0x82>
 800ae42:	463e      	mov	r6, r7
 800ae44:	2501      	movs	r5, #1
 800ae46:	e7c7      	b.n	800add8 <__gethex+0xba>
 800ae48:	4604      	mov	r4, r0
 800ae4a:	e7fb      	b.n	800ae44 <__gethex+0x126>
 800ae4c:	f04f 0900 	mov.w	r9, #0
 800ae50:	1cb1      	adds	r1, r6, #2
 800ae52:	e7ce      	b.n	800adf2 <__gethex+0xd4>
 800ae54:	f04f 0901 	mov.w	r9, #1
 800ae58:	e7fa      	b.n	800ae50 <__gethex+0x132>
 800ae5a:	230a      	movs	r3, #10
 800ae5c:	fb03 0202 	mla	r2, r3, r2, r0
 800ae60:	3a10      	subs	r2, #16
 800ae62:	e7cf      	b.n	800ae04 <__gethex+0xe6>
 800ae64:	4631      	mov	r1, r6
 800ae66:	e7da      	b.n	800ae1e <__gethex+0x100>
 800ae68:	1bf3      	subs	r3, r6, r7
 800ae6a:	3b01      	subs	r3, #1
 800ae6c:	4629      	mov	r1, r5
 800ae6e:	2b07      	cmp	r3, #7
 800ae70:	dc49      	bgt.n	800af06 <__gethex+0x1e8>
 800ae72:	9802      	ldr	r0, [sp, #8]
 800ae74:	f000 fa63 	bl	800b33e <_Balloc>
 800ae78:	9b01      	ldr	r3, [sp, #4]
 800ae7a:	f100 0914 	add.w	r9, r0, #20
 800ae7e:	f04f 0b00 	mov.w	fp, #0
 800ae82:	f1c3 0301 	rsb	r3, r3, #1
 800ae86:	4605      	mov	r5, r0
 800ae88:	f8cd 9010 	str.w	r9, [sp, #16]
 800ae8c:	46da      	mov	sl, fp
 800ae8e:	9308      	str	r3, [sp, #32]
 800ae90:	42b7      	cmp	r7, r6
 800ae92:	d33b      	bcc.n	800af0c <__gethex+0x1ee>
 800ae94:	9804      	ldr	r0, [sp, #16]
 800ae96:	f840 ab04 	str.w	sl, [r0], #4
 800ae9a:	eba0 0009 	sub.w	r0, r0, r9
 800ae9e:	1080      	asrs	r0, r0, #2
 800aea0:	6128      	str	r0, [r5, #16]
 800aea2:	0147      	lsls	r7, r0, #5
 800aea4:	4650      	mov	r0, sl
 800aea6:	f000 fb0e 	bl	800b4c6 <__hi0bits>
 800aeaa:	f8d8 6000 	ldr.w	r6, [r8]
 800aeae:	1a3f      	subs	r7, r7, r0
 800aeb0:	42b7      	cmp	r7, r6
 800aeb2:	dd64      	ble.n	800af7e <__gethex+0x260>
 800aeb4:	1bbf      	subs	r7, r7, r6
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	4628      	mov	r0, r5
 800aeba:	f000 fe1d 	bl	800baf8 <__any_on>
 800aebe:	4682      	mov	sl, r0
 800aec0:	b178      	cbz	r0, 800aee2 <__gethex+0x1c4>
 800aec2:	1e7b      	subs	r3, r7, #1
 800aec4:	1159      	asrs	r1, r3, #5
 800aec6:	f003 021f 	and.w	r2, r3, #31
 800aeca:	f04f 0a01 	mov.w	sl, #1
 800aece:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aed2:	fa0a f202 	lsl.w	r2, sl, r2
 800aed6:	420a      	tst	r2, r1
 800aed8:	d003      	beq.n	800aee2 <__gethex+0x1c4>
 800aeda:	4553      	cmp	r3, sl
 800aedc:	dc46      	bgt.n	800af6c <__gethex+0x24e>
 800aede:	f04f 0a02 	mov.w	sl, #2
 800aee2:	4639      	mov	r1, r7
 800aee4:	4628      	mov	r0, r5
 800aee6:	f7ff fecb 	bl	800ac80 <rshift>
 800aeea:	443c      	add	r4, r7
 800aeec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aef0:	42a3      	cmp	r3, r4
 800aef2:	da52      	bge.n	800af9a <__gethex+0x27c>
 800aef4:	4629      	mov	r1, r5
 800aef6:	9802      	ldr	r0, [sp, #8]
 800aef8:	f000 fa55 	bl	800b3a6 <_Bfree>
 800aefc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aefe:	2300      	movs	r3, #0
 800af00:	6013      	str	r3, [r2, #0]
 800af02:	27a3      	movs	r7, #163	; 0xa3
 800af04:	e793      	b.n	800ae2e <__gethex+0x110>
 800af06:	3101      	adds	r1, #1
 800af08:	105b      	asrs	r3, r3, #1
 800af0a:	e7b0      	b.n	800ae6e <__gethex+0x150>
 800af0c:	1e73      	subs	r3, r6, #1
 800af0e:	9305      	str	r3, [sp, #20]
 800af10:	9a07      	ldr	r2, [sp, #28]
 800af12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800af16:	4293      	cmp	r3, r2
 800af18:	d018      	beq.n	800af4c <__gethex+0x22e>
 800af1a:	f1bb 0f20 	cmp.w	fp, #32
 800af1e:	d107      	bne.n	800af30 <__gethex+0x212>
 800af20:	9b04      	ldr	r3, [sp, #16]
 800af22:	f8c3 a000 	str.w	sl, [r3]
 800af26:	3304      	adds	r3, #4
 800af28:	f04f 0a00 	mov.w	sl, #0
 800af2c:	9304      	str	r3, [sp, #16]
 800af2e:	46d3      	mov	fp, sl
 800af30:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800af34:	f7ff fede 	bl	800acf4 <__hexdig_fun>
 800af38:	f000 000f 	and.w	r0, r0, #15
 800af3c:	fa00 f00b 	lsl.w	r0, r0, fp
 800af40:	ea4a 0a00 	orr.w	sl, sl, r0
 800af44:	f10b 0b04 	add.w	fp, fp, #4
 800af48:	9b05      	ldr	r3, [sp, #20]
 800af4a:	e00d      	b.n	800af68 <__gethex+0x24a>
 800af4c:	9b05      	ldr	r3, [sp, #20]
 800af4e:	9a08      	ldr	r2, [sp, #32]
 800af50:	4413      	add	r3, r2
 800af52:	42bb      	cmp	r3, r7
 800af54:	d3e1      	bcc.n	800af1a <__gethex+0x1fc>
 800af56:	4618      	mov	r0, r3
 800af58:	9a01      	ldr	r2, [sp, #4]
 800af5a:	9903      	ldr	r1, [sp, #12]
 800af5c:	9309      	str	r3, [sp, #36]	; 0x24
 800af5e:	f001 f805 	bl	800bf6c <strncmp>
 800af62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af64:	2800      	cmp	r0, #0
 800af66:	d1d8      	bne.n	800af1a <__gethex+0x1fc>
 800af68:	461e      	mov	r6, r3
 800af6a:	e791      	b.n	800ae90 <__gethex+0x172>
 800af6c:	1eb9      	subs	r1, r7, #2
 800af6e:	4628      	mov	r0, r5
 800af70:	f000 fdc2 	bl	800baf8 <__any_on>
 800af74:	2800      	cmp	r0, #0
 800af76:	d0b2      	beq.n	800aede <__gethex+0x1c0>
 800af78:	f04f 0a03 	mov.w	sl, #3
 800af7c:	e7b1      	b.n	800aee2 <__gethex+0x1c4>
 800af7e:	da09      	bge.n	800af94 <__gethex+0x276>
 800af80:	1bf7      	subs	r7, r6, r7
 800af82:	4629      	mov	r1, r5
 800af84:	463a      	mov	r2, r7
 800af86:	9802      	ldr	r0, [sp, #8]
 800af88:	f000 fbd8 	bl	800b73c <__lshift>
 800af8c:	1be4      	subs	r4, r4, r7
 800af8e:	4605      	mov	r5, r0
 800af90:	f100 0914 	add.w	r9, r0, #20
 800af94:	f04f 0a00 	mov.w	sl, #0
 800af98:	e7a8      	b.n	800aeec <__gethex+0x1ce>
 800af9a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800af9e:	42a0      	cmp	r0, r4
 800afa0:	dd6a      	ble.n	800b078 <__gethex+0x35a>
 800afa2:	1b04      	subs	r4, r0, r4
 800afa4:	42a6      	cmp	r6, r4
 800afa6:	dc2e      	bgt.n	800b006 <__gethex+0x2e8>
 800afa8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800afac:	2b02      	cmp	r3, #2
 800afae:	d022      	beq.n	800aff6 <__gethex+0x2d8>
 800afb0:	2b03      	cmp	r3, #3
 800afb2:	d024      	beq.n	800affe <__gethex+0x2e0>
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d115      	bne.n	800afe4 <__gethex+0x2c6>
 800afb8:	42a6      	cmp	r6, r4
 800afba:	d113      	bne.n	800afe4 <__gethex+0x2c6>
 800afbc:	2e01      	cmp	r6, #1
 800afbe:	dc0b      	bgt.n	800afd8 <__gethex+0x2ba>
 800afc0:	9a06      	ldr	r2, [sp, #24]
 800afc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	2301      	movs	r3, #1
 800afca:	612b      	str	r3, [r5, #16]
 800afcc:	f8c9 3000 	str.w	r3, [r9]
 800afd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afd2:	2762      	movs	r7, #98	; 0x62
 800afd4:	601d      	str	r5, [r3, #0]
 800afd6:	e72a      	b.n	800ae2e <__gethex+0x110>
 800afd8:	1e71      	subs	r1, r6, #1
 800afda:	4628      	mov	r0, r5
 800afdc:	f000 fd8c 	bl	800baf8 <__any_on>
 800afe0:	2800      	cmp	r0, #0
 800afe2:	d1ed      	bne.n	800afc0 <__gethex+0x2a2>
 800afe4:	4629      	mov	r1, r5
 800afe6:	9802      	ldr	r0, [sp, #8]
 800afe8:	f000 f9dd 	bl	800b3a6 <_Bfree>
 800afec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800afee:	2300      	movs	r3, #0
 800aff0:	6013      	str	r3, [r2, #0]
 800aff2:	2750      	movs	r7, #80	; 0x50
 800aff4:	e71b      	b.n	800ae2e <__gethex+0x110>
 800aff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d0e1      	beq.n	800afc0 <__gethex+0x2a2>
 800affc:	e7f2      	b.n	800afe4 <__gethex+0x2c6>
 800affe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1dd      	bne.n	800afc0 <__gethex+0x2a2>
 800b004:	e7ee      	b.n	800afe4 <__gethex+0x2c6>
 800b006:	1e67      	subs	r7, r4, #1
 800b008:	f1ba 0f00 	cmp.w	sl, #0
 800b00c:	d131      	bne.n	800b072 <__gethex+0x354>
 800b00e:	b127      	cbz	r7, 800b01a <__gethex+0x2fc>
 800b010:	4639      	mov	r1, r7
 800b012:	4628      	mov	r0, r5
 800b014:	f000 fd70 	bl	800baf8 <__any_on>
 800b018:	4682      	mov	sl, r0
 800b01a:	117a      	asrs	r2, r7, #5
 800b01c:	2301      	movs	r3, #1
 800b01e:	f007 071f 	and.w	r7, r7, #31
 800b022:	fa03 f707 	lsl.w	r7, r3, r7
 800b026:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b02a:	4621      	mov	r1, r4
 800b02c:	421f      	tst	r7, r3
 800b02e:	4628      	mov	r0, r5
 800b030:	bf18      	it	ne
 800b032:	f04a 0a02 	orrne.w	sl, sl, #2
 800b036:	1b36      	subs	r6, r6, r4
 800b038:	f7ff fe22 	bl	800ac80 <rshift>
 800b03c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b040:	2702      	movs	r7, #2
 800b042:	f1ba 0f00 	cmp.w	sl, #0
 800b046:	d048      	beq.n	800b0da <__gethex+0x3bc>
 800b048:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d015      	beq.n	800b07c <__gethex+0x35e>
 800b050:	2b03      	cmp	r3, #3
 800b052:	d017      	beq.n	800b084 <__gethex+0x366>
 800b054:	2b01      	cmp	r3, #1
 800b056:	d109      	bne.n	800b06c <__gethex+0x34e>
 800b058:	f01a 0f02 	tst.w	sl, #2
 800b05c:	d006      	beq.n	800b06c <__gethex+0x34e>
 800b05e:	f8d9 3000 	ldr.w	r3, [r9]
 800b062:	ea4a 0a03 	orr.w	sl, sl, r3
 800b066:	f01a 0f01 	tst.w	sl, #1
 800b06a:	d10e      	bne.n	800b08a <__gethex+0x36c>
 800b06c:	f047 0710 	orr.w	r7, r7, #16
 800b070:	e033      	b.n	800b0da <__gethex+0x3bc>
 800b072:	f04f 0a01 	mov.w	sl, #1
 800b076:	e7d0      	b.n	800b01a <__gethex+0x2fc>
 800b078:	2701      	movs	r7, #1
 800b07a:	e7e2      	b.n	800b042 <__gethex+0x324>
 800b07c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b07e:	f1c3 0301 	rsb	r3, r3, #1
 800b082:	9315      	str	r3, [sp, #84]	; 0x54
 800b084:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0f0      	beq.n	800b06c <__gethex+0x34e>
 800b08a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b08e:	f105 0314 	add.w	r3, r5, #20
 800b092:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b096:	eb03 010a 	add.w	r1, r3, sl
 800b09a:	f04f 0c00 	mov.w	ip, #0
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b0a8:	d01c      	beq.n	800b0e4 <__gethex+0x3c6>
 800b0aa:	3201      	adds	r2, #1
 800b0ac:	6002      	str	r2, [r0, #0]
 800b0ae:	2f02      	cmp	r7, #2
 800b0b0:	f105 0314 	add.w	r3, r5, #20
 800b0b4:	d138      	bne.n	800b128 <__gethex+0x40a>
 800b0b6:	f8d8 2000 	ldr.w	r2, [r8]
 800b0ba:	3a01      	subs	r2, #1
 800b0bc:	42b2      	cmp	r2, r6
 800b0be:	d10a      	bne.n	800b0d6 <__gethex+0x3b8>
 800b0c0:	1171      	asrs	r1, r6, #5
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f006 061f 	and.w	r6, r6, #31
 800b0c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b0cc:	fa02 f606 	lsl.w	r6, r2, r6
 800b0d0:	421e      	tst	r6, r3
 800b0d2:	bf18      	it	ne
 800b0d4:	4617      	movne	r7, r2
 800b0d6:	f047 0720 	orr.w	r7, r7, #32
 800b0da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b0dc:	601d      	str	r5, [r3, #0]
 800b0de:	9b06      	ldr	r3, [sp, #24]
 800b0e0:	601c      	str	r4, [r3, #0]
 800b0e2:	e6a4      	b.n	800ae2e <__gethex+0x110>
 800b0e4:	4299      	cmp	r1, r3
 800b0e6:	f843 cc04 	str.w	ip, [r3, #-4]
 800b0ea:	d8d8      	bhi.n	800b09e <__gethex+0x380>
 800b0ec:	68ab      	ldr	r3, [r5, #8]
 800b0ee:	4599      	cmp	r9, r3
 800b0f0:	db12      	blt.n	800b118 <__gethex+0x3fa>
 800b0f2:	6869      	ldr	r1, [r5, #4]
 800b0f4:	9802      	ldr	r0, [sp, #8]
 800b0f6:	3101      	adds	r1, #1
 800b0f8:	f000 f921 	bl	800b33e <_Balloc>
 800b0fc:	692a      	ldr	r2, [r5, #16]
 800b0fe:	3202      	adds	r2, #2
 800b100:	f105 010c 	add.w	r1, r5, #12
 800b104:	4683      	mov	fp, r0
 800b106:	0092      	lsls	r2, r2, #2
 800b108:	300c      	adds	r0, #12
 800b10a:	f000 f90d 	bl	800b328 <memcpy>
 800b10e:	4629      	mov	r1, r5
 800b110:	9802      	ldr	r0, [sp, #8]
 800b112:	f000 f948 	bl	800b3a6 <_Bfree>
 800b116:	465d      	mov	r5, fp
 800b118:	692b      	ldr	r3, [r5, #16]
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b120:	612a      	str	r2, [r5, #16]
 800b122:	2201      	movs	r2, #1
 800b124:	615a      	str	r2, [r3, #20]
 800b126:	e7c2      	b.n	800b0ae <__gethex+0x390>
 800b128:	692a      	ldr	r2, [r5, #16]
 800b12a:	454a      	cmp	r2, r9
 800b12c:	dd0b      	ble.n	800b146 <__gethex+0x428>
 800b12e:	2101      	movs	r1, #1
 800b130:	4628      	mov	r0, r5
 800b132:	f7ff fda5 	bl	800ac80 <rshift>
 800b136:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b13a:	3401      	adds	r4, #1
 800b13c:	42a3      	cmp	r3, r4
 800b13e:	f6ff aed9 	blt.w	800aef4 <__gethex+0x1d6>
 800b142:	2701      	movs	r7, #1
 800b144:	e7c7      	b.n	800b0d6 <__gethex+0x3b8>
 800b146:	f016 061f 	ands.w	r6, r6, #31
 800b14a:	d0fa      	beq.n	800b142 <__gethex+0x424>
 800b14c:	449a      	add	sl, r3
 800b14e:	f1c6 0620 	rsb	r6, r6, #32
 800b152:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b156:	f000 f9b6 	bl	800b4c6 <__hi0bits>
 800b15a:	42b0      	cmp	r0, r6
 800b15c:	dbe7      	blt.n	800b12e <__gethex+0x410>
 800b15e:	e7f0      	b.n	800b142 <__gethex+0x424>

0800b160 <L_shift>:
 800b160:	f1c2 0208 	rsb	r2, r2, #8
 800b164:	0092      	lsls	r2, r2, #2
 800b166:	b570      	push	{r4, r5, r6, lr}
 800b168:	f1c2 0620 	rsb	r6, r2, #32
 800b16c:	6843      	ldr	r3, [r0, #4]
 800b16e:	6804      	ldr	r4, [r0, #0]
 800b170:	fa03 f506 	lsl.w	r5, r3, r6
 800b174:	432c      	orrs	r4, r5
 800b176:	40d3      	lsrs	r3, r2
 800b178:	6004      	str	r4, [r0, #0]
 800b17a:	f840 3f04 	str.w	r3, [r0, #4]!
 800b17e:	4288      	cmp	r0, r1
 800b180:	d3f4      	bcc.n	800b16c <L_shift+0xc>
 800b182:	bd70      	pop	{r4, r5, r6, pc}

0800b184 <__match>:
 800b184:	b530      	push	{r4, r5, lr}
 800b186:	6803      	ldr	r3, [r0, #0]
 800b188:	3301      	adds	r3, #1
 800b18a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b18e:	b914      	cbnz	r4, 800b196 <__match+0x12>
 800b190:	6003      	str	r3, [r0, #0]
 800b192:	2001      	movs	r0, #1
 800b194:	bd30      	pop	{r4, r5, pc}
 800b196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b19a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b19e:	2d19      	cmp	r5, #25
 800b1a0:	bf98      	it	ls
 800b1a2:	3220      	addls	r2, #32
 800b1a4:	42a2      	cmp	r2, r4
 800b1a6:	d0f0      	beq.n	800b18a <__match+0x6>
 800b1a8:	2000      	movs	r0, #0
 800b1aa:	e7f3      	b.n	800b194 <__match+0x10>

0800b1ac <__hexnan>:
 800b1ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b0:	680b      	ldr	r3, [r1, #0]
 800b1b2:	6801      	ldr	r1, [r0, #0]
 800b1b4:	115f      	asrs	r7, r3, #5
 800b1b6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b1ba:	f013 031f 	ands.w	r3, r3, #31
 800b1be:	b087      	sub	sp, #28
 800b1c0:	bf18      	it	ne
 800b1c2:	3704      	addne	r7, #4
 800b1c4:	2500      	movs	r5, #0
 800b1c6:	1f3e      	subs	r6, r7, #4
 800b1c8:	4682      	mov	sl, r0
 800b1ca:	4690      	mov	r8, r2
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	f847 5c04 	str.w	r5, [r7, #-4]
 800b1d2:	46b1      	mov	r9, r6
 800b1d4:	4634      	mov	r4, r6
 800b1d6:	9502      	str	r5, [sp, #8]
 800b1d8:	46ab      	mov	fp, r5
 800b1da:	784a      	ldrb	r2, [r1, #1]
 800b1dc:	1c4b      	adds	r3, r1, #1
 800b1de:	9303      	str	r3, [sp, #12]
 800b1e0:	b342      	cbz	r2, 800b234 <__hexnan+0x88>
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	9105      	str	r1, [sp, #20]
 800b1e6:	9204      	str	r2, [sp, #16]
 800b1e8:	f7ff fd84 	bl	800acf4 <__hexdig_fun>
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d143      	bne.n	800b278 <__hexnan+0xcc>
 800b1f0:	9a04      	ldr	r2, [sp, #16]
 800b1f2:	9905      	ldr	r1, [sp, #20]
 800b1f4:	2a20      	cmp	r2, #32
 800b1f6:	d818      	bhi.n	800b22a <__hexnan+0x7e>
 800b1f8:	9b02      	ldr	r3, [sp, #8]
 800b1fa:	459b      	cmp	fp, r3
 800b1fc:	dd13      	ble.n	800b226 <__hexnan+0x7a>
 800b1fe:	454c      	cmp	r4, r9
 800b200:	d206      	bcs.n	800b210 <__hexnan+0x64>
 800b202:	2d07      	cmp	r5, #7
 800b204:	dc04      	bgt.n	800b210 <__hexnan+0x64>
 800b206:	462a      	mov	r2, r5
 800b208:	4649      	mov	r1, r9
 800b20a:	4620      	mov	r0, r4
 800b20c:	f7ff ffa8 	bl	800b160 <L_shift>
 800b210:	4544      	cmp	r4, r8
 800b212:	d944      	bls.n	800b29e <__hexnan+0xf2>
 800b214:	2300      	movs	r3, #0
 800b216:	f1a4 0904 	sub.w	r9, r4, #4
 800b21a:	f844 3c04 	str.w	r3, [r4, #-4]
 800b21e:	f8cd b008 	str.w	fp, [sp, #8]
 800b222:	464c      	mov	r4, r9
 800b224:	461d      	mov	r5, r3
 800b226:	9903      	ldr	r1, [sp, #12]
 800b228:	e7d7      	b.n	800b1da <__hexnan+0x2e>
 800b22a:	2a29      	cmp	r2, #41	; 0x29
 800b22c:	d14a      	bne.n	800b2c4 <__hexnan+0x118>
 800b22e:	3102      	adds	r1, #2
 800b230:	f8ca 1000 	str.w	r1, [sl]
 800b234:	f1bb 0f00 	cmp.w	fp, #0
 800b238:	d044      	beq.n	800b2c4 <__hexnan+0x118>
 800b23a:	454c      	cmp	r4, r9
 800b23c:	d206      	bcs.n	800b24c <__hexnan+0xa0>
 800b23e:	2d07      	cmp	r5, #7
 800b240:	dc04      	bgt.n	800b24c <__hexnan+0xa0>
 800b242:	462a      	mov	r2, r5
 800b244:	4649      	mov	r1, r9
 800b246:	4620      	mov	r0, r4
 800b248:	f7ff ff8a 	bl	800b160 <L_shift>
 800b24c:	4544      	cmp	r4, r8
 800b24e:	d928      	bls.n	800b2a2 <__hexnan+0xf6>
 800b250:	4643      	mov	r3, r8
 800b252:	f854 2b04 	ldr.w	r2, [r4], #4
 800b256:	f843 2b04 	str.w	r2, [r3], #4
 800b25a:	42a6      	cmp	r6, r4
 800b25c:	d2f9      	bcs.n	800b252 <__hexnan+0xa6>
 800b25e:	2200      	movs	r2, #0
 800b260:	f843 2b04 	str.w	r2, [r3], #4
 800b264:	429e      	cmp	r6, r3
 800b266:	d2fb      	bcs.n	800b260 <__hexnan+0xb4>
 800b268:	6833      	ldr	r3, [r6, #0]
 800b26a:	b91b      	cbnz	r3, 800b274 <__hexnan+0xc8>
 800b26c:	4546      	cmp	r6, r8
 800b26e:	d127      	bne.n	800b2c0 <__hexnan+0x114>
 800b270:	2301      	movs	r3, #1
 800b272:	6033      	str	r3, [r6, #0]
 800b274:	2005      	movs	r0, #5
 800b276:	e026      	b.n	800b2c6 <__hexnan+0x11a>
 800b278:	3501      	adds	r5, #1
 800b27a:	2d08      	cmp	r5, #8
 800b27c:	f10b 0b01 	add.w	fp, fp, #1
 800b280:	dd06      	ble.n	800b290 <__hexnan+0xe4>
 800b282:	4544      	cmp	r4, r8
 800b284:	d9cf      	bls.n	800b226 <__hexnan+0x7a>
 800b286:	2300      	movs	r3, #0
 800b288:	f844 3c04 	str.w	r3, [r4, #-4]
 800b28c:	2501      	movs	r5, #1
 800b28e:	3c04      	subs	r4, #4
 800b290:	6822      	ldr	r2, [r4, #0]
 800b292:	f000 000f 	and.w	r0, r0, #15
 800b296:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b29a:	6020      	str	r0, [r4, #0]
 800b29c:	e7c3      	b.n	800b226 <__hexnan+0x7a>
 800b29e:	2508      	movs	r5, #8
 800b2a0:	e7c1      	b.n	800b226 <__hexnan+0x7a>
 800b2a2:	9b01      	ldr	r3, [sp, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d0df      	beq.n	800b268 <__hexnan+0xbc>
 800b2a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b2ac:	f1c3 0320 	rsb	r3, r3, #32
 800b2b0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2b4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b2b8:	401a      	ands	r2, r3
 800b2ba:	f847 2c04 	str.w	r2, [r7, #-4]
 800b2be:	e7d3      	b.n	800b268 <__hexnan+0xbc>
 800b2c0:	3e04      	subs	r6, #4
 800b2c2:	e7d1      	b.n	800b268 <__hexnan+0xbc>
 800b2c4:	2004      	movs	r0, #4
 800b2c6:	b007      	add	sp, #28
 800b2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2cc <__locale_ctype_ptr_l>:
 800b2cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b2d0:	4770      	bx	lr

0800b2d2 <__localeconv_l>:
 800b2d2:	30f0      	adds	r0, #240	; 0xf0
 800b2d4:	4770      	bx	lr
	...

0800b2d8 <_localeconv_r>:
 800b2d8:	4b04      	ldr	r3, [pc, #16]	; (800b2ec <_localeconv_r+0x14>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6a18      	ldr	r0, [r3, #32]
 800b2de:	4b04      	ldr	r3, [pc, #16]	; (800b2f0 <_localeconv_r+0x18>)
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	bf08      	it	eq
 800b2e4:	4618      	moveq	r0, r3
 800b2e6:	30f0      	adds	r0, #240	; 0xf0
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	20000040 	.word	0x20000040
 800b2f0:	200000a4 	.word	0x200000a4

0800b2f4 <malloc>:
 800b2f4:	4b02      	ldr	r3, [pc, #8]	; (800b300 <malloc+0xc>)
 800b2f6:	4601      	mov	r1, r0
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	f000 bc7b 	b.w	800bbf4 <_malloc_r>
 800b2fe:	bf00      	nop
 800b300:	20000040 	.word	0x20000040

0800b304 <__ascii_mbtowc>:
 800b304:	b082      	sub	sp, #8
 800b306:	b901      	cbnz	r1, 800b30a <__ascii_mbtowc+0x6>
 800b308:	a901      	add	r1, sp, #4
 800b30a:	b142      	cbz	r2, 800b31e <__ascii_mbtowc+0x1a>
 800b30c:	b14b      	cbz	r3, 800b322 <__ascii_mbtowc+0x1e>
 800b30e:	7813      	ldrb	r3, [r2, #0]
 800b310:	600b      	str	r3, [r1, #0]
 800b312:	7812      	ldrb	r2, [r2, #0]
 800b314:	1c10      	adds	r0, r2, #0
 800b316:	bf18      	it	ne
 800b318:	2001      	movne	r0, #1
 800b31a:	b002      	add	sp, #8
 800b31c:	4770      	bx	lr
 800b31e:	4610      	mov	r0, r2
 800b320:	e7fb      	b.n	800b31a <__ascii_mbtowc+0x16>
 800b322:	f06f 0001 	mvn.w	r0, #1
 800b326:	e7f8      	b.n	800b31a <__ascii_mbtowc+0x16>

0800b328 <memcpy>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	1e43      	subs	r3, r0, #1
 800b32c:	440a      	add	r2, r1
 800b32e:	4291      	cmp	r1, r2
 800b330:	d100      	bne.n	800b334 <memcpy+0xc>
 800b332:	bd10      	pop	{r4, pc}
 800b334:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b33c:	e7f7      	b.n	800b32e <memcpy+0x6>

0800b33e <_Balloc>:
 800b33e:	b570      	push	{r4, r5, r6, lr}
 800b340:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b342:	4604      	mov	r4, r0
 800b344:	460e      	mov	r6, r1
 800b346:	b93d      	cbnz	r5, 800b358 <_Balloc+0x1a>
 800b348:	2010      	movs	r0, #16
 800b34a:	f7ff ffd3 	bl	800b2f4 <malloc>
 800b34e:	6260      	str	r0, [r4, #36]	; 0x24
 800b350:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b354:	6005      	str	r5, [r0, #0]
 800b356:	60c5      	str	r5, [r0, #12]
 800b358:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b35a:	68eb      	ldr	r3, [r5, #12]
 800b35c:	b183      	cbz	r3, 800b380 <_Balloc+0x42>
 800b35e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b366:	b9b8      	cbnz	r0, 800b398 <_Balloc+0x5a>
 800b368:	2101      	movs	r1, #1
 800b36a:	fa01 f506 	lsl.w	r5, r1, r6
 800b36e:	1d6a      	adds	r2, r5, #5
 800b370:	0092      	lsls	r2, r2, #2
 800b372:	4620      	mov	r0, r4
 800b374:	f000 fbe1 	bl	800bb3a <_calloc_r>
 800b378:	b160      	cbz	r0, 800b394 <_Balloc+0x56>
 800b37a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b37e:	e00e      	b.n	800b39e <_Balloc+0x60>
 800b380:	2221      	movs	r2, #33	; 0x21
 800b382:	2104      	movs	r1, #4
 800b384:	4620      	mov	r0, r4
 800b386:	f000 fbd8 	bl	800bb3a <_calloc_r>
 800b38a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b38c:	60e8      	str	r0, [r5, #12]
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1e4      	bne.n	800b35e <_Balloc+0x20>
 800b394:	2000      	movs	r0, #0
 800b396:	bd70      	pop	{r4, r5, r6, pc}
 800b398:	6802      	ldr	r2, [r0, #0]
 800b39a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b39e:	2300      	movs	r3, #0
 800b3a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3a4:	e7f7      	b.n	800b396 <_Balloc+0x58>

0800b3a6 <_Bfree>:
 800b3a6:	b570      	push	{r4, r5, r6, lr}
 800b3a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b3aa:	4606      	mov	r6, r0
 800b3ac:	460d      	mov	r5, r1
 800b3ae:	b93c      	cbnz	r4, 800b3c0 <_Bfree+0x1a>
 800b3b0:	2010      	movs	r0, #16
 800b3b2:	f7ff ff9f 	bl	800b2f4 <malloc>
 800b3b6:	6270      	str	r0, [r6, #36]	; 0x24
 800b3b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b3bc:	6004      	str	r4, [r0, #0]
 800b3be:	60c4      	str	r4, [r0, #12]
 800b3c0:	b13d      	cbz	r5, 800b3d2 <_Bfree+0x2c>
 800b3c2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b3c4:	686a      	ldr	r2, [r5, #4]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3cc:	6029      	str	r1, [r5, #0]
 800b3ce:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}

0800b3d4 <__multadd>:
 800b3d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d8:	690d      	ldr	r5, [r1, #16]
 800b3da:	461f      	mov	r7, r3
 800b3dc:	4606      	mov	r6, r0
 800b3de:	460c      	mov	r4, r1
 800b3e0:	f101 0c14 	add.w	ip, r1, #20
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	f8dc 0000 	ldr.w	r0, [ip]
 800b3ea:	b281      	uxth	r1, r0
 800b3ec:	fb02 7101 	mla	r1, r2, r1, r7
 800b3f0:	0c0f      	lsrs	r7, r1, #16
 800b3f2:	0c00      	lsrs	r0, r0, #16
 800b3f4:	fb02 7000 	mla	r0, r2, r0, r7
 800b3f8:	b289      	uxth	r1, r1
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b400:	429d      	cmp	r5, r3
 800b402:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b406:	f84c 1b04 	str.w	r1, [ip], #4
 800b40a:	dcec      	bgt.n	800b3e6 <__multadd+0x12>
 800b40c:	b1d7      	cbz	r7, 800b444 <__multadd+0x70>
 800b40e:	68a3      	ldr	r3, [r4, #8]
 800b410:	42ab      	cmp	r3, r5
 800b412:	dc12      	bgt.n	800b43a <__multadd+0x66>
 800b414:	6861      	ldr	r1, [r4, #4]
 800b416:	4630      	mov	r0, r6
 800b418:	3101      	adds	r1, #1
 800b41a:	f7ff ff90 	bl	800b33e <_Balloc>
 800b41e:	6922      	ldr	r2, [r4, #16]
 800b420:	3202      	adds	r2, #2
 800b422:	f104 010c 	add.w	r1, r4, #12
 800b426:	4680      	mov	r8, r0
 800b428:	0092      	lsls	r2, r2, #2
 800b42a:	300c      	adds	r0, #12
 800b42c:	f7ff ff7c 	bl	800b328 <memcpy>
 800b430:	4621      	mov	r1, r4
 800b432:	4630      	mov	r0, r6
 800b434:	f7ff ffb7 	bl	800b3a6 <_Bfree>
 800b438:	4644      	mov	r4, r8
 800b43a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b43e:	3501      	adds	r5, #1
 800b440:	615f      	str	r7, [r3, #20]
 800b442:	6125      	str	r5, [r4, #16]
 800b444:	4620      	mov	r0, r4
 800b446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b44a <__s2b>:
 800b44a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b44e:	460c      	mov	r4, r1
 800b450:	4615      	mov	r5, r2
 800b452:	461f      	mov	r7, r3
 800b454:	2209      	movs	r2, #9
 800b456:	3308      	adds	r3, #8
 800b458:	4606      	mov	r6, r0
 800b45a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b45e:	2100      	movs	r1, #0
 800b460:	2201      	movs	r2, #1
 800b462:	429a      	cmp	r2, r3
 800b464:	db20      	blt.n	800b4a8 <__s2b+0x5e>
 800b466:	4630      	mov	r0, r6
 800b468:	f7ff ff69 	bl	800b33e <_Balloc>
 800b46c:	9b08      	ldr	r3, [sp, #32]
 800b46e:	6143      	str	r3, [r0, #20]
 800b470:	2d09      	cmp	r5, #9
 800b472:	f04f 0301 	mov.w	r3, #1
 800b476:	6103      	str	r3, [r0, #16]
 800b478:	dd19      	ble.n	800b4ae <__s2b+0x64>
 800b47a:	f104 0809 	add.w	r8, r4, #9
 800b47e:	46c1      	mov	r9, r8
 800b480:	442c      	add	r4, r5
 800b482:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b486:	4601      	mov	r1, r0
 800b488:	3b30      	subs	r3, #48	; 0x30
 800b48a:	220a      	movs	r2, #10
 800b48c:	4630      	mov	r0, r6
 800b48e:	f7ff ffa1 	bl	800b3d4 <__multadd>
 800b492:	45a1      	cmp	r9, r4
 800b494:	d1f5      	bne.n	800b482 <__s2b+0x38>
 800b496:	eb08 0405 	add.w	r4, r8, r5
 800b49a:	3c08      	subs	r4, #8
 800b49c:	1b2d      	subs	r5, r5, r4
 800b49e:	1963      	adds	r3, r4, r5
 800b4a0:	42bb      	cmp	r3, r7
 800b4a2:	db07      	blt.n	800b4b4 <__s2b+0x6a>
 800b4a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4a8:	0052      	lsls	r2, r2, #1
 800b4aa:	3101      	adds	r1, #1
 800b4ac:	e7d9      	b.n	800b462 <__s2b+0x18>
 800b4ae:	340a      	adds	r4, #10
 800b4b0:	2509      	movs	r5, #9
 800b4b2:	e7f3      	b.n	800b49c <__s2b+0x52>
 800b4b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b4b8:	4601      	mov	r1, r0
 800b4ba:	3b30      	subs	r3, #48	; 0x30
 800b4bc:	220a      	movs	r2, #10
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f7ff ff88 	bl	800b3d4 <__multadd>
 800b4c4:	e7eb      	b.n	800b49e <__s2b+0x54>

0800b4c6 <__hi0bits>:
 800b4c6:	0c02      	lsrs	r2, r0, #16
 800b4c8:	0412      	lsls	r2, r2, #16
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	b9b2      	cbnz	r2, 800b4fc <__hi0bits+0x36>
 800b4ce:	0403      	lsls	r3, r0, #16
 800b4d0:	2010      	movs	r0, #16
 800b4d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b4d6:	bf04      	itt	eq
 800b4d8:	021b      	lsleq	r3, r3, #8
 800b4da:	3008      	addeq	r0, #8
 800b4dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b4e0:	bf04      	itt	eq
 800b4e2:	011b      	lsleq	r3, r3, #4
 800b4e4:	3004      	addeq	r0, #4
 800b4e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b4ea:	bf04      	itt	eq
 800b4ec:	009b      	lsleq	r3, r3, #2
 800b4ee:	3002      	addeq	r0, #2
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	db06      	blt.n	800b502 <__hi0bits+0x3c>
 800b4f4:	005b      	lsls	r3, r3, #1
 800b4f6:	d503      	bpl.n	800b500 <__hi0bits+0x3a>
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	4770      	bx	lr
 800b4fc:	2000      	movs	r0, #0
 800b4fe:	e7e8      	b.n	800b4d2 <__hi0bits+0xc>
 800b500:	2020      	movs	r0, #32
 800b502:	4770      	bx	lr

0800b504 <__lo0bits>:
 800b504:	6803      	ldr	r3, [r0, #0]
 800b506:	f013 0207 	ands.w	r2, r3, #7
 800b50a:	4601      	mov	r1, r0
 800b50c:	d00b      	beq.n	800b526 <__lo0bits+0x22>
 800b50e:	07da      	lsls	r2, r3, #31
 800b510:	d423      	bmi.n	800b55a <__lo0bits+0x56>
 800b512:	0798      	lsls	r0, r3, #30
 800b514:	bf49      	itett	mi
 800b516:	085b      	lsrmi	r3, r3, #1
 800b518:	089b      	lsrpl	r3, r3, #2
 800b51a:	2001      	movmi	r0, #1
 800b51c:	600b      	strmi	r3, [r1, #0]
 800b51e:	bf5c      	itt	pl
 800b520:	600b      	strpl	r3, [r1, #0]
 800b522:	2002      	movpl	r0, #2
 800b524:	4770      	bx	lr
 800b526:	b298      	uxth	r0, r3
 800b528:	b9a8      	cbnz	r0, 800b556 <__lo0bits+0x52>
 800b52a:	0c1b      	lsrs	r3, r3, #16
 800b52c:	2010      	movs	r0, #16
 800b52e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b532:	bf04      	itt	eq
 800b534:	0a1b      	lsreq	r3, r3, #8
 800b536:	3008      	addeq	r0, #8
 800b538:	071a      	lsls	r2, r3, #28
 800b53a:	bf04      	itt	eq
 800b53c:	091b      	lsreq	r3, r3, #4
 800b53e:	3004      	addeq	r0, #4
 800b540:	079a      	lsls	r2, r3, #30
 800b542:	bf04      	itt	eq
 800b544:	089b      	lsreq	r3, r3, #2
 800b546:	3002      	addeq	r0, #2
 800b548:	07da      	lsls	r2, r3, #31
 800b54a:	d402      	bmi.n	800b552 <__lo0bits+0x4e>
 800b54c:	085b      	lsrs	r3, r3, #1
 800b54e:	d006      	beq.n	800b55e <__lo0bits+0x5a>
 800b550:	3001      	adds	r0, #1
 800b552:	600b      	str	r3, [r1, #0]
 800b554:	4770      	bx	lr
 800b556:	4610      	mov	r0, r2
 800b558:	e7e9      	b.n	800b52e <__lo0bits+0x2a>
 800b55a:	2000      	movs	r0, #0
 800b55c:	4770      	bx	lr
 800b55e:	2020      	movs	r0, #32
 800b560:	4770      	bx	lr

0800b562 <__i2b>:
 800b562:	b510      	push	{r4, lr}
 800b564:	460c      	mov	r4, r1
 800b566:	2101      	movs	r1, #1
 800b568:	f7ff fee9 	bl	800b33e <_Balloc>
 800b56c:	2201      	movs	r2, #1
 800b56e:	6144      	str	r4, [r0, #20]
 800b570:	6102      	str	r2, [r0, #16]
 800b572:	bd10      	pop	{r4, pc}

0800b574 <__multiply>:
 800b574:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b578:	4614      	mov	r4, r2
 800b57a:	690a      	ldr	r2, [r1, #16]
 800b57c:	6923      	ldr	r3, [r4, #16]
 800b57e:	429a      	cmp	r2, r3
 800b580:	bfb8      	it	lt
 800b582:	460b      	movlt	r3, r1
 800b584:	4688      	mov	r8, r1
 800b586:	bfbc      	itt	lt
 800b588:	46a0      	movlt	r8, r4
 800b58a:	461c      	movlt	r4, r3
 800b58c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b590:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b594:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b598:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b59c:	eb07 0609 	add.w	r6, r7, r9
 800b5a0:	42b3      	cmp	r3, r6
 800b5a2:	bfb8      	it	lt
 800b5a4:	3101      	addlt	r1, #1
 800b5a6:	f7ff feca 	bl	800b33e <_Balloc>
 800b5aa:	f100 0514 	add.w	r5, r0, #20
 800b5ae:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b5b2:	462b      	mov	r3, r5
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	4573      	cmp	r3, lr
 800b5b8:	d316      	bcc.n	800b5e8 <__multiply+0x74>
 800b5ba:	f104 0214 	add.w	r2, r4, #20
 800b5be:	f108 0114 	add.w	r1, r8, #20
 800b5c2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b5c6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b5ca:	9300      	str	r3, [sp, #0]
 800b5cc:	9b00      	ldr	r3, [sp, #0]
 800b5ce:	9201      	str	r2, [sp, #4]
 800b5d0:	4293      	cmp	r3, r2
 800b5d2:	d80c      	bhi.n	800b5ee <__multiply+0x7a>
 800b5d4:	2e00      	cmp	r6, #0
 800b5d6:	dd03      	ble.n	800b5e0 <__multiply+0x6c>
 800b5d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d05d      	beq.n	800b69c <__multiply+0x128>
 800b5e0:	6106      	str	r6, [r0, #16]
 800b5e2:	b003      	add	sp, #12
 800b5e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5e8:	f843 2b04 	str.w	r2, [r3], #4
 800b5ec:	e7e3      	b.n	800b5b6 <__multiply+0x42>
 800b5ee:	f8b2 b000 	ldrh.w	fp, [r2]
 800b5f2:	f1bb 0f00 	cmp.w	fp, #0
 800b5f6:	d023      	beq.n	800b640 <__multiply+0xcc>
 800b5f8:	4689      	mov	r9, r1
 800b5fa:	46ac      	mov	ip, r5
 800b5fc:	f04f 0800 	mov.w	r8, #0
 800b600:	f859 4b04 	ldr.w	r4, [r9], #4
 800b604:	f8dc a000 	ldr.w	sl, [ip]
 800b608:	b2a3      	uxth	r3, r4
 800b60a:	fa1f fa8a 	uxth.w	sl, sl
 800b60e:	fb0b a303 	mla	r3, fp, r3, sl
 800b612:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b616:	f8dc 4000 	ldr.w	r4, [ip]
 800b61a:	4443      	add	r3, r8
 800b61c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b620:	fb0b 840a 	mla	r4, fp, sl, r8
 800b624:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b628:	46e2      	mov	sl, ip
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b630:	454f      	cmp	r7, r9
 800b632:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b636:	f84a 3b04 	str.w	r3, [sl], #4
 800b63a:	d82b      	bhi.n	800b694 <__multiply+0x120>
 800b63c:	f8cc 8004 	str.w	r8, [ip, #4]
 800b640:	9b01      	ldr	r3, [sp, #4]
 800b642:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b646:	3204      	adds	r2, #4
 800b648:	f1ba 0f00 	cmp.w	sl, #0
 800b64c:	d020      	beq.n	800b690 <__multiply+0x11c>
 800b64e:	682b      	ldr	r3, [r5, #0]
 800b650:	4689      	mov	r9, r1
 800b652:	46a8      	mov	r8, r5
 800b654:	f04f 0b00 	mov.w	fp, #0
 800b658:	f8b9 c000 	ldrh.w	ip, [r9]
 800b65c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b660:	fb0a 440c 	mla	r4, sl, ip, r4
 800b664:	445c      	add	r4, fp
 800b666:	46c4      	mov	ip, r8
 800b668:	b29b      	uxth	r3, r3
 800b66a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b66e:	f84c 3b04 	str.w	r3, [ip], #4
 800b672:	f859 3b04 	ldr.w	r3, [r9], #4
 800b676:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b67a:	0c1b      	lsrs	r3, r3, #16
 800b67c:	fb0a b303 	mla	r3, sl, r3, fp
 800b680:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b684:	454f      	cmp	r7, r9
 800b686:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b68a:	d805      	bhi.n	800b698 <__multiply+0x124>
 800b68c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b690:	3504      	adds	r5, #4
 800b692:	e79b      	b.n	800b5cc <__multiply+0x58>
 800b694:	46d4      	mov	ip, sl
 800b696:	e7b3      	b.n	800b600 <__multiply+0x8c>
 800b698:	46e0      	mov	r8, ip
 800b69a:	e7dd      	b.n	800b658 <__multiply+0xe4>
 800b69c:	3e01      	subs	r6, #1
 800b69e:	e799      	b.n	800b5d4 <__multiply+0x60>

0800b6a0 <__pow5mult>:
 800b6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6a4:	4615      	mov	r5, r2
 800b6a6:	f012 0203 	ands.w	r2, r2, #3
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	d007      	beq.n	800b6c0 <__pow5mult+0x20>
 800b6b0:	3a01      	subs	r2, #1
 800b6b2:	4c21      	ldr	r4, [pc, #132]	; (800b738 <__pow5mult+0x98>)
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6ba:	f7ff fe8b 	bl	800b3d4 <__multadd>
 800b6be:	4607      	mov	r7, r0
 800b6c0:	10ad      	asrs	r5, r5, #2
 800b6c2:	d035      	beq.n	800b730 <__pow5mult+0x90>
 800b6c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b6c6:	b93c      	cbnz	r4, 800b6d8 <__pow5mult+0x38>
 800b6c8:	2010      	movs	r0, #16
 800b6ca:	f7ff fe13 	bl	800b2f4 <malloc>
 800b6ce:	6270      	str	r0, [r6, #36]	; 0x24
 800b6d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6d4:	6004      	str	r4, [r0, #0]
 800b6d6:	60c4      	str	r4, [r0, #12]
 800b6d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b6dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b6e0:	b94c      	cbnz	r4, 800b6f6 <__pow5mult+0x56>
 800b6e2:	f240 2171 	movw	r1, #625	; 0x271
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	f7ff ff3b 	bl	800b562 <__i2b>
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	6003      	str	r3, [r0, #0]
 800b6f6:	f04f 0800 	mov.w	r8, #0
 800b6fa:	07eb      	lsls	r3, r5, #31
 800b6fc:	d50a      	bpl.n	800b714 <__pow5mult+0x74>
 800b6fe:	4639      	mov	r1, r7
 800b700:	4622      	mov	r2, r4
 800b702:	4630      	mov	r0, r6
 800b704:	f7ff ff36 	bl	800b574 <__multiply>
 800b708:	4639      	mov	r1, r7
 800b70a:	4681      	mov	r9, r0
 800b70c:	4630      	mov	r0, r6
 800b70e:	f7ff fe4a 	bl	800b3a6 <_Bfree>
 800b712:	464f      	mov	r7, r9
 800b714:	106d      	asrs	r5, r5, #1
 800b716:	d00b      	beq.n	800b730 <__pow5mult+0x90>
 800b718:	6820      	ldr	r0, [r4, #0]
 800b71a:	b938      	cbnz	r0, 800b72c <__pow5mult+0x8c>
 800b71c:	4622      	mov	r2, r4
 800b71e:	4621      	mov	r1, r4
 800b720:	4630      	mov	r0, r6
 800b722:	f7ff ff27 	bl	800b574 <__multiply>
 800b726:	6020      	str	r0, [r4, #0]
 800b728:	f8c0 8000 	str.w	r8, [r0]
 800b72c:	4604      	mov	r4, r0
 800b72e:	e7e4      	b.n	800b6fa <__pow5mult+0x5a>
 800b730:	4638      	mov	r0, r7
 800b732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b736:	bf00      	nop
 800b738:	0800c210 	.word	0x0800c210

0800b73c <__lshift>:
 800b73c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b740:	460c      	mov	r4, r1
 800b742:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b746:	6923      	ldr	r3, [r4, #16]
 800b748:	6849      	ldr	r1, [r1, #4]
 800b74a:	eb0a 0903 	add.w	r9, sl, r3
 800b74e:	68a3      	ldr	r3, [r4, #8]
 800b750:	4607      	mov	r7, r0
 800b752:	4616      	mov	r6, r2
 800b754:	f109 0501 	add.w	r5, r9, #1
 800b758:	42ab      	cmp	r3, r5
 800b75a:	db32      	blt.n	800b7c2 <__lshift+0x86>
 800b75c:	4638      	mov	r0, r7
 800b75e:	f7ff fdee 	bl	800b33e <_Balloc>
 800b762:	2300      	movs	r3, #0
 800b764:	4680      	mov	r8, r0
 800b766:	f100 0114 	add.w	r1, r0, #20
 800b76a:	461a      	mov	r2, r3
 800b76c:	4553      	cmp	r3, sl
 800b76e:	db2b      	blt.n	800b7c8 <__lshift+0x8c>
 800b770:	6920      	ldr	r0, [r4, #16]
 800b772:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b776:	f104 0314 	add.w	r3, r4, #20
 800b77a:	f016 021f 	ands.w	r2, r6, #31
 800b77e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b782:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b786:	d025      	beq.n	800b7d4 <__lshift+0x98>
 800b788:	f1c2 0e20 	rsb	lr, r2, #32
 800b78c:	2000      	movs	r0, #0
 800b78e:	681e      	ldr	r6, [r3, #0]
 800b790:	468a      	mov	sl, r1
 800b792:	4096      	lsls	r6, r2
 800b794:	4330      	orrs	r0, r6
 800b796:	f84a 0b04 	str.w	r0, [sl], #4
 800b79a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b79e:	459c      	cmp	ip, r3
 800b7a0:	fa20 f00e 	lsr.w	r0, r0, lr
 800b7a4:	d814      	bhi.n	800b7d0 <__lshift+0x94>
 800b7a6:	6048      	str	r0, [r1, #4]
 800b7a8:	b108      	cbz	r0, 800b7ae <__lshift+0x72>
 800b7aa:	f109 0502 	add.w	r5, r9, #2
 800b7ae:	3d01      	subs	r5, #1
 800b7b0:	4638      	mov	r0, r7
 800b7b2:	f8c8 5010 	str.w	r5, [r8, #16]
 800b7b6:	4621      	mov	r1, r4
 800b7b8:	f7ff fdf5 	bl	800b3a6 <_Bfree>
 800b7bc:	4640      	mov	r0, r8
 800b7be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c2:	3101      	adds	r1, #1
 800b7c4:	005b      	lsls	r3, r3, #1
 800b7c6:	e7c7      	b.n	800b758 <__lshift+0x1c>
 800b7c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b7cc:	3301      	adds	r3, #1
 800b7ce:	e7cd      	b.n	800b76c <__lshift+0x30>
 800b7d0:	4651      	mov	r1, sl
 800b7d2:	e7dc      	b.n	800b78e <__lshift+0x52>
 800b7d4:	3904      	subs	r1, #4
 800b7d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7da:	f841 2f04 	str.w	r2, [r1, #4]!
 800b7de:	459c      	cmp	ip, r3
 800b7e0:	d8f9      	bhi.n	800b7d6 <__lshift+0x9a>
 800b7e2:	e7e4      	b.n	800b7ae <__lshift+0x72>

0800b7e4 <__mcmp>:
 800b7e4:	6903      	ldr	r3, [r0, #16]
 800b7e6:	690a      	ldr	r2, [r1, #16]
 800b7e8:	1a9b      	subs	r3, r3, r2
 800b7ea:	b530      	push	{r4, r5, lr}
 800b7ec:	d10c      	bne.n	800b808 <__mcmp+0x24>
 800b7ee:	0092      	lsls	r2, r2, #2
 800b7f0:	3014      	adds	r0, #20
 800b7f2:	3114      	adds	r1, #20
 800b7f4:	1884      	adds	r4, r0, r2
 800b7f6:	4411      	add	r1, r2
 800b7f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b7fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b800:	4295      	cmp	r5, r2
 800b802:	d003      	beq.n	800b80c <__mcmp+0x28>
 800b804:	d305      	bcc.n	800b812 <__mcmp+0x2e>
 800b806:	2301      	movs	r3, #1
 800b808:	4618      	mov	r0, r3
 800b80a:	bd30      	pop	{r4, r5, pc}
 800b80c:	42a0      	cmp	r0, r4
 800b80e:	d3f3      	bcc.n	800b7f8 <__mcmp+0x14>
 800b810:	e7fa      	b.n	800b808 <__mcmp+0x24>
 800b812:	f04f 33ff 	mov.w	r3, #4294967295
 800b816:	e7f7      	b.n	800b808 <__mcmp+0x24>

0800b818 <__mdiff>:
 800b818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b81c:	460d      	mov	r5, r1
 800b81e:	4607      	mov	r7, r0
 800b820:	4611      	mov	r1, r2
 800b822:	4628      	mov	r0, r5
 800b824:	4614      	mov	r4, r2
 800b826:	f7ff ffdd 	bl	800b7e4 <__mcmp>
 800b82a:	1e06      	subs	r6, r0, #0
 800b82c:	d108      	bne.n	800b840 <__mdiff+0x28>
 800b82e:	4631      	mov	r1, r6
 800b830:	4638      	mov	r0, r7
 800b832:	f7ff fd84 	bl	800b33e <_Balloc>
 800b836:	2301      	movs	r3, #1
 800b838:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b83c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b840:	bfa4      	itt	ge
 800b842:	4623      	movge	r3, r4
 800b844:	462c      	movge	r4, r5
 800b846:	4638      	mov	r0, r7
 800b848:	6861      	ldr	r1, [r4, #4]
 800b84a:	bfa6      	itte	ge
 800b84c:	461d      	movge	r5, r3
 800b84e:	2600      	movge	r6, #0
 800b850:	2601      	movlt	r6, #1
 800b852:	f7ff fd74 	bl	800b33e <_Balloc>
 800b856:	692b      	ldr	r3, [r5, #16]
 800b858:	60c6      	str	r6, [r0, #12]
 800b85a:	6926      	ldr	r6, [r4, #16]
 800b85c:	f105 0914 	add.w	r9, r5, #20
 800b860:	f104 0214 	add.w	r2, r4, #20
 800b864:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b868:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b86c:	f100 0514 	add.w	r5, r0, #20
 800b870:	f04f 0e00 	mov.w	lr, #0
 800b874:	f852 ab04 	ldr.w	sl, [r2], #4
 800b878:	f859 4b04 	ldr.w	r4, [r9], #4
 800b87c:	fa1e f18a 	uxtah	r1, lr, sl
 800b880:	b2a3      	uxth	r3, r4
 800b882:	1ac9      	subs	r1, r1, r3
 800b884:	0c23      	lsrs	r3, r4, #16
 800b886:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b88a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b88e:	b289      	uxth	r1, r1
 800b890:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b894:	45c8      	cmp	r8, r9
 800b896:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b89a:	4694      	mov	ip, r2
 800b89c:	f845 3b04 	str.w	r3, [r5], #4
 800b8a0:	d8e8      	bhi.n	800b874 <__mdiff+0x5c>
 800b8a2:	45bc      	cmp	ip, r7
 800b8a4:	d304      	bcc.n	800b8b0 <__mdiff+0x98>
 800b8a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b8aa:	b183      	cbz	r3, 800b8ce <__mdiff+0xb6>
 800b8ac:	6106      	str	r6, [r0, #16]
 800b8ae:	e7c5      	b.n	800b83c <__mdiff+0x24>
 800b8b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b8b4:	fa1e f381 	uxtah	r3, lr, r1
 800b8b8:	141a      	asrs	r2, r3, #16
 800b8ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b8be:	b29b      	uxth	r3, r3
 800b8c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b8c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b8c8:	f845 3b04 	str.w	r3, [r5], #4
 800b8cc:	e7e9      	b.n	800b8a2 <__mdiff+0x8a>
 800b8ce:	3e01      	subs	r6, #1
 800b8d0:	e7e9      	b.n	800b8a6 <__mdiff+0x8e>
	...

0800b8d4 <__ulp>:
 800b8d4:	4b12      	ldr	r3, [pc, #72]	; (800b920 <__ulp+0x4c>)
 800b8d6:	ee10 2a90 	vmov	r2, s1
 800b8da:	401a      	ands	r2, r3
 800b8dc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	dd04      	ble.n	800b8ee <__ulp+0x1a>
 800b8e4:	2000      	movs	r0, #0
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	ec41 0b10 	vmov	d0, r0, r1
 800b8ec:	4770      	bx	lr
 800b8ee:	425b      	negs	r3, r3
 800b8f0:	151b      	asrs	r3, r3, #20
 800b8f2:	2b13      	cmp	r3, #19
 800b8f4:	f04f 0000 	mov.w	r0, #0
 800b8f8:	f04f 0100 	mov.w	r1, #0
 800b8fc:	dc04      	bgt.n	800b908 <__ulp+0x34>
 800b8fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b902:	fa42 f103 	asr.w	r1, r2, r3
 800b906:	e7ef      	b.n	800b8e8 <__ulp+0x14>
 800b908:	3b14      	subs	r3, #20
 800b90a:	2b1e      	cmp	r3, #30
 800b90c:	f04f 0201 	mov.w	r2, #1
 800b910:	bfda      	itte	le
 800b912:	f1c3 031f 	rsble	r3, r3, #31
 800b916:	fa02 f303 	lslle.w	r3, r2, r3
 800b91a:	4613      	movgt	r3, r2
 800b91c:	4618      	mov	r0, r3
 800b91e:	e7e3      	b.n	800b8e8 <__ulp+0x14>
 800b920:	7ff00000 	.word	0x7ff00000

0800b924 <__b2d>:
 800b924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b926:	6905      	ldr	r5, [r0, #16]
 800b928:	f100 0714 	add.w	r7, r0, #20
 800b92c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b930:	1f2e      	subs	r6, r5, #4
 800b932:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b936:	4620      	mov	r0, r4
 800b938:	f7ff fdc5 	bl	800b4c6 <__hi0bits>
 800b93c:	f1c0 0320 	rsb	r3, r0, #32
 800b940:	280a      	cmp	r0, #10
 800b942:	600b      	str	r3, [r1, #0]
 800b944:	f8df c074 	ldr.w	ip, [pc, #116]	; 800b9bc <__b2d+0x98>
 800b948:	dc14      	bgt.n	800b974 <__b2d+0x50>
 800b94a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b94e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b952:	42b7      	cmp	r7, r6
 800b954:	ea41 030c 	orr.w	r3, r1, ip
 800b958:	bf34      	ite	cc
 800b95a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b95e:	2100      	movcs	r1, #0
 800b960:	3015      	adds	r0, #21
 800b962:	fa04 f000 	lsl.w	r0, r4, r0
 800b966:	fa21 f10e 	lsr.w	r1, r1, lr
 800b96a:	ea40 0201 	orr.w	r2, r0, r1
 800b96e:	ec43 2b10 	vmov	d0, r2, r3
 800b972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b974:	42b7      	cmp	r7, r6
 800b976:	bf3a      	itte	cc
 800b978:	f1a5 0608 	subcc.w	r6, r5, #8
 800b97c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b980:	2100      	movcs	r1, #0
 800b982:	380b      	subs	r0, #11
 800b984:	d015      	beq.n	800b9b2 <__b2d+0x8e>
 800b986:	4084      	lsls	r4, r0
 800b988:	f1c0 0520 	rsb	r5, r0, #32
 800b98c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800b990:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800b994:	42be      	cmp	r6, r7
 800b996:	fa21 fc05 	lsr.w	ip, r1, r5
 800b99a:	ea44 030c 	orr.w	r3, r4, ip
 800b99e:	bf8c      	ite	hi
 800b9a0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b9a4:	2400      	movls	r4, #0
 800b9a6:	fa01 f000 	lsl.w	r0, r1, r0
 800b9aa:	40ec      	lsrs	r4, r5
 800b9ac:	ea40 0204 	orr.w	r2, r0, r4
 800b9b0:	e7dd      	b.n	800b96e <__b2d+0x4a>
 800b9b2:	ea44 030c 	orr.w	r3, r4, ip
 800b9b6:	460a      	mov	r2, r1
 800b9b8:	e7d9      	b.n	800b96e <__b2d+0x4a>
 800b9ba:	bf00      	nop
 800b9bc:	3ff00000 	.word	0x3ff00000

0800b9c0 <__d2b>:
 800b9c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9c4:	460e      	mov	r6, r1
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	ec59 8b10 	vmov	r8, r9, d0
 800b9cc:	4615      	mov	r5, r2
 800b9ce:	f7ff fcb6 	bl	800b33e <_Balloc>
 800b9d2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b9d6:	4607      	mov	r7, r0
 800b9d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9dc:	bb34      	cbnz	r4, 800ba2c <__d2b+0x6c>
 800b9de:	9301      	str	r3, [sp, #4]
 800b9e0:	f1b8 0300 	subs.w	r3, r8, #0
 800b9e4:	d027      	beq.n	800ba36 <__d2b+0x76>
 800b9e6:	a802      	add	r0, sp, #8
 800b9e8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b9ec:	f7ff fd8a 	bl	800b504 <__lo0bits>
 800b9f0:	9900      	ldr	r1, [sp, #0]
 800b9f2:	b1f0      	cbz	r0, 800ba32 <__d2b+0x72>
 800b9f4:	9a01      	ldr	r2, [sp, #4]
 800b9f6:	f1c0 0320 	rsb	r3, r0, #32
 800b9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b9fe:	430b      	orrs	r3, r1
 800ba00:	40c2      	lsrs	r2, r0
 800ba02:	617b      	str	r3, [r7, #20]
 800ba04:	9201      	str	r2, [sp, #4]
 800ba06:	9b01      	ldr	r3, [sp, #4]
 800ba08:	61bb      	str	r3, [r7, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	bf14      	ite	ne
 800ba0e:	2102      	movne	r1, #2
 800ba10:	2101      	moveq	r1, #1
 800ba12:	6139      	str	r1, [r7, #16]
 800ba14:	b1c4      	cbz	r4, 800ba48 <__d2b+0x88>
 800ba16:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ba1a:	4404      	add	r4, r0
 800ba1c:	6034      	str	r4, [r6, #0]
 800ba1e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba22:	6028      	str	r0, [r5, #0]
 800ba24:	4638      	mov	r0, r7
 800ba26:	b003      	add	sp, #12
 800ba28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba30:	e7d5      	b.n	800b9de <__d2b+0x1e>
 800ba32:	6179      	str	r1, [r7, #20]
 800ba34:	e7e7      	b.n	800ba06 <__d2b+0x46>
 800ba36:	a801      	add	r0, sp, #4
 800ba38:	f7ff fd64 	bl	800b504 <__lo0bits>
 800ba3c:	9b01      	ldr	r3, [sp, #4]
 800ba3e:	617b      	str	r3, [r7, #20]
 800ba40:	2101      	movs	r1, #1
 800ba42:	6139      	str	r1, [r7, #16]
 800ba44:	3020      	adds	r0, #32
 800ba46:	e7e5      	b.n	800ba14 <__d2b+0x54>
 800ba48:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ba4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba50:	6030      	str	r0, [r6, #0]
 800ba52:	6918      	ldr	r0, [r3, #16]
 800ba54:	f7ff fd37 	bl	800b4c6 <__hi0bits>
 800ba58:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ba5c:	e7e1      	b.n	800ba22 <__d2b+0x62>

0800ba5e <__ratio>:
 800ba5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba62:	4688      	mov	r8, r1
 800ba64:	4669      	mov	r1, sp
 800ba66:	4681      	mov	r9, r0
 800ba68:	f7ff ff5c 	bl	800b924 <__b2d>
 800ba6c:	a901      	add	r1, sp, #4
 800ba6e:	4640      	mov	r0, r8
 800ba70:	ec57 6b10 	vmov	r6, r7, d0
 800ba74:	f7ff ff56 	bl	800b924 <__b2d>
 800ba78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ba7c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ba80:	eba3 0c02 	sub.w	ip, r3, r2
 800ba84:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ba88:	1a9b      	subs	r3, r3, r2
 800ba8a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ba8e:	ec5b ab10 	vmov	sl, fp, d0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	bfce      	itee	gt
 800ba96:	463a      	movgt	r2, r7
 800ba98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ba9c:	465a      	movle	r2, fp
 800ba9e:	4659      	mov	r1, fp
 800baa0:	463d      	mov	r5, r7
 800baa2:	bfd4      	ite	le
 800baa4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800baa8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800baac:	4630      	mov	r0, r6
 800baae:	ee10 2a10 	vmov	r2, s0
 800bab2:	460b      	mov	r3, r1
 800bab4:	4629      	mov	r1, r5
 800bab6:	f7f4 fec9 	bl	800084c <__aeabi_ddiv>
 800baba:	ec41 0b10 	vmov	d0, r0, r1
 800babe:	b003      	add	sp, #12
 800bac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bac4 <__copybits>:
 800bac4:	3901      	subs	r1, #1
 800bac6:	b510      	push	{r4, lr}
 800bac8:	1149      	asrs	r1, r1, #5
 800baca:	6914      	ldr	r4, [r2, #16]
 800bacc:	3101      	adds	r1, #1
 800bace:	f102 0314 	add.w	r3, r2, #20
 800bad2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bad6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bada:	42a3      	cmp	r3, r4
 800badc:	4602      	mov	r2, r0
 800bade:	d303      	bcc.n	800bae8 <__copybits+0x24>
 800bae0:	2300      	movs	r3, #0
 800bae2:	428a      	cmp	r2, r1
 800bae4:	d305      	bcc.n	800baf2 <__copybits+0x2e>
 800bae6:	bd10      	pop	{r4, pc}
 800bae8:	f853 2b04 	ldr.w	r2, [r3], #4
 800baec:	f840 2b04 	str.w	r2, [r0], #4
 800baf0:	e7f3      	b.n	800bada <__copybits+0x16>
 800baf2:	f842 3b04 	str.w	r3, [r2], #4
 800baf6:	e7f4      	b.n	800bae2 <__copybits+0x1e>

0800baf8 <__any_on>:
 800baf8:	f100 0214 	add.w	r2, r0, #20
 800bafc:	6900      	ldr	r0, [r0, #16]
 800bafe:	114b      	asrs	r3, r1, #5
 800bb00:	4298      	cmp	r0, r3
 800bb02:	b510      	push	{r4, lr}
 800bb04:	db11      	blt.n	800bb2a <__any_on+0x32>
 800bb06:	dd0a      	ble.n	800bb1e <__any_on+0x26>
 800bb08:	f011 011f 	ands.w	r1, r1, #31
 800bb0c:	d007      	beq.n	800bb1e <__any_on+0x26>
 800bb0e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb12:	fa24 f001 	lsr.w	r0, r4, r1
 800bb16:	fa00 f101 	lsl.w	r1, r0, r1
 800bb1a:	428c      	cmp	r4, r1
 800bb1c:	d10b      	bne.n	800bb36 <__any_on+0x3e>
 800bb1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d803      	bhi.n	800bb2e <__any_on+0x36>
 800bb26:	2000      	movs	r0, #0
 800bb28:	bd10      	pop	{r4, pc}
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	e7f7      	b.n	800bb1e <__any_on+0x26>
 800bb2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb32:	2900      	cmp	r1, #0
 800bb34:	d0f5      	beq.n	800bb22 <__any_on+0x2a>
 800bb36:	2001      	movs	r0, #1
 800bb38:	e7f6      	b.n	800bb28 <__any_on+0x30>

0800bb3a <_calloc_r>:
 800bb3a:	b538      	push	{r3, r4, r5, lr}
 800bb3c:	fb02 f401 	mul.w	r4, r2, r1
 800bb40:	4621      	mov	r1, r4
 800bb42:	f000 f857 	bl	800bbf4 <_malloc_r>
 800bb46:	4605      	mov	r5, r0
 800bb48:	b118      	cbz	r0, 800bb52 <_calloc_r+0x18>
 800bb4a:	4622      	mov	r2, r4
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	f7fc fd35 	bl	80085bc <memset>
 800bb52:	4628      	mov	r0, r5
 800bb54:	bd38      	pop	{r3, r4, r5, pc}
	...

0800bb58 <_free_r>:
 800bb58:	b538      	push	{r3, r4, r5, lr}
 800bb5a:	4605      	mov	r5, r0
 800bb5c:	2900      	cmp	r1, #0
 800bb5e:	d045      	beq.n	800bbec <_free_r+0x94>
 800bb60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb64:	1f0c      	subs	r4, r1, #4
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	bfb8      	it	lt
 800bb6a:	18e4      	addlt	r4, r4, r3
 800bb6c:	f000 fa36 	bl	800bfdc <__malloc_lock>
 800bb70:	4a1f      	ldr	r2, [pc, #124]	; (800bbf0 <_free_r+0x98>)
 800bb72:	6813      	ldr	r3, [r2, #0]
 800bb74:	4610      	mov	r0, r2
 800bb76:	b933      	cbnz	r3, 800bb86 <_free_r+0x2e>
 800bb78:	6063      	str	r3, [r4, #4]
 800bb7a:	6014      	str	r4, [r2, #0]
 800bb7c:	4628      	mov	r0, r5
 800bb7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb82:	f000 ba2c 	b.w	800bfde <__malloc_unlock>
 800bb86:	42a3      	cmp	r3, r4
 800bb88:	d90c      	bls.n	800bba4 <_free_r+0x4c>
 800bb8a:	6821      	ldr	r1, [r4, #0]
 800bb8c:	1862      	adds	r2, r4, r1
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	bf04      	itt	eq
 800bb92:	681a      	ldreq	r2, [r3, #0]
 800bb94:	685b      	ldreq	r3, [r3, #4]
 800bb96:	6063      	str	r3, [r4, #4]
 800bb98:	bf04      	itt	eq
 800bb9a:	1852      	addeq	r2, r2, r1
 800bb9c:	6022      	streq	r2, [r4, #0]
 800bb9e:	6004      	str	r4, [r0, #0]
 800bba0:	e7ec      	b.n	800bb7c <_free_r+0x24>
 800bba2:	4613      	mov	r3, r2
 800bba4:	685a      	ldr	r2, [r3, #4]
 800bba6:	b10a      	cbz	r2, 800bbac <_free_r+0x54>
 800bba8:	42a2      	cmp	r2, r4
 800bbaa:	d9fa      	bls.n	800bba2 <_free_r+0x4a>
 800bbac:	6819      	ldr	r1, [r3, #0]
 800bbae:	1858      	adds	r0, r3, r1
 800bbb0:	42a0      	cmp	r0, r4
 800bbb2:	d10b      	bne.n	800bbcc <_free_r+0x74>
 800bbb4:	6820      	ldr	r0, [r4, #0]
 800bbb6:	4401      	add	r1, r0
 800bbb8:	1858      	adds	r0, r3, r1
 800bbba:	4282      	cmp	r2, r0
 800bbbc:	6019      	str	r1, [r3, #0]
 800bbbe:	d1dd      	bne.n	800bb7c <_free_r+0x24>
 800bbc0:	6810      	ldr	r0, [r2, #0]
 800bbc2:	6852      	ldr	r2, [r2, #4]
 800bbc4:	605a      	str	r2, [r3, #4]
 800bbc6:	4401      	add	r1, r0
 800bbc8:	6019      	str	r1, [r3, #0]
 800bbca:	e7d7      	b.n	800bb7c <_free_r+0x24>
 800bbcc:	d902      	bls.n	800bbd4 <_free_r+0x7c>
 800bbce:	230c      	movs	r3, #12
 800bbd0:	602b      	str	r3, [r5, #0]
 800bbd2:	e7d3      	b.n	800bb7c <_free_r+0x24>
 800bbd4:	6820      	ldr	r0, [r4, #0]
 800bbd6:	1821      	adds	r1, r4, r0
 800bbd8:	428a      	cmp	r2, r1
 800bbda:	bf04      	itt	eq
 800bbdc:	6811      	ldreq	r1, [r2, #0]
 800bbde:	6852      	ldreq	r2, [r2, #4]
 800bbe0:	6062      	str	r2, [r4, #4]
 800bbe2:	bf04      	itt	eq
 800bbe4:	1809      	addeq	r1, r1, r0
 800bbe6:	6021      	streq	r1, [r4, #0]
 800bbe8:	605c      	str	r4, [r3, #4]
 800bbea:	e7c7      	b.n	800bb7c <_free_r+0x24>
 800bbec:	bd38      	pop	{r3, r4, r5, pc}
 800bbee:	bf00      	nop
 800bbf0:	200003d0 	.word	0x200003d0

0800bbf4 <_malloc_r>:
 800bbf4:	b570      	push	{r4, r5, r6, lr}
 800bbf6:	1ccd      	adds	r5, r1, #3
 800bbf8:	f025 0503 	bic.w	r5, r5, #3
 800bbfc:	3508      	adds	r5, #8
 800bbfe:	2d0c      	cmp	r5, #12
 800bc00:	bf38      	it	cc
 800bc02:	250c      	movcc	r5, #12
 800bc04:	2d00      	cmp	r5, #0
 800bc06:	4606      	mov	r6, r0
 800bc08:	db01      	blt.n	800bc0e <_malloc_r+0x1a>
 800bc0a:	42a9      	cmp	r1, r5
 800bc0c:	d903      	bls.n	800bc16 <_malloc_r+0x22>
 800bc0e:	230c      	movs	r3, #12
 800bc10:	6033      	str	r3, [r6, #0]
 800bc12:	2000      	movs	r0, #0
 800bc14:	bd70      	pop	{r4, r5, r6, pc}
 800bc16:	f000 f9e1 	bl	800bfdc <__malloc_lock>
 800bc1a:	4a21      	ldr	r2, [pc, #132]	; (800bca0 <_malloc_r+0xac>)
 800bc1c:	6814      	ldr	r4, [r2, #0]
 800bc1e:	4621      	mov	r1, r4
 800bc20:	b991      	cbnz	r1, 800bc48 <_malloc_r+0x54>
 800bc22:	4c20      	ldr	r4, [pc, #128]	; (800bca4 <_malloc_r+0xb0>)
 800bc24:	6823      	ldr	r3, [r4, #0]
 800bc26:	b91b      	cbnz	r3, 800bc30 <_malloc_r+0x3c>
 800bc28:	4630      	mov	r0, r6
 800bc2a:	f000 f98f 	bl	800bf4c <_sbrk_r>
 800bc2e:	6020      	str	r0, [r4, #0]
 800bc30:	4629      	mov	r1, r5
 800bc32:	4630      	mov	r0, r6
 800bc34:	f000 f98a 	bl	800bf4c <_sbrk_r>
 800bc38:	1c43      	adds	r3, r0, #1
 800bc3a:	d124      	bne.n	800bc86 <_malloc_r+0x92>
 800bc3c:	230c      	movs	r3, #12
 800bc3e:	6033      	str	r3, [r6, #0]
 800bc40:	4630      	mov	r0, r6
 800bc42:	f000 f9cc 	bl	800bfde <__malloc_unlock>
 800bc46:	e7e4      	b.n	800bc12 <_malloc_r+0x1e>
 800bc48:	680b      	ldr	r3, [r1, #0]
 800bc4a:	1b5b      	subs	r3, r3, r5
 800bc4c:	d418      	bmi.n	800bc80 <_malloc_r+0x8c>
 800bc4e:	2b0b      	cmp	r3, #11
 800bc50:	d90f      	bls.n	800bc72 <_malloc_r+0x7e>
 800bc52:	600b      	str	r3, [r1, #0]
 800bc54:	50cd      	str	r5, [r1, r3]
 800bc56:	18cc      	adds	r4, r1, r3
 800bc58:	4630      	mov	r0, r6
 800bc5a:	f000 f9c0 	bl	800bfde <__malloc_unlock>
 800bc5e:	f104 000b 	add.w	r0, r4, #11
 800bc62:	1d23      	adds	r3, r4, #4
 800bc64:	f020 0007 	bic.w	r0, r0, #7
 800bc68:	1ac3      	subs	r3, r0, r3
 800bc6a:	d0d3      	beq.n	800bc14 <_malloc_r+0x20>
 800bc6c:	425a      	negs	r2, r3
 800bc6e:	50e2      	str	r2, [r4, r3]
 800bc70:	e7d0      	b.n	800bc14 <_malloc_r+0x20>
 800bc72:	428c      	cmp	r4, r1
 800bc74:	684b      	ldr	r3, [r1, #4]
 800bc76:	bf16      	itet	ne
 800bc78:	6063      	strne	r3, [r4, #4]
 800bc7a:	6013      	streq	r3, [r2, #0]
 800bc7c:	460c      	movne	r4, r1
 800bc7e:	e7eb      	b.n	800bc58 <_malloc_r+0x64>
 800bc80:	460c      	mov	r4, r1
 800bc82:	6849      	ldr	r1, [r1, #4]
 800bc84:	e7cc      	b.n	800bc20 <_malloc_r+0x2c>
 800bc86:	1cc4      	adds	r4, r0, #3
 800bc88:	f024 0403 	bic.w	r4, r4, #3
 800bc8c:	42a0      	cmp	r0, r4
 800bc8e:	d005      	beq.n	800bc9c <_malloc_r+0xa8>
 800bc90:	1a21      	subs	r1, r4, r0
 800bc92:	4630      	mov	r0, r6
 800bc94:	f000 f95a 	bl	800bf4c <_sbrk_r>
 800bc98:	3001      	adds	r0, #1
 800bc9a:	d0cf      	beq.n	800bc3c <_malloc_r+0x48>
 800bc9c:	6025      	str	r5, [r4, #0]
 800bc9e:	e7db      	b.n	800bc58 <_malloc_r+0x64>
 800bca0:	200003d0 	.word	0x200003d0
 800bca4:	200003d4 	.word	0x200003d4

0800bca8 <__ssputs_r>:
 800bca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcac:	688e      	ldr	r6, [r1, #8]
 800bcae:	429e      	cmp	r6, r3
 800bcb0:	4682      	mov	sl, r0
 800bcb2:	460c      	mov	r4, r1
 800bcb4:	4690      	mov	r8, r2
 800bcb6:	4699      	mov	r9, r3
 800bcb8:	d837      	bhi.n	800bd2a <__ssputs_r+0x82>
 800bcba:	898a      	ldrh	r2, [r1, #12]
 800bcbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bcc0:	d031      	beq.n	800bd26 <__ssputs_r+0x7e>
 800bcc2:	6825      	ldr	r5, [r4, #0]
 800bcc4:	6909      	ldr	r1, [r1, #16]
 800bcc6:	1a6f      	subs	r7, r5, r1
 800bcc8:	6965      	ldr	r5, [r4, #20]
 800bcca:	2302      	movs	r3, #2
 800bccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bcd0:	fb95 f5f3 	sdiv	r5, r5, r3
 800bcd4:	f109 0301 	add.w	r3, r9, #1
 800bcd8:	443b      	add	r3, r7
 800bcda:	429d      	cmp	r5, r3
 800bcdc:	bf38      	it	cc
 800bcde:	461d      	movcc	r5, r3
 800bce0:	0553      	lsls	r3, r2, #21
 800bce2:	d530      	bpl.n	800bd46 <__ssputs_r+0x9e>
 800bce4:	4629      	mov	r1, r5
 800bce6:	f7ff ff85 	bl	800bbf4 <_malloc_r>
 800bcea:	4606      	mov	r6, r0
 800bcec:	b950      	cbnz	r0, 800bd04 <__ssputs_r+0x5c>
 800bcee:	230c      	movs	r3, #12
 800bcf0:	f8ca 3000 	str.w	r3, [sl]
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcfa:	81a3      	strh	r3, [r4, #12]
 800bcfc:	f04f 30ff 	mov.w	r0, #4294967295
 800bd00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd04:	463a      	mov	r2, r7
 800bd06:	6921      	ldr	r1, [r4, #16]
 800bd08:	f7ff fb0e 	bl	800b328 <memcpy>
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd16:	81a3      	strh	r3, [r4, #12]
 800bd18:	6126      	str	r6, [r4, #16]
 800bd1a:	6165      	str	r5, [r4, #20]
 800bd1c:	443e      	add	r6, r7
 800bd1e:	1bed      	subs	r5, r5, r7
 800bd20:	6026      	str	r6, [r4, #0]
 800bd22:	60a5      	str	r5, [r4, #8]
 800bd24:	464e      	mov	r6, r9
 800bd26:	454e      	cmp	r6, r9
 800bd28:	d900      	bls.n	800bd2c <__ssputs_r+0x84>
 800bd2a:	464e      	mov	r6, r9
 800bd2c:	4632      	mov	r2, r6
 800bd2e:	4641      	mov	r1, r8
 800bd30:	6820      	ldr	r0, [r4, #0]
 800bd32:	f000 f93a 	bl	800bfaa <memmove>
 800bd36:	68a3      	ldr	r3, [r4, #8]
 800bd38:	1b9b      	subs	r3, r3, r6
 800bd3a:	60a3      	str	r3, [r4, #8]
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	441e      	add	r6, r3
 800bd40:	6026      	str	r6, [r4, #0]
 800bd42:	2000      	movs	r0, #0
 800bd44:	e7dc      	b.n	800bd00 <__ssputs_r+0x58>
 800bd46:	462a      	mov	r2, r5
 800bd48:	f000 f94a 	bl	800bfe0 <_realloc_r>
 800bd4c:	4606      	mov	r6, r0
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d1e2      	bne.n	800bd18 <__ssputs_r+0x70>
 800bd52:	6921      	ldr	r1, [r4, #16]
 800bd54:	4650      	mov	r0, sl
 800bd56:	f7ff feff 	bl	800bb58 <_free_r>
 800bd5a:	e7c8      	b.n	800bcee <__ssputs_r+0x46>

0800bd5c <_svfiprintf_r>:
 800bd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd60:	461d      	mov	r5, r3
 800bd62:	898b      	ldrh	r3, [r1, #12]
 800bd64:	061f      	lsls	r7, r3, #24
 800bd66:	b09d      	sub	sp, #116	; 0x74
 800bd68:	4680      	mov	r8, r0
 800bd6a:	460c      	mov	r4, r1
 800bd6c:	4616      	mov	r6, r2
 800bd6e:	d50f      	bpl.n	800bd90 <_svfiprintf_r+0x34>
 800bd70:	690b      	ldr	r3, [r1, #16]
 800bd72:	b96b      	cbnz	r3, 800bd90 <_svfiprintf_r+0x34>
 800bd74:	2140      	movs	r1, #64	; 0x40
 800bd76:	f7ff ff3d 	bl	800bbf4 <_malloc_r>
 800bd7a:	6020      	str	r0, [r4, #0]
 800bd7c:	6120      	str	r0, [r4, #16]
 800bd7e:	b928      	cbnz	r0, 800bd8c <_svfiprintf_r+0x30>
 800bd80:	230c      	movs	r3, #12
 800bd82:	f8c8 3000 	str.w	r3, [r8]
 800bd86:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8a:	e0c8      	b.n	800bf1e <_svfiprintf_r+0x1c2>
 800bd8c:	2340      	movs	r3, #64	; 0x40
 800bd8e:	6163      	str	r3, [r4, #20]
 800bd90:	2300      	movs	r3, #0
 800bd92:	9309      	str	r3, [sp, #36]	; 0x24
 800bd94:	2320      	movs	r3, #32
 800bd96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd9a:	2330      	movs	r3, #48	; 0x30
 800bd9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bda0:	9503      	str	r5, [sp, #12]
 800bda2:	f04f 0b01 	mov.w	fp, #1
 800bda6:	4637      	mov	r7, r6
 800bda8:	463d      	mov	r5, r7
 800bdaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bdae:	b10b      	cbz	r3, 800bdb4 <_svfiprintf_r+0x58>
 800bdb0:	2b25      	cmp	r3, #37	; 0x25
 800bdb2:	d13e      	bne.n	800be32 <_svfiprintf_r+0xd6>
 800bdb4:	ebb7 0a06 	subs.w	sl, r7, r6
 800bdb8:	d00b      	beq.n	800bdd2 <_svfiprintf_r+0x76>
 800bdba:	4653      	mov	r3, sl
 800bdbc:	4632      	mov	r2, r6
 800bdbe:	4621      	mov	r1, r4
 800bdc0:	4640      	mov	r0, r8
 800bdc2:	f7ff ff71 	bl	800bca8 <__ssputs_r>
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	f000 80a4 	beq.w	800bf14 <_svfiprintf_r+0x1b8>
 800bdcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdce:	4453      	add	r3, sl
 800bdd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd2:	783b      	ldrb	r3, [r7, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 809d 	beq.w	800bf14 <_svfiprintf_r+0x1b8>
 800bdda:	2300      	movs	r3, #0
 800bddc:	f04f 32ff 	mov.w	r2, #4294967295
 800bde0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bde4:	9304      	str	r3, [sp, #16]
 800bde6:	9307      	str	r3, [sp, #28]
 800bde8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bdec:	931a      	str	r3, [sp, #104]	; 0x68
 800bdee:	462f      	mov	r7, r5
 800bdf0:	2205      	movs	r2, #5
 800bdf2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bdf6:	4850      	ldr	r0, [pc, #320]	; (800bf38 <_svfiprintf_r+0x1dc>)
 800bdf8:	f7f4 f9f2 	bl	80001e0 <memchr>
 800bdfc:	9b04      	ldr	r3, [sp, #16]
 800bdfe:	b9d0      	cbnz	r0, 800be36 <_svfiprintf_r+0xda>
 800be00:	06d9      	lsls	r1, r3, #27
 800be02:	bf44      	itt	mi
 800be04:	2220      	movmi	r2, #32
 800be06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be0a:	071a      	lsls	r2, r3, #28
 800be0c:	bf44      	itt	mi
 800be0e:	222b      	movmi	r2, #43	; 0x2b
 800be10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be14:	782a      	ldrb	r2, [r5, #0]
 800be16:	2a2a      	cmp	r2, #42	; 0x2a
 800be18:	d015      	beq.n	800be46 <_svfiprintf_r+0xea>
 800be1a:	9a07      	ldr	r2, [sp, #28]
 800be1c:	462f      	mov	r7, r5
 800be1e:	2000      	movs	r0, #0
 800be20:	250a      	movs	r5, #10
 800be22:	4639      	mov	r1, r7
 800be24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be28:	3b30      	subs	r3, #48	; 0x30
 800be2a:	2b09      	cmp	r3, #9
 800be2c:	d94d      	bls.n	800beca <_svfiprintf_r+0x16e>
 800be2e:	b1b8      	cbz	r0, 800be60 <_svfiprintf_r+0x104>
 800be30:	e00f      	b.n	800be52 <_svfiprintf_r+0xf6>
 800be32:	462f      	mov	r7, r5
 800be34:	e7b8      	b.n	800bda8 <_svfiprintf_r+0x4c>
 800be36:	4a40      	ldr	r2, [pc, #256]	; (800bf38 <_svfiprintf_r+0x1dc>)
 800be38:	1a80      	subs	r0, r0, r2
 800be3a:	fa0b f000 	lsl.w	r0, fp, r0
 800be3e:	4318      	orrs	r0, r3
 800be40:	9004      	str	r0, [sp, #16]
 800be42:	463d      	mov	r5, r7
 800be44:	e7d3      	b.n	800bdee <_svfiprintf_r+0x92>
 800be46:	9a03      	ldr	r2, [sp, #12]
 800be48:	1d11      	adds	r1, r2, #4
 800be4a:	6812      	ldr	r2, [r2, #0]
 800be4c:	9103      	str	r1, [sp, #12]
 800be4e:	2a00      	cmp	r2, #0
 800be50:	db01      	blt.n	800be56 <_svfiprintf_r+0xfa>
 800be52:	9207      	str	r2, [sp, #28]
 800be54:	e004      	b.n	800be60 <_svfiprintf_r+0x104>
 800be56:	4252      	negs	r2, r2
 800be58:	f043 0302 	orr.w	r3, r3, #2
 800be5c:	9207      	str	r2, [sp, #28]
 800be5e:	9304      	str	r3, [sp, #16]
 800be60:	783b      	ldrb	r3, [r7, #0]
 800be62:	2b2e      	cmp	r3, #46	; 0x2e
 800be64:	d10c      	bne.n	800be80 <_svfiprintf_r+0x124>
 800be66:	787b      	ldrb	r3, [r7, #1]
 800be68:	2b2a      	cmp	r3, #42	; 0x2a
 800be6a:	d133      	bne.n	800bed4 <_svfiprintf_r+0x178>
 800be6c:	9b03      	ldr	r3, [sp, #12]
 800be6e:	1d1a      	adds	r2, r3, #4
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	9203      	str	r2, [sp, #12]
 800be74:	2b00      	cmp	r3, #0
 800be76:	bfb8      	it	lt
 800be78:	f04f 33ff 	movlt.w	r3, #4294967295
 800be7c:	3702      	adds	r7, #2
 800be7e:	9305      	str	r3, [sp, #20]
 800be80:	4d2e      	ldr	r5, [pc, #184]	; (800bf3c <_svfiprintf_r+0x1e0>)
 800be82:	7839      	ldrb	r1, [r7, #0]
 800be84:	2203      	movs	r2, #3
 800be86:	4628      	mov	r0, r5
 800be88:	f7f4 f9aa 	bl	80001e0 <memchr>
 800be8c:	b138      	cbz	r0, 800be9e <_svfiprintf_r+0x142>
 800be8e:	2340      	movs	r3, #64	; 0x40
 800be90:	1b40      	subs	r0, r0, r5
 800be92:	fa03 f000 	lsl.w	r0, r3, r0
 800be96:	9b04      	ldr	r3, [sp, #16]
 800be98:	4303      	orrs	r3, r0
 800be9a:	3701      	adds	r7, #1
 800be9c:	9304      	str	r3, [sp, #16]
 800be9e:	7839      	ldrb	r1, [r7, #0]
 800bea0:	4827      	ldr	r0, [pc, #156]	; (800bf40 <_svfiprintf_r+0x1e4>)
 800bea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bea6:	2206      	movs	r2, #6
 800bea8:	1c7e      	adds	r6, r7, #1
 800beaa:	f7f4 f999 	bl	80001e0 <memchr>
 800beae:	2800      	cmp	r0, #0
 800beb0:	d038      	beq.n	800bf24 <_svfiprintf_r+0x1c8>
 800beb2:	4b24      	ldr	r3, [pc, #144]	; (800bf44 <_svfiprintf_r+0x1e8>)
 800beb4:	bb13      	cbnz	r3, 800befc <_svfiprintf_r+0x1a0>
 800beb6:	9b03      	ldr	r3, [sp, #12]
 800beb8:	3307      	adds	r3, #7
 800beba:	f023 0307 	bic.w	r3, r3, #7
 800bebe:	3308      	adds	r3, #8
 800bec0:	9303      	str	r3, [sp, #12]
 800bec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec4:	444b      	add	r3, r9
 800bec6:	9309      	str	r3, [sp, #36]	; 0x24
 800bec8:	e76d      	b.n	800bda6 <_svfiprintf_r+0x4a>
 800beca:	fb05 3202 	mla	r2, r5, r2, r3
 800bece:	2001      	movs	r0, #1
 800bed0:	460f      	mov	r7, r1
 800bed2:	e7a6      	b.n	800be22 <_svfiprintf_r+0xc6>
 800bed4:	2300      	movs	r3, #0
 800bed6:	3701      	adds	r7, #1
 800bed8:	9305      	str	r3, [sp, #20]
 800beda:	4619      	mov	r1, r3
 800bedc:	250a      	movs	r5, #10
 800bede:	4638      	mov	r0, r7
 800bee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bee4:	3a30      	subs	r2, #48	; 0x30
 800bee6:	2a09      	cmp	r2, #9
 800bee8:	d903      	bls.n	800bef2 <_svfiprintf_r+0x196>
 800beea:	2b00      	cmp	r3, #0
 800beec:	d0c8      	beq.n	800be80 <_svfiprintf_r+0x124>
 800beee:	9105      	str	r1, [sp, #20]
 800bef0:	e7c6      	b.n	800be80 <_svfiprintf_r+0x124>
 800bef2:	fb05 2101 	mla	r1, r5, r1, r2
 800bef6:	2301      	movs	r3, #1
 800bef8:	4607      	mov	r7, r0
 800befa:	e7f0      	b.n	800bede <_svfiprintf_r+0x182>
 800befc:	ab03      	add	r3, sp, #12
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	4622      	mov	r2, r4
 800bf02:	4b11      	ldr	r3, [pc, #68]	; (800bf48 <_svfiprintf_r+0x1ec>)
 800bf04:	a904      	add	r1, sp, #16
 800bf06:	4640      	mov	r0, r8
 800bf08:	f7fc fbf4 	bl	80086f4 <_printf_float>
 800bf0c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bf10:	4681      	mov	r9, r0
 800bf12:	d1d6      	bne.n	800bec2 <_svfiprintf_r+0x166>
 800bf14:	89a3      	ldrh	r3, [r4, #12]
 800bf16:	065b      	lsls	r3, r3, #25
 800bf18:	f53f af35 	bmi.w	800bd86 <_svfiprintf_r+0x2a>
 800bf1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf1e:	b01d      	add	sp, #116	; 0x74
 800bf20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf24:	ab03      	add	r3, sp, #12
 800bf26:	9300      	str	r3, [sp, #0]
 800bf28:	4622      	mov	r2, r4
 800bf2a:	4b07      	ldr	r3, [pc, #28]	; (800bf48 <_svfiprintf_r+0x1ec>)
 800bf2c:	a904      	add	r1, sp, #16
 800bf2e:	4640      	mov	r0, r8
 800bf30:	f7fc fe96 	bl	8008c60 <_printf_i>
 800bf34:	e7ea      	b.n	800bf0c <_svfiprintf_r+0x1b0>
 800bf36:	bf00      	nop
 800bf38:	0800c21c 	.word	0x0800c21c
 800bf3c:	0800c222 	.word	0x0800c222
 800bf40:	0800c226 	.word	0x0800c226
 800bf44:	080086f5 	.word	0x080086f5
 800bf48:	0800bca9 	.word	0x0800bca9

0800bf4c <_sbrk_r>:
 800bf4c:	b538      	push	{r3, r4, r5, lr}
 800bf4e:	4c06      	ldr	r4, [pc, #24]	; (800bf68 <_sbrk_r+0x1c>)
 800bf50:	2300      	movs	r3, #0
 800bf52:	4605      	mov	r5, r0
 800bf54:	4608      	mov	r0, r1
 800bf56:	6023      	str	r3, [r4, #0]
 800bf58:	f7f8 fa5a 	bl	8004410 <_sbrk>
 800bf5c:	1c43      	adds	r3, r0, #1
 800bf5e:	d102      	bne.n	800bf66 <_sbrk_r+0x1a>
 800bf60:	6823      	ldr	r3, [r4, #0]
 800bf62:	b103      	cbz	r3, 800bf66 <_sbrk_r+0x1a>
 800bf64:	602b      	str	r3, [r5, #0]
 800bf66:	bd38      	pop	{r3, r4, r5, pc}
 800bf68:	200008b4 	.word	0x200008b4

0800bf6c <strncmp>:
 800bf6c:	b510      	push	{r4, lr}
 800bf6e:	b16a      	cbz	r2, 800bf8c <strncmp+0x20>
 800bf70:	3901      	subs	r1, #1
 800bf72:	1884      	adds	r4, r0, r2
 800bf74:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bf78:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d103      	bne.n	800bf88 <strncmp+0x1c>
 800bf80:	42a0      	cmp	r0, r4
 800bf82:	d001      	beq.n	800bf88 <strncmp+0x1c>
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d1f5      	bne.n	800bf74 <strncmp+0x8>
 800bf88:	1a98      	subs	r0, r3, r2
 800bf8a:	bd10      	pop	{r4, pc}
 800bf8c:	4610      	mov	r0, r2
 800bf8e:	e7fc      	b.n	800bf8a <strncmp+0x1e>

0800bf90 <__ascii_wctomb>:
 800bf90:	b149      	cbz	r1, 800bfa6 <__ascii_wctomb+0x16>
 800bf92:	2aff      	cmp	r2, #255	; 0xff
 800bf94:	bf85      	ittet	hi
 800bf96:	238a      	movhi	r3, #138	; 0x8a
 800bf98:	6003      	strhi	r3, [r0, #0]
 800bf9a:	700a      	strbls	r2, [r1, #0]
 800bf9c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bfa0:	bf98      	it	ls
 800bfa2:	2001      	movls	r0, #1
 800bfa4:	4770      	bx	lr
 800bfa6:	4608      	mov	r0, r1
 800bfa8:	4770      	bx	lr

0800bfaa <memmove>:
 800bfaa:	4288      	cmp	r0, r1
 800bfac:	b510      	push	{r4, lr}
 800bfae:	eb01 0302 	add.w	r3, r1, r2
 800bfb2:	d807      	bhi.n	800bfc4 <memmove+0x1a>
 800bfb4:	1e42      	subs	r2, r0, #1
 800bfb6:	4299      	cmp	r1, r3
 800bfb8:	d00a      	beq.n	800bfd0 <memmove+0x26>
 800bfba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bfbe:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bfc2:	e7f8      	b.n	800bfb6 <memmove+0xc>
 800bfc4:	4283      	cmp	r3, r0
 800bfc6:	d9f5      	bls.n	800bfb4 <memmove+0xa>
 800bfc8:	1881      	adds	r1, r0, r2
 800bfca:	1ad2      	subs	r2, r2, r3
 800bfcc:	42d3      	cmn	r3, r2
 800bfce:	d100      	bne.n	800bfd2 <memmove+0x28>
 800bfd0:	bd10      	pop	{r4, pc}
 800bfd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfd6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bfda:	e7f7      	b.n	800bfcc <memmove+0x22>

0800bfdc <__malloc_lock>:
 800bfdc:	4770      	bx	lr

0800bfde <__malloc_unlock>:
 800bfde:	4770      	bx	lr

0800bfe0 <_realloc_r>:
 800bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe2:	4607      	mov	r7, r0
 800bfe4:	4614      	mov	r4, r2
 800bfe6:	460e      	mov	r6, r1
 800bfe8:	b921      	cbnz	r1, 800bff4 <_realloc_r+0x14>
 800bfea:	4611      	mov	r1, r2
 800bfec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bff0:	f7ff be00 	b.w	800bbf4 <_malloc_r>
 800bff4:	b922      	cbnz	r2, 800c000 <_realloc_r+0x20>
 800bff6:	f7ff fdaf 	bl	800bb58 <_free_r>
 800bffa:	4625      	mov	r5, r4
 800bffc:	4628      	mov	r0, r5
 800bffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c000:	f000 f814 	bl	800c02c <_malloc_usable_size_r>
 800c004:	42a0      	cmp	r0, r4
 800c006:	d20f      	bcs.n	800c028 <_realloc_r+0x48>
 800c008:	4621      	mov	r1, r4
 800c00a:	4638      	mov	r0, r7
 800c00c:	f7ff fdf2 	bl	800bbf4 <_malloc_r>
 800c010:	4605      	mov	r5, r0
 800c012:	2800      	cmp	r0, #0
 800c014:	d0f2      	beq.n	800bffc <_realloc_r+0x1c>
 800c016:	4631      	mov	r1, r6
 800c018:	4622      	mov	r2, r4
 800c01a:	f7ff f985 	bl	800b328 <memcpy>
 800c01e:	4631      	mov	r1, r6
 800c020:	4638      	mov	r0, r7
 800c022:	f7ff fd99 	bl	800bb58 <_free_r>
 800c026:	e7e9      	b.n	800bffc <_realloc_r+0x1c>
 800c028:	4635      	mov	r5, r6
 800c02a:	e7e7      	b.n	800bffc <_realloc_r+0x1c>

0800c02c <_malloc_usable_size_r>:
 800c02c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c030:	1f18      	subs	r0, r3, #4
 800c032:	2b00      	cmp	r3, #0
 800c034:	bfbc      	itt	lt
 800c036:	580b      	ldrlt	r3, [r1, r0]
 800c038:	18c0      	addlt	r0, r0, r3
 800c03a:	4770      	bx	lr

0800c03c <_init>:
 800c03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c03e:	bf00      	nop
 800c040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c042:	bc08      	pop	{r3}
 800c044:	469e      	mov	lr, r3
 800c046:	4770      	bx	lr

0800c048 <_fini>:
 800c048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c04a:	bf00      	nop
 800c04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c04e:	bc08      	pop	{r3}
 800c050:	469e      	mov	lr, r3
 800c052:	4770      	bx	lr
